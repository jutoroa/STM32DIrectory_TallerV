
ADC_Ejemplo2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bd0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001d70  08001d70  00011d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001db4  08001db4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001db4  08001db4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001db4  08001db4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001db4  08001db4  00011db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001db8  08001db8  00011db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000064  08001e20  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08001e20  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002dd0  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a26  00000000  00000000  00022e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000228  00000000  00000000  00023890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001c0  00000000  00000000  00023ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f64e  00000000  00000000  00023c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002e9b  00000000  00000000  000332c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000551b5  00000000  00000000  00036161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008b316  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000aa8  00000000  00000000  0008b368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001d58 	.word	0x08001d58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08001d58 	.word	0x08001d58

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	; (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	6039      	str	r1, [r7, #0]
 80002c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	db0a      	blt.n	80002e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	490c      	ldr	r1, [pc, #48]	; (8000308 <__NVIC_SetPriority+0x4c>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e4:	e00a      	b.n	80002fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4908      	ldr	r1, [pc, #32]	; (800030c <__NVIC_SetPriority+0x50>)
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	f003 030f 	and.w	r3, r3, #15
 80002f2:	3b04      	subs	r3, #4
 80002f4:	0112      	lsls	r2, r2, #4
 80002f6:	b2d2      	uxtb	r2, r2
 80002f8:	440b      	add	r3, r1
 80002fa:	761a      	strb	r2, [r3, #24]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	e000e100 	.word	0xe000e100
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <adc_Config>:
#include "GPIOxDriver.h"

GPIO_Handler_t handlerAdcPin = {0};
uint16_t 		adcRawData 	 = {0};

void adc_Config(ADC_Config_t *adcConfig){
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000318:	b672      	cpsid	i
}
 800031a:	bf00      	nop

	__disable_irq();


	/* 1. Configuramos el PinX para que cumpla la función de canal análogo deseado. */
	configAnalogPin(adcConfig -> channel);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	4618      	mov	r0, r3
 8000322:	f000 f901 	bl	8000528 <configAnalogPin>

	/* 2. Activamos la señal de reloj para el periférico ADC1 (bus APB2) */
	RCC -> APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000326:	4b5c      	ldr	r3, [pc, #368]	; (8000498 <adc_Config+0x188>)
 8000328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800032a:	4a5b      	ldr	r2, [pc, #364]	; (8000498 <adc_Config+0x188>)
 800032c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000330:	6453      	str	r3, [r2, #68]	; 0x44

	// Limpiamos los registros antes de comenzar a configurar
	ADC1 -> CR1 = 0;
 8000332:	4b5a      	ldr	r3, [pc, #360]	; (800049c <adc_Config+0x18c>)
 8000334:	2200      	movs	r2, #0
 8000336:	605a      	str	r2, [r3, #4]
	ADC1 -> CR2 = 0;
 8000338:	4b58      	ldr	r3, [pc, #352]	; (800049c <adc_Config+0x18c>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]

	/* Comenzamos la configuración del ADC1 */
	/* 3. Resolución del ADC */
	switch(adcConfig -> resolution){
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	785b      	ldrb	r3, [r3, #1]
 8000342:	2b03      	cmp	r3, #3
 8000344:	d83e      	bhi.n	80003c4 <adc_Config+0xb4>
 8000346:	a201      	add	r2, pc, #4	; (adr r2, 800034c <adc_Config+0x3c>)
 8000348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800034c:	0800035d 	.word	0x0800035d
 8000350:	08000377 	.word	0x08000377
 8000354:	08000391 	.word	0x08000391
 8000358:	080003ab 	.word	0x080003ab
	case ADC_RESOLUTION_12_BIT:
	{
		ADC1 -> CR1 &= ~ADC_CR1_RES_0;
 800035c:	4b4f      	ldr	r3, [pc, #316]	; (800049c <adc_Config+0x18c>)
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	4a4e      	ldr	r2, [pc, #312]	; (800049c <adc_Config+0x18c>)
 8000362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000366:	6053      	str	r3, [r2, #4]
		ADC1 -> CR1 &= ~ADC_CR1_RES_1;
 8000368:	4b4c      	ldr	r3, [pc, #304]	; (800049c <adc_Config+0x18c>)
 800036a:	685b      	ldr	r3, [r3, #4]
 800036c:	4a4b      	ldr	r2, [pc, #300]	; (800049c <adc_Config+0x18c>)
 800036e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000372:	6053      	str	r3, [r2, #4]
		break;
 8000374:	e027      	b.n	80003c6 <adc_Config+0xb6>
	}

	case ADC_RESOLUTION_10_BIT:
	{
		ADC1 -> CR1 |= ADC_CR1_RES_0;
 8000376:	4b49      	ldr	r3, [pc, #292]	; (800049c <adc_Config+0x18c>)
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	4a48      	ldr	r2, [pc, #288]	; (800049c <adc_Config+0x18c>)
 800037c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000380:	6053      	str	r3, [r2, #4]
		ADC1 -> CR1 &= ~ADC_CR1_RES_1;
 8000382:	4b46      	ldr	r3, [pc, #280]	; (800049c <adc_Config+0x18c>)
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	4a45      	ldr	r2, [pc, #276]	; (800049c <adc_Config+0x18c>)
 8000388:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800038c:	6053      	str	r3, [r2, #4]
		break;
 800038e:	e01a      	b.n	80003c6 <adc_Config+0xb6>
	}

	case ADC_RESOLUTION_8_BIT:
	{
		ADC1 -> CR1 &= ~ADC_CR1_RES_0;
 8000390:	4b42      	ldr	r3, [pc, #264]	; (800049c <adc_Config+0x18c>)
 8000392:	685b      	ldr	r3, [r3, #4]
 8000394:	4a41      	ldr	r2, [pc, #260]	; (800049c <adc_Config+0x18c>)
 8000396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800039a:	6053      	str	r3, [r2, #4]
		ADC1 -> CR1 |= ADC_CR1_RES_1;
 800039c:	4b3f      	ldr	r3, [pc, #252]	; (800049c <adc_Config+0x18c>)
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	4a3e      	ldr	r2, [pc, #248]	; (800049c <adc_Config+0x18c>)
 80003a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003a6:	6053      	str	r3, [r2, #4]
		break;
 80003a8:	e00d      	b.n	80003c6 <adc_Config+0xb6>
	}
	case ADC_RESOLUTION_6_BIT:
	{
		ADC1 -> CR1 |= ADC_CR1_RES_0;
 80003aa:	4b3c      	ldr	r3, [pc, #240]	; (800049c <adc_Config+0x18c>)
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	4a3b      	ldr	r2, [pc, #236]	; (800049c <adc_Config+0x18c>)
 80003b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003b4:	6053      	str	r3, [r2, #4]
		ADC1 -> CR1 |= ADC_CR1_RES_1;
 80003b6:	4b39      	ldr	r3, [pc, #228]	; (800049c <adc_Config+0x18c>)
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	4a38      	ldr	r2, [pc, #224]	; (800049c <adc_Config+0x18c>)
 80003bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003c0:	6053      	str	r3, [r2, #4]
		break;
 80003c2:	e000      	b.n	80003c6 <adc_Config+0xb6>
	}

	default:
	{
		break;
 80003c4:	bf00      	nop
	}
	}

	/* 4. Configuramos el modo Scan como desactivado */
	ADC1 -> CR1 &= ~(ADC_CR1_SCAN);
 80003c6:	4b35      	ldr	r3, [pc, #212]	; (800049c <adc_Config+0x18c>)
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	4a34      	ldr	r2, [pc, #208]	; (800049c <adc_Config+0x18c>)
 80003cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80003d0:	6053      	str	r3, [r2, #4]

	/* 5. Configuramos la alineación de los datos (derecha o izquierda) */
	if(adcConfig -> dataAlignment == ADC_ALIGNMENT_RIGHT){
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	791b      	ldrb	r3, [r3, #4]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d106      	bne.n	80003e8 <adc_Config+0xd8>
		// Alineación a la derecha (esta es la forma "natural")
		ADC1 -> CR2 &= ~(ADC_CR2_ALIGN);
 80003da:	4b30      	ldr	r3, [pc, #192]	; (800049c <adc_Config+0x18c>)
 80003dc:	689b      	ldr	r3, [r3, #8]
 80003de:	4a2f      	ldr	r2, [pc, #188]	; (800049c <adc_Config+0x18c>)
 80003e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003e4:	6093      	str	r3, [r2, #8]
 80003e6:	e005      	b.n	80003f4 <adc_Config+0xe4>
	}
	else{

		// Alineación a la izquierda (para algunos cálculos matemáticos).
		ADC1 -> CR2 |= ADC_CR2_ALIGN;
 80003e8:	4b2c      	ldr	r3, [pc, #176]	; (800049c <adc_Config+0x18c>)
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	4a2b      	ldr	r2, [pc, #172]	; (800049c <adc_Config+0x18c>)
 80003ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003f2:	6093      	str	r3, [r2, #8]
	}

	/* 6. Desactivamos el "continuos mode" */
	ADC1 -> CR2 &= ~(ADC_CR2_CONT);
 80003f4:	4b29      	ldr	r3, [pc, #164]	; (800049c <adc_Config+0x18c>)
 80003f6:	689b      	ldr	r3, [r3, #8]
 80003f8:	4a28      	ldr	r2, [pc, #160]	; (800049c <adc_Config+0x18c>)
 80003fa:	f023 0302 	bic.w	r3, r3, #2
 80003fe:	6093      	str	r3, [r2, #8]

	/* 7. Acá se debería configurar el sampling */
	if(adcConfig -> channel < ADC_CHANNEL_9){
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b08      	cmp	r3, #8
 8000406:	d810      	bhi.n	800042a <adc_Config+0x11a>
		ADC1 -> SMPR2 |= (adcConfig -> samplingPeriod << (3 * (adcConfig -> channel)));
 8000408:	4b24      	ldr	r3, [pc, #144]	; (800049c <adc_Config+0x18c>)
 800040a:	691a      	ldr	r2, [r3, #16]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	885b      	ldrh	r3, [r3, #2]
 8000410:	4618      	mov	r0, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	4619      	mov	r1, r3
 8000418:	460b      	mov	r3, r1
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	440b      	add	r3, r1
 800041e:	fa00 f303 	lsl.w	r3, r0, r3
 8000422:	491e      	ldr	r1, [pc, #120]	; (800049c <adc_Config+0x18c>)
 8000424:	4313      	orrs	r3, r2
 8000426:	610b      	str	r3, [r1, #16]
 8000428:	e00f      	b.n	800044a <adc_Config+0x13a>
	}
	else{
		ADC1 -> SMPR1 |= (adcConfig -> samplingPeriod << (3 * (adcConfig -> channel)));
 800042a:	4b1c      	ldr	r3, [pc, #112]	; (800049c <adc_Config+0x18c>)
 800042c:	68da      	ldr	r2, [r3, #12]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	885b      	ldrh	r3, [r3, #2]
 8000432:	4618      	mov	r0, r3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	4619      	mov	r1, r3
 800043a:	460b      	mov	r3, r1
 800043c:	005b      	lsls	r3, r3, #1
 800043e:	440b      	add	r3, r1
 8000440:	fa00 f303 	lsl.w	r3, r0, r3
 8000444:	4915      	ldr	r1, [pc, #84]	; (800049c <adc_Config+0x18c>)
 8000446:	4313      	orrs	r3, r2
 8000448:	60cb      	str	r3, [r1, #12]
	}

	/* 8. Configuramos la secuencia y cuantos elementos hay en la secuencia */
	// Al hacerlo todo 0, estamos seleccionando solo 1 elemento en el conteo de la secuencia
	ADC1 -> SQR1 = 0;
 800044a:	4b14      	ldr	r3, [pc, #80]	; (800049c <adc_Config+0x18c>)
 800044c:	2200      	movs	r2, #0
 800044e:	62da      	str	r2, [r3, #44]	; 0x2c

	// Asignamos el canal de la conversión a la primera posición en la secuencia
	ADC1 -> SQR3 |= (adcConfig -> channel << 0);
 8000450:	4b12      	ldr	r3, [pc, #72]	; (800049c <adc_Config+0x18c>)
 8000452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	7812      	ldrb	r2, [r2, #0]
 8000458:	4611      	mov	r1, r2
 800045a:	4a10      	ldr	r2, [pc, #64]	; (800049c <adc_Config+0x18c>)
 800045c:	430b      	orrs	r3, r1
 800045e:	6353      	str	r3, [r2, #52]	; 0x34

	/* 9. Configuramos el preescaler del ADC en 2:1 (el más rápido que se puede tener) */
	ADC -> CCR = 0;
 8000460:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <adc_Config+0x190>)
 8000462:	2200      	movs	r2, #0
 8000464:	605a      	str	r2, [r3, #4]

	/* 10. Desactivamos las interrupciones */

	ADC1 -> CR1 |= ADC_CR1_EOCIE;
 8000466:	4b0d      	ldr	r3, [pc, #52]	; (800049c <adc_Config+0x18c>)
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	4a0c      	ldr	r2, [pc, #48]	; (800049c <adc_Config+0x18c>)
 800046c:	f043 0320 	orr.w	r3, r3, #32
 8000470:	6053      	str	r3, [r2, #4]

	/* 11a. Matriculamos la interrupción en el NVIC */
	__NVIC_EnableIRQ(ADC_IRQn);
 8000472:	2012      	movs	r0, #18
 8000474:	f7ff ff04 	bl	8000280 <__NVIC_EnableIRQ>

	/* 11.b Establecemos la importancia de la interrupción */

	__NVIC_SetPriority(ADC_IRQn,4);
 8000478:	2104      	movs	r1, #4
 800047a:	2012      	movs	r0, #18
 800047c:	f7ff ff1e 	bl	80002bc <__NVIC_SetPriority>

	/* 12. Activamos el modulo ADC */
	ADC1 -> CR2 |= ADC_CR2_ADON;
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <adc_Config+0x18c>)
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	4a05      	ldr	r2, [pc, #20]	; (800049c <adc_Config+0x18c>)
 8000486:	f043 0301 	orr.w	r3, r3, #1
 800048a:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800048c:	b662      	cpsie	i
}
 800048e:	bf00      	nop

	/* 13. Activamos las interrupciones globales */
	__enable_irq();
}
 8000490:	bf00      	nop
 8000492:	3708      	adds	r7, #8
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40023800 	.word	0x40023800
 800049c:	40012000 	.word	0x40012000
 80004a0:	40012300 	.word	0x40012300

080004a4 <startSingleADC>:

/**/

void startSingleADC(void){
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
	/* Iniciamos un ciclo de conversión ADC */
	ADC1 -> CR2 |= ADC_CR2_SWSTART;
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <startSingleADC+0x1c>)
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <startSingleADC+0x1c>)
 80004ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80004b2:	6093      	str	r3, [r2, #8]
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	40012000 	.word	0x40012000

080004c4 <stopContinousADC>:
	ADC1 -> CR2 |= (ADC_CR2_CONT);
	/* Iniciamos un ciclo de conversión ADC */
	ADC1 -> CR2 |= ADC_CR2_SWSTART;
}

void stopContinousADC(void){
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	ADC1 -> CR2 &= ~(ADC_CR2_SWSTART);
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <stopContinousADC+0x1c>)
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <stopContinousADC+0x1c>)
 80004ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80004d2:	6093      	str	r3, [r2, #8]
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	40012000 	.word	0x40012000

080004e4 <getADC>:

/* Función que me retorna el último dato adquirido por la ADC */
uint16_t getADC(void){
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
	return adcRawData;
 80004e8:	4b03      	ldr	r3, [pc, #12]	; (80004f8 <getADC+0x14>)
 80004ea:	881b      	ldrh	r3, [r3, #0]
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	2000008c 	.word	0x2000008c

080004fc <ADC_IRQHandler>:

/* Esta es la ISR de la interrupción por conversión ADC */
void ADC_IRQHandler(void){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	if(ADC1 -> SR & ADC_SR_EOC){
 8000500:	4b07      	ldr	r3, [pc, #28]	; (8000520 <ADC_IRQHandler+0x24>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f003 0302 	and.w	r3, r3, #2
 8000508:	2b00      	cmp	r3, #0
 800050a:	d006      	beq.n	800051a <ADC_IRQHandler+0x1e>
		// Leemos el resultado de la conversión ADC y lo cargamos en un valor auxiliar
		adcRawData = ADC1 -> DR;
 800050c:	4b04      	ldr	r3, [pc, #16]	; (8000520 <ADC_IRQHandler+0x24>)
 800050e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000510:	b29a      	uxth	r2, r3
 8000512:	4b04      	ldr	r3, [pc, #16]	; (8000524 <ADC_IRQHandler+0x28>)
 8000514:	801a      	strh	r2, [r3, #0]

		// Hacemos el llamado a la función que se ejecutará en el main
		adc_Complete_Callback();
 8000516:	f000 ff15 	bl	8001344 <adc_Complete_Callback>
	}
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40012000 	.word	0x40012000
 8000524:	2000008c 	.word	0x2000008c

08000528 <configAnalogPin>:
__attribute__((weak)) void adc_Complete_Callback(void){
	__NOP();
}

/* Con esta función configuramos que pin deseamos que funcione como ADC */
void configAnalogPin(uint8_t adcChannel){
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]

	// Con este switch seleccionamos el canal y lo configuramos como analogo.
	switch(adcChannel){
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	2b0f      	cmp	r3, #15
 8000536:	f200 8093 	bhi.w	8000660 <configAnalogPin+0x138>
 800053a:	a201      	add	r2, pc, #4	; (adr r2, 8000540 <configAnalogPin+0x18>)
 800053c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000540:	08000581 	.word	0x08000581
 8000544:	0800058f 	.word	0x0800058f
 8000548:	0800059d 	.word	0x0800059d
 800054c:	080005ab 	.word	0x080005ab
 8000550:	080005b9 	.word	0x080005b9
 8000554:	080005c7 	.word	0x080005c7
 8000558:	080005d5 	.word	0x080005d5
 800055c:	080005e3 	.word	0x080005e3
 8000560:	080005f1 	.word	0x080005f1
 8000564:	080005ff 	.word	0x080005ff
 8000568:	0800060d 	.word	0x0800060d
 800056c:	0800061b 	.word	0x0800061b
 8000570:	08000629 	.word	0x08000629
 8000574:	08000637 	.word	0x08000637
 8000578:	08000645 	.word	0x08000645
 800057c:	08000653 	.word	0x08000653

	case ADC_CHANNEL_0:
	{
		// Es el pin PA0
		handlerAdcPin.pGPIOx						= GPIOA;
 8000580:	4b3d      	ldr	r3, [pc, #244]	; (8000678 <configAnalogPin+0x150>)
 8000582:	4a3e      	ldr	r2, [pc, #248]	; (800067c <configAnalogPin+0x154>)
 8000584:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8000586:	4b3c      	ldr	r3, [pc, #240]	; (8000678 <configAnalogPin+0x150>)
 8000588:	2200      	movs	r2, #0
 800058a:	711a      	strb	r2, [r3, #4]
		break;
 800058c:	e069      	b.n	8000662 <configAnalogPin+0x13a>

	// Configuración ADC1_1
	case ADC_CHANNEL_1:
	{
		// Es el pin PA1.
		handlerAdcPin.pGPIOx = GPIOA;
 800058e:	4b3a      	ldr	r3, [pc, #232]	; (8000678 <configAnalogPin+0x150>)
 8000590:	4a3a      	ldr	r2, [pc, #232]	; (800067c <configAnalogPin+0x154>)
 8000592:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8000594:	4b38      	ldr	r3, [pc, #224]	; (8000678 <configAnalogPin+0x150>)
 8000596:	2201      	movs	r2, #1
 8000598:	711a      	strb	r2, [r3, #4]
		break;
 800059a:	e062      	b.n	8000662 <configAnalogPin+0x13a>

	// Configuración ADC1_2
	case ADC_CHANNEL_2:
	{
		// Es el pin PA2.
		handlerAdcPin.pGPIOx = GPIOA;
 800059c:	4b36      	ldr	r3, [pc, #216]	; (8000678 <configAnalogPin+0x150>)
 800059e:	4a37      	ldr	r2, [pc, #220]	; (800067c <configAnalogPin+0x154>)
 80005a0:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 80005a2:	4b35      	ldr	r3, [pc, #212]	; (8000678 <configAnalogPin+0x150>)
 80005a4:	2202      	movs	r2, #2
 80005a6:	711a      	strb	r2, [r3, #4]
		break;
 80005a8:	e05b      	b.n	8000662 <configAnalogPin+0x13a>

	// Configuración ADC1_3
	case ADC_CHANNEL_3:
	{
		// Es el pin PA3.
		handlerAdcPin.pGPIOx = GPIOA;
 80005aa:	4b33      	ldr	r3, [pc, #204]	; (8000678 <configAnalogPin+0x150>)
 80005ac:	4a33      	ldr	r2, [pc, #204]	; (800067c <configAnalogPin+0x154>)
 80005ae:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 80005b0:	4b31      	ldr	r3, [pc, #196]	; (8000678 <configAnalogPin+0x150>)
 80005b2:	2203      	movs	r2, #3
 80005b4:	711a      	strb	r2, [r3, #4]
		break;
 80005b6:	e054      	b.n	8000662 <configAnalogPin+0x13a>

	// Configuración ADC1_4
	case ADC_CHANNEL_4:
	{
		// Es el pin PA4.
		handlerAdcPin.pGPIOx = GPIOA;
 80005b8:	4b2f      	ldr	r3, [pc, #188]	; (8000678 <configAnalogPin+0x150>)
 80005ba:	4a30      	ldr	r2, [pc, #192]	; (800067c <configAnalogPin+0x154>)
 80005bc:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 80005be:	4b2e      	ldr	r3, [pc, #184]	; (8000678 <configAnalogPin+0x150>)
 80005c0:	2204      	movs	r2, #4
 80005c2:	711a      	strb	r2, [r3, #4]
		break;
 80005c4:	e04d      	b.n	8000662 <configAnalogPin+0x13a>

	// Configuración ADC1_5
	case ADC_CHANNEL_5:
	{
		// Es el pin PA5.
		handlerAdcPin.pGPIOx = GPIOA;
 80005c6:	4b2c      	ldr	r3, [pc, #176]	; (8000678 <configAnalogPin+0x150>)
 80005c8:	4a2c      	ldr	r2, [pc, #176]	; (800067c <configAnalogPin+0x154>)
 80005ca:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 80005cc:	4b2a      	ldr	r3, [pc, #168]	; (8000678 <configAnalogPin+0x150>)
 80005ce:	2205      	movs	r2, #5
 80005d0:	711a      	strb	r2, [r3, #4]
		break;
 80005d2:	e046      	b.n	8000662 <configAnalogPin+0x13a>

	// Configuración ADC1_6
	case ADC_CHANNEL_6:
	{
		// Es el pin PA6.
		handlerAdcPin.pGPIOx = GPIOA;
 80005d4:	4b28      	ldr	r3, [pc, #160]	; (8000678 <configAnalogPin+0x150>)
 80005d6:	4a29      	ldr	r2, [pc, #164]	; (800067c <configAnalogPin+0x154>)
 80005d8:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_6;
 80005da:	4b27      	ldr	r3, [pc, #156]	; (8000678 <configAnalogPin+0x150>)
 80005dc:	2206      	movs	r2, #6
 80005de:	711a      	strb	r2, [r3, #4]
		break;
 80005e0:	e03f      	b.n	8000662 <configAnalogPin+0x13a>

	// Configuración ADC1_7
	case ADC_CHANNEL_7:
	{
		// Es el pin PA7.
		handlerAdcPin.pGPIOx = GPIOA;
 80005e2:	4b25      	ldr	r3, [pc, #148]	; (8000678 <configAnalogPin+0x150>)
 80005e4:	4a25      	ldr	r2, [pc, #148]	; (800067c <configAnalogPin+0x154>)
 80005e6:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_7;
 80005e8:	4b23      	ldr	r3, [pc, #140]	; (8000678 <configAnalogPin+0x150>)
 80005ea:	2207      	movs	r2, #7
 80005ec:	711a      	strb	r2, [r3, #4]
		break;
 80005ee:	e038      	b.n	8000662 <configAnalogPin+0x13a>

	// Configuración ADC1_8
	case ADC_CHANNEL_8:
	{
		// Es el pin PB0.
		handlerAdcPin.pGPIOx = GPIOB;
 80005f0:	4b21      	ldr	r3, [pc, #132]	; (8000678 <configAnalogPin+0x150>)
 80005f2:	4a23      	ldr	r2, [pc, #140]	; (8000680 <configAnalogPin+0x158>)
 80005f4:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 80005f6:	4b20      	ldr	r3, [pc, #128]	; (8000678 <configAnalogPin+0x150>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	711a      	strb	r2, [r3, #4]
		break;
 80005fc:	e031      	b.n	8000662 <configAnalogPin+0x13a>

	// Configuración ADC1_9
	case ADC_CHANNEL_9:
	{
		// Es el pin PB1.
		handlerAdcPin.pGPIOx = GPIOB;
 80005fe:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <configAnalogPin+0x150>)
 8000600:	4a1f      	ldr	r2, [pc, #124]	; (8000680 <configAnalogPin+0x158>)
 8000602:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8000604:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <configAnalogPin+0x150>)
 8000606:	2201      	movs	r2, #1
 8000608:	711a      	strb	r2, [r3, #4]
		break;
 800060a:	e02a      	b.n	8000662 <configAnalogPin+0x13a>

	// Configuración ADC1_10
	case ADC_CHANNEL_10:
	{
		// Es el pin PC0.
		handlerAdcPin.pGPIOx = GPIOC;
 800060c:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <configAnalogPin+0x150>)
 800060e:	4a1d      	ldr	r2, [pc, #116]	; (8000684 <configAnalogPin+0x15c>)
 8000610:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8000612:	4b19      	ldr	r3, [pc, #100]	; (8000678 <configAnalogPin+0x150>)
 8000614:	2200      	movs	r2, #0
 8000616:	711a      	strb	r2, [r3, #4]
		break;
 8000618:	e023      	b.n	8000662 <configAnalogPin+0x13a>

	// Configuración ADC1_11
	case ADC_CHANNEL_11:
	{
		// Es el pin PC1.
		handlerAdcPin.pGPIOx = GPIOC;
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <configAnalogPin+0x150>)
 800061c:	4a19      	ldr	r2, [pc, #100]	; (8000684 <configAnalogPin+0x15c>)
 800061e:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <configAnalogPin+0x150>)
 8000622:	2201      	movs	r2, #1
 8000624:	711a      	strb	r2, [r3, #4]
		break;
 8000626:	e01c      	b.n	8000662 <configAnalogPin+0x13a>

	// Configuración ADC1_12
	case ADC_CHANNEL_12:
	{
		// Es el pin PC2.
		handlerAdcPin.pGPIOx = GPIOC;
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <configAnalogPin+0x150>)
 800062a:	4a16      	ldr	r2, [pc, #88]	; (8000684 <configAnalogPin+0x15c>)
 800062c:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <configAnalogPin+0x150>)
 8000630:	2202      	movs	r2, #2
 8000632:	711a      	strb	r2, [r3, #4]
		break;
 8000634:	e015      	b.n	8000662 <configAnalogPin+0x13a>

	// Configuración ADC1_13
	case ADC_CHANNEL_13:
	{
		// Es el pin PC3.
		handlerAdcPin.pGPIOx = GPIOC;
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <configAnalogPin+0x150>)
 8000638:	4a12      	ldr	r2, [pc, #72]	; (8000684 <configAnalogPin+0x15c>)
 800063a:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 800063c:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <configAnalogPin+0x150>)
 800063e:	2203      	movs	r2, #3
 8000640:	711a      	strb	r2, [r3, #4]
		break;
 8000642:	e00e      	b.n	8000662 <configAnalogPin+0x13a>

	// Configuración ADC1_14
	case ADC_CHANNEL_14:
	{
		// Es el pin PC4.
		handlerAdcPin.pGPIOx = GPIOC;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <configAnalogPin+0x150>)
 8000646:	4a0f      	ldr	r2, [pc, #60]	; (8000684 <configAnalogPin+0x15c>)
 8000648:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <configAnalogPin+0x150>)
 800064c:	2204      	movs	r2, #4
 800064e:	711a      	strb	r2, [r3, #4]
		break;
 8000650:	e007      	b.n	8000662 <configAnalogPin+0x13a>

	// Configuración ADC1_15
	case ADC_CHANNEL_15:
	{
		// Es el pin PC5.
		handlerAdcPin.pGPIOx = GPIOC;
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <configAnalogPin+0x150>)
 8000654:	4a0b      	ldr	r2, [pc, #44]	; (8000684 <configAnalogPin+0x15c>)
 8000656:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <configAnalogPin+0x150>)
 800065a:	2205      	movs	r2, #5
 800065c:	711a      	strb	r2, [r3, #4]
		break;
 800065e:	e000      	b.n	8000662 <configAnalogPin+0x13a>
	}

	default:
	{
		// Se termina el ciclo por defecto.
		break;
 8000660:	bf00      	nop
	}
	}

	// Se configura el pin en modo análogo.
	handlerAdcPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 8000662:	4b05      	ldr	r3, [pc, #20]	; (8000678 <configAnalogPin+0x150>)
 8000664:	2203      	movs	r2, #3
 8000666:	715a      	strb	r2, [r3, #5]
	GPIO_Config(&handlerAdcPin);
 8000668:	4803      	ldr	r0, [pc, #12]	; (8000678 <configAnalogPin+0x150>)
 800066a:	f000 f80d 	bl	8000688 <GPIO_Config>
	}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000080 	.word	0x20000080
 800067c:	40020000 	.word	0x40020000
 8000680:	40020400 	.word	0x40020400
 8000684:	40020800 	.word	0x40020800

08000688 <GPIO_Config>:
orden estricto para poder que el sistema permita configurar el periférico X.
Lo primero y más importante es activar la señal del reloj principal hacia ese
elemento específico (relacionado con el periférico RCC), a esto llamaremos
simplemente "activar el periférico o activar la señal de reloj del periférico".
*/
void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periférico
	// Verificamos para GPIOA
	if (pGPIOHandler -> pGPIOx == GPIOA){
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a88      	ldr	r2, [pc, #544]	; (80008c0 <GPIO_Config+0x238>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d106      	bne.n	80006b0 <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOA
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 80006a2:	4b88      	ldr	r3, [pc, #544]	; (80008c4 <GPIO_Config+0x23c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a87      	ldr	r2, [pc, #540]	; (80008c4 <GPIO_Config+0x23c>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	e03a      	b.n	8000726 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if (pGPIOHandler -> pGPIOx == GPIOB){
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a84      	ldr	r2, [pc, #528]	; (80008c8 <GPIO_Config+0x240>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d106      	bne.n	80006c8 <GPIO_Config+0x40>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOB
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 80006ba:	4b82      	ldr	r3, [pc, #520]	; (80008c4 <GPIO_Config+0x23c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a81      	ldr	r2, [pc, #516]	; (80008c4 <GPIO_Config+0x23c>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	e02e      	b.n	8000726 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOC
	else if (pGPIOHandler -> pGPIOx == GPIOC){
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a7f      	ldr	r2, [pc, #508]	; (80008cc <GPIO_Config+0x244>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d106      	bne.n	80006e0 <GPIO_Config+0x58>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOC
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 80006d2:	4b7c      	ldr	r3, [pc, #496]	; (80008c4 <GPIO_Config+0x23c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a7b      	ldr	r2, [pc, #492]	; (80008c4 <GPIO_Config+0x23c>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	e022      	b.n	8000726 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOD
	else if (pGPIOHandler -> pGPIOx == GPIOD){
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a7a      	ldr	r2, [pc, #488]	; (80008d0 <GPIO_Config+0x248>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d106      	bne.n	80006f8 <GPIO_Config+0x70>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOD
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 80006ea:	4b76      	ldr	r3, [pc, #472]	; (80008c4 <GPIO_Config+0x23c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a75      	ldr	r2, [pc, #468]	; (80008c4 <GPIO_Config+0x23c>)
 80006f0:	f043 0308 	orr.w	r3, r3, #8
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	e016      	b.n	8000726 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOE
	else if (pGPIOHandler -> pGPIOx == GPIOE){
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a75      	ldr	r2, [pc, #468]	; (80008d4 <GPIO_Config+0x24c>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d106      	bne.n	8000710 <GPIO_Config+0x88>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOE
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8000702:	4b70      	ldr	r3, [pc, #448]	; (80008c4 <GPIO_Config+0x23c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a6f      	ldr	r2, [pc, #444]	; (80008c4 <GPIO_Config+0x23c>)
 8000708:	f043 0310 	orr.w	r3, r3, #16
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	e00a      	b.n	8000726 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOH
	else if (pGPIOHandler -> pGPIOx == GPIOH){
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a70      	ldr	r2, [pc, #448]	; (80008d8 <GPIO_Config+0x250>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d105      	bne.n	8000726 <GPIO_Config+0x9e>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOH
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 800071a:	4b6a      	ldr	r3, [pc, #424]	; (80008c4 <GPIO_Config+0x23c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a69      	ldr	r2, [pc, #420]	; (80008c4 <GPIO_Config+0x23c>)
 8000720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
	// Después de activado, podemos comenzar a configurar.

	// 2) Configurando el registro GPIOx_MODER
	// Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y todo eso lo cargamos en la variable aux_Config
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	795b      	ldrb	r3, [r3, #5]
 800072a:	461a      	mov	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	791b      	ldrb	r3, [r3, #4]
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	60fb      	str	r3, [r7, #12]

	// Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (debemos escribir 0b00)
	// para lo cual aplicamos una máscara y una operación bitwise AND
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	791b      	ldrb	r3, [r3, #4]
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	2103      	movs	r1, #3
 8000746:	fa01 f303 	lsl.w	r3, r1, r3
 800074a:	43db      	mvns	r3, r3
 800074c:	4619      	mov	r1, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	400a      	ands	r2, r1
 8000754:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler -> pGPIOx -> MODER |= auxConfig;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	6819      	ldr	r1, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	68fa      	ldr	r2, [r7, #12]
 8000762:	430a      	orrs	r2, r1
 8000764:	601a      	str	r2, [r3, #0]

	// 3) Configurando el registro GPIOx_OTYPER
	// De nuevo, leemos y movemos el valor un número "PinNumber" de veces
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	7a1b      	ldrb	r3, [r3, #8]
 800076a:	461a      	mov	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	791b      	ldrb	r3, [r3, #4]
 8000770:	fa02 f303 	lsl.w	r3, r2, r3
 8000774:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler -> pGPIOx -> OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	685a      	ldr	r2, [r3, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	791b      	ldrb	r3, [r3, #4]
 8000780:	4619      	mov	r1, r3
 8000782:	2301      	movs	r3, #1
 8000784:	408b      	lsls	r3, r1
 8000786:	43db      	mvns	r3, r3
 8000788:	4619      	mov	r1, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	400a      	ands	r2, r1
 8000790:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OTYPER |= auxConfig;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	6859      	ldr	r1, [r3, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	430a      	orrs	r2, r1
 80007a0:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	799b      	ldrb	r3, [r3, #6]
 80007a6:	461a      	mov	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	791b      	ldrb	r3, [r3, #4]
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	fa02 f303 	lsl.w	r3, r2, r3
 80007b2:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler -> pGPIOx -> OSPEEDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	689a      	ldr	r2, [r3, #8]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	791b      	ldrb	r3, [r3, #4]
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	2103      	movs	r1, #3
 80007c2:	fa01 f303 	lsl.w	r3, r1, r3
 80007c6:	43db      	mvns	r3, r3
 80007c8:	4619      	mov	r1, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	400a      	ands	r2, r1
 80007d0:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OSPEEDR |= auxConfig;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	6899      	ldr	r1, [r3, #8]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	68fa      	ldr	r2, [r7, #12]
 80007de:	430a      	orrs	r2, r1
 80007e0:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante.
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	79db      	ldrb	r3, [r3, #7]
 80007e6:	461a      	mov	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	791b      	ldrb	r3, [r3, #4]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler -> pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	68da      	ldr	r2, [r3, #12]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	2103      	movs	r1, #3
 8000802:	fa01 f303 	lsl.w	r3, r1, r3
 8000806:	43db      	mvns	r3, r3
 8000808:	4619      	mov	r1, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	400a      	ands	r2, r1
 8000810:	60da      	str	r2, [r3, #12]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> PUPDR |= auxConfig;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	68d9      	ldr	r1, [r3, #12]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	68fa      	ldr	r2, [r7, #12]
 800081e:	430a      	orrs	r2, r1
 8000820:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuración de las funciones alternativas... Se verá luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	795b      	ldrb	r3, [r3, #5]
 8000826:	2b02      	cmp	r3, #2
 8000828:	d143      	bne.n	80008b2 <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	791b      	ldrb	r3, [r3, #4]
 800082e:	2b07      	cmp	r3, #7
 8000830:	d81f      	bhi.n	8000872 <GPIO_Config+0x1ea>
			// Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	791b      	ldrb	r3, [r3, #4]
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	60bb      	str	r3, [r7, #8]

			// Limpiamos primero la posición del registro que deseamos escribir a continuación
			pGPIOHandler -> pGPIOx -> AFR[0] &= ~(0b1111 << auxPosition);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	6a1a      	ldr	r2, [r3, #32]
 8000840:	210f      	movs	r1, #15
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	fa01 f303 	lsl.w	r3, r1, r3
 8000848:	43db      	mvns	r3, r3
 800084a:	4619      	mov	r1, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	400a      	ands	r2, r1
 8000852:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posición seleccionada
			pGPIOHandler -> pGPIOx -> AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	6a1a      	ldr	r2, [r3, #32]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	7a5b      	ldrb	r3, [r3, #9]
 800085e:	4619      	mov	r1, r3
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	fa01 f303 	lsl.w	r3, r1, r3
 8000866:	4619      	mov	r1, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	430a      	orrs	r2, r1
 800086e:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurando en la posición seleccionada
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} // Fin del GPIO_Config
 8000870:	e01f      	b.n	80008b2 <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber -8);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	791b      	ldrb	r3, [r3, #4]
 8000876:	3b08      	subs	r3, #8
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx -> AFR[1] &= ~(0b1111 << auxPosition);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000882:	210f      	movs	r1, #15
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	fa01 f303 	lsl.w	r3, r1, r3
 800088a:	43db      	mvns	r3, r3
 800088c:	4619      	mov	r1, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	400a      	ands	r2, r1
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	7a5b      	ldrb	r3, [r3, #9]
 80008a0:	4619      	mov	r1, r3
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	fa01 f303 	lsl.w	r3, r1, r3
 80008a8:	4619      	mov	r1, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	430a      	orrs	r2, r1
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_Config
 80008b2:	bf00      	nop
 80008b4:	3714      	adds	r7, #20
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40020000 	.word	0x40020000
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40020800 	.word	0x40020800
 80008d0:	40020c00 	.word	0x40020c00
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40021c00 	.word	0x40021c00

080008dc <__NVIC_EnableIRQ>:
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	db0b      	blt.n	8000906 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f003 021f 	and.w	r2, r3, #31
 80008f4:	4907      	ldr	r1, [pc, #28]	; (8000914 <__NVIC_EnableIRQ+0x38>)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	095b      	lsrs	r3, r3, #5
 80008fc:	2001      	movs	r0, #1
 80008fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000e100 	.word	0xe000e100

08000918 <__NVIC_DisableIRQ>:
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	2b00      	cmp	r3, #0
 8000928:	db12      	blt.n	8000950 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	f003 021f 	and.w	r2, r3, #31
 8000930:	490a      	ldr	r1, [pc, #40]	; (800095c <__NVIC_DisableIRQ+0x44>)
 8000932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000936:	095b      	lsrs	r3, r3, #5
 8000938:	2001      	movs	r0, #1
 800093a:	fa00 f202 	lsl.w	r2, r0, r2
 800093e:	3320      	adds	r3, #32
 8000940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000944:	f3bf 8f4f 	dsb	sy
}
 8000948:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800094a:	f3bf 8f6f 	isb	sy
}
 800094e:	bf00      	nop
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	e000e100 	.word	0xe000e100

08000960 <__NVIC_SetPriority>:
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	6039      	str	r1, [r7, #0]
 800096a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000970:	2b00      	cmp	r3, #0
 8000972:	db0a      	blt.n	800098a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	b2da      	uxtb	r2, r3
 8000978:	490c      	ldr	r1, [pc, #48]	; (80009ac <__NVIC_SetPriority+0x4c>)
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	0112      	lsls	r2, r2, #4
 8000980:	b2d2      	uxtb	r2, r2
 8000982:	440b      	add	r3, r1
 8000984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000988:	e00a      	b.n	80009a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4908      	ldr	r1, [pc, #32]	; (80009b0 <__NVIC_SetPriority+0x50>)
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	f003 030f 	and.w	r3, r3, #15
 8000996:	3b04      	subs	r3, #4
 8000998:	0112      	lsls	r2, r2, #4
 800099a:	b2d2      	uxtb	r2, r2
 800099c:	440b      	add	r3, r1
 800099e:	761a      	strb	r2, [r3, #24]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000e100 	.word	0xe000e100
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <Timer_Config>:
 *
 * */

//NOTA: Hay que desactivar las interrupciones globales y luego volver a activarlas

void Timer_Config(TIMER_Handler_t *ptrTimerConfig){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
	/* 0. Desactivamos las interrupciones globales */

	__disable_irq();

	/* 1. Activamos la señal de reloj para el periférico específico */
	if(ptrTimerConfig -> ptrTIMx == TIM2){
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009c8:	d106      	bne.n	80009d8 <Timer_Config+0x24>
		// Activamos la señal de reloj del TIM2
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 80009ca:	4b4b      	ldr	r3, [pc, #300]	; (8000af8 <Timer_Config+0x144>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	4a4a      	ldr	r2, [pc, #296]	; (8000af8 <Timer_Config+0x144>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6413      	str	r3, [r2, #64]	; 0x40
 80009d6:	e022      	b.n	8000a1e <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM3){
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a47      	ldr	r2, [pc, #284]	; (8000afc <Timer_Config+0x148>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d106      	bne.n	80009f0 <Timer_Config+0x3c>
		// Activamos la señal de reloj del TIM3
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 80009e2:	4b45      	ldr	r3, [pc, #276]	; (8000af8 <Timer_Config+0x144>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	4a44      	ldr	r2, [pc, #272]	; (8000af8 <Timer_Config+0x144>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
 80009ee:	e016      	b.n	8000a1e <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM4){
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a42      	ldr	r2, [pc, #264]	; (8000b00 <Timer_Config+0x14c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d106      	bne.n	8000a08 <Timer_Config+0x54>
		// Activamos la señal de reloj del TIM4
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 80009fa:	4b3f      	ldr	r3, [pc, #252]	; (8000af8 <Timer_Config+0x144>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	4a3e      	ldr	r2, [pc, #248]	; (8000af8 <Timer_Config+0x144>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6413      	str	r3, [r2, #64]	; 0x40
 8000a06:	e00a      	b.n	8000a1e <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM5){
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a3d      	ldr	r2, [pc, #244]	; (8000b04 <Timer_Config+0x150>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d105      	bne.n	8000a1e <Timer_Config+0x6a>
		// Activamos la señal de reloj del TIM5
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8000a12:	4b39      	ldr	r3, [pc, #228]	; (8000af8 <Timer_Config+0x144>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a38      	ldr	r2, [pc, #224]	; (8000af8 <Timer_Config+0x144>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuración del modo del timer (UP or DOWN) */

	if(ptrTimerConfig -> timerConfig.Timer_mode == TIMER_MODE_UP){
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	791b      	ldrb	r3, [r3, #4]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d10c      	bne.n	8000a40 <Timer_Config+0x8c>
		// Configuramos el timer en modo UP
		ptrTimerConfig -> ptrTIMx -> CR1 &= ~(TIM_CR1_DIR);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f022 0210 	bic.w	r2, r2, #16
 8000a34:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) en cero.
		ptrTimerConfig -> ptrTIMx -> CNT = 0;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
 8000a3e:	e00d      	b.n	8000a5c <Timer_Config+0xa8>

	}
	else{
		// Configuramos el timer en modo DOWN
		ptrTimerConfig -> ptrTIMx -> CR1 |= ~(TIM_CR1_DIR);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f062 0210 	orn	r2, r2, #16
 8000a4e:	601a      	str	r2, [r3, #0]

		// Ponemos en el contador (CNT) el valor del periodo
		ptrTimerConfig -> ptrTIMx -> CNT = ptrTimerConfig -> timerConfig.Timer_period -1;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	689a      	ldr	r2, [r3, #8]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	3a01      	subs	r2, #1
 8000a5a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuración del Prescaler */
	ptrTimerConfig -> ptrTIMx -> PSC = ptrTimerConfig -> timerConfig.Timer_speed -1;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	88db      	ldrh	r3, [r3, #6]
 8000a60:	1e5a      	subs	r2, r3, #1
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo de las interrupciones */
	ptrTimerConfig -> ptrTIMx -> ARR = ptrTimerConfig -> timerConfig.Timer_period -1;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	689a      	ldr	r2, [r3, #8]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	3a01      	subs	r2, #1
 8000a72:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse  */
	ptrTimerConfig -> ptrTIMx -> CR1 |= TIM_CR1_CEN;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f042 0201 	orr.w	r2, r2, #1
 8000a82:	601a      	str	r2, [r3, #0]

	/* 6. Activamos la interrupción debida a un "update event" */
	if(ptrTimerConfig -> ptrTIMx != TIM3){
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a1c      	ldr	r2, [pc, #112]	; (8000afc <Timer_Config+0x148>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d007      	beq.n	8000a9e <Timer_Config+0xea>
		ptrTimerConfig -> ptrTIMx -> DIER |= TIM_DIER_UIE;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	68da      	ldr	r2, [r3, #12]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f042 0201 	orr.w	r2, r2, #1
 8000a9c:	60da      	str	r2, [r3, #12]
	}

	/* 7. Activamos la señal de la interrupcuón en el NVIC */

	if(ptrTimerConfig -> ptrTIMx == TIM2){
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aa6:	d107      	bne.n	8000ab8 <Timer_Config+0x104>
		// Activamos la IRQ del TIM2
		__NVIC_EnableIRQ(TIM2_IRQn);
 8000aa8:	201c      	movs	r0, #28
 8000aaa:	f7ff ff17 	bl	80008dc <__NVIC_EnableIRQ>

		// Establecemos la prioridad del timer
		__NVIC_SetPriority(TIM2_IRQn,3);
 8000aae:	2103      	movs	r1, #3
 8000ab0:	201c      	movs	r0, #28
 8000ab2:	f7ff ff55 	bl	8000960 <__NVIC_SetPriority>
 8000ab6:	e019      	b.n	8000aec <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM3){
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0f      	ldr	r2, [pc, #60]	; (8000afc <Timer_Config+0x148>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d103      	bne.n	8000aca <Timer_Config+0x116>
		// Activamos la IRQ del TIM3
		__NVIC_DisableIRQ(TIM3_IRQn);
 8000ac2:	201d      	movs	r0, #29
 8000ac4:	f7ff ff28 	bl	8000918 <__NVIC_DisableIRQ>
 8000ac8:	e010      	b.n	8000aec <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM4){
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a0c      	ldr	r2, [pc, #48]	; (8000b00 <Timer_Config+0x14c>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d103      	bne.n	8000adc <Timer_Config+0x128>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM4_IRQn);
 8000ad4:	201e      	movs	r0, #30
 8000ad6:	f7ff ff01 	bl	80008dc <__NVIC_EnableIRQ>
 8000ada:	e007      	b.n	8000aec <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM5){
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <Timer_Config+0x150>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d102      	bne.n	8000aec <Timer_Config+0x138>
		// Activamos la IRQ del TIM5
		__NVIC_EnableIRQ(TIM5_IRQn);
 8000ae6:	2032      	movs	r0, #50	; 0x32
 8000ae8:	f7ff fef8 	bl	80008dc <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000aec:	b662      	cpsie	i
}
 8000aee:	bf00      	nop
	}


	/* 8. Activamos de nuevo todas las interrupciones. */
	__enable_irq();
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40000400 	.word	0x40000400
 8000b00:	40000800 	.word	0x40000800
 8000b04:	40000c00 	.word	0x40000c00

08000b08 <startTimer>:

void startTimer(TIMER_Handler_t *ptrTimerConfig){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	ptrTimerConfig -> ptrTIMx -> DIER |= TIM_DIER_UIE;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	68da      	ldr	r2, [r3, #12]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f042 0201 	orr.w	r2, r2, #1
 8000b1e:	60da      	str	r2, [r3, #12]
	__NVIC_EnableIRQ(TIM3_IRQn);
 8000b20:	201d      	movs	r0, #29
 8000b22:	f7ff fedb 	bl	80008dc <__NVIC_EnableIRQ>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <stopTimer>:

void stopTimer(TIMER_Handler_t *ptrTimerConfig){
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
	ptrTimerConfig -> ptrTIMx -> DIER &= ~TIM_DIER_UIE;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	68da      	ldr	r2, [r3, #12]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f022 0201 	bic.w	r2, r2, #1
 8000b44:	60da      	str	r2, [r3, #12]
	__NVIC_DisableIRQ(TIM3_IRQn);
 8000b46:	201d      	movs	r0, #29
 8000b48:	f7ff fee6 	bl	8000918 <__NVIC_DisableIRQ>
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <Timer4_Callback>:
__attribute__((weak)) void Timer3_Callback(void){
	__NOP();
}

// Callback Timer4
__attribute__((weak)) void Timer4_Callback(void){
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
	__NOP();
 8000b58:	bf00      	nop
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <Timer5_Callback>:

// Callback Timer5
__attribute__((weak)) void Timer5_Callback(void){
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
	__NOP();
 8000b68:	bf00      	nop
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <TIM2_IRQHandler>:

// Hay que hacer dos cosas: 1) Atender la interrupción. 2) Llamamos al Callback
/* Rutina de atención a la interrupción del TIM2 */

void TIM2_IRQHandler(void){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	TIM2 -> SR &= ~(TIM_SR_UIF);
 8000b78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b7c:	691b      	ldr	r3, [r3, #16]
 8000b7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b82:	f023 0301 	bic.w	r3, r3, #1
 8000b86:	6113      	str	r3, [r2, #16]
	Timer2_Callback();
 8000b88:	f000 fbb8 	bl	80012fc <Timer2_Callback>
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	TIM3 -> SR &= ~(TIM_SR_UIF);
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <TIM3_IRQHandler+0x18>)
 8000b96:	691b      	ldr	r3, [r3, #16]
 8000b98:	4a03      	ldr	r2, [pc, #12]	; (8000ba8 <TIM3_IRQHandler+0x18>)
 8000b9a:	f023 0301 	bic.w	r3, r3, #1
 8000b9e:	6113      	str	r3, [r2, #16]
	Timer3_Callback();
 8000ba0:	f000 fbbe 	bl	8001320 <Timer3_Callback>
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40000400 	.word	0x40000400

08000bac <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	TIM4 -> SR &= ~(TIM_SR_UIF);
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <TIM4_IRQHandler+0x18>)
 8000bb2:	691b      	ldr	r3, [r3, #16]
 8000bb4:	4a03      	ldr	r2, [pc, #12]	; (8000bc4 <TIM4_IRQHandler+0x18>)
 8000bb6:	f023 0301 	bic.w	r3, r3, #1
 8000bba:	6113      	str	r3, [r2, #16]
	Timer4_Callback();
 8000bbc:	f7ff ffca 	bl	8000b54 <Timer4_Callback>
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40000800 	.word	0x40000800

08000bc8 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	TIM5 -> SR &= ~(TIM_SR_UIF);
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <TIM5_IRQHandler+0x18>)
 8000bce:	691b      	ldr	r3, [r3, #16]
 8000bd0:	4a03      	ldr	r2, [pc, #12]	; (8000be0 <TIM5_IRQHandler+0x18>)
 8000bd2:	f023 0301 	bic.w	r3, r3, #1
 8000bd6:	6113      	str	r3, [r2, #16]
	Timer5_Callback();
 8000bd8:	f7ff ffc4 	bl	8000b64 <Timer5_Callback>
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40000c00 	.word	0x40000c00

08000be4 <__NVIC_EnableIRQ>:
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	db0b      	blt.n	8000c0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f003 021f 	and.w	r2, r3, #31
 8000bfc:	4907      	ldr	r1, [pc, #28]	; (8000c1c <__NVIC_EnableIRQ+0x38>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	095b      	lsrs	r3, r3, #5
 8000c04:	2001      	movs	r0, #1
 8000c06:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e100 	.word	0xe000e100

08000c20 <USART_Config>:
 * del periférico que se está utilizando.
 */

uint8_t data;

void USART_Config(USART_Handler_t *ptrUsartHandler){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000c28:	b672      	cpsid	i
}
 8000c2a:	bf00      	nop

	/* 1. Activamos la señal de reloj que viene desde el bus al que pertenece el periférico.
	 * Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6)
	 */
	/*1.1 Configuramos el USART1*/
	if(ptrUsartHandler -> ptrUSARTx == USART1){
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a8c      	ldr	r2, [pc, #560]	; (8000e64 <USART_Config+0x244>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d106      	bne.n	8000c44 <USART_Config+0x24>
		// Escribimos 1 (SET) en la posición correspondiente al USART1
		RCC -> APB2ENR |= (RCC_APB2ENR_USART1EN);
 8000c36:	4b8c      	ldr	r3, [pc, #560]	; (8000e68 <USART_Config+0x248>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	4a8b      	ldr	r2, [pc, #556]	; (8000e68 <USART_Config+0x248>)
 8000c3c:	f043 0310 	orr.w	r3, r3, #16
 8000c40:	6453      	str	r3, [r2, #68]	; 0x44
 8000c42:	e016      	b.n	8000c72 <USART_Config+0x52>
	}
	/*1.2 Configuramos el USART2*/
	else if(ptrUsartHandler -> ptrUSARTx == USART2){
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a88      	ldr	r2, [pc, #544]	; (8000e6c <USART_Config+0x24c>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d106      	bne.n	8000c5c <USART_Config+0x3c>
		// Escribimos 1 (SET) en la posición correspondiente al USART1
		RCC -> APB1ENR |= (RCC_APB1ENR_USART2EN);
 8000c4e:	4b86      	ldr	r3, [pc, #536]	; (8000e68 <USART_Config+0x248>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	4a85      	ldr	r2, [pc, #532]	; (8000e68 <USART_Config+0x248>)
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5a:	e00a      	b.n	8000c72 <USART_Config+0x52>
	}
	/*1.3 Configuramos el USART6*/
	else if(ptrUsartHandler -> ptrUSARTx == USART6){
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a83      	ldr	r2, [pc, #524]	; (8000e70 <USART_Config+0x250>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d105      	bne.n	8000c72 <USART_Config+0x52>
		// Escribimos 1 (SET) en la posición correspondiente al USART1
		RCC -> APB2ENR |= (RCC_APB2ENR_USART6EN);
 8000c66:	4b80      	ldr	r3, [pc, #512]	; (8000e68 <USART_Config+0x248>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	4a7f      	ldr	r2, [pc, #508]	; (8000e68 <USART_Config+0x248>)
 8000c6c:	f043 0320 	orr.w	r3, r3, #32
 8000c70:	6453      	str	r3, [r2, #68]	; 0x44
	 * Configuramos el modo: only TX, only RX, o RXTX
	 * Por último activamos el modulo USART cuando todo está correctamente configurado
	 * */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero.
	ptrUsartHandler -> ptrUSARTx -> CR1 = 0;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
	ptrUsartHandler -> ptrUSARTx -> CR2 = 0;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]

	// 2.2 Configuración del Parity:
	// Verificamos si el parity está activado o no
	if(ptrUsartHandler -> USART_Config.USART_parity != USART_PARITY_NONE){
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	79db      	ldrb	r3, [r3, #7]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d02b      	beq.n	8000ce2 <USART_Config+0xc2>

		// Verificamos si se ha seleccionado ODD or EVEN

		//Se selecciona EVEN
		if(ptrUsartHandler -> USART_Config.USART_parity == USART_PARITY_EVEN){
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	79db      	ldrb	r3, [r3, #7]
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d113      	bne.n	8000cba <USART_Config+0x9a>
			//Ponemos 0b0 en la posicion 9 del registo CR1 para escoger Even
			ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_PS);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	68da      	ldr	r2, [r3, #12]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ca0:	60da      	str	r2, [r3, #12]

			// Además, se seleccionan 9 bits.
			ptrUsartHandler -> USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	719a      	strb	r2, [r3, #6]
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	68da      	ldr	r2, [r3, #12]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	e01b      	b.n	8000cf2 <USART_Config+0xd2>
		}
		//Se selecciona ODD
		else{
			//Ponemos 0b1 en la posicion 9 del registo CR1 para escoger Even
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_PS);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	68da      	ldr	r2, [r3, #12]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cc8:	60da      	str	r2, [r3, #12]

			// Además, se seleccionan 9 bits.
			ptrUsartHandler -> USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	719a      	strb	r2, [r3, #6]
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	68da      	ldr	r2, [r3, #12]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	e007      	b.n	8000cf2 <USART_Config+0xd2>
		}
	}
	//No deseamos activar el parity-check
	else{
		//Ponemos 0b0 en la posicion 10 del registro CR1 para desactivar el Parity
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_PCE);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cf0:	60da      	str	r2, [r3, #12]

	// 2.3 Configuramos el tamaño del dato:

	//Verificamos si va a ser de 8 o 9 bits

	if(ptrUsartHandler -> USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	799b      	ldrb	r3, [r3, #6]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d108      	bne.n	8000d0c <USART_Config+0xec>
		//Ponemos 0b0 en la posicion 12 del registro CR1 para escoger 8 bits
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_M);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68da      	ldr	r2, [r3, #12]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	e007      	b.n	8000d1c <USART_Config+0xfc>
	}else{
		//Ponemos 0b1 en la posicion 12 del registro CR1 para escoger 9 bits
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	68da      	ldr	r2, [r3, #12]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000d1a:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)

	switch(ptrUsartHandler -> USART_Config.USART_stopbits){
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	7a1b      	ldrb	r3, [r3, #8]
 8000d20:	2b03      	cmp	r3, #3
 8000d22:	d847      	bhi.n	8000db4 <USART_Config+0x194>
 8000d24:	a201      	add	r2, pc, #4	; (adr r2, 8000d2c <USART_Config+0x10c>)
 8000d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d2a:	bf00      	nop
 8000d2c:	08000d3d 	.word	0x08000d3d
 8000d30:	08000d4f 	.word	0x08000d4f
 8000d34:	08000d71 	.word	0x08000d71
 8000d38:	08000d93 	.word	0x08000d93
	case USART_STOPBIT_1: {
		//Cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	691a      	ldr	r2, [r3, #16]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000d4a:	611a      	str	r2, [r3, #16]
		break;
 8000d4c:	e03b      	b.n	8000dc6 <USART_Config+0x1a6>
	}
	case USART_STOPBIT_0_5:{
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	691a      	ldr	r2, [r3, #16]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000d5c:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b01 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP_0);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	691a      	ldr	r2, [r3, #16]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000d6c:	611a      	str	r2, [r3, #16]
		break;
 8000d6e:	e02a      	b.n	8000dc6 <USART_Config+0x1a6>
	}
	case USART_STOPBIT_2:{
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	691a      	ldr	r2, [r3, #16]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000d7e:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b10 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP_1);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	691a      	ldr	r2, [r3, #16]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000d8e:	611a      	str	r2, [r3, #16]
		break;
 8000d90:	e019      	b.n	8000dc6 <USART_Config+0x1a6>
	}
	case USART_STOPBIT_1_5: {
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	691a      	ldr	r2, [r3, #16]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000da0:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b11 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	691a      	ldr	r2, [r3, #16]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000db0:	611a      	str	r2, [r3, #16]
		break;
 8000db2:	e008      	b.n	8000dc6 <USART_Config+0x1a6>
	}
	default:{
		//Cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	691a      	ldr	r2, [r3, #16]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000dc2:	611a      	str	r2, [r3, #16]
		break;
 8000dc4:	bf00      	nop
	}
	}

	// 2.4 Configuración del Baudrate (SFR USART_BRR)
	// Ver tabla de valores (Tabla 75), Frec = 16MHz, overr = 0;
	if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	795b      	ldrb	r3, [r3, #5]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d105      	bne.n	8000dda <USART_Config+0x1ba>
		// El valor a cargar es 104.1875 -> Mantiza = 104, fraction = 0.1875
		// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
		// Valor a cargar 0x683
		// Configurando el Baudrate generator para una velocidad de 9600bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0683;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f240 6283 	movw	r2, #1667	; 0x683
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	e011      	b.n	8000dfe <USART_Config+0x1de>
	}

	else if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_19200){
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	795b      	ldrb	r3, [r3, #5]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d105      	bne.n	8000dee <USART_Config+0x1ce>
		// El valor a cargar es 52.0625 -> Mantiza = 52, fraction = 0.0625
		// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
		// Valor a cargar 0x0341
		// Configurando el Baudrate generator para una velocidad de 19200bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0341;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f240 3241 	movw	r2, #833	; 0x341
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	e007      	b.n	8000dfe <USART_Config+0x1de>
	}

	else if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_115200){	//**************************************DUDAAAAAA
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	795b      	ldrb	r3, [r3, #5]
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d103      	bne.n	8000dfe <USART_Config+0x1de>
		// El valor a cargar es 8.6875 -> Mantiza = 8, fraction = 0.6875
		// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11
		// Valor a cargar 0x0081
		// Configurando el Baudrate generator para una velocidad de 115200bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0081;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2281      	movs	r2, #129	; 0x81
 8000dfc:	609a      	str	r2, [r3, #8]
	}

	// 2.5 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler -> USART_Config.USART_mode){
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	791b      	ldrb	r3, [r3, #4]
 8000e02:	2b03      	cmp	r3, #3
 8000e04:	d847      	bhi.n	8000e96 <USART_Config+0x276>
 8000e06:	a201      	add	r2, pc, #4	; (adr r2, 8000e0c <USART_Config+0x1ec>)
 8000e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0c:	08000e1d 	.word	0x08000e1d
 8000e10:	08000e2f 	.word	0x08000e2f
 8000e14:	08000e41 	.word	0x08000e41
 8000e18:	08000e75 	.word	0x08000e75
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		//Cargamos el valor 0b1 en el bit TE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TE);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	68da      	ldr	r2, [r3, #12]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f042 0208 	orr.w	r2, r2, #8
 8000e2a:	60da      	str	r2, [r3, #12]
		break;
 8000e2c:	e044      	b.n	8000eb8 <USART_Config+0x298>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		//Cargamos el valor 0b1 en el bit RE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RE);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f042 0204 	orr.w	r2, r2, #4
 8000e3c:	60da      	str	r2, [r3, #12]
		break;
 8000e3e:	e03b      	b.n	8000eb8 <USART_Config+0x298>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmisión como recepción
		//Cargamos el valor 0b1 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TE);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	68da      	ldr	r2, [r3, #12]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f042 0208 	orr.w	r2, r2, #8
 8000e4e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RE);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	68da      	ldr	r2, [r3, #12]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f042 0204 	orr.w	r2, r2, #4
 8000e5e:	60da      	str	r2, [r3, #12]
		break;
 8000e60:	e02a      	b.n	8000eb8 <USART_Config+0x298>
 8000e62:	bf00      	nop
 8000e64:	40011000 	.word	0x40011000
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40004400 	.word	0x40004400
 8000e70:	40011400 	.word	0x40011400
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		//Cargamos el valor 0b0 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TE);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	68da      	ldr	r2, [r3, #12]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 0208 	bic.w	r2, r2, #8
 8000e82:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RE);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	68da      	ldr	r2, [r3, #12]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f022 0204 	bic.w	r2, r2, #4
 8000e92:	60da      	str	r2, [r3, #12]
		break;
 8000e94:	e010      	b.n	8000eb8 <USART_Config+0x298>
	}
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		//Cargamos el valor 0b0 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TE);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	68da      	ldr	r2, [r3, #12]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 0208 	bic.w	r2, r2, #8
 8000ea4:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RE);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	68da      	ldr	r2, [r3, #12]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f022 0204 	bic.w	r2, r2, #4
 8000eb4:	60da      	str	r2, [r3, #12]
		break;
 8000eb6:	bf00      	nop
	}
	}

	// 2.6 Activamos el modulo serial.

	if(ptrUsartHandler -> USART_Config.USART_mode != USART_MODE_DISABLE){
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	791b      	ldrb	r3, [r3, #4]
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	d007      	beq.n	8000ed0 <USART_Config+0x2b0>
		//Cargamos el valor de 0b1 en el bit UE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_UE);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	68da      	ldr	r2, [r3, #12]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ece:	60da      	str	r2, [r3, #12]
	}

	// 3. Activamos la interrupción para el USART

	switch(ptrUsartHandler -> USART_Config.USART_interrupt){
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7a5b      	ldrb	r3, [r3, #9]
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d84f      	bhi.n	8000f78 <USART_Config+0x358>
 8000ed8:	a201      	add	r2, pc, #4	; (adr r2, 8000ee0 <USART_Config+0x2c0>)
 8000eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ede:	bf00      	nop
 8000ee0:	08000ef1 	.word	0x08000ef1
 8000ee4:	08000f13 	.word	0x08000f13
 8000ee8:	08000f35 	.word	0x08000f35
 8000eec:	08000f57 	.word	0x08000f57
	// Analizamos los
	case USART_INTERRUPT_RX_ENABLE:
	{
		// Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RXNEIE);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	68da      	ldr	r2, [r3, #12]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f042 0220 	orr.w	r2, r2, #32
 8000efe:	60da      	str	r2, [r3, #12]
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f0e:	60da      	str	r2, [r3, #12]
		break;
 8000f10:	e043      	b.n	8000f9a <USART_Config+0x37a>
	}
	case USART_INTERRUPT_TX_ENABLE:
	{
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	68da      	ldr	r2, [r3, #12]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f20:	60da      	str	r2, [r3, #12]
		// NO Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RXNEIE);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68da      	ldr	r2, [r3, #12]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f022 0220 	bic.w	r2, r2, #32
 8000f30:	60da      	str	r2, [r3, #12]
		break;
 8000f32:	e032      	b.n	8000f9a <USART_Config+0x37a>

	}
	case USART_INTERRUPT_RXTX_ENABLE:
	{
		// Activamos las dos interrupciones tanto del RX como del TX
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TXEIE);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f42:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68da      	ldr	r2, [r3, #12]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f52:	60da      	str	r2, [r3, #12]
		break;
 8000f54:	e021      	b.n	8000f9a <USART_Config+0x37a>
	}
	case USART_INTERRUPT_RXTX_DISABLE:
	{
		// Activamos las dos interrupciones tanto del RX como del TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	68da      	ldr	r2, [r3, #12]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f64:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	68da      	ldr	r2, [r3, #12]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f74:	60da      	str	r2, [r3, #12]
		break;
 8000f76:	e010      	b.n	8000f9a <USART_Config+0x37a>
	}

	default:
	{
		// NO Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RXNEIE);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 0220 	bic.w	r2, r2, #32
 8000f86:	60da      	str	r2, [r3, #12]
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f96:	60da      	str	r2, [r3, #12]
		break;
 8000f98:	bf00      	nop
	}
	}

	// 4. Activamos la señal de la interrupción en el NVIC

	if((ptrUsartHandler -> USART_Config.USART_interrupt == USART_INTERRUPT_RX_ENABLE) | (ptrUsartHandler -> USART_Config.USART_interrupt == USART_INTERRUPT_TX_ENABLE))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7a5b      	ldrb	r3, [r3, #9]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	bf0c      	ite	eq
 8000fa2:	2301      	moveq	r3, #1
 8000fa4:	2300      	movne	r3, #0
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7a5b      	ldrb	r3, [r3, #9]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	bf0c      	ite	eq
 8000fb0:	2301      	moveq	r3, #1
 8000fb2:	2300      	movne	r3, #0
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d019      	beq.n	8000ff2 <USART_Config+0x3d2>
	{

		if(ptrUsartHandler -> ptrUSARTx == USART1){
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a0f      	ldr	r2, [pc, #60]	; (8001000 <USART_Config+0x3e0>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d103      	bne.n	8000fd0 <USART_Config+0x3b0>
			// Activamos la IRQ del USART1
			__NVIC_EnableIRQ(USART1_IRQn);
 8000fc8:	2025      	movs	r0, #37	; 0x25
 8000fca:	f7ff fe0b 	bl	8000be4 <__NVIC_EnableIRQ>
 8000fce:	e010      	b.n	8000ff2 <USART_Config+0x3d2>

		}else if(ptrUsartHandler -> ptrUSARTx == USART2){
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <USART_Config+0x3e4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d103      	bne.n	8000fe2 <USART_Config+0x3c2>
			// Activamos la IRQ del USART2
			__NVIC_EnableIRQ(USART2_IRQn);
 8000fda:	2026      	movs	r0, #38	; 0x26
 8000fdc:	f7ff fe02 	bl	8000be4 <__NVIC_EnableIRQ>
 8000fe0:	e007      	b.n	8000ff2 <USART_Config+0x3d2>

		}else if(ptrUsartHandler -> ptrUSARTx == USART6){
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a08      	ldr	r2, [pc, #32]	; (8001008 <USART_Config+0x3e8>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d102      	bne.n	8000ff2 <USART_Config+0x3d2>
			// Activamos la IRQ del USART6
			__NVIC_EnableIRQ(USART6_IRQn);
 8000fec:	2047      	movs	r0, #71	; 0x47
 8000fee:	f7ff fdf9 	bl	8000be4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000ff2:	b662      	cpsie	i
}
 8000ff4:	bf00      	nop
		}

	// 5. Activamos de nuevo todas las interrupciones

	__enable_irq();
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40011000 	.word	0x40011000
 8001004:	40004400 	.word	0x40004400
 8001008:	40011400 	.word	0x40011400

0800100c <USART1_Callback>:

//**********//  CallBacks //**********//

// Callback USART1
__attribute__((weak)) void USART1_Callback(void){
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
	__NOP();
 8001010:	bf00      	nop
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <USART6_Callback>:
__attribute__((weak)) void USART2_Callback(void){
	__NOP();
}

// Callback USART6
__attribute__((weak)) void USART6_Callback(void){
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
	__NOP();
 8001020:	bf00      	nop
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <USART1_IRQHandler>:

// Hay que hacer dos cosas: 1) Atender la interrupción. 2) Llamamos al Callback
/* Rutina de atención a la interrupción del USART */

void USART1_IRQHandler(void){
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0

	USART1 -> SR &= ~(USART_SR_RXNE);		// Bajamos la bandera manualmente
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <USART1_IRQHandler+0x18>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a03      	ldr	r2, [pc, #12]	; (8001044 <USART1_IRQHandler+0x18>)
 8001036:	f023 0320 	bic.w	r3, r3, #32
 800103a:	6013      	str	r3, [r2, #0]

	USART1_Callback();
 800103c:	f7ff ffe6 	bl	800100c <USART1_Callback>
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40011000 	.word	0x40011000

08001048 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	USART2 -> SR &= ~(USART_SR_RXNE);		// Desactivamos la bandera manualmente para el RX
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <USART2_IRQHandler+0x24>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a06      	ldr	r2, [pc, #24]	; (800106c <USART2_IRQHandler+0x24>)
 8001052:	f023 0320 	bic.w	r3, r3, #32
 8001056:	6013      	str	r3, [r2, #0]

	data = (USART2 -> DR);
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <USART2_IRQHandler+0x24>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <USART2_IRQHandler+0x28>)
 8001060:	701a      	strb	r2, [r3, #0]

	USART2_Callback();
 8001062:	f000 f963 	bl	800132c <USART2_Callback>

	//USART2 -> SR &= ~(USART_SR_TXE);		// Desactivamos la bandera para el TX
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40004400 	.word	0x40004400
 8001070:	2000008e 	.word	0x2000008e

08001074 <USART6_IRQHandler>:

void USART6_IRQHandler(void){
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	USART6 -> SR &= ~(USART_SR_RXNE);
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <USART6_IRQHandler+0x18>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a03      	ldr	r2, [pc, #12]	; (800108c <USART6_IRQHandler+0x18>)
 800107e:	f023 0320 	bic.w	r3, r3, #32
 8001082:	6013      	str	r3, [r2, #0]
	USART6_Callback();
 8001084:	f7ff ffca 	bl	800101c <USART6_Callback>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40011400 	.word	0x40011400

08001090 <returnData>:
	dataToRead = ((char) (ptrUsartHandler -> ptrUSARTx -> DR));
	return dataToRead;

}

uint8_t returnData(void){
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
	return data;				// Devolvemos el valor
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <returnData+0x14>)
 8001096:	781b      	ldrb	r3, [r3, #0]
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	2000008e 	.word	0x2000008e

080010a8 <writeChar>:

//**********// Función para escribir un solo char //**********//

int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend){
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
	while(!(ptrUsartHandler -> ptrUSARTx -> SR & USART_SR_TXE)){
 80010b2:	e000      	b.n	80010b6 <writeChar+0xe>
		__NOP();
 80010b4:	bf00      	nop
	while(!(ptrUsartHandler -> ptrUSARTx -> SR & USART_SR_TXE)){
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0f7      	beq.n	80010b4 <writeChar+0xc>
	// Permitimos la bandera del TX para el USART2
	//ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TXEIE);
	//USART2 -> SR |= (USART_SR_TXE);

	//Cargamos el valor de dataToSend en el USER DATA Register
	ptrUsartHandler -> ptrUSARTx -> DR = (dataToSend);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	605a      	str	r2, [r3, #4]

	//ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
	//USART2 -> SR &= ~(USART_SR_TXE);		// Desactivamos la bandera para el TX
	return dataToSend;
 80010cc:	683b      	ldr	r3, [r7, #0]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <writeMsg>:

/* Función para escribir un mensaje */

void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	6039      	str	r1, [r7, #0]
	while(*msgToSend != '\0'){
 80010e4:	e008      	b.n	80010f8 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	4619      	mov	r1, r3
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ffdb 	bl	80010a8 <writeChar>
		msgToSend++;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1f2      	bne.n	80010e6 <writeMsg+0xc>
	}
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <main>:

void initSystem(void);

// *************** // MAIN // *************** //
int main(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
		// Inicializamos el sistema
		initSystem();
 8001110:	f000 f84e 	bl	80011b0 <initSystem>

	    /* Ciclo principal */
		while(1){

			// Hacemos un "eco" con el valor que nos llega por el serial
			if((rxData != '\0')){
 8001114:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <main+0x84>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d01e      	beq.n	800115a <main+0x4e>
				writeChar(&handlerUsart2, rxData);
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <main+0x84>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	481c      	ldr	r0, [pc, #112]	; (8001194 <main+0x88>)
 8001124:	f7ff ffc0 	bl	80010a8 <writeChar>

				if(rxData == 's'){
 8001128:	4b19      	ldr	r3, [pc, #100]	; (8001190 <main+0x84>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b73      	cmp	r3, #115	; 0x73
 800112e:	d101      	bne.n	8001134 <main+0x28>
					//Lanzamos una nueva conversión ADC de un sólo valor
					startSingleADC();
 8001130:	f7ff f9b8 	bl	80004a4 <startSingleADC>
				}
				if(rxData == 'c'){
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <main+0x84>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b63      	cmp	r3, #99	; 0x63
 800113a:	d102      	bne.n	8001142 <main+0x36>
					// Conversión de modo continua
					//startContinuousADC();
					startTimer(&handlerTimer3);
 800113c:	4816      	ldr	r0, [pc, #88]	; (8001198 <main+0x8c>)
 800113e:	f7ff fce3 	bl	8000b08 <startTimer>
				}
				if(rxData == 'p'){
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <main+0x84>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b70      	cmp	r3, #112	; 0x70
 8001148:	d104      	bne.n	8001154 <main+0x48>
					stopContinousADC();
 800114a:	f7ff f9bb 	bl	80004c4 <stopContinousADC>
					stopTimer(&handlerTimer3);
 800114e:	4812      	ldr	r0, [pc, #72]	; (8001198 <main+0x8c>)
 8001150:	f7ff fced 	bl	8000b2e <stopTimer>
				}
				// Limpiamos el valor de la variable que guarda los datos del RX
				rxData = '\0';
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <main+0x84>)
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
			}

			if(adcIsComplete == true){
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <main+0x90>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d1d8      	bne.n	8001114 <main+0x8>

				sprintf(bufferData, "ADC = %u, %u \n\r",(unsigned int ) adcData,(unsigned int )counter);
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <main+0x94>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <main+0x98>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	490e      	ldr	r1, [pc, #56]	; (80011a8 <main+0x9c>)
 800116e:	480f      	ldr	r0, [pc, #60]	; (80011ac <main+0xa0>)
 8001170:	f000 f984 	bl	800147c <siprintf>
				// WriteMsg(&handlerCommTerminal,"Hola mundo!");
				writeMsg(&handlerUsart2, bufferData);
 8001174:	490d      	ldr	r1, [pc, #52]	; (80011ac <main+0xa0>)
 8001176:	4807      	ldr	r0, [pc, #28]	; (8001194 <main+0x88>)
 8001178:	f7ff ffaf 	bl	80010da <writeMsg>
				//writeChar(&handlerUsart2, 'a');
				counter++;
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <main+0x98>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	b29a      	uxth	r2, r3
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <main+0x98>)
 8001186:	801a      	strh	r2, [r3, #0]
				adcIsComplete = false;
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <main+0x90>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
			if((rxData != '\0')){
 800118e:	e7c1      	b.n	8001114 <main+0x8>
 8001190:	20000160 	.word	0x20000160
 8001194:	200000d4 	.word	0x200000d4
 8001198:	200000b0 	.word	0x200000b0
 800119c:	20000161 	.word	0x20000161
 80011a0:	20000162 	.word	0x20000162
 80011a4:	20000164 	.word	0x20000164
 80011a8:	08001d70 	.word	0x08001d70
 80011ac:	20000168 	.word	0x20000168

080011b0 <initSystem>:

//***********// InitSystem //***********//

// Función que define la configuración de todos los pines y periféricos

void initSystem(void){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0

	// Configuración el State LED
	handlerStateLED.pGPIOx								= GPIOA;
 80011b4:	4b47      	ldr	r3, [pc, #284]	; (80012d4 <initSystem+0x124>)
 80011b6:	4a48      	ldr	r2, [pc, #288]	; (80012d8 <initSystem+0x128>)
 80011b8:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 80011ba:	4b46      	ldr	r3, [pc, #280]	; (80012d4 <initSystem+0x124>)
 80011bc:	2205      	movs	r2, #5
 80011be:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 80011c0:	4b44      	ldr	r3, [pc, #272]	; (80012d4 <initSystem+0x124>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 80011c6:	4b43      	ldr	r3, [pc, #268]	; (80012d4 <initSystem+0x124>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 80011cc:	4b41      	ldr	r3, [pc, #260]	; (80012d4 <initSystem+0x124>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	71da      	strb	r2, [r3, #7]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 80011d2:	4b40      	ldr	r3, [pc, #256]	; (80012d4 <initSystem+0x124>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	719a      	strb	r2, [r3, #6]

	// Configuración del ADC1

	configADC.channel									= ADC_CHANNEL_0;
 80011d8:	4b40      	ldr	r3, [pc, #256]	; (80012dc <initSystem+0x12c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
	configADC.resolution								= ADC_RESOLUTION_12_BIT;
 80011de:	4b3f      	ldr	r3, [pc, #252]	; (80012dc <initSystem+0x12c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	705a      	strb	r2, [r3, #1]
	configADC.samplingPeriod							= ADC_SAMPLING_PERIOD_144_CYCLES;
 80011e4:	4b3d      	ldr	r3, [pc, #244]	; (80012dc <initSystem+0x12c>)
 80011e6:	2206      	movs	r2, #6
 80011e8:	805a      	strh	r2, [r3, #2]
	configADC.dataAlignment								= ADC_ALIGNMENT_RIGHT;
 80011ea:	4b3c      	ldr	r3, [pc, #240]	; (80012dc <initSystem+0x12c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	711a      	strb	r2, [r3, #4]


	// Configuración del pin PA3 USB RX
	handlerUSBRX.pGPIOx									= GPIOA;
 80011f0:	4b3b      	ldr	r3, [pc, #236]	; (80012e0 <initSystem+0x130>)
 80011f2:	4a39      	ldr	r2, [pc, #228]	; (80012d8 <initSystem+0x128>)
 80011f4:	601a      	str	r2, [r3, #0]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinNumber			= PIN_3;
 80011f6:	4b3a      	ldr	r3, [pc, #232]	; (80012e0 <initSystem+0x130>)
 80011f8:	2203      	movs	r2, #3
 80011fa:	711a      	strb	r2, [r3, #4]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 80011fc:	4b38      	ldr	r3, [pc, #224]	; (80012e0 <initSystem+0x130>)
 80011fe:	2202      	movs	r2, #2
 8001200:	715a      	strb	r2, [r3, #5]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 8001202:	4b37      	ldr	r3, [pc, #220]	; (80012e0 <initSystem+0x130>)
 8001204:	2200      	movs	r2, #0
 8001206:	721a      	strb	r2, [r3, #8]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 8001208:	4b35      	ldr	r3, [pc, #212]	; (80012e0 <initSystem+0x130>)
 800120a:	2200      	movs	r2, #0
 800120c:	71da      	strb	r2, [r3, #7]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_MEDIUM;
 800120e:	4b34      	ldr	r3, [pc, #208]	; (80012e0 <initSystem+0x130>)
 8001210:	2201      	movs	r2, #1
 8001212:	719a      	strb	r2, [r3, #6]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinAltFunMode 		= AF7;
 8001214:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <initSystem+0x130>)
 8001216:	2207      	movs	r2, #7
 8001218:	725a      	strb	r2, [r3, #9]

	// Configuración del pin PA2 USB TX
	handlerUSBTX.pGPIOx									= GPIOA;
 800121a:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <initSystem+0x134>)
 800121c:	4a2e      	ldr	r2, [pc, #184]	; (80012d8 <initSystem+0x128>)
 800121e:	601a      	str	r2, [r3, #0]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinNumber			= PIN_2;
 8001220:	4b30      	ldr	r3, [pc, #192]	; (80012e4 <initSystem+0x134>)
 8001222:	2202      	movs	r2, #2
 8001224:	711a      	strb	r2, [r3, #4]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 8001226:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <initSystem+0x134>)
 8001228:	2202      	movs	r2, #2
 800122a:	715a      	strb	r2, [r3, #5]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 800122c:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <initSystem+0x134>)
 800122e:	2200      	movs	r2, #0
 8001230:	721a      	strb	r2, [r3, #8]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 8001232:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <initSystem+0x134>)
 8001234:	2200      	movs	r2, #0
 8001236:	71da      	strb	r2, [r3, #7]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_MEDIUM;
 8001238:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <initSystem+0x134>)
 800123a:	2201      	movs	r2, #1
 800123c:	719a      	strb	r2, [r3, #6]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinAltFunMode 		= AF7;
 800123e:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <initSystem+0x134>)
 8001240:	2207      	movs	r2, #7
 8001242:	725a      	strb	r2, [r3, #9]

	// Configuración del USART del USB para RXTX
	handlerUsart2.ptrUSARTx								= USART2;
 8001244:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <initSystem+0x138>)
 8001246:	4a29      	ldr	r2, [pc, #164]	; (80012ec <initSystem+0x13c>)
 8001248:	601a      	str	r2, [r3, #0]
	handlerUsart2.USART_Config.USART_mode				= USART_MODE_RXTX;
 800124a:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <initSystem+0x138>)
 800124c:	2202      	movs	r2, #2
 800124e:	711a      	strb	r2, [r3, #4]
	handlerUsart2.USART_Config.USART_baudrate			= USART_BAUDRATE_19200;
 8001250:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <initSystem+0x138>)
 8001252:	2201      	movs	r2, #1
 8001254:	715a      	strb	r2, [r3, #5]
	handlerUsart2.USART_Config.USART_datasize			= USART_DATASIZE_8BIT;
 8001256:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <initSystem+0x138>)
 8001258:	2200      	movs	r2, #0
 800125a:	719a      	strb	r2, [r3, #6]
	handlerUsart2.USART_Config.USART_parity				= USART_PARITY_ODD;
 800125c:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <initSystem+0x138>)
 800125e:	2201      	movs	r2, #1
 8001260:	71da      	strb	r2, [r3, #7]
	handlerUsart2.USART_Config.USART_stopbits			= USART_STOPBIT_1;
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <initSystem+0x138>)
 8001264:	2200      	movs	r2, #0
 8001266:	721a      	strb	r2, [r3, #8]
	handlerUsart2.USART_Config.USART_interrupt 			= USART_INTERRUPT_RX_ENABLE;
 8001268:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <initSystem+0x138>)
 800126a:	2200      	movs	r2, #0
 800126c:	725a      	strb	r2, [r3, #9]


	// Configuración del timer2
	handlerTimer2.ptrTIMx								= TIM2;
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <initSystem+0x140>)
 8001270:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001274:	601a      	str	r2, [r3, #0]
	handlerTimer2.timerConfig.Timer_mode				= TIMER_MODE_UP;
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <initSystem+0x140>)
 8001278:	2200      	movs	r2, #0
 800127a:	711a      	strb	r2, [r3, #4]
	handlerTimer2.timerConfig.Timer_speed				= TIMER_INCR_SPEED_1ms;
 800127c:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <initSystem+0x140>)
 800127e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001282:	80da      	strh	r2, [r3, #6]
	handlerTimer2.timerConfig.Timer_period				= 250;
 8001284:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <initSystem+0x140>)
 8001286:	22fa      	movs	r2, #250	; 0xfa
 8001288:	609a      	str	r2, [r3, #8]

	// Configuración del timer3
	handlerTimer3.ptrTIMx								= TIM3;
 800128a:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <initSystem+0x144>)
 800128c:	4a1a      	ldr	r2, [pc, #104]	; (80012f8 <initSystem+0x148>)
 800128e:	601a      	str	r2, [r3, #0]
	handlerTimer3.timerConfig.Timer_mode				= TIMER_MODE_UP;
 8001290:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <initSystem+0x144>)
 8001292:	2200      	movs	r2, #0
 8001294:	711a      	strb	r2, [r3, #4]
	handlerTimer3.timerConfig.Timer_speed				= TIMER_INCR_SPEED_1ms;
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <initSystem+0x144>)
 8001298:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800129c:	80da      	strh	r2, [r3, #6]
	handlerTimer3.timerConfig.Timer_period				= 500;
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <initSystem+0x144>)
 80012a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012a4:	609a      	str	r2, [r3, #8]

	//Cargamos la configuración
	GPIO_Config(&handlerStateLED);
 80012a6:	480b      	ldr	r0, [pc, #44]	; (80012d4 <initSystem+0x124>)
 80012a8:	f7ff f9ee 	bl	8000688 <GPIO_Config>
	adc_Config(&configADC);
 80012ac:	480b      	ldr	r0, [pc, #44]	; (80012dc <initSystem+0x12c>)
 80012ae:	f7ff f82f 	bl	8000310 <adc_Config>
	GPIO_Config(&handlerUSBRX);
 80012b2:	480b      	ldr	r0, [pc, #44]	; (80012e0 <initSystem+0x130>)
 80012b4:	f7ff f9e8 	bl	8000688 <GPIO_Config>
	GPIO_Config(&handlerUSBTX);
 80012b8:	480a      	ldr	r0, [pc, #40]	; (80012e4 <initSystem+0x134>)
 80012ba:	f7ff f9e5 	bl	8000688 <GPIO_Config>
	USART_Config(&handlerUsart2);
 80012be:	480a      	ldr	r0, [pc, #40]	; (80012e8 <initSystem+0x138>)
 80012c0:	f7ff fcae 	bl	8000c20 <USART_Config>
	Timer_Config(&handlerTimer2);
 80012c4:	480a      	ldr	r0, [pc, #40]	; (80012f0 <initSystem+0x140>)
 80012c6:	f7ff fb75 	bl	80009b4 <Timer_Config>
	Timer_Config(&handlerTimer3);
 80012ca:	480a      	ldr	r0, [pc, #40]	; (80012f4 <initSystem+0x144>)
 80012cc:	f7ff fb72 	bl	80009b4 <Timer_Config>
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000090 	.word	0x20000090
 80012d8:	40020000 	.word	0x40020000
 80012dc:	2000009c 	.word	0x2000009c
 80012e0:	200000bc 	.word	0x200000bc
 80012e4:	200000c8 	.word	0x200000c8
 80012e8:	200000d4 	.word	0x200000d4
 80012ec:	40004400 	.word	0x40004400
 80012f0:	200000a4 	.word	0x200000a4
 80012f4:	200000b0 	.word	0x200000b0
 80012f8:	40000400 	.word	0x40000400

080012fc <Timer2_Callback>:
//***********// CallBacks //***********//
void Timer2_Callback(void){
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
	handlerStateLED.pGPIOx -> ODR ^= GPIO_ODR_OD5;		// Encendido y apagado StateLED
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <Timer2_Callback+0x20>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	695a      	ldr	r2, [r3, #20]
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <Timer2_Callback+0x20>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f082 0220 	eor.w	r2, r2, #32
 800130e:	615a      	str	r2, [r3, #20]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000090 	.word	0x20000090

08001320 <Timer3_Callback>:

void Timer3_Callback(void){
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	startSingleADC();									// Lanzamos la conversión ADC
 8001324:	f7ff f8be 	bl	80004a4 <startSingleADC>
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}

0800132c <USART2_Callback>:

void USART2_Callback(void){
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	// Lectura de los datos recibidos
	rxData = returnData();
 8001330:	f7ff feae 	bl	8001090 <returnData>
 8001334:	4603      	mov	r3, r0
 8001336:	461a      	mov	r2, r3
 8001338:	4b01      	ldr	r3, [pc, #4]	; (8001340 <USART2_Callback+0x14>)
 800133a:	701a      	strb	r2, [r3, #0]
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000160 	.word	0x20000160

08001344 <adc_Complete_Callback>:

void adc_Complete_Callback(void){
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	// Cambiamos el valor de adcIsComplete
	adcData = getADC();
 8001348:	f7ff f8cc 	bl	80004e4 <getADC>
 800134c:	4603      	mov	r3, r0
 800134e:	461a      	mov	r2, r3
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <adc_Complete_Callback+0x1c>)
 8001352:	801a      	strh	r2, [r3, #0]
	adcIsComplete = true;
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <adc_Complete_Callback+0x20>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000162 	.word	0x20000162
 8001364:	20000161 	.word	0x20000161

08001368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001370:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <_sbrk+0x5c>)
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <_sbrk+0x60>)
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d102      	bne.n	800138a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <_sbrk+0x64>)
 8001386:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <_sbrk+0x68>)
 8001388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <_sbrk+0x64>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	429a      	cmp	r2, r3
 8001396:	d207      	bcs.n	80013a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001398:	f000 f846 	bl	8001428 <__errno>
 800139c:	4603      	mov	r3, r0
 800139e:	220c      	movs	r2, #12
 80013a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	e009      	b.n	80013bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	4a05      	ldr	r2, [pc, #20]	; (80013cc <_sbrk+0x64>)
 80013b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ba:	68fb      	ldr	r3, [r7, #12]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20020000 	.word	0x20020000
 80013c8:	00000400 	.word	0x00000400
 80013cc:	200001a8 	.word	0x200001a8
 80013d0:	200001c0 	.word	0x200001c0

080013d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013d4:	480d      	ldr	r0, [pc, #52]	; (800140c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013dc:	480c      	ldr	r0, [pc, #48]	; (8001410 <LoopForever+0x6>)
  ldr r1, =_edata
 80013de:	490d      	ldr	r1, [pc, #52]	; (8001414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013e0:	4a0d      	ldr	r2, [pc, #52]	; (8001418 <LoopForever+0xe>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <LoopForever+0x12>)
  ldr r4, =_ebss
 80013f4:	4c0a      	ldr	r4, [pc, #40]	; (8001420 <LoopForever+0x16>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001402:	f000 f817 	bl	8001434 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001406:	f7ff fe81 	bl	800110c <main>

0800140a <LoopForever>:

LoopForever:
    b LoopForever
 800140a:	e7fe      	b.n	800140a <LoopForever>
  ldr   r0, =_estack
 800140c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001414:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001418:	08001dbc 	.word	0x08001dbc
  ldr r2, =_sbss
 800141c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001420:	200001bc 	.word	0x200001bc

08001424 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001424:	e7fe      	b.n	8001424 <BusFault_Handler>
	...

08001428 <__errno>:
 8001428:	4b01      	ldr	r3, [pc, #4]	; (8001430 <__errno+0x8>)
 800142a:	6818      	ldr	r0, [r3, #0]
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000000 	.word	0x20000000

08001434 <__libc_init_array>:
 8001434:	b570      	push	{r4, r5, r6, lr}
 8001436:	4d0d      	ldr	r5, [pc, #52]	; (800146c <__libc_init_array+0x38>)
 8001438:	4c0d      	ldr	r4, [pc, #52]	; (8001470 <__libc_init_array+0x3c>)
 800143a:	1b64      	subs	r4, r4, r5
 800143c:	10a4      	asrs	r4, r4, #2
 800143e:	2600      	movs	r6, #0
 8001440:	42a6      	cmp	r6, r4
 8001442:	d109      	bne.n	8001458 <__libc_init_array+0x24>
 8001444:	4d0b      	ldr	r5, [pc, #44]	; (8001474 <__libc_init_array+0x40>)
 8001446:	4c0c      	ldr	r4, [pc, #48]	; (8001478 <__libc_init_array+0x44>)
 8001448:	f000 fc86 	bl	8001d58 <_init>
 800144c:	1b64      	subs	r4, r4, r5
 800144e:	10a4      	asrs	r4, r4, #2
 8001450:	2600      	movs	r6, #0
 8001452:	42a6      	cmp	r6, r4
 8001454:	d105      	bne.n	8001462 <__libc_init_array+0x2e>
 8001456:	bd70      	pop	{r4, r5, r6, pc}
 8001458:	f855 3b04 	ldr.w	r3, [r5], #4
 800145c:	4798      	blx	r3
 800145e:	3601      	adds	r6, #1
 8001460:	e7ee      	b.n	8001440 <__libc_init_array+0xc>
 8001462:	f855 3b04 	ldr.w	r3, [r5], #4
 8001466:	4798      	blx	r3
 8001468:	3601      	adds	r6, #1
 800146a:	e7f2      	b.n	8001452 <__libc_init_array+0x1e>
 800146c:	08001db4 	.word	0x08001db4
 8001470:	08001db4 	.word	0x08001db4
 8001474:	08001db4 	.word	0x08001db4
 8001478:	08001db8 	.word	0x08001db8

0800147c <siprintf>:
 800147c:	b40e      	push	{r1, r2, r3}
 800147e:	b500      	push	{lr}
 8001480:	b09c      	sub	sp, #112	; 0x70
 8001482:	ab1d      	add	r3, sp, #116	; 0x74
 8001484:	9002      	str	r0, [sp, #8]
 8001486:	9006      	str	r0, [sp, #24]
 8001488:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800148c:	4809      	ldr	r0, [pc, #36]	; (80014b4 <siprintf+0x38>)
 800148e:	9107      	str	r1, [sp, #28]
 8001490:	9104      	str	r1, [sp, #16]
 8001492:	4909      	ldr	r1, [pc, #36]	; (80014b8 <siprintf+0x3c>)
 8001494:	f853 2b04 	ldr.w	r2, [r3], #4
 8001498:	9105      	str	r1, [sp, #20]
 800149a:	6800      	ldr	r0, [r0, #0]
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	a902      	add	r1, sp, #8
 80014a0:	f000 f868 	bl	8001574 <_svfiprintf_r>
 80014a4:	9b02      	ldr	r3, [sp, #8]
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
 80014aa:	b01c      	add	sp, #112	; 0x70
 80014ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80014b0:	b003      	add	sp, #12
 80014b2:	4770      	bx	lr
 80014b4:	20000000 	.word	0x20000000
 80014b8:	ffff0208 	.word	0xffff0208

080014bc <__ssputs_r>:
 80014bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014c0:	688e      	ldr	r6, [r1, #8]
 80014c2:	429e      	cmp	r6, r3
 80014c4:	4682      	mov	sl, r0
 80014c6:	460c      	mov	r4, r1
 80014c8:	4690      	mov	r8, r2
 80014ca:	461f      	mov	r7, r3
 80014cc:	d838      	bhi.n	8001540 <__ssputs_r+0x84>
 80014ce:	898a      	ldrh	r2, [r1, #12]
 80014d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80014d4:	d032      	beq.n	800153c <__ssputs_r+0x80>
 80014d6:	6825      	ldr	r5, [r4, #0]
 80014d8:	6909      	ldr	r1, [r1, #16]
 80014da:	eba5 0901 	sub.w	r9, r5, r1
 80014de:	6965      	ldr	r5, [r4, #20]
 80014e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80014e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80014e8:	3301      	adds	r3, #1
 80014ea:	444b      	add	r3, r9
 80014ec:	106d      	asrs	r5, r5, #1
 80014ee:	429d      	cmp	r5, r3
 80014f0:	bf38      	it	cc
 80014f2:	461d      	movcc	r5, r3
 80014f4:	0553      	lsls	r3, r2, #21
 80014f6:	d531      	bpl.n	800155c <__ssputs_r+0xa0>
 80014f8:	4629      	mov	r1, r5
 80014fa:	f000 fb63 	bl	8001bc4 <_malloc_r>
 80014fe:	4606      	mov	r6, r0
 8001500:	b950      	cbnz	r0, 8001518 <__ssputs_r+0x5c>
 8001502:	230c      	movs	r3, #12
 8001504:	f8ca 3000 	str.w	r3, [sl]
 8001508:	89a3      	ldrh	r3, [r4, #12]
 800150a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800150e:	81a3      	strh	r3, [r4, #12]
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001518:	6921      	ldr	r1, [r4, #16]
 800151a:	464a      	mov	r2, r9
 800151c:	f000 fabe 	bl	8001a9c <memcpy>
 8001520:	89a3      	ldrh	r3, [r4, #12]
 8001522:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800152a:	81a3      	strh	r3, [r4, #12]
 800152c:	6126      	str	r6, [r4, #16]
 800152e:	6165      	str	r5, [r4, #20]
 8001530:	444e      	add	r6, r9
 8001532:	eba5 0509 	sub.w	r5, r5, r9
 8001536:	6026      	str	r6, [r4, #0]
 8001538:	60a5      	str	r5, [r4, #8]
 800153a:	463e      	mov	r6, r7
 800153c:	42be      	cmp	r6, r7
 800153e:	d900      	bls.n	8001542 <__ssputs_r+0x86>
 8001540:	463e      	mov	r6, r7
 8001542:	6820      	ldr	r0, [r4, #0]
 8001544:	4632      	mov	r2, r6
 8001546:	4641      	mov	r1, r8
 8001548:	f000 fab6 	bl	8001ab8 <memmove>
 800154c:	68a3      	ldr	r3, [r4, #8]
 800154e:	1b9b      	subs	r3, r3, r6
 8001550:	60a3      	str	r3, [r4, #8]
 8001552:	6823      	ldr	r3, [r4, #0]
 8001554:	4433      	add	r3, r6
 8001556:	6023      	str	r3, [r4, #0]
 8001558:	2000      	movs	r0, #0
 800155a:	e7db      	b.n	8001514 <__ssputs_r+0x58>
 800155c:	462a      	mov	r2, r5
 800155e:	f000 fba5 	bl	8001cac <_realloc_r>
 8001562:	4606      	mov	r6, r0
 8001564:	2800      	cmp	r0, #0
 8001566:	d1e1      	bne.n	800152c <__ssputs_r+0x70>
 8001568:	6921      	ldr	r1, [r4, #16]
 800156a:	4650      	mov	r0, sl
 800156c:	f000 fabe 	bl	8001aec <_free_r>
 8001570:	e7c7      	b.n	8001502 <__ssputs_r+0x46>
	...

08001574 <_svfiprintf_r>:
 8001574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001578:	4698      	mov	r8, r3
 800157a:	898b      	ldrh	r3, [r1, #12]
 800157c:	061b      	lsls	r3, r3, #24
 800157e:	b09d      	sub	sp, #116	; 0x74
 8001580:	4607      	mov	r7, r0
 8001582:	460d      	mov	r5, r1
 8001584:	4614      	mov	r4, r2
 8001586:	d50e      	bpl.n	80015a6 <_svfiprintf_r+0x32>
 8001588:	690b      	ldr	r3, [r1, #16]
 800158a:	b963      	cbnz	r3, 80015a6 <_svfiprintf_r+0x32>
 800158c:	2140      	movs	r1, #64	; 0x40
 800158e:	f000 fb19 	bl	8001bc4 <_malloc_r>
 8001592:	6028      	str	r0, [r5, #0]
 8001594:	6128      	str	r0, [r5, #16]
 8001596:	b920      	cbnz	r0, 80015a2 <_svfiprintf_r+0x2e>
 8001598:	230c      	movs	r3, #12
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	e0d1      	b.n	8001746 <_svfiprintf_r+0x1d2>
 80015a2:	2340      	movs	r3, #64	; 0x40
 80015a4:	616b      	str	r3, [r5, #20]
 80015a6:	2300      	movs	r3, #0
 80015a8:	9309      	str	r3, [sp, #36]	; 0x24
 80015aa:	2320      	movs	r3, #32
 80015ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80015b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80015b4:	2330      	movs	r3, #48	; 0x30
 80015b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001760 <_svfiprintf_r+0x1ec>
 80015ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80015be:	f04f 0901 	mov.w	r9, #1
 80015c2:	4623      	mov	r3, r4
 80015c4:	469a      	mov	sl, r3
 80015c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80015ca:	b10a      	cbz	r2, 80015d0 <_svfiprintf_r+0x5c>
 80015cc:	2a25      	cmp	r2, #37	; 0x25
 80015ce:	d1f9      	bne.n	80015c4 <_svfiprintf_r+0x50>
 80015d0:	ebba 0b04 	subs.w	fp, sl, r4
 80015d4:	d00b      	beq.n	80015ee <_svfiprintf_r+0x7a>
 80015d6:	465b      	mov	r3, fp
 80015d8:	4622      	mov	r2, r4
 80015da:	4629      	mov	r1, r5
 80015dc:	4638      	mov	r0, r7
 80015de:	f7ff ff6d 	bl	80014bc <__ssputs_r>
 80015e2:	3001      	adds	r0, #1
 80015e4:	f000 80aa 	beq.w	800173c <_svfiprintf_r+0x1c8>
 80015e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80015ea:	445a      	add	r2, fp
 80015ec:	9209      	str	r2, [sp, #36]	; 0x24
 80015ee:	f89a 3000 	ldrb.w	r3, [sl]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 80a2 	beq.w	800173c <_svfiprintf_r+0x1c8>
 80015f8:	2300      	movs	r3, #0
 80015fa:	f04f 32ff 	mov.w	r2, #4294967295
 80015fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001602:	f10a 0a01 	add.w	sl, sl, #1
 8001606:	9304      	str	r3, [sp, #16]
 8001608:	9307      	str	r3, [sp, #28]
 800160a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800160e:	931a      	str	r3, [sp, #104]	; 0x68
 8001610:	4654      	mov	r4, sl
 8001612:	2205      	movs	r2, #5
 8001614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001618:	4851      	ldr	r0, [pc, #324]	; (8001760 <_svfiprintf_r+0x1ec>)
 800161a:	f7fe fde1 	bl	80001e0 <memchr>
 800161e:	9a04      	ldr	r2, [sp, #16]
 8001620:	b9d8      	cbnz	r0, 800165a <_svfiprintf_r+0xe6>
 8001622:	06d0      	lsls	r0, r2, #27
 8001624:	bf44      	itt	mi
 8001626:	2320      	movmi	r3, #32
 8001628:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800162c:	0711      	lsls	r1, r2, #28
 800162e:	bf44      	itt	mi
 8001630:	232b      	movmi	r3, #43	; 0x2b
 8001632:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001636:	f89a 3000 	ldrb.w	r3, [sl]
 800163a:	2b2a      	cmp	r3, #42	; 0x2a
 800163c:	d015      	beq.n	800166a <_svfiprintf_r+0xf6>
 800163e:	9a07      	ldr	r2, [sp, #28]
 8001640:	4654      	mov	r4, sl
 8001642:	2000      	movs	r0, #0
 8001644:	f04f 0c0a 	mov.w	ip, #10
 8001648:	4621      	mov	r1, r4
 800164a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800164e:	3b30      	subs	r3, #48	; 0x30
 8001650:	2b09      	cmp	r3, #9
 8001652:	d94e      	bls.n	80016f2 <_svfiprintf_r+0x17e>
 8001654:	b1b0      	cbz	r0, 8001684 <_svfiprintf_r+0x110>
 8001656:	9207      	str	r2, [sp, #28]
 8001658:	e014      	b.n	8001684 <_svfiprintf_r+0x110>
 800165a:	eba0 0308 	sub.w	r3, r0, r8
 800165e:	fa09 f303 	lsl.w	r3, r9, r3
 8001662:	4313      	orrs	r3, r2
 8001664:	9304      	str	r3, [sp, #16]
 8001666:	46a2      	mov	sl, r4
 8001668:	e7d2      	b.n	8001610 <_svfiprintf_r+0x9c>
 800166a:	9b03      	ldr	r3, [sp, #12]
 800166c:	1d19      	adds	r1, r3, #4
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	9103      	str	r1, [sp, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	bfbb      	ittet	lt
 8001676:	425b      	neglt	r3, r3
 8001678:	f042 0202 	orrlt.w	r2, r2, #2
 800167c:	9307      	strge	r3, [sp, #28]
 800167e:	9307      	strlt	r3, [sp, #28]
 8001680:	bfb8      	it	lt
 8001682:	9204      	strlt	r2, [sp, #16]
 8001684:	7823      	ldrb	r3, [r4, #0]
 8001686:	2b2e      	cmp	r3, #46	; 0x2e
 8001688:	d10c      	bne.n	80016a4 <_svfiprintf_r+0x130>
 800168a:	7863      	ldrb	r3, [r4, #1]
 800168c:	2b2a      	cmp	r3, #42	; 0x2a
 800168e:	d135      	bne.n	80016fc <_svfiprintf_r+0x188>
 8001690:	9b03      	ldr	r3, [sp, #12]
 8001692:	1d1a      	adds	r2, r3, #4
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	9203      	str	r2, [sp, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	bfb8      	it	lt
 800169c:	f04f 33ff 	movlt.w	r3, #4294967295
 80016a0:	3402      	adds	r4, #2
 80016a2:	9305      	str	r3, [sp, #20]
 80016a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001770 <_svfiprintf_r+0x1fc>
 80016a8:	7821      	ldrb	r1, [r4, #0]
 80016aa:	2203      	movs	r2, #3
 80016ac:	4650      	mov	r0, sl
 80016ae:	f7fe fd97 	bl	80001e0 <memchr>
 80016b2:	b140      	cbz	r0, 80016c6 <_svfiprintf_r+0x152>
 80016b4:	2340      	movs	r3, #64	; 0x40
 80016b6:	eba0 000a 	sub.w	r0, r0, sl
 80016ba:	fa03 f000 	lsl.w	r0, r3, r0
 80016be:	9b04      	ldr	r3, [sp, #16]
 80016c0:	4303      	orrs	r3, r0
 80016c2:	3401      	adds	r4, #1
 80016c4:	9304      	str	r3, [sp, #16]
 80016c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016ca:	4826      	ldr	r0, [pc, #152]	; (8001764 <_svfiprintf_r+0x1f0>)
 80016cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80016d0:	2206      	movs	r2, #6
 80016d2:	f7fe fd85 	bl	80001e0 <memchr>
 80016d6:	2800      	cmp	r0, #0
 80016d8:	d038      	beq.n	800174c <_svfiprintf_r+0x1d8>
 80016da:	4b23      	ldr	r3, [pc, #140]	; (8001768 <_svfiprintf_r+0x1f4>)
 80016dc:	bb1b      	cbnz	r3, 8001726 <_svfiprintf_r+0x1b2>
 80016de:	9b03      	ldr	r3, [sp, #12]
 80016e0:	3307      	adds	r3, #7
 80016e2:	f023 0307 	bic.w	r3, r3, #7
 80016e6:	3308      	adds	r3, #8
 80016e8:	9303      	str	r3, [sp, #12]
 80016ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016ec:	4433      	add	r3, r6
 80016ee:	9309      	str	r3, [sp, #36]	; 0x24
 80016f0:	e767      	b.n	80015c2 <_svfiprintf_r+0x4e>
 80016f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80016f6:	460c      	mov	r4, r1
 80016f8:	2001      	movs	r0, #1
 80016fa:	e7a5      	b.n	8001648 <_svfiprintf_r+0xd4>
 80016fc:	2300      	movs	r3, #0
 80016fe:	3401      	adds	r4, #1
 8001700:	9305      	str	r3, [sp, #20]
 8001702:	4619      	mov	r1, r3
 8001704:	f04f 0c0a 	mov.w	ip, #10
 8001708:	4620      	mov	r0, r4
 800170a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800170e:	3a30      	subs	r2, #48	; 0x30
 8001710:	2a09      	cmp	r2, #9
 8001712:	d903      	bls.n	800171c <_svfiprintf_r+0x1a8>
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0c5      	beq.n	80016a4 <_svfiprintf_r+0x130>
 8001718:	9105      	str	r1, [sp, #20]
 800171a:	e7c3      	b.n	80016a4 <_svfiprintf_r+0x130>
 800171c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001720:	4604      	mov	r4, r0
 8001722:	2301      	movs	r3, #1
 8001724:	e7f0      	b.n	8001708 <_svfiprintf_r+0x194>
 8001726:	ab03      	add	r3, sp, #12
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	462a      	mov	r2, r5
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <_svfiprintf_r+0x1f8>)
 800172e:	a904      	add	r1, sp, #16
 8001730:	4638      	mov	r0, r7
 8001732:	f3af 8000 	nop.w
 8001736:	1c42      	adds	r2, r0, #1
 8001738:	4606      	mov	r6, r0
 800173a:	d1d6      	bne.n	80016ea <_svfiprintf_r+0x176>
 800173c:	89ab      	ldrh	r3, [r5, #12]
 800173e:	065b      	lsls	r3, r3, #25
 8001740:	f53f af2c 	bmi.w	800159c <_svfiprintf_r+0x28>
 8001744:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001746:	b01d      	add	sp, #116	; 0x74
 8001748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800174c:	ab03      	add	r3, sp, #12
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	462a      	mov	r2, r5
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <_svfiprintf_r+0x1f8>)
 8001754:	a904      	add	r1, sp, #16
 8001756:	4638      	mov	r0, r7
 8001758:	f000 f87a 	bl	8001850 <_printf_i>
 800175c:	e7eb      	b.n	8001736 <_svfiprintf_r+0x1c2>
 800175e:	bf00      	nop
 8001760:	08001d80 	.word	0x08001d80
 8001764:	08001d8a 	.word	0x08001d8a
 8001768:	00000000 	.word	0x00000000
 800176c:	080014bd 	.word	0x080014bd
 8001770:	08001d86 	.word	0x08001d86

08001774 <_printf_common>:
 8001774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001778:	4616      	mov	r6, r2
 800177a:	4699      	mov	r9, r3
 800177c:	688a      	ldr	r2, [r1, #8]
 800177e:	690b      	ldr	r3, [r1, #16]
 8001780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001784:	4293      	cmp	r3, r2
 8001786:	bfb8      	it	lt
 8001788:	4613      	movlt	r3, r2
 800178a:	6033      	str	r3, [r6, #0]
 800178c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001790:	4607      	mov	r7, r0
 8001792:	460c      	mov	r4, r1
 8001794:	b10a      	cbz	r2, 800179a <_printf_common+0x26>
 8001796:	3301      	adds	r3, #1
 8001798:	6033      	str	r3, [r6, #0]
 800179a:	6823      	ldr	r3, [r4, #0]
 800179c:	0699      	lsls	r1, r3, #26
 800179e:	bf42      	ittt	mi
 80017a0:	6833      	ldrmi	r3, [r6, #0]
 80017a2:	3302      	addmi	r3, #2
 80017a4:	6033      	strmi	r3, [r6, #0]
 80017a6:	6825      	ldr	r5, [r4, #0]
 80017a8:	f015 0506 	ands.w	r5, r5, #6
 80017ac:	d106      	bne.n	80017bc <_printf_common+0x48>
 80017ae:	f104 0a19 	add.w	sl, r4, #25
 80017b2:	68e3      	ldr	r3, [r4, #12]
 80017b4:	6832      	ldr	r2, [r6, #0]
 80017b6:	1a9b      	subs	r3, r3, r2
 80017b8:	42ab      	cmp	r3, r5
 80017ba:	dc26      	bgt.n	800180a <_printf_common+0x96>
 80017bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80017c0:	1e13      	subs	r3, r2, #0
 80017c2:	6822      	ldr	r2, [r4, #0]
 80017c4:	bf18      	it	ne
 80017c6:	2301      	movne	r3, #1
 80017c8:	0692      	lsls	r2, r2, #26
 80017ca:	d42b      	bmi.n	8001824 <_printf_common+0xb0>
 80017cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80017d0:	4649      	mov	r1, r9
 80017d2:	4638      	mov	r0, r7
 80017d4:	47c0      	blx	r8
 80017d6:	3001      	adds	r0, #1
 80017d8:	d01e      	beq.n	8001818 <_printf_common+0xa4>
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	68e5      	ldr	r5, [r4, #12]
 80017de:	6832      	ldr	r2, [r6, #0]
 80017e0:	f003 0306 	and.w	r3, r3, #6
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	bf08      	it	eq
 80017e8:	1aad      	subeq	r5, r5, r2
 80017ea:	68a3      	ldr	r3, [r4, #8]
 80017ec:	6922      	ldr	r2, [r4, #16]
 80017ee:	bf0c      	ite	eq
 80017f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80017f4:	2500      	movne	r5, #0
 80017f6:	4293      	cmp	r3, r2
 80017f8:	bfc4      	itt	gt
 80017fa:	1a9b      	subgt	r3, r3, r2
 80017fc:	18ed      	addgt	r5, r5, r3
 80017fe:	2600      	movs	r6, #0
 8001800:	341a      	adds	r4, #26
 8001802:	42b5      	cmp	r5, r6
 8001804:	d11a      	bne.n	800183c <_printf_common+0xc8>
 8001806:	2000      	movs	r0, #0
 8001808:	e008      	b.n	800181c <_printf_common+0xa8>
 800180a:	2301      	movs	r3, #1
 800180c:	4652      	mov	r2, sl
 800180e:	4649      	mov	r1, r9
 8001810:	4638      	mov	r0, r7
 8001812:	47c0      	blx	r8
 8001814:	3001      	adds	r0, #1
 8001816:	d103      	bne.n	8001820 <_printf_common+0xac>
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001820:	3501      	adds	r5, #1
 8001822:	e7c6      	b.n	80017b2 <_printf_common+0x3e>
 8001824:	18e1      	adds	r1, r4, r3
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	2030      	movs	r0, #48	; 0x30
 800182a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800182e:	4422      	add	r2, r4
 8001830:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001834:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001838:	3302      	adds	r3, #2
 800183a:	e7c7      	b.n	80017cc <_printf_common+0x58>
 800183c:	2301      	movs	r3, #1
 800183e:	4622      	mov	r2, r4
 8001840:	4649      	mov	r1, r9
 8001842:	4638      	mov	r0, r7
 8001844:	47c0      	blx	r8
 8001846:	3001      	adds	r0, #1
 8001848:	d0e6      	beq.n	8001818 <_printf_common+0xa4>
 800184a:	3601      	adds	r6, #1
 800184c:	e7d9      	b.n	8001802 <_printf_common+0x8e>
	...

08001850 <_printf_i>:
 8001850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001854:	7e0f      	ldrb	r7, [r1, #24]
 8001856:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001858:	2f78      	cmp	r7, #120	; 0x78
 800185a:	4691      	mov	r9, r2
 800185c:	4680      	mov	r8, r0
 800185e:	460c      	mov	r4, r1
 8001860:	469a      	mov	sl, r3
 8001862:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001866:	d807      	bhi.n	8001878 <_printf_i+0x28>
 8001868:	2f62      	cmp	r7, #98	; 0x62
 800186a:	d80a      	bhi.n	8001882 <_printf_i+0x32>
 800186c:	2f00      	cmp	r7, #0
 800186e:	f000 80d8 	beq.w	8001a22 <_printf_i+0x1d2>
 8001872:	2f58      	cmp	r7, #88	; 0x58
 8001874:	f000 80a3 	beq.w	80019be <_printf_i+0x16e>
 8001878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800187c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001880:	e03a      	b.n	80018f8 <_printf_i+0xa8>
 8001882:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001886:	2b15      	cmp	r3, #21
 8001888:	d8f6      	bhi.n	8001878 <_printf_i+0x28>
 800188a:	a101      	add	r1, pc, #4	; (adr r1, 8001890 <_printf_i+0x40>)
 800188c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001890:	080018e9 	.word	0x080018e9
 8001894:	080018fd 	.word	0x080018fd
 8001898:	08001879 	.word	0x08001879
 800189c:	08001879 	.word	0x08001879
 80018a0:	08001879 	.word	0x08001879
 80018a4:	08001879 	.word	0x08001879
 80018a8:	080018fd 	.word	0x080018fd
 80018ac:	08001879 	.word	0x08001879
 80018b0:	08001879 	.word	0x08001879
 80018b4:	08001879 	.word	0x08001879
 80018b8:	08001879 	.word	0x08001879
 80018bc:	08001a09 	.word	0x08001a09
 80018c0:	0800192d 	.word	0x0800192d
 80018c4:	080019eb 	.word	0x080019eb
 80018c8:	08001879 	.word	0x08001879
 80018cc:	08001879 	.word	0x08001879
 80018d0:	08001a2b 	.word	0x08001a2b
 80018d4:	08001879 	.word	0x08001879
 80018d8:	0800192d 	.word	0x0800192d
 80018dc:	08001879 	.word	0x08001879
 80018e0:	08001879 	.word	0x08001879
 80018e4:	080019f3 	.word	0x080019f3
 80018e8:	682b      	ldr	r3, [r5, #0]
 80018ea:	1d1a      	adds	r2, r3, #4
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	602a      	str	r2, [r5, #0]
 80018f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80018f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0a3      	b.n	8001a44 <_printf_i+0x1f4>
 80018fc:	6820      	ldr	r0, [r4, #0]
 80018fe:	6829      	ldr	r1, [r5, #0]
 8001900:	0606      	lsls	r6, r0, #24
 8001902:	f101 0304 	add.w	r3, r1, #4
 8001906:	d50a      	bpl.n	800191e <_printf_i+0xce>
 8001908:	680e      	ldr	r6, [r1, #0]
 800190a:	602b      	str	r3, [r5, #0]
 800190c:	2e00      	cmp	r6, #0
 800190e:	da03      	bge.n	8001918 <_printf_i+0xc8>
 8001910:	232d      	movs	r3, #45	; 0x2d
 8001912:	4276      	negs	r6, r6
 8001914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001918:	485e      	ldr	r0, [pc, #376]	; (8001a94 <_printf_i+0x244>)
 800191a:	230a      	movs	r3, #10
 800191c:	e019      	b.n	8001952 <_printf_i+0x102>
 800191e:	680e      	ldr	r6, [r1, #0]
 8001920:	602b      	str	r3, [r5, #0]
 8001922:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001926:	bf18      	it	ne
 8001928:	b236      	sxthne	r6, r6
 800192a:	e7ef      	b.n	800190c <_printf_i+0xbc>
 800192c:	682b      	ldr	r3, [r5, #0]
 800192e:	6820      	ldr	r0, [r4, #0]
 8001930:	1d19      	adds	r1, r3, #4
 8001932:	6029      	str	r1, [r5, #0]
 8001934:	0601      	lsls	r1, r0, #24
 8001936:	d501      	bpl.n	800193c <_printf_i+0xec>
 8001938:	681e      	ldr	r6, [r3, #0]
 800193a:	e002      	b.n	8001942 <_printf_i+0xf2>
 800193c:	0646      	lsls	r6, r0, #25
 800193e:	d5fb      	bpl.n	8001938 <_printf_i+0xe8>
 8001940:	881e      	ldrh	r6, [r3, #0]
 8001942:	4854      	ldr	r0, [pc, #336]	; (8001a94 <_printf_i+0x244>)
 8001944:	2f6f      	cmp	r7, #111	; 0x6f
 8001946:	bf0c      	ite	eq
 8001948:	2308      	moveq	r3, #8
 800194a:	230a      	movne	r3, #10
 800194c:	2100      	movs	r1, #0
 800194e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001952:	6865      	ldr	r5, [r4, #4]
 8001954:	60a5      	str	r5, [r4, #8]
 8001956:	2d00      	cmp	r5, #0
 8001958:	bfa2      	ittt	ge
 800195a:	6821      	ldrge	r1, [r4, #0]
 800195c:	f021 0104 	bicge.w	r1, r1, #4
 8001960:	6021      	strge	r1, [r4, #0]
 8001962:	b90e      	cbnz	r6, 8001968 <_printf_i+0x118>
 8001964:	2d00      	cmp	r5, #0
 8001966:	d04d      	beq.n	8001a04 <_printf_i+0x1b4>
 8001968:	4615      	mov	r5, r2
 800196a:	fbb6 f1f3 	udiv	r1, r6, r3
 800196e:	fb03 6711 	mls	r7, r3, r1, r6
 8001972:	5dc7      	ldrb	r7, [r0, r7]
 8001974:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001978:	4637      	mov	r7, r6
 800197a:	42bb      	cmp	r3, r7
 800197c:	460e      	mov	r6, r1
 800197e:	d9f4      	bls.n	800196a <_printf_i+0x11a>
 8001980:	2b08      	cmp	r3, #8
 8001982:	d10b      	bne.n	800199c <_printf_i+0x14c>
 8001984:	6823      	ldr	r3, [r4, #0]
 8001986:	07de      	lsls	r6, r3, #31
 8001988:	d508      	bpl.n	800199c <_printf_i+0x14c>
 800198a:	6923      	ldr	r3, [r4, #16]
 800198c:	6861      	ldr	r1, [r4, #4]
 800198e:	4299      	cmp	r1, r3
 8001990:	bfde      	ittt	le
 8001992:	2330      	movle	r3, #48	; 0x30
 8001994:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001998:	f105 35ff 	addle.w	r5, r5, #4294967295
 800199c:	1b52      	subs	r2, r2, r5
 800199e:	6122      	str	r2, [r4, #16]
 80019a0:	f8cd a000 	str.w	sl, [sp]
 80019a4:	464b      	mov	r3, r9
 80019a6:	aa03      	add	r2, sp, #12
 80019a8:	4621      	mov	r1, r4
 80019aa:	4640      	mov	r0, r8
 80019ac:	f7ff fee2 	bl	8001774 <_printf_common>
 80019b0:	3001      	adds	r0, #1
 80019b2:	d14c      	bne.n	8001a4e <_printf_i+0x1fe>
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	b004      	add	sp, #16
 80019ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019be:	4835      	ldr	r0, [pc, #212]	; (8001a94 <_printf_i+0x244>)
 80019c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80019c4:	6829      	ldr	r1, [r5, #0]
 80019c6:	6823      	ldr	r3, [r4, #0]
 80019c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80019cc:	6029      	str	r1, [r5, #0]
 80019ce:	061d      	lsls	r5, r3, #24
 80019d0:	d514      	bpl.n	80019fc <_printf_i+0x1ac>
 80019d2:	07df      	lsls	r7, r3, #31
 80019d4:	bf44      	itt	mi
 80019d6:	f043 0320 	orrmi.w	r3, r3, #32
 80019da:	6023      	strmi	r3, [r4, #0]
 80019dc:	b91e      	cbnz	r6, 80019e6 <_printf_i+0x196>
 80019de:	6823      	ldr	r3, [r4, #0]
 80019e0:	f023 0320 	bic.w	r3, r3, #32
 80019e4:	6023      	str	r3, [r4, #0]
 80019e6:	2310      	movs	r3, #16
 80019e8:	e7b0      	b.n	800194c <_printf_i+0xfc>
 80019ea:	6823      	ldr	r3, [r4, #0]
 80019ec:	f043 0320 	orr.w	r3, r3, #32
 80019f0:	6023      	str	r3, [r4, #0]
 80019f2:	2378      	movs	r3, #120	; 0x78
 80019f4:	4828      	ldr	r0, [pc, #160]	; (8001a98 <_printf_i+0x248>)
 80019f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80019fa:	e7e3      	b.n	80019c4 <_printf_i+0x174>
 80019fc:	0659      	lsls	r1, r3, #25
 80019fe:	bf48      	it	mi
 8001a00:	b2b6      	uxthmi	r6, r6
 8001a02:	e7e6      	b.n	80019d2 <_printf_i+0x182>
 8001a04:	4615      	mov	r5, r2
 8001a06:	e7bb      	b.n	8001980 <_printf_i+0x130>
 8001a08:	682b      	ldr	r3, [r5, #0]
 8001a0a:	6826      	ldr	r6, [r4, #0]
 8001a0c:	6961      	ldr	r1, [r4, #20]
 8001a0e:	1d18      	adds	r0, r3, #4
 8001a10:	6028      	str	r0, [r5, #0]
 8001a12:	0635      	lsls	r5, r6, #24
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	d501      	bpl.n	8001a1c <_printf_i+0x1cc>
 8001a18:	6019      	str	r1, [r3, #0]
 8001a1a:	e002      	b.n	8001a22 <_printf_i+0x1d2>
 8001a1c:	0670      	lsls	r0, r6, #25
 8001a1e:	d5fb      	bpl.n	8001a18 <_printf_i+0x1c8>
 8001a20:	8019      	strh	r1, [r3, #0]
 8001a22:	2300      	movs	r3, #0
 8001a24:	6123      	str	r3, [r4, #16]
 8001a26:	4615      	mov	r5, r2
 8001a28:	e7ba      	b.n	80019a0 <_printf_i+0x150>
 8001a2a:	682b      	ldr	r3, [r5, #0]
 8001a2c:	1d1a      	adds	r2, r3, #4
 8001a2e:	602a      	str	r2, [r5, #0]
 8001a30:	681d      	ldr	r5, [r3, #0]
 8001a32:	6862      	ldr	r2, [r4, #4]
 8001a34:	2100      	movs	r1, #0
 8001a36:	4628      	mov	r0, r5
 8001a38:	f7fe fbd2 	bl	80001e0 <memchr>
 8001a3c:	b108      	cbz	r0, 8001a42 <_printf_i+0x1f2>
 8001a3e:	1b40      	subs	r0, r0, r5
 8001a40:	6060      	str	r0, [r4, #4]
 8001a42:	6863      	ldr	r3, [r4, #4]
 8001a44:	6123      	str	r3, [r4, #16]
 8001a46:	2300      	movs	r3, #0
 8001a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a4c:	e7a8      	b.n	80019a0 <_printf_i+0x150>
 8001a4e:	6923      	ldr	r3, [r4, #16]
 8001a50:	462a      	mov	r2, r5
 8001a52:	4649      	mov	r1, r9
 8001a54:	4640      	mov	r0, r8
 8001a56:	47d0      	blx	sl
 8001a58:	3001      	adds	r0, #1
 8001a5a:	d0ab      	beq.n	80019b4 <_printf_i+0x164>
 8001a5c:	6823      	ldr	r3, [r4, #0]
 8001a5e:	079b      	lsls	r3, r3, #30
 8001a60:	d413      	bmi.n	8001a8a <_printf_i+0x23a>
 8001a62:	68e0      	ldr	r0, [r4, #12]
 8001a64:	9b03      	ldr	r3, [sp, #12]
 8001a66:	4298      	cmp	r0, r3
 8001a68:	bfb8      	it	lt
 8001a6a:	4618      	movlt	r0, r3
 8001a6c:	e7a4      	b.n	80019b8 <_printf_i+0x168>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	4632      	mov	r2, r6
 8001a72:	4649      	mov	r1, r9
 8001a74:	4640      	mov	r0, r8
 8001a76:	47d0      	blx	sl
 8001a78:	3001      	adds	r0, #1
 8001a7a:	d09b      	beq.n	80019b4 <_printf_i+0x164>
 8001a7c:	3501      	adds	r5, #1
 8001a7e:	68e3      	ldr	r3, [r4, #12]
 8001a80:	9903      	ldr	r1, [sp, #12]
 8001a82:	1a5b      	subs	r3, r3, r1
 8001a84:	42ab      	cmp	r3, r5
 8001a86:	dcf2      	bgt.n	8001a6e <_printf_i+0x21e>
 8001a88:	e7eb      	b.n	8001a62 <_printf_i+0x212>
 8001a8a:	2500      	movs	r5, #0
 8001a8c:	f104 0619 	add.w	r6, r4, #25
 8001a90:	e7f5      	b.n	8001a7e <_printf_i+0x22e>
 8001a92:	bf00      	nop
 8001a94:	08001d91 	.word	0x08001d91
 8001a98:	08001da2 	.word	0x08001da2

08001a9c <memcpy>:
 8001a9c:	440a      	add	r2, r1
 8001a9e:	4291      	cmp	r1, r2
 8001aa0:	f100 33ff 	add.w	r3, r0, #4294967295
 8001aa4:	d100      	bne.n	8001aa8 <memcpy+0xc>
 8001aa6:	4770      	bx	lr
 8001aa8:	b510      	push	{r4, lr}
 8001aaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001aae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001ab2:	4291      	cmp	r1, r2
 8001ab4:	d1f9      	bne.n	8001aaa <memcpy+0xe>
 8001ab6:	bd10      	pop	{r4, pc}

08001ab8 <memmove>:
 8001ab8:	4288      	cmp	r0, r1
 8001aba:	b510      	push	{r4, lr}
 8001abc:	eb01 0402 	add.w	r4, r1, r2
 8001ac0:	d902      	bls.n	8001ac8 <memmove+0x10>
 8001ac2:	4284      	cmp	r4, r0
 8001ac4:	4623      	mov	r3, r4
 8001ac6:	d807      	bhi.n	8001ad8 <memmove+0x20>
 8001ac8:	1e43      	subs	r3, r0, #1
 8001aca:	42a1      	cmp	r1, r4
 8001acc:	d008      	beq.n	8001ae0 <memmove+0x28>
 8001ace:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001ad2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001ad6:	e7f8      	b.n	8001aca <memmove+0x12>
 8001ad8:	4402      	add	r2, r0
 8001ada:	4601      	mov	r1, r0
 8001adc:	428a      	cmp	r2, r1
 8001ade:	d100      	bne.n	8001ae2 <memmove+0x2a>
 8001ae0:	bd10      	pop	{r4, pc}
 8001ae2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001ae6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001aea:	e7f7      	b.n	8001adc <memmove+0x24>

08001aec <_free_r>:
 8001aec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001aee:	2900      	cmp	r1, #0
 8001af0:	d044      	beq.n	8001b7c <_free_r+0x90>
 8001af2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001af6:	9001      	str	r0, [sp, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f1a1 0404 	sub.w	r4, r1, #4
 8001afe:	bfb8      	it	lt
 8001b00:	18e4      	addlt	r4, r4, r3
 8001b02:	f000 f913 	bl	8001d2c <__malloc_lock>
 8001b06:	4a1e      	ldr	r2, [pc, #120]	; (8001b80 <_free_r+0x94>)
 8001b08:	9801      	ldr	r0, [sp, #4]
 8001b0a:	6813      	ldr	r3, [r2, #0]
 8001b0c:	b933      	cbnz	r3, 8001b1c <_free_r+0x30>
 8001b0e:	6063      	str	r3, [r4, #4]
 8001b10:	6014      	str	r4, [r2, #0]
 8001b12:	b003      	add	sp, #12
 8001b14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001b18:	f000 b90e 	b.w	8001d38 <__malloc_unlock>
 8001b1c:	42a3      	cmp	r3, r4
 8001b1e:	d908      	bls.n	8001b32 <_free_r+0x46>
 8001b20:	6825      	ldr	r5, [r4, #0]
 8001b22:	1961      	adds	r1, r4, r5
 8001b24:	428b      	cmp	r3, r1
 8001b26:	bf01      	itttt	eq
 8001b28:	6819      	ldreq	r1, [r3, #0]
 8001b2a:	685b      	ldreq	r3, [r3, #4]
 8001b2c:	1949      	addeq	r1, r1, r5
 8001b2e:	6021      	streq	r1, [r4, #0]
 8001b30:	e7ed      	b.n	8001b0e <_free_r+0x22>
 8001b32:	461a      	mov	r2, r3
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	b10b      	cbz	r3, 8001b3c <_free_r+0x50>
 8001b38:	42a3      	cmp	r3, r4
 8001b3a:	d9fa      	bls.n	8001b32 <_free_r+0x46>
 8001b3c:	6811      	ldr	r1, [r2, #0]
 8001b3e:	1855      	adds	r5, r2, r1
 8001b40:	42a5      	cmp	r5, r4
 8001b42:	d10b      	bne.n	8001b5c <_free_r+0x70>
 8001b44:	6824      	ldr	r4, [r4, #0]
 8001b46:	4421      	add	r1, r4
 8001b48:	1854      	adds	r4, r2, r1
 8001b4a:	42a3      	cmp	r3, r4
 8001b4c:	6011      	str	r1, [r2, #0]
 8001b4e:	d1e0      	bne.n	8001b12 <_free_r+0x26>
 8001b50:	681c      	ldr	r4, [r3, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	6053      	str	r3, [r2, #4]
 8001b56:	4421      	add	r1, r4
 8001b58:	6011      	str	r1, [r2, #0]
 8001b5a:	e7da      	b.n	8001b12 <_free_r+0x26>
 8001b5c:	d902      	bls.n	8001b64 <_free_r+0x78>
 8001b5e:	230c      	movs	r3, #12
 8001b60:	6003      	str	r3, [r0, #0]
 8001b62:	e7d6      	b.n	8001b12 <_free_r+0x26>
 8001b64:	6825      	ldr	r5, [r4, #0]
 8001b66:	1961      	adds	r1, r4, r5
 8001b68:	428b      	cmp	r3, r1
 8001b6a:	bf04      	itt	eq
 8001b6c:	6819      	ldreq	r1, [r3, #0]
 8001b6e:	685b      	ldreq	r3, [r3, #4]
 8001b70:	6063      	str	r3, [r4, #4]
 8001b72:	bf04      	itt	eq
 8001b74:	1949      	addeq	r1, r1, r5
 8001b76:	6021      	streq	r1, [r4, #0]
 8001b78:	6054      	str	r4, [r2, #4]
 8001b7a:	e7ca      	b.n	8001b12 <_free_r+0x26>
 8001b7c:	b003      	add	sp, #12
 8001b7e:	bd30      	pop	{r4, r5, pc}
 8001b80:	200001ac 	.word	0x200001ac

08001b84 <sbrk_aligned>:
 8001b84:	b570      	push	{r4, r5, r6, lr}
 8001b86:	4e0e      	ldr	r6, [pc, #56]	; (8001bc0 <sbrk_aligned+0x3c>)
 8001b88:	460c      	mov	r4, r1
 8001b8a:	6831      	ldr	r1, [r6, #0]
 8001b8c:	4605      	mov	r5, r0
 8001b8e:	b911      	cbnz	r1, 8001b96 <sbrk_aligned+0x12>
 8001b90:	f000 f8bc 	bl	8001d0c <_sbrk_r>
 8001b94:	6030      	str	r0, [r6, #0]
 8001b96:	4621      	mov	r1, r4
 8001b98:	4628      	mov	r0, r5
 8001b9a:	f000 f8b7 	bl	8001d0c <_sbrk_r>
 8001b9e:	1c43      	adds	r3, r0, #1
 8001ba0:	d00a      	beq.n	8001bb8 <sbrk_aligned+0x34>
 8001ba2:	1cc4      	adds	r4, r0, #3
 8001ba4:	f024 0403 	bic.w	r4, r4, #3
 8001ba8:	42a0      	cmp	r0, r4
 8001baa:	d007      	beq.n	8001bbc <sbrk_aligned+0x38>
 8001bac:	1a21      	subs	r1, r4, r0
 8001bae:	4628      	mov	r0, r5
 8001bb0:	f000 f8ac 	bl	8001d0c <_sbrk_r>
 8001bb4:	3001      	adds	r0, #1
 8001bb6:	d101      	bne.n	8001bbc <sbrk_aligned+0x38>
 8001bb8:	f04f 34ff 	mov.w	r4, #4294967295
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	bd70      	pop	{r4, r5, r6, pc}
 8001bc0:	200001b0 	.word	0x200001b0

08001bc4 <_malloc_r>:
 8001bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bc8:	1ccd      	adds	r5, r1, #3
 8001bca:	f025 0503 	bic.w	r5, r5, #3
 8001bce:	3508      	adds	r5, #8
 8001bd0:	2d0c      	cmp	r5, #12
 8001bd2:	bf38      	it	cc
 8001bd4:	250c      	movcc	r5, #12
 8001bd6:	2d00      	cmp	r5, #0
 8001bd8:	4607      	mov	r7, r0
 8001bda:	db01      	blt.n	8001be0 <_malloc_r+0x1c>
 8001bdc:	42a9      	cmp	r1, r5
 8001bde:	d905      	bls.n	8001bec <_malloc_r+0x28>
 8001be0:	230c      	movs	r3, #12
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	2600      	movs	r6, #0
 8001be6:	4630      	mov	r0, r6
 8001be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bec:	4e2e      	ldr	r6, [pc, #184]	; (8001ca8 <_malloc_r+0xe4>)
 8001bee:	f000 f89d 	bl	8001d2c <__malloc_lock>
 8001bf2:	6833      	ldr	r3, [r6, #0]
 8001bf4:	461c      	mov	r4, r3
 8001bf6:	bb34      	cbnz	r4, 8001c46 <_malloc_r+0x82>
 8001bf8:	4629      	mov	r1, r5
 8001bfa:	4638      	mov	r0, r7
 8001bfc:	f7ff ffc2 	bl	8001b84 <sbrk_aligned>
 8001c00:	1c43      	adds	r3, r0, #1
 8001c02:	4604      	mov	r4, r0
 8001c04:	d14d      	bne.n	8001ca2 <_malloc_r+0xde>
 8001c06:	6834      	ldr	r4, [r6, #0]
 8001c08:	4626      	mov	r6, r4
 8001c0a:	2e00      	cmp	r6, #0
 8001c0c:	d140      	bne.n	8001c90 <_malloc_r+0xcc>
 8001c0e:	6823      	ldr	r3, [r4, #0]
 8001c10:	4631      	mov	r1, r6
 8001c12:	4638      	mov	r0, r7
 8001c14:	eb04 0803 	add.w	r8, r4, r3
 8001c18:	f000 f878 	bl	8001d0c <_sbrk_r>
 8001c1c:	4580      	cmp	r8, r0
 8001c1e:	d13a      	bne.n	8001c96 <_malloc_r+0xd2>
 8001c20:	6821      	ldr	r1, [r4, #0]
 8001c22:	3503      	adds	r5, #3
 8001c24:	1a6d      	subs	r5, r5, r1
 8001c26:	f025 0503 	bic.w	r5, r5, #3
 8001c2a:	3508      	adds	r5, #8
 8001c2c:	2d0c      	cmp	r5, #12
 8001c2e:	bf38      	it	cc
 8001c30:	250c      	movcc	r5, #12
 8001c32:	4629      	mov	r1, r5
 8001c34:	4638      	mov	r0, r7
 8001c36:	f7ff ffa5 	bl	8001b84 <sbrk_aligned>
 8001c3a:	3001      	adds	r0, #1
 8001c3c:	d02b      	beq.n	8001c96 <_malloc_r+0xd2>
 8001c3e:	6823      	ldr	r3, [r4, #0]
 8001c40:	442b      	add	r3, r5
 8001c42:	6023      	str	r3, [r4, #0]
 8001c44:	e00e      	b.n	8001c64 <_malloc_r+0xa0>
 8001c46:	6822      	ldr	r2, [r4, #0]
 8001c48:	1b52      	subs	r2, r2, r5
 8001c4a:	d41e      	bmi.n	8001c8a <_malloc_r+0xc6>
 8001c4c:	2a0b      	cmp	r2, #11
 8001c4e:	d916      	bls.n	8001c7e <_malloc_r+0xba>
 8001c50:	1961      	adds	r1, r4, r5
 8001c52:	42a3      	cmp	r3, r4
 8001c54:	6025      	str	r5, [r4, #0]
 8001c56:	bf18      	it	ne
 8001c58:	6059      	strne	r1, [r3, #4]
 8001c5a:	6863      	ldr	r3, [r4, #4]
 8001c5c:	bf08      	it	eq
 8001c5e:	6031      	streq	r1, [r6, #0]
 8001c60:	5162      	str	r2, [r4, r5]
 8001c62:	604b      	str	r3, [r1, #4]
 8001c64:	4638      	mov	r0, r7
 8001c66:	f104 060b 	add.w	r6, r4, #11
 8001c6a:	f000 f865 	bl	8001d38 <__malloc_unlock>
 8001c6e:	f026 0607 	bic.w	r6, r6, #7
 8001c72:	1d23      	adds	r3, r4, #4
 8001c74:	1af2      	subs	r2, r6, r3
 8001c76:	d0b6      	beq.n	8001be6 <_malloc_r+0x22>
 8001c78:	1b9b      	subs	r3, r3, r6
 8001c7a:	50a3      	str	r3, [r4, r2]
 8001c7c:	e7b3      	b.n	8001be6 <_malloc_r+0x22>
 8001c7e:	6862      	ldr	r2, [r4, #4]
 8001c80:	42a3      	cmp	r3, r4
 8001c82:	bf0c      	ite	eq
 8001c84:	6032      	streq	r2, [r6, #0]
 8001c86:	605a      	strne	r2, [r3, #4]
 8001c88:	e7ec      	b.n	8001c64 <_malloc_r+0xa0>
 8001c8a:	4623      	mov	r3, r4
 8001c8c:	6864      	ldr	r4, [r4, #4]
 8001c8e:	e7b2      	b.n	8001bf6 <_malloc_r+0x32>
 8001c90:	4634      	mov	r4, r6
 8001c92:	6876      	ldr	r6, [r6, #4]
 8001c94:	e7b9      	b.n	8001c0a <_malloc_r+0x46>
 8001c96:	230c      	movs	r3, #12
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	4638      	mov	r0, r7
 8001c9c:	f000 f84c 	bl	8001d38 <__malloc_unlock>
 8001ca0:	e7a1      	b.n	8001be6 <_malloc_r+0x22>
 8001ca2:	6025      	str	r5, [r4, #0]
 8001ca4:	e7de      	b.n	8001c64 <_malloc_r+0xa0>
 8001ca6:	bf00      	nop
 8001ca8:	200001ac 	.word	0x200001ac

08001cac <_realloc_r>:
 8001cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cb0:	4680      	mov	r8, r0
 8001cb2:	4614      	mov	r4, r2
 8001cb4:	460e      	mov	r6, r1
 8001cb6:	b921      	cbnz	r1, 8001cc2 <_realloc_r+0x16>
 8001cb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	f7ff bf81 	b.w	8001bc4 <_malloc_r>
 8001cc2:	b92a      	cbnz	r2, 8001cd0 <_realloc_r+0x24>
 8001cc4:	f7ff ff12 	bl	8001aec <_free_r>
 8001cc8:	4625      	mov	r5, r4
 8001cca:	4628      	mov	r0, r5
 8001ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cd0:	f000 f838 	bl	8001d44 <_malloc_usable_size_r>
 8001cd4:	4284      	cmp	r4, r0
 8001cd6:	4607      	mov	r7, r0
 8001cd8:	d802      	bhi.n	8001ce0 <_realloc_r+0x34>
 8001cda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001cde:	d812      	bhi.n	8001d06 <_realloc_r+0x5a>
 8001ce0:	4621      	mov	r1, r4
 8001ce2:	4640      	mov	r0, r8
 8001ce4:	f7ff ff6e 	bl	8001bc4 <_malloc_r>
 8001ce8:	4605      	mov	r5, r0
 8001cea:	2800      	cmp	r0, #0
 8001cec:	d0ed      	beq.n	8001cca <_realloc_r+0x1e>
 8001cee:	42bc      	cmp	r4, r7
 8001cf0:	4622      	mov	r2, r4
 8001cf2:	4631      	mov	r1, r6
 8001cf4:	bf28      	it	cs
 8001cf6:	463a      	movcs	r2, r7
 8001cf8:	f7ff fed0 	bl	8001a9c <memcpy>
 8001cfc:	4631      	mov	r1, r6
 8001cfe:	4640      	mov	r0, r8
 8001d00:	f7ff fef4 	bl	8001aec <_free_r>
 8001d04:	e7e1      	b.n	8001cca <_realloc_r+0x1e>
 8001d06:	4635      	mov	r5, r6
 8001d08:	e7df      	b.n	8001cca <_realloc_r+0x1e>
	...

08001d0c <_sbrk_r>:
 8001d0c:	b538      	push	{r3, r4, r5, lr}
 8001d0e:	4d06      	ldr	r5, [pc, #24]	; (8001d28 <_sbrk_r+0x1c>)
 8001d10:	2300      	movs	r3, #0
 8001d12:	4604      	mov	r4, r0
 8001d14:	4608      	mov	r0, r1
 8001d16:	602b      	str	r3, [r5, #0]
 8001d18:	f7ff fb26 	bl	8001368 <_sbrk>
 8001d1c:	1c43      	adds	r3, r0, #1
 8001d1e:	d102      	bne.n	8001d26 <_sbrk_r+0x1a>
 8001d20:	682b      	ldr	r3, [r5, #0]
 8001d22:	b103      	cbz	r3, 8001d26 <_sbrk_r+0x1a>
 8001d24:	6023      	str	r3, [r4, #0]
 8001d26:	bd38      	pop	{r3, r4, r5, pc}
 8001d28:	200001b4 	.word	0x200001b4

08001d2c <__malloc_lock>:
 8001d2c:	4801      	ldr	r0, [pc, #4]	; (8001d34 <__malloc_lock+0x8>)
 8001d2e:	f000 b811 	b.w	8001d54 <__retarget_lock_acquire_recursive>
 8001d32:	bf00      	nop
 8001d34:	200001b8 	.word	0x200001b8

08001d38 <__malloc_unlock>:
 8001d38:	4801      	ldr	r0, [pc, #4]	; (8001d40 <__malloc_unlock+0x8>)
 8001d3a:	f000 b80c 	b.w	8001d56 <__retarget_lock_release_recursive>
 8001d3e:	bf00      	nop
 8001d40:	200001b8 	.word	0x200001b8

08001d44 <_malloc_usable_size_r>:
 8001d44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d48:	1f18      	subs	r0, r3, #4
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	bfbc      	itt	lt
 8001d4e:	580b      	ldrlt	r3, [r1, r0]
 8001d50:	18c0      	addlt	r0, r0, r3
 8001d52:	4770      	bx	lr

08001d54 <__retarget_lock_acquire_recursive>:
 8001d54:	4770      	bx	lr

08001d56 <__retarget_lock_release_recursive>:
 8001d56:	4770      	bx	lr

08001d58 <_init>:
 8001d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d5a:	bf00      	nop
 8001d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d5e:	bc08      	pop	{r3}
 8001d60:	469e      	mov	lr, r3
 8001d62:	4770      	bx	lr

08001d64 <_fini>:
 8001d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d66:	bf00      	nop
 8001d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d6a:	bc08      	pop	{r3}
 8001d6c:	469e      	mov	lr, r3
 8001d6e:	4770      	bx	lr
