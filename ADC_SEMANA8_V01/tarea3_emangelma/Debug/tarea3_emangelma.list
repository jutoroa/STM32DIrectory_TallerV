
tarea3_emangelma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ccc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e64  08000e6c  00010e6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e64  08000e64  00010e6c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e64  08000e64  00010e6c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e64  08000e6c  00010e6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e64  08000e64  00010e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e68  08000e68  00010e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000000  08000e6c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08000e6c  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010e6c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003922  00000000  00000000  00010e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ad0  00000000  00000000  000147be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  00015290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000178  00000000  00000000  00015460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f260  00000000  00000000  000155d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002733  00000000  00000000  00024838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054ff7  00000000  00000000  00026f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007bf62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000564  00000000  00000000  0007bfb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000e4c 	.word	0x08000e4c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000e4c 	.word	0x08000e4c

080001d8 <ADC_IRQHandler>:
	/* Se inicia un ciclo de conversión ADC. */
	ADC1 -> CR2 |= ADC_CR2_SWSTART;
}

/* Función que retorna el último dato adquirido por la ADC. */
void ADC_IRQHandler(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	// Se evalúa si se dio la interrupción por conversión ADC.
	if(ADC1 -> SR & ADC_SR_EOC){
 80001dc:	4b07      	ldr	r3, [pc, #28]	; (80001fc <ADC_IRQHandler+0x24>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f003 0302 	and.w	r3, r3, #2
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d006      	beq.n	80001f6 <ADC_IRQHandler+0x1e>

		// Se lee el resultado de la conversión ADC y se carga en un valor auxiliar.
		adcRawData = ADC1 -> DR;
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <ADC_IRQHandler+0x24>)
 80001ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001ec:	b29a      	uxth	r2, r3
 80001ee:	4b04      	ldr	r3, [pc, #16]	; (8000200 <ADC_IRQHandler+0x28>)
 80001f0:	801a      	strh	r2, [r3, #0]

		// Se hace el llamado a la función que se ejecutará en el main.
		adcComplete_Callback();
 80001f2:	f000 f807 	bl	8000204 <adcComplete_Callback>
	}
}
 80001f6:	bf00      	nop
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40012000 	.word	0x40012000
 8000200:	2000001c 	.word	0x2000001c

08000204 <adcComplete_Callback>:

/* Función débil. Ésta deber ser sobreescrita en el main. */
__attribute__ ((weak)) void adcComplete_Callback(void){
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	__NOP();
 8000208:	bf00      	nop
}
 800020a:	bf00      	nop
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <GPIO_Config>:
orden estricto para poder que el sistema permita configurar el periférico X.
Lo primero y más importante es activar la señal del reloj principal hacia ese
elemento específico (relacionado con el periférico RCC), a esto llamaremos
simplemente "activar el periférico o activar la señal de reloj del periférico".
*/
void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8000214:	b480      	push	{r7}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso.
	uint32_t auxConfig = 0;
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8000220:	2300      	movs	r3, #0
 8000222:	60bb      	str	r3, [r7, #8]

	// 1) Activación del periférico
	// Se verifica para GPIOA.
	if (pGPIOHandler -> pGPIOx == GPIOA){
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a88      	ldr	r2, [pc, #544]	; (800044c <GPIO_Config+0x238>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_Config+0x28>

		// Escribimos 1 (SET) en la posición correspondiente al GPIOA.
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 800022e:	4b88      	ldr	r3, [pc, #544]	; (8000450 <GPIO_Config+0x23c>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a87      	ldr	r2, [pc, #540]	; (8000450 <GPIO_Config+0x23c>)
 8000234:	f043 0301 	orr.w	r3, r3, #1
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
 800023a:	e03a      	b.n	80002b2 <GPIO_Config+0x9e>
	}
	// Se verifica para GPIOB.
	else if (pGPIOHandler -> pGPIOx == GPIOB){
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a84      	ldr	r2, [pc, #528]	; (8000454 <GPIO_Config+0x240>)
 8000242:	4293      	cmp	r3, r2
 8000244:	d106      	bne.n	8000254 <GPIO_Config+0x40>

		// Escribimos 1 (SET) en la posición correspondiente al GPIOB.
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 8000246:	4b82      	ldr	r3, [pc, #520]	; (8000450 <GPIO_Config+0x23c>)
 8000248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024a:	4a81      	ldr	r2, [pc, #516]	; (8000450 <GPIO_Config+0x23c>)
 800024c:	f043 0302 	orr.w	r3, r3, #2
 8000250:	6313      	str	r3, [r2, #48]	; 0x30
 8000252:	e02e      	b.n	80002b2 <GPIO_Config+0x9e>
	}
	// Se verifica para GPIOC.
	else if (pGPIOHandler -> pGPIOx == GPIOC){
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a7f      	ldr	r2, [pc, #508]	; (8000458 <GPIO_Config+0x244>)
 800025a:	4293      	cmp	r3, r2
 800025c:	d106      	bne.n	800026c <GPIO_Config+0x58>

		// Se escribe 1 (SET) en la posición correspondiente al GPIOC.
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 800025e:	4b7c      	ldr	r3, [pc, #496]	; (8000450 <GPIO_Config+0x23c>)
 8000260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000262:	4a7b      	ldr	r2, [pc, #492]	; (8000450 <GPIO_Config+0x23c>)
 8000264:	f043 0304 	orr.w	r3, r3, #4
 8000268:	6313      	str	r3, [r2, #48]	; 0x30
 800026a:	e022      	b.n	80002b2 <GPIO_Config+0x9e>
	}
	// Se verifica para GPIOD.
	else if (pGPIOHandler -> pGPIOx == GPIOD){
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a7a      	ldr	r2, [pc, #488]	; (800045c <GPIO_Config+0x248>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d106      	bne.n	8000284 <GPIO_Config+0x70>

		// Se escribe 1 (SET) en la posición correspondiente al GPIOD.
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 8000276:	4b76      	ldr	r3, [pc, #472]	; (8000450 <GPIO_Config+0x23c>)
 8000278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027a:	4a75      	ldr	r2, [pc, #468]	; (8000450 <GPIO_Config+0x23c>)
 800027c:	f043 0308 	orr.w	r3, r3, #8
 8000280:	6313      	str	r3, [r2, #48]	; 0x30
 8000282:	e016      	b.n	80002b2 <GPIO_Config+0x9e>
	}
	// Se verifica para GPIOE.
	else if (pGPIOHandler -> pGPIOx == GPIOE){
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a75      	ldr	r2, [pc, #468]	; (8000460 <GPIO_Config+0x24c>)
 800028a:	4293      	cmp	r3, r2
 800028c:	d106      	bne.n	800029c <GPIO_Config+0x88>

		// Se escribe 1 (SET) en la posición correspondiente al GPIOE.
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 800028e:	4b70      	ldr	r3, [pc, #448]	; (8000450 <GPIO_Config+0x23c>)
 8000290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000292:	4a6f      	ldr	r2, [pc, #444]	; (8000450 <GPIO_Config+0x23c>)
 8000294:	f043 0310 	orr.w	r3, r3, #16
 8000298:	6313      	str	r3, [r2, #48]	; 0x30
 800029a:	e00a      	b.n	80002b2 <GPIO_Config+0x9e>
	}
	// Se verifica para GPIOH.
	else if (pGPIOHandler -> pGPIOx == GPIOH){
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a70      	ldr	r2, [pc, #448]	; (8000464 <GPIO_Config+0x250>)
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d105      	bne.n	80002b2 <GPIO_Config+0x9e>

		// Se escribe 1 (SET) en la posición correspondiente al GPIOH.
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 80002a6:	4b6a      	ldr	r3, [pc, #424]	; (8000450 <GPIO_Config+0x23c>)
 80002a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002aa:	4a69      	ldr	r2, [pc, #420]	; (8000450 <GPIO_Config+0x23c>)
 80002ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b0:	6313      	str	r3, [r2, #48]	; 0x30
	// Después de activado, se puede comenzar a configurar.

	// 2) Configuración del registro GPIOx_MODER
	// Acá se está leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y todo eso se carga en la variable aux_Config.
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	795b      	ldrb	r3, [r3, #5]
 80002b6:	461a      	mov	r2, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	791b      	ldrb	r3, [r3, #4]
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	fa02 f303 	lsl.w	r3, r2, r3
 80002c2:	60fb      	str	r3, [r7, #12]

	// Antes de cargar el nuevo valor, se limpian los bits específicos de ese registro (Se debe escribir 0b00)
	// para lo cual se aplica una máscara y una operación bitwise AND.
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	791b      	ldrb	r3, [r3, #4]
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	2103      	movs	r1, #3
 80002d2:	fa01 f303 	lsl.w	r3, r1, r3
 80002d6:	43db      	mvns	r3, r3
 80002d8:	4619      	mov	r1, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	400a      	ands	r2, r1
 80002e0:	601a      	str	r2, [r3, #0]

	// Se carga a auxConfig en el registro MODER.
	pGPIOHandler -> pGPIOx -> MODER |= auxConfig;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	6819      	ldr	r1, [r3, #0]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	68fa      	ldr	r2, [r7, #12]
 80002ee:	430a      	orrs	r2, r1
 80002f0:	601a      	str	r2, [r3, #0]

	// 3) Se configura el registro GPIOx_OTYPER.
	// De nuevo, se lee y mueve el valor un número "PinNumber" de veces.
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	7a1b      	ldrb	r3, [r3, #8]
 80002f6:	461a      	mov	r2, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	791b      	ldrb	r3, [r3, #4]
 80002fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000300:	60fb      	str	r3, [r7, #12]

	// Se limpia antes de cargar.
	pGPIOHandler -> pGPIOx -> OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	685a      	ldr	r2, [r3, #4]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	791b      	ldrb	r3, [r3, #4]
 800030c:	4619      	mov	r1, r3
 800030e:	2301      	movs	r3, #1
 8000310:	408b      	lsls	r3, r1
 8000312:	43db      	mvns	r3, r3
 8000314:	4619      	mov	r1, r3
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	400a      	ands	r2, r1
 800031c:	605a      	str	r2, [r3, #4]

	// Se carga el resultado sobre el registro adecuado.
	pGPIOHandler -> pGPIOx -> OTYPER |= auxConfig;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	6859      	ldr	r1, [r3, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	430a      	orrs	r2, r1
 800032c:	605a      	str	r2, [r3, #4]

	// 4) Se configura ahora la velocidad.
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	799b      	ldrb	r3, [r3, #6]
 8000332:	461a      	mov	r2, r3
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	791b      	ldrb	r3, [r3, #4]
 8000338:	005b      	lsls	r3, r3, #1
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	60fb      	str	r3, [r7, #12]

	// Se limpia la posición antes de cargar la nueva configuración.
	pGPIOHandler -> pGPIOx -> OSPEEDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	689a      	ldr	r2, [r3, #8]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	791b      	ldrb	r3, [r3, #4]
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	2103      	movs	r1, #3
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	43db      	mvns	r3, r3
 8000354:	4619      	mov	r1, r3
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	400a      	ands	r2, r1
 800035c:	609a      	str	r2, [r3, #8]

	// Se carga el resultado sobre el registro adecuado.
	pGPIOHandler -> pGPIOx -> OSPEEDR |= auxConfig;
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	6899      	ldr	r1, [r3, #8]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	68fa      	ldr	r2, [r7, #12]
 800036a:	430a      	orrs	r2, r1
 800036c:	609a      	str	r2, [r3, #8]

	// 5) Se configura si se desea pull-up, pull-down o flotante.
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	79db      	ldrb	r3, [r3, #7]
 8000372:	461a      	mov	r2, r3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	791b      	ldrb	r3, [r3, #4]
 8000378:	005b      	lsls	r3, r3, #1
 800037a:	fa02 f303 	lsl.w	r3, r2, r3
 800037e:	60fb      	str	r3, [r7, #12]

	// Se limpia la posición antes de cargar la nueva configuración.
	pGPIOHandler -> pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	68da      	ldr	r2, [r3, #12]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	791b      	ldrb	r3, [r3, #4]
 800038a:	005b      	lsls	r3, r3, #1
 800038c:	2103      	movs	r1, #3
 800038e:	fa01 f303 	lsl.w	r3, r1, r3
 8000392:	43db      	mvns	r3, r3
 8000394:	4619      	mov	r1, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	400a      	ands	r2, r1
 800039c:	60da      	str	r2, [r3, #12]

	// Se carga el resultado sobre el registro adecuado.
	pGPIOHandler -> pGPIOx -> PUPDR |= auxConfig;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	68d9      	ldr	r1, [r3, #12]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	68fa      	ldr	r2, [r7, #12]
 80003aa:	430a      	orrs	r2, r1
 80003ac:	60da      	str	r2, [r3, #12]

	// Configuración funciones alternativas.
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	795b      	ldrb	r3, [r3, #5]
 80003b2:	2b02      	cmp	r3, #2
 80003b4:	d143      	bne.n	800043e <GPIO_Config+0x22a>

		// Se selecciona primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH).
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	791b      	ldrb	r3, [r3, #4]
 80003ba:	2b07      	cmp	r3, #7
 80003bc:	d81f      	bhi.n	80003fe <GPIO_Config+0x1ea>

			// Configuración del registro AFRL, que controla los pines del PIN_0 al PIN_7.
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	791b      	ldrb	r3, [r3, #4]
 80003c2:	009b      	lsls	r3, r3, #2
 80003c4:	60bb      	str	r3, [r7, #8]

			// Se limpia primero la posición del registro que se desea escribir.
			pGPIOHandler -> pGPIOx -> AFR[0] &= ~(0b1111 << auxPosition);
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	6a1a      	ldr	r2, [r3, #32]
 80003cc:	210f      	movs	r1, #15
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	fa01 f303 	lsl.w	r3, r1, r3
 80003d4:	43db      	mvns	r3, r3
 80003d6:	4619      	mov	r1, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	400a      	ands	r2, r1
 80003de:	621a      	str	r2, [r3, #32]

			// Y se escribe el valor configurado en la posición seleccionada.
			pGPIOHandler -> pGPIOx -> AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	6a1a      	ldr	r2, [r3, #32]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	7a5b      	ldrb	r3, [r3, #9]
 80003ea:	4619      	mov	r1, r3
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	4619      	mov	r1, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	430a      	orrs	r2, r1
 80003fa:	621a      	str	r2, [r3, #32]

			// Y se escribe el valor configurado en la posición seleccionada.
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} 			// Fin del GPIO_Config
 80003fc:	e01f      	b.n	800043e <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber -8);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	791b      	ldrb	r3, [r3, #4]
 8000402:	3b08      	subs	r3, #8
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx -> AFR[1] &= ~(0b1111 << auxPosition);
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800040e:	210f      	movs	r1, #15
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	fa01 f303 	lsl.w	r3, r1, r3
 8000416:	43db      	mvns	r3, r3
 8000418:	4619      	mov	r1, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	400a      	ands	r2, r1
 8000420:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	7a5b      	ldrb	r3, [r3, #9]
 800042c:	4619      	mov	r1, r3
 800042e:	68bb      	ldr	r3, [r7, #8]
 8000430:	fa01 f303 	lsl.w	r3, r1, r3
 8000434:	4619      	mov	r1, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	430a      	orrs	r2, r1
 800043c:	625a      	str	r2, [r3, #36]	; 0x24
} 			// Fin del GPIO_Config
 800043e:	bf00      	nop
 8000440:	3714      	adds	r7, #20
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	40020000 	.word	0x40020000
 8000450:	40023800 	.word	0x40023800
 8000454:	40020400 	.word	0x40020400
 8000458:	40020800 	.word	0x40020800
 800045c:	40020c00 	.word	0x40020c00
 8000460:	40021000 	.word	0x40021000
 8000464:	40021c00 	.word	0x40021c00

08000468 <GPIO_WritePin>:

/* Función utilizada para cambiar de estado el pin entregado en el handler, asignando
el valor entregado en la variable newState. */
void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	460b      	mov	r3, r1
 8000472:	70fb      	strb	r3, [r7, #3]

	// Se limpia la posición que se desea usar.
	// pPinHandler -> pGPIOx -> ODR &= ~(SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
	if(newState == SET){
 8000474:	78fb      	ldrb	r3, [r7, #3]
 8000476:	2b01      	cmp	r3, #1
 8000478:	d10d      	bne.n	8000496 <GPIO_WritePin+0x2e>

		// Se trabajará con la parte baja del registro.
		pPinHandler -> pGPIOx -> BSRR |= (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	699a      	ldr	r2, [r3, #24]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	791b      	ldrb	r3, [r3, #4]
 8000484:	4619      	mov	r1, r3
 8000486:	2301      	movs	r3, #1
 8000488:	408b      	lsls	r3, r1
 800048a:	4619      	mov	r1, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	430a      	orrs	r2, r1
 8000492:	619a      	str	r2, [r3, #24]
	else{

		// Se trabajará con la parte alta del registro.
		pPinHandler -> pGPIOx -> BSRR |= (SET << (pPinHandler -> GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8000494:	e00d      	b.n	80004b2 <GPIO_WritePin+0x4a>
		pPinHandler -> pGPIOx -> BSRR |= (SET << (pPinHandler -> GPIO_PinConfig.GPIO_PinNumber + 16));
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	699a      	ldr	r2, [r3, #24]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	791b      	ldrb	r3, [r3, #4]
 80004a0:	3310      	adds	r3, #16
 80004a2:	2101      	movs	r1, #1
 80004a4:	fa01 f303 	lsl.w	r3, r1, r3
 80004a8:	4619      	mov	r1, r3
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	430a      	orrs	r2, r1
 80004b0:	619a      	str	r2, [r3, #24]
}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
	...

080004c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	db0b      	blt.n	80004ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	f003 021f 	and.w	r2, r3, #31
 80004d8:	4907      	ldr	r1, [pc, #28]	; (80004f8 <__NVIC_EnableIRQ+0x38>)
 80004da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004de:	095b      	lsrs	r3, r3, #5
 80004e0:	2001      	movs	r0, #1
 80004e2:	fa00 f202 	lsl.w	r2, r0, r2
 80004e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	e000e100 	.word	0xe000e100

080004fc <TIM_Config>:

/* Función que configura un Timer básico para que genere interrupciones de forma
 * periódica. */

//NOTA: Hay que desactivar las interrupciones globales y luego volver a activarlas.
void TIM_Config(TIM_Handler_t *ptrTIM_Config){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000504:	b672      	cpsid	i
}
 8000506:	bf00      	nop

	/* 0. Se desactivan las interrupciones globales */
	__disable_irq();

	/* 1. Se activa la señal de reloj para el periférico específico */
	if(ptrTIM_Config -> ptrTIMx == TIM2){
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000510:	d106      	bne.n	8000520 <TIM_Config+0x24>

		// Se activa la señal de reloj del TIM2.
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000512:	4b47      	ldr	r3, [pc, #284]	; (8000630 <TIM_Config+0x134>)
 8000514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000516:	4a46      	ldr	r2, [pc, #280]	; (8000630 <TIM_Config+0x134>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6413      	str	r3, [r2, #64]	; 0x40
 800051e:	e022      	b.n	8000566 <TIM_Config+0x6a>

	}else if(ptrTIM_Config -> ptrTIMx == TIM3){
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a43      	ldr	r2, [pc, #268]	; (8000634 <TIM_Config+0x138>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d106      	bne.n	8000538 <TIM_Config+0x3c>

		// Se activa la señal de reloj del TIM3.
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 800052a:	4b41      	ldr	r3, [pc, #260]	; (8000630 <TIM_Config+0x134>)
 800052c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052e:	4a40      	ldr	r2, [pc, #256]	; (8000630 <TIM_Config+0x134>)
 8000530:	f043 0302 	orr.w	r3, r3, #2
 8000534:	6413      	str	r3, [r2, #64]	; 0x40
 8000536:	e016      	b.n	8000566 <TIM_Config+0x6a>

	}else if(ptrTIM_Config -> ptrTIMx == TIM4){
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a3e      	ldr	r2, [pc, #248]	; (8000638 <TIM_Config+0x13c>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d106      	bne.n	8000550 <TIM_Config+0x54>

		// Se activa la señal de reloj del TIM4.
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000542:	4b3b      	ldr	r3, [pc, #236]	; (8000630 <TIM_Config+0x134>)
 8000544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000546:	4a3a      	ldr	r2, [pc, #232]	; (8000630 <TIM_Config+0x134>)
 8000548:	f043 0304 	orr.w	r3, r3, #4
 800054c:	6413      	str	r3, [r2, #64]	; 0x40
 800054e:	e00a      	b.n	8000566 <TIM_Config+0x6a>

	}else if(ptrTIM_Config -> ptrTIMx == TIM5){
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a39      	ldr	r2, [pc, #228]	; (800063c <TIM_Config+0x140>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d105      	bne.n	8000566 <TIM_Config+0x6a>

		// Se activa la señal de reloj del TIM5.
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 800055a:	4b35      	ldr	r3, [pc, #212]	; (8000630 <TIM_Config+0x134>)
 800055c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055e:	4a34      	ldr	r2, [pc, #208]	; (8000630 <TIM_Config+0x134>)
 8000560:	f043 0308 	orr.w	r3, r3, #8
 8000564:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuración del modo del timer (UP or DOWN) */
	if(ptrTIM_Config -> TIM_Config.TIM_mode == TIM_MODE_UP){
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	791b      	ldrb	r3, [r3, #4]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d10c      	bne.n	8000588 <TIM_Config+0x8c>

		// Configuración del timer en modo UP.
		ptrTIM_Config -> ptrTIMx -> CR1 &= ~(TIM_CR1_DIR);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f022 0210 	bic.w	r2, r2, #16
 800057c:	601a      	str	r2, [r3, #0]

		// Reseteo del contador (CNT) en cero.
		ptrTIM_Config -> ptrTIMx -> CNT = 0;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2200      	movs	r2, #0
 8000584:	625a      	str	r2, [r3, #36]	; 0x24
 8000586:	e00d      	b.n	80005a4 <TIM_Config+0xa8>
	}
	else{

		// Configuración del timer en modo DOWN.
		ptrTIM_Config -> ptrTIMx -> CR1 |= ~(TIM_CR1_DIR);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f062 0210 	orn	r2, r2, #16
 8000596:	601a      	str	r2, [r3, #0]

		// Se pone en el contador (CNT) el valor del periodo.
		ptrTIM_Config -> ptrTIMx -> CNT = ptrTIM_Config -> TIM_Config.TIM_period -1;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	689a      	ldr	r2, [r3, #8]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	3a01      	subs	r2, #1
 80005a2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuración del Prescaler */
	ptrTIM_Config -> ptrTIMx -> PSC = ptrTIM_Config -> TIM_Config.TIM_speed -1;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	88db      	ldrh	r3, [r3, #6]
 80005a8:	1e5a      	subs	r2, r3, #1
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuración del periodo de las interrupciones */
	ptrTIM_Config -> ptrTIMx -> ARR = ptrTIM_Config -> TIM_Config.TIM_period -1;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	689a      	ldr	r2, [r3, #8]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	3a01      	subs	r2, #1
 80005ba:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activación del timer para que comience a incrementarse */
	ptrTIM_Config -> ptrTIMx -> CR1 |= TIM_CR1_CEN;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f042 0201 	orr.w	r2, r2, #1
 80005ca:	601a      	str	r2, [r3, #0]

	/* 6. Activación de la interrupción debida a un "update event" */
	ptrTIM_Config -> ptrTIMx -> DIER |= TIM_DIER_UIE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	68da      	ldr	r2, [r3, #12]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f042 0201 	orr.w	r2, r2, #1
 80005da:	60da      	str	r2, [r3, #12]

	/* 7. Activación de la señal de la interrupcuón en el NVIC */

	if(ptrTIM_Config -> ptrTIMx == TIM2){
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005e4:	d103      	bne.n	80005ee <TIM_Config+0xf2>

		// Activación de la IRQ del TIM2.
		__NVIC_EnableIRQ(TIM2_IRQn);
 80005e6:	201c      	movs	r0, #28
 80005e8:	f7ff ff6a 	bl	80004c0 <__NVIC_EnableIRQ>
 80005ec:	e019      	b.n	8000622 <TIM_Config+0x126>

	}else if(ptrTIM_Config -> ptrTIMx == TIM3){
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a10      	ldr	r2, [pc, #64]	; (8000634 <TIM_Config+0x138>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d103      	bne.n	8000600 <TIM_Config+0x104>

		// Activación de la IRQ del TIM3.
		__NVIC_EnableIRQ(TIM3_IRQn);
 80005f8:	201d      	movs	r0, #29
 80005fa:	f7ff ff61 	bl	80004c0 <__NVIC_EnableIRQ>
 80005fe:	e010      	b.n	8000622 <TIM_Config+0x126>

	}else if(ptrTIM_Config -> ptrTIMx == TIM4){
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a0c      	ldr	r2, [pc, #48]	; (8000638 <TIM_Config+0x13c>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d103      	bne.n	8000612 <TIM_Config+0x116>

		// Activación de la IRQ del TIM4.
		__NVIC_EnableIRQ(TIM4_IRQn);
 800060a:	201e      	movs	r0, #30
 800060c:	f7ff ff58 	bl	80004c0 <__NVIC_EnableIRQ>
 8000610:	e007      	b.n	8000622 <TIM_Config+0x126>

	}else if(ptrTIM_Config -> ptrTIMx == TIM5){
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a09      	ldr	r2, [pc, #36]	; (800063c <TIM_Config+0x140>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d102      	bne.n	8000622 <TIM_Config+0x126>

		// Activación de la IRQ del TIM5.
		__NVIC_EnableIRQ(TIM5_IRQn);
 800061c:	2032      	movs	r0, #50	; 0x32
 800061e:	f7ff ff4f 	bl	80004c0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000622:	b662      	cpsie	i
}
 8000624:	bf00      	nop
	}

	/* 8. Se activan de nuevo todas las interrupciones. */
	__enable_irq();
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40000400 	.word	0x40000400
 8000638:	40000800 	.word	0x40000800
 800063c:	40000c00 	.word	0x40000c00

08000640 <TIM4_Callback>:
__attribute__((weak)) void TIM3_Callback(void){
	__NOP();
}

// Callback Timer 4.
__attribute__((weak)) void TIM4_Callback(void){
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
	__NOP();
 8000644:	bf00      	nop
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <TIM5_Callback>:

// Callback Timer 5.
__attribute__((weak)) void TIM5_Callback(void){
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
	__NOP();
 8000654:	bf00      	nop
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <TIM2_IRQHandler>:
// Hay que hacer dos cosas:
// 1) Atender la interrupción.
// 2) Llamada al Callback.

/* Rutina de atención a la interrupción del TIM2 */
void TIM2_IRQHandler(void){
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	TIM2 -> SR &= ~(TIM_SR_UIF);
 8000664:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000668:	691b      	ldr	r3, [r3, #16]
 800066a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800066e:	f023 0301 	bic.w	r3, r3, #1
 8000672:	6113      	str	r3, [r2, #16]
	TIM2_Callback();
 8000674:	f000 fb6c 	bl	8000d50 <TIM2_Callback>
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}

0800067c <TIM3_IRQHandler>:

/* Rutina de atención a la interrupción del TIM3 */
void TIM3_IRQHandler(void){
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	TIM3 -> SR &= ~(TIM_SR_UIF);
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <TIM3_IRQHandler+0x18>)
 8000682:	691b      	ldr	r3, [r3, #16]
 8000684:	4a03      	ldr	r2, [pc, #12]	; (8000694 <TIM3_IRQHandler+0x18>)
 8000686:	f023 0301 	bic.w	r3, r3, #1
 800068a:	6113      	str	r3, [r2, #16]
	TIM3_Callback();
 800068c:	f000 fb72 	bl	8000d74 <TIM3_Callback>
}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40000400 	.word	0x40000400

08000698 <TIM4_IRQHandler>:

/* Rutina de atención a la interrupción del TIM4 */
void TIM4_IRQHandler(void){
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	TIM4 -> SR &= ~(TIM_SR_UIF);
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <TIM4_IRQHandler+0x18>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	4a03      	ldr	r2, [pc, #12]	; (80006b0 <TIM4_IRQHandler+0x18>)
 80006a2:	f023 0301 	bic.w	r3, r3, #1
 80006a6:	6113      	str	r3, [r2, #16]
	TIM4_Callback();
 80006a8:	f7ff ffca 	bl	8000640 <TIM4_Callback>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40000800 	.word	0x40000800

080006b4 <TIM5_IRQHandler>:

/* Rutina de atención a la interrupción del TIM5 */
void TIM5_IRQHandler(void){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	TIM5 -> SR &= ~(TIM_SR_UIF);
 80006b8:	4b04      	ldr	r3, [pc, #16]	; (80006cc <TIM5_IRQHandler+0x18>)
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	4a03      	ldr	r2, [pc, #12]	; (80006cc <TIM5_IRQHandler+0x18>)
 80006be:	f023 0301 	bic.w	r3, r3, #1
 80006c2:	6113      	str	r3, [r2, #16]
	TIM5_Callback();
 80006c4:	f7ff ffc4 	bl	8000650 <TIM5_Callback>
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40000c00 	.word	0x40000c00

080006d0 <__NVIC_EnableIRQ>:
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	db0b      	blt.n	80006fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	f003 021f 	and.w	r2, r3, #31
 80006e8:	4907      	ldr	r1, [pc, #28]	; (8000708 <__NVIC_EnableIRQ+0x38>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	095b      	lsrs	r3, r3, #5
 80006f0:	2001      	movs	r0, #1
 80006f2:	fa00 f202 	lsl.w	r2, r0, r2
 80006f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000e100 	.word	0xe000e100

0800070c <USART_Config>:
 * del periférico que se está utilizando. */
uint8_t dataUSART1;
uint8_t dataUSART2;
uint8_t dataUSART6;

void USART_Config(USART_Handler_t *ptrUsartHandler){
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i
}
 8000716:	bf00      	nop
	__disable_irq();

	/* 1. Activación de la señal de reloj que viene desde el bus al que pertenece el periférico.
	 * Se debe hacer para cada una de las posibles opciones (USART1, USART2, USART6). */
	/* 1.1 Se configura el USART1 */
	if(ptrUsartHandler -> ptrUSARTx == USART1){
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a94      	ldr	r2, [pc, #592]	; (8000970 <USART_Config+0x264>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d106      	bne.n	8000730 <USART_Config+0x24>

		// Se escribe 1 (SET) en la posición correspondiente al USART1.
		RCC -> APB2ENR |= (RCC_APB2ENR_USART1EN);
 8000722:	4b94      	ldr	r3, [pc, #592]	; (8000974 <USART_Config+0x268>)
 8000724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000726:	4a93      	ldr	r2, [pc, #588]	; (8000974 <USART_Config+0x268>)
 8000728:	f043 0310 	orr.w	r3, r3, #16
 800072c:	6453      	str	r3, [r2, #68]	; 0x44
 800072e:	e016      	b.n	800075e <USART_Config+0x52>
	}
	/*1.2 Se configura el USART2 */
	else if(ptrUsartHandler -> ptrUSARTx == USART2){
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a90      	ldr	r2, [pc, #576]	; (8000978 <USART_Config+0x26c>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d106      	bne.n	8000748 <USART_Config+0x3c>

		// Se escribe 1 (SET) en la posición correspondiente al USART2.
		RCC -> APB1ENR |= (RCC_APB1ENR_USART2EN);
 800073a:	4b8e      	ldr	r3, [pc, #568]	; (8000974 <USART_Config+0x268>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073e:	4a8d      	ldr	r2, [pc, #564]	; (8000974 <USART_Config+0x268>)
 8000740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000744:	6413      	str	r3, [r2, #64]	; 0x40
 8000746:	e00a      	b.n	800075e <USART_Config+0x52>
	}
	/*1.3 Se configura el USART6 */
	else if(ptrUsartHandler -> ptrUSARTx == USART6){
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a8b      	ldr	r2, [pc, #556]	; (800097c <USART_Config+0x270>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d105      	bne.n	800075e <USART_Config+0x52>

		// Se escribe 1 (SET) en la posición correspondiente al USART6.
		RCC -> APB2ENR |= (RCC_APB2ENR_USART6EN);
 8000752:	4b88      	ldr	r3, [pc, #544]	; (8000974 <USART_Config+0x268>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000756:	4a87      	ldr	r2, [pc, #540]	; (8000974 <USART_Config+0x268>)
 8000758:	f043 0320 	orr.w	r3, r3, #32
 800075c:	6453      	str	r3, [r2, #68]	; 0x44
	 * Condifugración del modo: only TX, only RX, o RXTX
	 * Por último se activa el módulo USART cuando todo está correctamente configurado.
	 */

	/* 2.1 Se empieza por limpiar los registros, para cargar la configuración desde cero. */
	ptrUsartHandler -> ptrUSARTx -> CR1 = 0;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
	ptrUsartHandler -> ptrUSARTx -> CR2 = 0;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]

	/* 2.2 Configuración del Parity: */
	// Se verifica si el parity está activado o no.
	if(ptrUsartHandler -> USART_Config.USART_parity != USART_PARITY_NONE){
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	79db      	ldrb	r3, [r3, #7]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d02b      	beq.n	80007ce <USART_Config+0xc2>

		// Se verifica si se ha seleccionado ODD or EVEN.
		// Se selecciona EVEN.
		if(ptrUsartHandler -> USART_Config.USART_parity == USART_PARITY_EVEN){
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	79db      	ldrb	r3, [r3, #7]
 800077a:	2b02      	cmp	r3, #2
 800077c:	d113      	bne.n	80007a6 <USART_Config+0x9a>

			// Se escribe 0b0 en la posicion 9 del registo CR1 para escoger Even.
			ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_PS);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	68da      	ldr	r2, [r3, #12]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800078c:	60da      	str	r2, [r3, #12]

			// Además, se seleccionan 9 bits.
			ptrUsartHandler -> USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2201      	movs	r2, #1
 8000792:	719a      	strb	r2, [r3, #6]
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	68da      	ldr	r2, [r3, #12]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	e01b      	b.n	80007de <USART_Config+0xd2>

		// Se selecciona ODD.
		else{

			// Se escribe 0b1 en la posicion 9 del registo CR1 para escoger Odd.
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_PS);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	68da      	ldr	r2, [r3, #12]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007b4:	60da      	str	r2, [r3, #12]

			// Además, se seleccionan 9 bits.
			ptrUsartHandler -> USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2201      	movs	r2, #1
 80007ba:	719a      	strb	r2, [r3, #6]
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	68da      	ldr	r2, [r3, #12]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	e007      	b.n	80007de <USART_Config+0xd2>

	// No se desea activar el parity-check.
	else{

		// Se escribe 0b0 en la posicion 10 del registro CR1 para desactivar el Parity..
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_PCE);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	68da      	ldr	r2, [r3, #12]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80007dc:	60da      	str	r2, [r3, #12]
	}

	/* 2.3 Configuración del tamaño del dato: */
	// Se verifica si el dato es de 8 o 9 bits.
	if(ptrUsartHandler -> USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	799b      	ldrb	r3, [r3, #6]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d108      	bne.n	80007f8 <USART_Config+0xec>

		// Se escribe 0b0 en la posicion 12 del registro CR1 para escoger 8 bits.
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_M);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	68da      	ldr	r2, [r3, #12]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	e007      	b.n	8000808 <USART_Config+0xfc>
	}else{

		// Se escribe 0b1 en la posicion 12 del registro CR1 para escoger 9 bits.
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	68da      	ldr	r2, [r3, #12]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000806:	60da      	str	r2, [r3, #12]
	}

	/* 2.4 Configuración de los stop bits (SFR USART_CR2). */
	switch(ptrUsartHandler -> USART_Config.USART_stopbits){
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	7a1b      	ldrb	r3, [r3, #8]
 800080c:	2b03      	cmp	r3, #3
 800080e:	d847      	bhi.n	80008a0 <USART_Config+0x194>
 8000810:	a201      	add	r2, pc, #4	; (adr r2, 8000818 <USART_Config+0x10c>)
 8000812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000816:	bf00      	nop
 8000818:	08000829 	.word	0x08000829
 800081c:	0800083b 	.word	0x0800083b
 8000820:	0800085d 	.word	0x0800085d
 8000824:	0800087f 	.word	0x0800087f
	case USART_STOPBIT_1: {

		// Se escribe el valor 0b00 en los dos bits de STOP.
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	691a      	ldr	r2, [r3, #16]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000836:	611a      	str	r2, [r3, #16]
		break;
 8000838:	e03b      	b.n	80008b2 <USART_Config+0x1a6>
	}
	case USART_STOPBIT_0_5:{

		// Se limpia escribiendo el valor 0b00 en los dos bits de STOP.
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	691a      	ldr	r2, [r3, #16]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000848:	611a      	str	r2, [r3, #16]

		// Se escribe el valor 0b01 en los dos bits de STOP.
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP_0);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	691a      	ldr	r2, [r3, #16]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000858:	611a      	str	r2, [r3, #16]
		break;
 800085a:	e02a      	b.n	80008b2 <USART_Config+0x1a6>
	}
	case USART_STOPBIT_2:{

		// Se limpia escribiendo el valor 0b00 en los dos bits de STOP.
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	691a      	ldr	r2, [r3, #16]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800086a:	611a      	str	r2, [r3, #16]

		// Se escribe el valor 0b10 en los dos bits de STOP.
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP_1);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	691a      	ldr	r2, [r3, #16]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800087a:	611a      	str	r2, [r3, #16]
		break;
 800087c:	e019      	b.n	80008b2 <USART_Config+0x1a6>
	}
	case USART_STOPBIT_1_5:{

		// Se limpia escribiendo el valor 0b00 en los dos bits de STOP.
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	691a      	ldr	r2, [r3, #16]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800088c:	611a      	str	r2, [r3, #16]

		// Se escribe el valor 0b11 en los dos bits de STOP.
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	691a      	ldr	r2, [r3, #16]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800089c:	611a      	str	r2, [r3, #16]
		break;
 800089e:	e008      	b.n	80008b2 <USART_Config+0x1a6>
	}
	default:{

		// Se escribe el valor 0b00 en los dos bits de STOP. Configuración por defecto.
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	691a      	ldr	r2, [r3, #16]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80008ae:	611a      	str	r2, [r3, #16]
		break;
 80008b0:	bf00      	nop
	}
	}

	/* 2.4 Configuración del Baudrate (SFR USART_BRR). */
	// Ver tabla de valores (Tabla 75), Frec = 16MHz, overr = 0.
	if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	795b      	ldrb	r3, [r3, #5]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d105      	bne.n	80008c6 <USART_Config+0x1ba>

		// El valor a cargar es 104.1875 -> Mantisa = 104, fracción = 0.1875
		// Mantisa = 104 = 0x68, fracción = 16 * 0.1875 = 3
		// Valor a cargar 0x683
		// Configuración del Baudrate generator para una velocidad de 9600 bps.
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0683;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f240 6283 	movw	r2, #1667	; 0x683
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	e011      	b.n	80008ea <USART_Config+0x1de>
	}

	else if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_19200){
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	795b      	ldrb	r3, [r3, #5]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d105      	bne.n	80008da <USART_Config+0x1ce>

		// El valor a cargar es 52.0625 -> Mantisa = 52, fracción = 0.0625
		// Mantisa = 52 = 0x34, fracción = 16 * 0.0625 = 1
		// Valor a cargar 0x0341
		// Configuración del Baudrate generator para una velocidad de 19200 bps.
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0341;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f240 3241 	movw	r2, #833	; 0x341
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	e007      	b.n	80008ea <USART_Config+0x1de>
	}

	else if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	795b      	ldrb	r3, [r3, #5]
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d103      	bne.n	80008ea <USART_Config+0x1de>

		// El valor a cargar es 8.6875 -> Mantisa = 8, fracción = 0.6875
		// Mantisa = 8 = 0x8, fracción = 16 * 0.6875 = 11
		// Valor a cargar 0x0081
		// Configuración del Baudrate generator para una velocidad de 115200bps.
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0081;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2281      	movs	r2, #129	; 0x81
 80008e8:	609a      	str	r2, [r3, #8]
	}

	/* 2.5 Configuración del modo: TX only, RX only, RXTX, disable */
	switch(ptrUsartHandler -> USART_Config.USART_mode){
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	791b      	ldrb	r3, [r3, #4]
 80008ee:	2b03      	cmp	r3, #3
 80008f0:	d846      	bhi.n	8000980 <USART_Config+0x274>
 80008f2:	a201      	add	r2, pc, #4	; (adr r2, 80008f8 <USART_Config+0x1ec>)
 80008f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f8:	08000909 	.word	0x08000909
 80008fc:	0800091b 	.word	0x0800091b
 8000900:	0800092d 	.word	0x0800092d
 8000904:	0800094f 	.word	0x0800094f
	case USART_MODE_TX:
	{
		// Se activa la parte del sistema encargada de enviar.
		// Se escribe el valor 0b1 en el bit TE..
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TE);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	68da      	ldr	r2, [r3, #12]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f042 0208 	orr.w	r2, r2, #8
 8000916:	60da      	str	r2, [r3, #12]
		break;
 8000918:	e043      	b.n	80009a2 <USART_Config+0x296>
	}
	case USART_MODE_RX:
	{
		// Se activa la parte del sistema encargada de recibir.
		// Se escribe el valor 0b1 en el bit RE.
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RE);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	68da      	ldr	r2, [r3, #12]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f042 0204 	orr.w	r2, r2, #4
 8000928:	60da      	str	r2, [r3, #12]
		break;
 800092a:	e03a      	b.n	80009a2 <USART_Config+0x296>
	}
	case USART_MODE_RXTX:
	{
		// Se activan ambas partes, tanto transmisión como recepción.
		// Se escribe el valor 0b1 en el bit TE y RE respectivamente.
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TE);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	68da      	ldr	r2, [r3, #12]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f042 0208 	orr.w	r2, r2, #8
 800093a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RE);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	68da      	ldr	r2, [r3, #12]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f042 0204 	orr.w	r2, r2, #4
 800094a:	60da      	str	r2, [r3, #12]
		break;
 800094c:	e029      	b.n	80009a2 <USART_Config+0x296>
	}
	case USART_MODE_DISABLE:
	{
		// Se desactivan ambos canales.
		// Se escribe el valor 0b0 en el bit TE y RE respectivamente.
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TE);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	68da      	ldr	r2, [r3, #12]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f022 0208 	bic.w	r2, r2, #8
 800095c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RE);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	68da      	ldr	r2, [r3, #12]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f022 0204 	bic.w	r2, r2, #4
 800096c:	60da      	str	r2, [r3, #12]
		break;
 800096e:	e018      	b.n	80009a2 <USART_Config+0x296>
 8000970:	40011000 	.word	0x40011000
 8000974:	40023800 	.word	0x40023800
 8000978:	40004400 	.word	0x40004400
 800097c:	40011400 	.word	0x40011400
	}
	default:
	{
		// Actuando por defecto, se desactivan ambos canales.
		// Se escribe el valor 0b0 en el bit TE y RE respectivamente.
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TE);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	68da      	ldr	r2, [r3, #12]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f022 0208 	bic.w	r2, r2, #8
 800098e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RE);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	68da      	ldr	r2, [r3, #12]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f022 0204 	bic.w	r2, r2, #4
 800099e:	60da      	str	r2, [r3, #12]
		break;
 80009a0:	bf00      	nop
	}
	}

	/* 2.6 Activación del modulo serial. */
	if(ptrUsartHandler -> USART_Config.USART_mode != USART_MODE_DISABLE){
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	791b      	ldrb	r3, [r3, #4]
 80009a6:	2b03      	cmp	r3, #3
 80009a8:	d007      	beq.n	80009ba <USART_Config+0x2ae>

		// Se escribe el valor de 0b1 en el bit UE.
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_UE);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	68da      	ldr	r2, [r3, #12]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80009b8:	60da      	str	r2, [r3, #12]
	}

	/* 3. Activación de la interrupción para el USART */
	switch(ptrUsartHandler -> USART_Config.USART_interrupt){
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	7a5b      	ldrb	r3, [r3, #9]
 80009be:	2b03      	cmp	r3, #3
 80009c0:	d83e      	bhi.n	8000a40 <USART_Config+0x334>
 80009c2:	a201      	add	r2, pc, #4	; (adr r2, 80009c8 <USART_Config+0x2bc>)
 80009c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c8:	08000a1f 	.word	0x08000a1f
 80009cc:	080009d9 	.word	0x080009d9
 80009d0:	080009eb 	.word	0x080009eb
 80009d4:	080009fd 	.word	0x080009fd
		case USART_RX_INTERRUPT_ENABLE:
		{
			// Se permite que se levante la bandera RX.
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RXNEIE);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	68da      	ldr	r2, [r3, #12]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f042 0220 	orr.w	r2, r2, #32
 80009e6:	60da      	str	r2, [r3, #12]
		/*
			// NO se permite que se levante la bandera TX.
			ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
		*/
			break;
 80009e8:	e03b      	b.n	8000a62 <USART_Config+0x356>
		}
		case USART_TX_INTERRUPT_ENABLE:
		{
			// Se permite que se levante la bandera TX.
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TXEIE);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	68da      	ldr	r2, [r3, #12]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009f8:	60da      	str	r2, [r3, #12]
			break;
 80009fa:	e032      	b.n	8000a62 <USART_Config+0x356>
		}
		case USART_RXTX_INTERRUPT_ENABLE:
		{
			// Se permite que se levante la bandera RX.
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RXNEIE);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	68da      	ldr	r2, [r3, #12]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f042 0220 	orr.w	r2, r2, #32
 8000a0a:	60da      	str	r2, [r3, #12]

			// Se permite que se levante la bandera TX.
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TXEIE);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	68da      	ldr	r2, [r3, #12]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a1a:	60da      	str	r2, [r3, #12]
			break;
 8000a1c:	e021      	b.n	8000a62 <USART_Config+0x356>
		}
		case USART_INTERRUPT_DISABLE:
		{
			// Se desactiva el levantamiento de la bandera RX.
			ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RXNEIE);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	68da      	ldr	r2, [r3, #12]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f022 0220 	bic.w	r2, r2, #32
 8000a2c:	60da      	str	r2, [r3, #12]

			// Se desactiva el levantamiento de la bandera TX.
			ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	68da      	ldr	r2, [r3, #12]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a3c:	60da      	str	r2, [r3, #12]
			break;
 8000a3e:	e010      	b.n	8000a62 <USART_Config+0x356>
		}
		default:
		{
			// Actuando por defecto, se desactivan ambos canales.
			ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RXNEIE);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	68da      	ldr	r2, [r3, #12]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f022 0220 	bic.w	r2, r2, #32
 8000a4e:	60da      	str	r2, [r3, #12]
			ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	68da      	ldr	r2, [r3, #12]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a5e:	60da      	str	r2, [r3, #12]
			break;
 8000a60:	bf00      	nop
		}
		}

	/* 4. Se registra la interrupción en el NVIC. */
	if(ptrUsartHandler -> ptrUSARTx == USART1){
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a0f      	ldr	r2, [pc, #60]	; (8000aa4 <USART_Config+0x398>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d103      	bne.n	8000a74 <USART_Config+0x368>

		// Se activa la IRQ del USART1.
		__NVIC_EnableIRQ(USART1_IRQn);
 8000a6c:	2025      	movs	r0, #37	; 0x25
 8000a6e:	f7ff fe2f 	bl	80006d0 <__NVIC_EnableIRQ>
 8000a72:	e010      	b.n	8000a96 <USART_Config+0x38a>

	}else if(ptrUsartHandler -> ptrUSARTx == USART2){
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0b      	ldr	r2, [pc, #44]	; (8000aa8 <USART_Config+0x39c>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d103      	bne.n	8000a86 <USART_Config+0x37a>

		// Se activa la IRQ del USART2.
		__NVIC_EnableIRQ(USART2_IRQn);
 8000a7e:	2026      	movs	r0, #38	; 0x26
 8000a80:	f7ff fe26 	bl	80006d0 <__NVIC_EnableIRQ>
 8000a84:	e007      	b.n	8000a96 <USART_Config+0x38a>

	}else if(ptrUsartHandler -> ptrUSARTx == USART6){
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a08      	ldr	r2, [pc, #32]	; (8000aac <USART_Config+0x3a0>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d102      	bne.n	8000a96 <USART_Config+0x38a>

		// Se activa la IRQ del USART6..
		__NVIC_EnableIRQ(USART6_IRQn);
 8000a90:	2047      	movs	r0, #71	; 0x47
 8000a92:	f7ff fe1d 	bl	80006d0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a96:	b662      	cpsie	i
}
 8000a98:	bf00      	nop
	}

	// 5. Se activan de nuevo las interrupciones globales.
	__enable_irq();
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40011000 	.word	0x40011000
 8000aa8:	40004400 	.word	0x40004400
 8000aac:	40011400 	.word	0x40011400

08000ab0 <USART1_Callback>:

//**********//  CallBacks atributo 'weak' //**********//
// Callback USART1
__attribute__((weak)) void USART1_Callback(void){
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
	__NOP();
 8000ab4:	bf00      	nop
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <USART6_Callback>:
__attribute__((weak)) void USART2_Callback(void){
	__NOP();
}

// Callback USART6
__attribute__((weak)) void USART6_Callback(void){
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
	__NOP();
 8000ac4:	bf00      	nop
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <USART1_IRQHandler>:

/* Hay que hacer dos cosas:
 * 1) Atender la interrupción, bajar la bandera.
 * 2) Llamada al Callback */
/* Rutina de atención a la interrupción del USART */
void USART1_IRQHandler(void){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0

	// Se lee el dato. Al hacer esto se baja la bandera automáticamente.
	dataUSART1 = (USART1 -> DR);
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <USART1_IRQHandler+0x18>)
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4b04      	ldr	r3, [pc, #16]	; (8000aec <USART1_IRQHandler+0x1c>)
 8000adc:	701a      	strb	r2, [r3, #0]
	USART1_Callback();
 8000ade:	f7ff ffe7 	bl	8000ab0 <USART1_Callback>

/*	// Se baja la bandera manualmente.
	USART1 -> SR &= ~(USART_SR_RXNE); */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40011000 	.word	0x40011000
 8000aec:	200000ea 	.word	0x200000ea

08000af0 <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0

	// Se lee el dato. Al hacer esto se baja la bandera automáticamente.
	dataUSART2 = (USART2 -> DR);
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <USART2_IRQHandler+0x18>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <USART2_IRQHandler+0x1c>)
 8000afc:	701a      	strb	r2, [r3, #0]
	USART2_Callback();
 8000afe:	f000 f94b 	bl	8000d98 <USART2_Callback>

/*	// Se baja la bandera manualmente.
	USART2 -> SR &= ~(USART_SR_RXNE); */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40004400 	.word	0x40004400
 8000b0c:	200000eb 	.word	0x200000eb

08000b10 <USART6_IRQHandler>:

void USART6_IRQHandler(void){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0

	// Se lee el dato. Al hacer esto se baja la bandera automáticamente.
	dataUSART6 = (USART6 -> DR);
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <USART6_IRQHandler+0x18>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <USART6_IRQHandler+0x1c>)
 8000b1c:	701a      	strb	r2, [r3, #0]
	USART6_Callback();
 8000b1e:	f7ff ffcf 	bl	8000ac0 <USART6_Callback>

/*	// Se baja la bandera manualmente.
	USART6 -> SR &= ~(USART_SR_RXNE); */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40011400 	.word	0x40011400
 8000b2c:	200000e9 	.word	0x200000e9

08000b30 <returnDataUSART2>:
	// Se retorna el valor leído por el USART1.
	return dataUSART1;
}

/* Información leída USART2 */
uint8_t returnDataUSART2(void){
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

	// Se retorna el valor leído por el USART2.
	return dataUSART2;
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <returnDataUSART2+0x14>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	200000eb 	.word	0x200000eb

08000b48 <main>:
void initSystem(void);
void LEDConfig(void);

/*************************************| MAIN |*************************************/
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	// Inicialización del sistema.
	initSystem();
 8000b4c:	f000 f87a 	bl	8000c44 <initSystem>

	// Lectura de la configuración.
	GPIO_Config(&handlerStateLED);
 8000b50:	480b      	ldr	r0, [pc, #44]	; (8000b80 <main+0x38>)
 8000b52:	f7ff fb5f 	bl	8000214 <GPIO_Config>
	GPIO_Config(&handlerLEDPB9);
 8000b56:	480b      	ldr	r0, [pc, #44]	; (8000b84 <main+0x3c>)
 8000b58:	f7ff fb5c 	bl	8000214 <GPIO_Config>
	GPIO_Config(&handlerUSB);
 8000b5c:	480a      	ldr	r0, [pc, #40]	; (8000b88 <main+0x40>)
 8000b5e:	f7ff fb59 	bl	8000214 <GPIO_Config>
	TIM_Config(&handlerTIM2);
 8000b62:	480a      	ldr	r0, [pc, #40]	; (8000b8c <main+0x44>)
 8000b64:	f7ff fcca 	bl	80004fc <TIM_Config>
	TIM_Config(&handlerTIM3);
 8000b68:	4809      	ldr	r0, [pc, #36]	; (8000b90 <main+0x48>)
 8000b6a:	f7ff fcc7 	bl	80004fc <TIM_Config>
	USART_Config(&handlerUsartRX);
 8000b6e:	4809      	ldr	r0, [pc, #36]	; (8000b94 <main+0x4c>)
 8000b70:	f7ff fdcc 	bl	800070c <USART_Config>

	// Variable auxiliar para evaluar los casos de 'O'.
	dataValue = '\0';
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <main+0x50>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]

    /* Ciclo principal */
	while(1){
		LEDConfig();
 8000b7a:	f000 f80f 	bl	8000b9c <LEDConfig>
 8000b7e:	e7fc      	b.n	8000b7a <main+0x32>
 8000b80:	20000020 	.word	0x20000020
 8000b84:	2000002c 	.word	0x2000002c
 8000b88:	20000038 	.word	0x20000038
 8000b8c:	20000044 	.word	0x20000044
 8000b90:	20000050 	.word	0x20000050
 8000b94:	2000005c 	.word	0x2000005c
 8000b98:	200000e8 	.word	0x200000e8

08000b9c <LEDConfig>:
}

/****************************| Definición de Funciones |****************************/

/**********************| Configuración del LED externo (PB9) |**********************/
void LEDConfig(void){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0

	// El caracter leído es 'O'.
	if(dataValue == 'O'){
 8000ba0:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <LEDConfig+0x98>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b4f      	cmp	r3, #79	; 0x4f
 8000ba6:	d108      	bne.n	8000bba <LEDConfig+0x1e>

		// Limpieza del valor leído.
		dataValue = '\0';
 8000ba8:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <LEDConfig+0x98>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]

		// Se cambia la configuración de las interrupciones para el TIM3 (On/Off).
		TIM3 -> DIER ^= TIM_DIER_UIE;
 8000bae:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <LEDConfig+0x9c>)
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	4a21      	ldr	r2, [pc, #132]	; (8000c38 <LEDConfig+0x9c>)
 8000bb4:	f083 0301 	eor.w	r3, r3, #1
 8000bb8:	60d3      	str	r3, [r2, #12]
	}

	// Interrupciones desactivadas para el TIM3.
	if(!(TIM3 -> DIER & TIM_DIER_UIE)){
 8000bba:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <LEDConfig+0x9c>)
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d104      	bne.n	8000bd0 <LEDConfig+0x34>

		// Se apaga el LED externo (PB9).
		GPIO_WritePin(&handlerLEDPB9, RESET);
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	481c      	ldr	r0, [pc, #112]	; (8000c3c <LEDConfig+0xa0>)
 8000bca:	f7ff fc4d 	bl	8000468 <GPIO_WritePin>

			// Limpieza del valor leído.
			dataValue = '\0';
		}
	}
}
 8000bce:	e02f      	b.n	8000c30 <LEDConfig+0x94>
	else if(TIM3 -> DIER & TIM_DIER_UIE){
 8000bd0:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <LEDConfig+0x9c>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d029      	beq.n	8000c30 <LEDConfig+0x94>
		if(dataValue == 'n'){
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <LEDConfig+0x98>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b6e      	cmp	r3, #110	; 0x6e
 8000be2:	d10a      	bne.n	8000bfa <LEDConfig+0x5e>
			handlerTIM3.TIM_Config.TIM_period = 300;
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <LEDConfig+0xa4>)
 8000be6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000bea:	609a      	str	r2, [r3, #8]
			TIM_Config(&handlerTIM3);
 8000bec:	4814      	ldr	r0, [pc, #80]	; (8000c40 <LEDConfig+0xa4>)
 8000bee:	f7ff fc85 	bl	80004fc <TIM_Config>
			dataValue = '\0';
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <LEDConfig+0x98>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
}
 8000bf8:	e01a      	b.n	8000c30 <LEDConfig+0x94>
		else if(dataValue == 'f'){
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <LEDConfig+0x98>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b66      	cmp	r3, #102	; 0x66
 8000c00:	d109      	bne.n	8000c16 <LEDConfig+0x7a>
			handlerTIM3.TIM_Config.TIM_period = 200;
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <LEDConfig+0xa4>)
 8000c04:	22c8      	movs	r2, #200	; 0xc8
 8000c06:	609a      	str	r2, [r3, #8]
			TIM_Config(&handlerTIM3);
 8000c08:	480d      	ldr	r0, [pc, #52]	; (8000c40 <LEDConfig+0xa4>)
 8000c0a:	f7ff fc77 	bl	80004fc <TIM_Config>
			dataValue = '\0';
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <LEDConfig+0x98>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
}
 8000c14:	e00c      	b.n	8000c30 <LEDConfig+0x94>
		else if(dataValue == 'u'){
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <LEDConfig+0x98>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b75      	cmp	r3, #117	; 0x75
 8000c1c:	d108      	bne.n	8000c30 <LEDConfig+0x94>
			handlerTIM3.TIM_Config.TIM_period = 100;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <LEDConfig+0xa4>)
 8000c20:	2264      	movs	r2, #100	; 0x64
 8000c22:	609a      	str	r2, [r3, #8]
			TIM_Config(&handlerTIM3);
 8000c24:	4806      	ldr	r0, [pc, #24]	; (8000c40 <LEDConfig+0xa4>)
 8000c26:	f7ff fc69 	bl	80004fc <TIM_Config>
			dataValue = '\0';
 8000c2a:	4b02      	ldr	r3, [pc, #8]	; (8000c34 <LEDConfig+0x98>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200000e8 	.word	0x200000e8
 8000c38:	40000400 	.word	0x40000400
 8000c3c:	2000002c 	.word	0x2000002c
 8000c40:	20000050 	.word	0x20000050

08000c44 <initSystem>:
/******************************| InitSystem |******************************/
void initSystem(void){
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

	// Configuración del pin (PA5) para el State LED
	handlerStateLED.pGPIOx								= GPIOA;
 8000c48:	4b37      	ldr	r3, [pc, #220]	; (8000d28 <initSystem+0xe4>)
 8000c4a:	4a38      	ldr	r2, [pc, #224]	; (8000d2c <initSystem+0xe8>)
 8000c4c:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 8000c4e:	4b36      	ldr	r3, [pc, #216]	; (8000d28 <initSystem+0xe4>)
 8000c50:	2205      	movs	r2, #5
 8000c52:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 8000c54:	4b34      	ldr	r3, [pc, #208]	; (8000d28 <initSystem+0xe4>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 8000c5a:	4b33      	ldr	r3, [pc, #204]	; (8000d28 <initSystem+0xe4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000c60:	4b31      	ldr	r3, [pc, #196]	; (8000d28 <initSystem+0xe4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	71da      	strb	r2, [r3, #7]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 8000c66:	4b30      	ldr	r3, [pc, #192]	; (8000d28 <initSystem+0xe4>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	719a      	strb	r2, [r3, #6]

	// Configuración del pin (PB9) para el LED externo
	handlerLEDPB9.pGPIOx								= GPIOB;
 8000c6c:	4b30      	ldr	r3, [pc, #192]	; (8000d30 <initSystem+0xec>)
 8000c6e:	4a31      	ldr	r2, [pc, #196]	; (8000d34 <initSystem+0xf0>)
 8000c70:	601a      	str	r2, [r3, #0]
	handlerLEDPB9.GPIO_PinConfig.GPIO_PinNumber			= PIN_9;
 8000c72:	4b2f      	ldr	r3, [pc, #188]	; (8000d30 <initSystem+0xec>)
 8000c74:	2209      	movs	r2, #9
 8000c76:	711a      	strb	r2, [r3, #4]
	handlerLEDPB9.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 8000c78:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <initSystem+0xec>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	715a      	strb	r2, [r3, #5]
	handlerLEDPB9.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 8000c7e:	4b2c      	ldr	r3, [pc, #176]	; (8000d30 <initSystem+0xec>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	721a      	strb	r2, [r3, #8]
	handlerLEDPB9.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000c84:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <initSystem+0xec>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	71da      	strb	r2, [r3, #7]
	handlerLEDPB9.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_MEDIUM;
 8000c8a:	4b29      	ldr	r3, [pc, #164]	; (8000d30 <initSystem+0xec>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	719a      	strb	r2, [r3, #6]

	// Configuración del pin (PA3) para el USB (RX)
	handlerUSB.pGPIOx									= GPIOA;
 8000c90:	4b29      	ldr	r3, [pc, #164]	; (8000d38 <initSystem+0xf4>)
 8000c92:	4a26      	ldr	r2, [pc, #152]	; (8000d2c <initSystem+0xe8>)
 8000c94:	601a      	str	r2, [r3, #0]
	handlerUSB.GPIO_PinConfig.GPIO_PinNumber			= PIN_3;
 8000c96:	4b28      	ldr	r3, [pc, #160]	; (8000d38 <initSystem+0xf4>)
 8000c98:	2203      	movs	r2, #3
 8000c9a:	711a      	strb	r2, [r3, #4]
	handlerUSB.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_ALTFN;
 8000c9c:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <initSystem+0xf4>)
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	715a      	strb	r2, [r3, #5]
	handlerUSB.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 8000ca2:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <initSystem+0xf4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	721a      	strb	r2, [r3, #8]
	handlerUSB.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 8000ca8:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <initSystem+0xf4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	71da      	strb	r2, [r3, #7]
	handlerUSB.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_MEDIUM;
 8000cae:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <initSystem+0xf4>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	719a      	strb	r2, [r3, #6]
	handlerUSB.GPIO_PinConfig.GPIO_PinAltFunMode 		= AF7;
 8000cb4:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <initSystem+0xf4>)
 8000cb6:	2207      	movs	r2, #7
 8000cb8:	725a      	strb	r2, [r3, #9]

	// Configuración USART2 USB para RX
	handlerUsartRX.ptrUSARTx							= USART2;
 8000cba:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <initSystem+0xf8>)
 8000cbc:	4a20      	ldr	r2, [pc, #128]	; (8000d40 <initSystem+0xfc>)
 8000cbe:	601a      	str	r2, [r3, #0]
	handlerUsartRX.USART_Config.USART_mode				= USART_MODE_RX;
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <initSystem+0xf8>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	711a      	strb	r2, [r3, #4]
	handlerUsartRX.USART_Config.USART_baudrate			= USART_BAUDRATE_19200;
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <initSystem+0xf8>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	715a      	strb	r2, [r3, #5]
	handlerUsartRX.USART_Config.USART_datasize			= USART_DATASIZE_8BIT;
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <initSystem+0xf8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	719a      	strb	r2, [r3, #6]
	handlerUsartRX.USART_Config.USART_parity			= USART_PARITY_EVEN;
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <initSystem+0xf8>)
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	71da      	strb	r2, [r3, #7]
	handlerUsartRX.USART_Config.USART_stopbits			= USART_STOPBIT_1;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <initSystem+0xf8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	721a      	strb	r2, [r3, #8]
	handlerUsartRX.USART_Config.USART_interrupt			= USART_RX_INTERRUPT_ENABLE;
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <initSystem+0xf8>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	725a      	strb	r2, [r3, #9]

	// Configuración del timer TIM2
	handlerTIM2.ptrTIMx									= TIM2;
 8000ce4:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <initSystem+0x100>)
 8000ce6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cea:	601a      	str	r2, [r3, #0]
	handlerTIM2.TIM_Config.TIM_mode						= TIM_MODE_UP;
 8000cec:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <initSystem+0x100>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	711a      	strb	r2, [r3, #4]
	handlerTIM2.TIM_Config.TIM_speed					= TIM_INCR_SPEED_1ms;
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <initSystem+0x100>)
 8000cf4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000cf8:	80da      	strh	r2, [r3, #6]
	handlerTIM2.TIM_Config.TIM_period					= 250;
 8000cfa:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <initSystem+0x100>)
 8000cfc:	22fa      	movs	r2, #250	; 0xfa
 8000cfe:	609a      	str	r2, [r3, #8]

	// Configuración del timer TIM3
	handlerTIM3.ptrTIMx									= TIM3;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <initSystem+0x104>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <initSystem+0x108>)
 8000d04:	601a      	str	r2, [r3, #0]
	handlerTIM3.TIM_Config.TIM_mode						= TIM_MODE_UP;
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <initSystem+0x104>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	711a      	strb	r2, [r3, #4]
	handlerTIM3.TIM_Config.TIM_speed					= TIM_INCR_SPEED_1ms;
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <initSystem+0x104>)
 8000d0e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000d12:	80da      	strh	r2, [r3, #6]
	handlerTIM3.TIM_Config.TIM_period					= 300;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <initSystem+0x104>)
 8000d16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d1a:	609a      	str	r2, [r3, #8]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000020 	.word	0x20000020
 8000d2c:	40020000 	.word	0x40020000
 8000d30:	2000002c 	.word	0x2000002c
 8000d34:	40020400 	.word	0x40020400
 8000d38:	20000038 	.word	0x20000038
 8000d3c:	2000005c 	.word	0x2000005c
 8000d40:	40004400 	.word	0x40004400
 8000d44:	20000044 	.word	0x20000044
 8000d48:	20000050 	.word	0x20000050
 8000d4c:	40000400 	.word	0x40000400

08000d50 <TIM2_Callback>:

/******************************| CallBacks |******************************/

// TIM2 Callback
void TIM2_Callback(void){
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
	handlerStateLED.pGPIOx -> ODR ^= GPIO_ODR_OD5;		// Encendido y apagado StateLED (PA5).
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <TIM2_Callback+0x20>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	695a      	ldr	r2, [r3, #20]
 8000d5a:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <TIM2_Callback+0x20>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f082 0220 	eor.w	r2, r2, #32
 8000d62:	615a      	str	r2, [r3, #20]
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000020 	.word	0x20000020

08000d74 <TIM3_Callback>:

// TIM3 Callback
void TIM3_Callback(void){
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
	handlerLEDPB9.pGPIOx -> ODR ^= GPIO_ODR_OD9;		// Encendido y apagado LED externo (PB9).
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <TIM3_Callback+0x20>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	695a      	ldr	r2, [r3, #20]
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <TIM3_Callback+0x20>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8000d86:	615a      	str	r2, [r3, #20]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	2000002c 	.word	0x2000002c

08000d98 <USART2_Callback>:

// USART2 Callback
void USART2_Callback(void){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0

	// Carga de los datos recibidos.
	dataValue = returnDataUSART2();
 8000d9c:	f7ff fec8 	bl	8000b30 <returnDataUSART2>
 8000da0:	4603      	mov	r3, r0
 8000da2:	461a      	mov	r2, r3
 8000da4:	4b01      	ldr	r3, [pc, #4]	; (8000dac <USART2_Callback+0x14>)
 8000da6:	701a      	strb	r2, [r3, #0]

	//auxData = dataValue;
	//LEDConfig();
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200000e8 	.word	0x200000e8

08000db0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000db2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000db4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db8:	480c      	ldr	r0, [pc, #48]	; (8000dec <LoopForever+0x6>)
  ldr r1, =_edata
 8000dba:	490d      	ldr	r1, [pc, #52]	; (8000df0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	; (8000df4 <LoopForever+0xe>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dd0:	4c0a      	ldr	r4, [pc, #40]	; (8000dfc <LoopForever+0x16>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dde:	f000 f811 	bl	8000e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000de2:	f7ff feb1 	bl	8000b48 <main>

08000de6 <LoopForever>:

LoopForever:
    b LoopForever
 8000de6:	e7fe      	b.n	8000de6 <LoopForever>
  ldr   r0, =_estack
 8000de8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000df4:	08000e6c 	.word	0x08000e6c
  ldr r2, =_sbss
 8000df8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000dfc:	200000ec 	.word	0x200000ec

08000e00 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <BusFault_Handler>
	...

08000e04 <__libc_init_array>:
 8000e04:	b570      	push	{r4, r5, r6, lr}
 8000e06:	4d0d      	ldr	r5, [pc, #52]	; (8000e3c <__libc_init_array+0x38>)
 8000e08:	4c0d      	ldr	r4, [pc, #52]	; (8000e40 <__libc_init_array+0x3c>)
 8000e0a:	1b64      	subs	r4, r4, r5
 8000e0c:	10a4      	asrs	r4, r4, #2
 8000e0e:	2600      	movs	r6, #0
 8000e10:	42a6      	cmp	r6, r4
 8000e12:	d109      	bne.n	8000e28 <__libc_init_array+0x24>
 8000e14:	4d0b      	ldr	r5, [pc, #44]	; (8000e44 <__libc_init_array+0x40>)
 8000e16:	4c0c      	ldr	r4, [pc, #48]	; (8000e48 <__libc_init_array+0x44>)
 8000e18:	f000 f818 	bl	8000e4c <_init>
 8000e1c:	1b64      	subs	r4, r4, r5
 8000e1e:	10a4      	asrs	r4, r4, #2
 8000e20:	2600      	movs	r6, #0
 8000e22:	42a6      	cmp	r6, r4
 8000e24:	d105      	bne.n	8000e32 <__libc_init_array+0x2e>
 8000e26:	bd70      	pop	{r4, r5, r6, pc}
 8000e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e2c:	4798      	blx	r3
 8000e2e:	3601      	adds	r6, #1
 8000e30:	e7ee      	b.n	8000e10 <__libc_init_array+0xc>
 8000e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e36:	4798      	blx	r3
 8000e38:	3601      	adds	r6, #1
 8000e3a:	e7f2      	b.n	8000e22 <__libc_init_array+0x1e>
 8000e3c:	08000e64 	.word	0x08000e64
 8000e40:	08000e64 	.word	0x08000e64
 8000e44:	08000e64 	.word	0x08000e64
 8000e48:	08000e68 	.word	0x08000e68

08000e4c <_init>:
 8000e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e4e:	bf00      	nop
 8000e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e52:	bc08      	pop	{r3}
 8000e54:	469e      	mov	lr, r3
 8000e56:	4770      	bx	lr

08000e58 <_fini>:
 8000e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e5a:	bf00      	nop
 8000e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e5e:	bc08      	pop	{r3}
 8000e60:	469e      	mov	lr, r3
 8000e62:	4770      	bx	lr
