
ADC_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e24  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001fc4  08001fc4  00011fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ffc  08001ffc  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001ffc  08001ffc  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ffc  08001ffc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ffc  08001ffc  00011ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002000  08002000  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000064  08002068  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08002068  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003000  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a6d  00000000  00000000  0002308e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000230  00000000  00000000  00023b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001c8  00000000  00000000  00023d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f666  00000000  00000000  00023ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002dac  00000000  00000000  0003355e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055265  00000000  00000000  0003630a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008b56f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000adc  00000000  00000000  0008b5c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001fac 	.word	0x08001fac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08001fac 	.word	0x08001fac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:

void initSystem(void);

// *************** // MAIN // *************** //
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
		// Inicializamos el sistema
		initSystem();
 8000286:	f000 f85f 	bl	8000348 <initSystem>

	    /* Ciclo principal */
		while(1){

			// Hacemos un "eco" con el valor que nos llega por el serial
			if((rxData != '\0')){
 800028a:	4b27      	ldr	r3, [pc, #156]	; (8000328 <main+0xa8>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d024      	beq.n	80002dc <main+0x5c>
				writeChar(&handlerUsart2, rxData);
 8000292:	4b25      	ldr	r3, [pc, #148]	; (8000328 <main+0xa8>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	4619      	mov	r1, r3
 8000298:	4824      	ldr	r0, [pc, #144]	; (800032c <main+0xac>)
 800029a:	f001 f9c1 	bl	8001620 <writeChar>

				if(rxData == 's'){
 800029e:	4b22      	ldr	r3, [pc, #136]	; (8000328 <main+0xa8>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b73      	cmp	r3, #115	; 0x73
 80002a4:	d101      	bne.n	80002aa <main+0x2a>
					//Lanzamos una nueva conversi贸n ADC de un s贸lo valor
					startSingleADC();
 80002a6:	f000 fbb7 	bl	8000a18 <startSingleADC>
				}
				if(rxData == 'c'){
 80002aa:	4b1f      	ldr	r3, [pc, #124]	; (8000328 <main+0xa8>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	2b63      	cmp	r3, #99	; 0x63
 80002b0:	d102      	bne.n	80002b8 <main+0x38>
					// Conversi贸n de modo continua
					//startContinuousADC();
					startTimer(&handlerTimer3);
 80002b2:	481f      	ldr	r0, [pc, #124]	; (8000330 <main+0xb0>)
 80002b4:	f000 feec 	bl	8001090 <startTimer>
				}
				if(rxData == 'm'){
 80002b8:	4b1b      	ldr	r3, [pc, #108]	; (8000328 <main+0xa8>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	2b6d      	cmp	r3, #109	; 0x6d
 80002be:	d101      	bne.n	80002c4 <main+0x44>
					// Conversi贸n de modo continua
					startContinuousADC();
 80002c0:	f000 fbb8 	bl	8000a34 <startContinuousADC>
				}
				if(rxData == 'p'){
 80002c4:	4b18      	ldr	r3, [pc, #96]	; (8000328 <main+0xa8>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	2b70      	cmp	r3, #112	; 0x70
 80002ca:	d104      	bne.n	80002d6 <main+0x56>
					stopContinousADC();
 80002cc:	f000 fbc6 	bl	8000a5c <stopContinousADC>
					stopTimer(&handlerTimer3);
 80002d0:	4817      	ldr	r0, [pc, #92]	; (8000330 <main+0xb0>)
 80002d2:	f000 fef0 	bl	80010b6 <stopTimer>
				}
				// Limpiamos el valor de la variable que guarda los datos del RX
				rxData = '\0';
 80002d6:	4b14      	ldr	r3, [pc, #80]	; (8000328 <main+0xa8>)
 80002d8:	2200      	movs	r2, #0
 80002da:	701a      	strb	r2, [r3, #0]
			}

			if(adcIsComplete == true){
 80002dc:	4b15      	ldr	r3, [pc, #84]	; (8000334 <main+0xb4>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b01      	cmp	r3, #1
 80002e2:	d1d2      	bne.n	800028a <main+0xa>
				ADC1 -> CR2 &= ~(ADC_CR2_SWSTART);
 80002e4:	4b14      	ldr	r3, [pc, #80]	; (8000338 <main+0xb8>)
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	4a13      	ldr	r2, [pc, #76]	; (8000338 <main+0xb8>)
 80002ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80002ee:	6093      	str	r3, [r2, #8]
				stopContinousADC();
 80002f0:	f000 fbb4 	bl	8000a5c <stopContinousADC>
				//sprintf(bufferData, "ADC = %u, %u \n\r",(unsigned int ) adcData,(unsigned int )counter);
				for(uint16_t j = 0; j < ADC_SIGNAL_SIZE; j++){
 80002f4:	2300      	movs	r3, #0
 80002f6:	80fb      	strh	r3, [r7, #6]
 80002f8:	e00f      	b.n	800031a <main+0x9a>
					sprintf(bufferData, "%u\n\r",(unsigned int) adcSignal[j]);
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	4a0f      	ldr	r2, [pc, #60]	; (800033c <main+0xbc>)
 80002fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000302:	461a      	mov	r2, r3
 8000304:	490e      	ldr	r1, [pc, #56]	; (8000340 <main+0xc0>)
 8000306:	480f      	ldr	r0, [pc, #60]	; (8000344 <main+0xc4>)
 8000308:	f001 f9e4 	bl	80016d4 <siprintf>
					writeMsg(&handlerUsart2, bufferData);
 800030c:	490d      	ldr	r1, [pc, #52]	; (8000344 <main+0xc4>)
 800030e:	4807      	ldr	r0, [pc, #28]	; (800032c <main+0xac>)
 8000310:	f001 f99e 	bl	8001650 <writeMsg>
				for(uint16_t j = 0; j < ADC_SIGNAL_SIZE; j++){
 8000314:	88fb      	ldrh	r3, [r7, #6]
 8000316:	3301      	adds	r3, #1
 8000318:	80fb      	strh	r3, [r7, #6]
 800031a:	88fb      	ldrh	r3, [r7, #6]
 800031c:	2b02      	cmp	r3, #2
 800031e:	d9ec      	bls.n	80002fa <main+0x7a>
				}
//				writeMsg(&handlerUsart2, bufferData);
//				counter++;
				adcIsComplete = false;
 8000320:	4b04      	ldr	r3, [pc, #16]	; (8000334 <main+0xb4>)
 8000322:	2200      	movs	r2, #0
 8000324:	701a      	strb	r2, [r3, #0]
			if((rxData != '\0')){
 8000326:	e7b0      	b.n	800028a <main+0xa>
 8000328:	20000154 	.word	0x20000154
 800032c:	200000c8 	.word	0x200000c8
 8000330:	200000a4 	.word	0x200000a4
 8000334:	20000155 	.word	0x20000155
 8000338:	40012000 	.word	0x40012000
 800033c:	20000198 	.word	0x20000198
 8000340:	08001fc4 	.word	0x08001fc4
 8000344:	20000158 	.word	0x20000158

08000348 <initSystem>:

//***********// InitSystem //***********//

// Funci贸n que define la configuraci贸n de todos los pines y perif茅ricos

void initSystem(void){
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0

	// Configuraci贸n el State LED
	handlerStateLED.pGPIOx								= GPIOA;
 800034c:	4b4d      	ldr	r3, [pc, #308]	; (8000484 <initSystem+0x13c>)
 800034e:	4a4e      	ldr	r2, [pc, #312]	; (8000488 <initSystem+0x140>)
 8000350:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 8000352:	4b4c      	ldr	r3, [pc, #304]	; (8000484 <initSystem+0x13c>)
 8000354:	2205      	movs	r2, #5
 8000356:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 8000358:	4b4a      	ldr	r3, [pc, #296]	; (8000484 <initSystem+0x13c>)
 800035a:	2201      	movs	r2, #1
 800035c:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 800035e:	4b49      	ldr	r3, [pc, #292]	; (8000484 <initSystem+0x13c>)
 8000360:	2200      	movs	r2, #0
 8000362:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000364:	4b47      	ldr	r3, [pc, #284]	; (8000484 <initSystem+0x13c>)
 8000366:	2200      	movs	r2, #0
 8000368:	71da      	strb	r2, [r3, #7]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 800036a:	4b46      	ldr	r3, [pc, #280]	; (8000484 <initSystem+0x13c>)
 800036c:	2201      	movs	r2, #1
 800036e:	719a      	strb	r2, [r3, #6]

	// Configuraci贸n del ADC1

	//configADC1.channel									= ADC_CHANNEL_4;
	configADC1.resolution								= ADC_RESOLUTION_12_BIT;
 8000370:	4b46      	ldr	r3, [pc, #280]	; (800048c <initSystem+0x144>)
 8000372:	2200      	movs	r2, #0
 8000374:	705a      	strb	r2, [r3, #1]
	configADC1.samplingPeriod							= ADC_SAMPLING_PERIOD_144_CYCLES;
 8000376:	4b45      	ldr	r3, [pc, #276]	; (800048c <initSystem+0x144>)
 8000378:	2206      	movs	r2, #6
 800037a:	805a      	strh	r2, [r3, #2]
	configADC1.dataAlignment							= ADC_ALIGNMENT_RIGHT;
 800037c:	4b43      	ldr	r3, [pc, #268]	; (800048c <initSystem+0x144>)
 800037e:	2200      	movs	r2, #0
 8000380:	711a      	strb	r2, [r3, #4]
	configADC1.numberOfChannels							= 3;
 8000382:	4b42      	ldr	r3, [pc, #264]	; (800048c <initSystem+0x144>)
 8000384:	2203      	movs	r2, #3
 8000386:	719a      	strb	r2, [r3, #6]
	configADC1.channelMode								= ADC_MULTI_CHANNEL;
 8000388:	4b40      	ldr	r3, [pc, #256]	; (800048c <initSystem+0x144>)
 800038a:	2201      	movs	r2, #1
 800038c:	715a      	strb	r2, [r3, #5]
	configADC1.channel_First							= ADC_CHANNEL_4;
 800038e:	4b3f      	ldr	r3, [pc, #252]	; (800048c <initSystem+0x144>)
 8000390:	2204      	movs	r2, #4
 8000392:	721a      	strb	r2, [r3, #8]
	configADC1.channel_Second							= ADC_CHANNEL_6;
 8000394:	4b3d      	ldr	r3, [pc, #244]	; (800048c <initSystem+0x144>)
 8000396:	2206      	movs	r2, #6
 8000398:	725a      	strb	r2, [r3, #9]
	configADC1.channel_Third							= ADC_CHANNEL_7;
 800039a:	4b3c      	ldr	r3, [pc, #240]	; (800048c <initSystem+0x144>)
 800039c:	2207      	movs	r2, #7
 800039e:	729a      	strb	r2, [r3, #10]

	adc_Config(&configADC1);
 80003a0:	483a      	ldr	r0, [pc, #232]	; (800048c <initSystem+0x144>)
 80003a2:	f000 f96f 	bl	8000684 <adc_Config>

	//multiChannelADC(&configADC1);

	// Configuraci贸n del pin PA3 USB RX
	handlerUSBRX.pGPIOx									= GPIOA;
 80003a6:	4b3a      	ldr	r3, [pc, #232]	; (8000490 <initSystem+0x148>)
 80003a8:	4a37      	ldr	r2, [pc, #220]	; (8000488 <initSystem+0x140>)
 80003aa:	601a      	str	r2, [r3, #0]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinNumber			= PIN_3;
 80003ac:	4b38      	ldr	r3, [pc, #224]	; (8000490 <initSystem+0x148>)
 80003ae:	2203      	movs	r2, #3
 80003b0:	711a      	strb	r2, [r3, #4]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 80003b2:	4b37      	ldr	r3, [pc, #220]	; (8000490 <initSystem+0x148>)
 80003b4:	2202      	movs	r2, #2
 80003b6:	715a      	strb	r2, [r3, #5]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 80003b8:	4b35      	ldr	r3, [pc, #212]	; (8000490 <initSystem+0x148>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	721a      	strb	r2, [r3, #8]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 80003be:	4b34      	ldr	r3, [pc, #208]	; (8000490 <initSystem+0x148>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	71da      	strb	r2, [r3, #7]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_MEDIUM;
 80003c4:	4b32      	ldr	r3, [pc, #200]	; (8000490 <initSystem+0x148>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	719a      	strb	r2, [r3, #6]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinAltFunMode 		= AF7;
 80003ca:	4b31      	ldr	r3, [pc, #196]	; (8000490 <initSystem+0x148>)
 80003cc:	2207      	movs	r2, #7
 80003ce:	725a      	strb	r2, [r3, #9]

	// Configuraci贸n del pin PA2 USB TX
	handlerUSBTX.pGPIOx									= GPIOA;
 80003d0:	4b30      	ldr	r3, [pc, #192]	; (8000494 <initSystem+0x14c>)
 80003d2:	4a2d      	ldr	r2, [pc, #180]	; (8000488 <initSystem+0x140>)
 80003d4:	601a      	str	r2, [r3, #0]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinNumber			= PIN_2;
 80003d6:	4b2f      	ldr	r3, [pc, #188]	; (8000494 <initSystem+0x14c>)
 80003d8:	2202      	movs	r2, #2
 80003da:	711a      	strb	r2, [r3, #4]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 80003dc:	4b2d      	ldr	r3, [pc, #180]	; (8000494 <initSystem+0x14c>)
 80003de:	2202      	movs	r2, #2
 80003e0:	715a      	strb	r2, [r3, #5]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 80003e2:	4b2c      	ldr	r3, [pc, #176]	; (8000494 <initSystem+0x14c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	721a      	strb	r2, [r3, #8]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 80003e8:	4b2a      	ldr	r3, [pc, #168]	; (8000494 <initSystem+0x14c>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	71da      	strb	r2, [r3, #7]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_MEDIUM;
 80003ee:	4b29      	ldr	r3, [pc, #164]	; (8000494 <initSystem+0x14c>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	719a      	strb	r2, [r3, #6]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinAltFunMode 		= AF7;
 80003f4:	4b27      	ldr	r3, [pc, #156]	; (8000494 <initSystem+0x14c>)
 80003f6:	2207      	movs	r2, #7
 80003f8:	725a      	strb	r2, [r3, #9]

	// Configuraci贸n del USART del USB para RXTX
	handlerUsart2.ptrUSARTx								= USART2;
 80003fa:	4b27      	ldr	r3, [pc, #156]	; (8000498 <initSystem+0x150>)
 80003fc:	4a27      	ldr	r2, [pc, #156]	; (800049c <initSystem+0x154>)
 80003fe:	601a      	str	r2, [r3, #0]
	handlerUsart2.USART_Config.USART_mode				= USART_MODE_RXTX;
 8000400:	4b25      	ldr	r3, [pc, #148]	; (8000498 <initSystem+0x150>)
 8000402:	2202      	movs	r2, #2
 8000404:	711a      	strb	r2, [r3, #4]
	handlerUsart2.USART_Config.USART_baudrate			= USART_BAUDRATE_19200;
 8000406:	4b24      	ldr	r3, [pc, #144]	; (8000498 <initSystem+0x150>)
 8000408:	2201      	movs	r2, #1
 800040a:	715a      	strb	r2, [r3, #5]
	handlerUsart2.USART_Config.USART_datasize			= USART_DATASIZE_8BIT;
 800040c:	4b22      	ldr	r3, [pc, #136]	; (8000498 <initSystem+0x150>)
 800040e:	2200      	movs	r2, #0
 8000410:	719a      	strb	r2, [r3, #6]
	handlerUsart2.USART_Config.USART_parity				= USART_PARITY_ODD;
 8000412:	4b21      	ldr	r3, [pc, #132]	; (8000498 <initSystem+0x150>)
 8000414:	2201      	movs	r2, #1
 8000416:	71da      	strb	r2, [r3, #7]
	handlerUsart2.USART_Config.USART_stopbits			= USART_STOPBIT_1;
 8000418:	4b1f      	ldr	r3, [pc, #124]	; (8000498 <initSystem+0x150>)
 800041a:	2200      	movs	r2, #0
 800041c:	721a      	strb	r2, [r3, #8]
	handlerUsart2.USART_Config.USART_interrupt 			= USART_INTERRUPT_RX_ENABLE;
 800041e:	4b1e      	ldr	r3, [pc, #120]	; (8000498 <initSystem+0x150>)
 8000420:	2200      	movs	r2, #0
 8000422:	725a      	strb	r2, [r3, #9]


	// Configuraci贸n del timer2
	handlerTimer2.ptrTIMx								= TIM2;
 8000424:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <initSystem+0x158>)
 8000426:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800042a:	601a      	str	r2, [r3, #0]
	handlerTimer2.timerConfig.Timer_mode				= TIMER_MODE_UP;
 800042c:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <initSystem+0x158>)
 800042e:	2200      	movs	r2, #0
 8000430:	711a      	strb	r2, [r3, #4]
	handlerTimer2.timerConfig.Timer_speed				= TIMER_INCR_SPEED_1ms;
 8000432:	4b1b      	ldr	r3, [pc, #108]	; (80004a0 <initSystem+0x158>)
 8000434:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000438:	80da      	strh	r2, [r3, #6]
	handlerTimer2.timerConfig.Timer_period				= 250;
 800043a:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <initSystem+0x158>)
 800043c:	22fa      	movs	r2, #250	; 0xfa
 800043e:	609a      	str	r2, [r3, #8]

	// Configuraci贸n del timer3
	handlerTimer3.ptrTIMx								= TIM3;
 8000440:	4b18      	ldr	r3, [pc, #96]	; (80004a4 <initSystem+0x15c>)
 8000442:	4a19      	ldr	r2, [pc, #100]	; (80004a8 <initSystem+0x160>)
 8000444:	601a      	str	r2, [r3, #0]
	handlerTimer3.timerConfig.Timer_mode				= TIMER_MODE_UP;
 8000446:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <initSystem+0x15c>)
 8000448:	2200      	movs	r2, #0
 800044a:	711a      	strb	r2, [r3, #4]
	handlerTimer3.timerConfig.Timer_speed				= TIMER_INCR_SPEED_1ms;
 800044c:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <initSystem+0x15c>)
 800044e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000452:	80da      	strh	r2, [r3, #6]
	handlerTimer3.timerConfig.Timer_period				= 500;
 8000454:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <initSystem+0x15c>)
 8000456:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800045a:	609a      	str	r2, [r3, #8]

	//Cargamos la configuraci贸n
	GPIO_Config(&handlerStateLED);
 800045c:	4809      	ldr	r0, [pc, #36]	; (8000484 <initSystem+0x13c>)
 800045e:	f000 fbdb 	bl	8000c18 <GPIO_Config>
	GPIO_Config(&handlerUSBRX);
 8000462:	480b      	ldr	r0, [pc, #44]	; (8000490 <initSystem+0x148>)
 8000464:	f000 fbd8 	bl	8000c18 <GPIO_Config>
	GPIO_Config(&handlerUSBTX);
 8000468:	480a      	ldr	r0, [pc, #40]	; (8000494 <initSystem+0x14c>)
 800046a:	f000 fbd5 	bl	8000c18 <GPIO_Config>
	USART_Config(&handlerUsart2);
 800046e:	480a      	ldr	r0, [pc, #40]	; (8000498 <initSystem+0x150>)
 8000470:	f000 fe96 	bl	80011a0 <USART_Config>
	Timer_Config(&handlerTimer2);
 8000474:	480a      	ldr	r0, [pc, #40]	; (80004a0 <initSystem+0x158>)
 8000476:	f000 fd61 	bl	8000f3c <Timer_Config>
	Timer_Config(&handlerTimer3);
 800047a:	480a      	ldr	r0, [pc, #40]	; (80004a4 <initSystem+0x15c>)
 800047c:	f000 fd5e 	bl	8000f3c <Timer_Config>
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20000080 	.word	0x20000080
 8000488:	40020000 	.word	0x40020000
 800048c:	2000008c 	.word	0x2000008c
 8000490:	200000b0 	.word	0x200000b0
 8000494:	200000bc 	.word	0x200000bc
 8000498:	200000c8 	.word	0x200000c8
 800049c:	40004400 	.word	0x40004400
 80004a0:	20000098 	.word	0x20000098
 80004a4:	200000a4 	.word	0x200000a4
 80004a8:	40000400 	.word	0x40000400

080004ac <Timer2_Callback>:
//***********// CallBacks //***********//
void Timer2_Callback(void){
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
	handlerStateLED.pGPIOx -> ODR ^= GPIO_ODR_OD5;		// Encendido y apagado StateLED
 80004b0:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <Timer2_Callback+0x1c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	695a      	ldr	r2, [r3, #20]
 80004b6:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <Timer2_Callback+0x1c>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f082 0220 	eor.w	r2, r2, #32
 80004be:	615a      	str	r2, [r3, #20]
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr
 80004c8:	20000080 	.word	0x20000080

080004cc <Timer3_Callback>:

void Timer3_Callback(void){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	startSingleADC();									// Lanzamos la conversi贸n ADC
 80004d0:	f000 faa2 	bl	8000a18 <startSingleADC>
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <USART2_Callback>:

void USART2_Callback(void){
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	// Lectura de los datos recibidos
	rxData = returnData();
 80004dc:	f001 f896 	bl	800160c <returnData>
 80004e0:	4603      	mov	r3, r0
 80004e2:	461a      	mov	r2, r3
 80004e4:	4b01      	ldr	r3, [pc, #4]	; (80004ec <USART2_Callback+0x14>)
 80004e6:	701a      	strb	r2, [r3, #0]
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000154 	.word	0x20000154

080004f0 <adc_Complete_Callback>:

void adc_Complete_Callback(void){
 80004f0:	b598      	push	{r3, r4, r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	// Cambiamos el valor de adcIsComplete
//	adcData = getADC();
//	adcIsComplete = true;
	adcSignal[dataPosition] = getADC();
 80004f4:	4b0d      	ldr	r3, [pc, #52]	; (800052c <adc_Complete_Callback+0x3c>)
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	461c      	mov	r4, r3
 80004fa:	f000 fabd 	bl	8000a78 <getADC>
 80004fe:	4603      	mov	r3, r0
 8000500:	461a      	mov	r2, r3
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <adc_Complete_Callback+0x40>)
 8000504:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	dataPosition++;
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <adc_Complete_Callback+0x3c>)
 800050a:	881b      	ldrh	r3, [r3, #0]
 800050c:	3301      	adds	r3, #1
 800050e:	b29a      	uxth	r2, r3
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <adc_Complete_Callback+0x3c>)
 8000512:	801a      	strh	r2, [r3, #0]
	if (dataPosition >= ADC_SIGNAL_SIZE){
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <adc_Complete_Callback+0x3c>)
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	2b02      	cmp	r3, #2
 800051a:	d905      	bls.n	8000528 <adc_Complete_Callback+0x38>
		dataPosition = 0;
 800051c:	4b03      	ldr	r3, [pc, #12]	; (800052c <adc_Complete_Callback+0x3c>)
 800051e:	2200      	movs	r2, #0
 8000520:	801a      	strh	r2, [r3, #0]
		adcIsComplete = true;
 8000522:	4b04      	ldr	r3, [pc, #16]	; (8000534 <adc_Complete_Callback+0x44>)
 8000524:	2201      	movs	r2, #1
 8000526:	701a      	strb	r2, [r3, #0]
	}
}
 8000528:	bf00      	nop
 800052a:	bd98      	pop	{r3, r4, r7, pc}
 800052c:	2000019e 	.word	0x2000019e
 8000530:	20000198 	.word	0x20000198
 8000534:	20000155 	.word	0x20000155

08000538 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000540:	4a14      	ldr	r2, [pc, #80]	; (8000594 <_sbrk+0x5c>)
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <_sbrk+0x60>)
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800054c:	4b13      	ldr	r3, [pc, #76]	; (800059c <_sbrk+0x64>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d102      	bne.n	800055a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000554:	4b11      	ldr	r3, [pc, #68]	; (800059c <_sbrk+0x64>)
 8000556:	4a12      	ldr	r2, [pc, #72]	; (80005a0 <_sbrk+0x68>)
 8000558:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800055a:	4b10      	ldr	r3, [pc, #64]	; (800059c <_sbrk+0x64>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	693a      	ldr	r2, [r7, #16]
 8000564:	429a      	cmp	r2, r3
 8000566:	d207      	bcs.n	8000578 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000568:	f001 f88a 	bl	8001680 <__errno>
 800056c:	4603      	mov	r3, r0
 800056e:	220c      	movs	r2, #12
 8000570:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000576:	e009      	b.n	800058c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <_sbrk+0x64>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800057e:	4b07      	ldr	r3, [pc, #28]	; (800059c <_sbrk+0x64>)
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4413      	add	r3, r2
 8000586:	4a05      	ldr	r2, [pc, #20]	; (800059c <_sbrk+0x64>)
 8000588:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800058a:	68fb      	ldr	r3, [r7, #12]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3718      	adds	r7, #24
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20020000 	.word	0x20020000
 8000598:	00000400 	.word	0x00000400
 800059c:	200001a0 	.word	0x200001a0
 80005a0:	200001c8 	.word	0x200001c8

080005a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005a4:	480d      	ldr	r0, [pc, #52]	; (80005dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ac:	480c      	ldr	r0, [pc, #48]	; (80005e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ae:	490d      	ldr	r1, [pc, #52]	; (80005e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b0:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <LoopForever+0xe>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b4:	e002      	b.n	80005bc <LoopCopyDataInit>

080005b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ba:	3304      	adds	r3, #4

080005bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c0:	d3f9      	bcc.n	80005b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c2:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c4:	4c0a      	ldr	r4, [pc, #40]	; (80005f0 <LoopForever+0x16>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c8:	e001      	b.n	80005ce <LoopFillZerobss>

080005ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005cc:	3204      	adds	r2, #4

080005ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d0:	d3fb      	bcc.n	80005ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005d2:	f001 f85b 	bl	800168c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005d6:	f7ff fe53 	bl	8000280 <main>

080005da <LoopForever>:

LoopForever:
    b LoopForever
 80005da:	e7fe      	b.n	80005da <LoopForever>
  ldr   r0, =_estack
 80005dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80005e8:	08002004 	.word	0x08002004
  ldr r2, =_sbss
 80005ec:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80005f0:	200001c4 	.word	0x200001c4

080005f4 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f4:	e7fe      	b.n	80005f4 <BusFault_Handler>
	...

080005f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000606:	2b00      	cmp	r3, #0
 8000608:	db0b      	blt.n	8000622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	f003 021f 	and.w	r2, r3, #31
 8000610:	4906      	ldr	r1, [pc, #24]	; (800062c <__NVIC_EnableIRQ+0x34>)
 8000612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000616:	095b      	lsrs	r3, r3, #5
 8000618:	2001      	movs	r0, #1
 800061a:	fa00 f202 	lsl.w	r2, r0, r2
 800061e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	e000e100 	.word	0xe000e100

08000630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	6039      	str	r1, [r7, #0]
 800063a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800063c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000640:	2b00      	cmp	r3, #0
 8000642:	db0a      	blt.n	800065a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	b2da      	uxtb	r2, r3
 8000648:	490c      	ldr	r1, [pc, #48]	; (800067c <__NVIC_SetPriority+0x4c>)
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	0112      	lsls	r2, r2, #4
 8000650:	b2d2      	uxtb	r2, r2
 8000652:	440b      	add	r3, r1
 8000654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000658:	e00a      	b.n	8000670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4908      	ldr	r1, [pc, #32]	; (8000680 <__NVIC_SetPriority+0x50>)
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	f003 030f 	and.w	r3, r3, #15
 8000666:	3b04      	subs	r3, #4
 8000668:	0112      	lsls	r2, r2, #4
 800066a:	b2d2      	uxtb	r2, r2
 800066c:	440b      	add	r3, r1
 800066e:	761a      	strb	r2, [r3, #24]
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000e100 	.word	0xe000e100
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <adc_Config>:
#include "GPIOxDriver.h"

GPIO_Handler_t handlerAdcPin = {0};
uint16_t 		adcRawData 	 = {0};

void adc_Config(ADC_Config_t *adcConfig){
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
}
 800068e:	bf00      	nop
	__disable_irq();

	/* 1. Configuramos el PinX para que cumpla la funci贸n de canal an谩logo deseado. */

	/*1. Verificamos si es single Channel, o multichannel */
	if(adcConfig -> channelMode == ADC_SINGLE_CHANNEL){
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	795b      	ldrb	r3, [r3, #5]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d105      	bne.n	80006a4 <adc_Config+0x20>
		configAnalogPin(adcConfig -> channel);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fa0b 	bl	8000ab8 <configAnalogPin>
 80006a2:	e016      	b.n	80006d2 <adc_Config+0x4e>
	}
	else if(adcConfig -> channelMode == ADC_MULTI_CHANNEL){
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	795b      	ldrb	r3, [r3, #5]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d112      	bne.n	80006d2 <adc_Config+0x4e>
		if(adcConfig -> numberOfChannels == 3){
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	799b      	ldrb	r3, [r3, #6]
 80006b0:	2b03      	cmp	r3, #3
 80006b2:	d10e      	bne.n	80006d2 <adc_Config+0x4e>
			configAnalogPin(adcConfig -> channel_First);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	7a1b      	ldrb	r3, [r3, #8]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 f9fd 	bl	8000ab8 <configAnalogPin>
			configAnalogPin(adcConfig -> channel_Second);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	7a5b      	ldrb	r3, [r3, #9]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 f9f8 	bl	8000ab8 <configAnalogPin>
			configAnalogPin(adcConfig -> channel_Third);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	7a9b      	ldrb	r3, [r3, #10]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 f9f3 	bl	8000ab8 <configAnalogPin>
		}
	}

	/* 2. Activamos la se帽al de reloj para el perif茅rico ADC1 (bus APB2) */
	RCC -> APB2ENR |= RCC_APB2ENR_ADC1EN;
 80006d2:	4b7a      	ldr	r3, [pc, #488]	; (80008bc <adc_Config+0x238>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d6:	4a79      	ldr	r2, [pc, #484]	; (80008bc <adc_Config+0x238>)
 80006d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006dc:	6453      	str	r3, [r2, #68]	; 0x44

	// Limpiamos los registros antes de comenzar a configurar
	ADC1 -> CR1 = 0;
 80006de:	4b78      	ldr	r3, [pc, #480]	; (80008c0 <adc_Config+0x23c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	605a      	str	r2, [r3, #4]
	ADC1 -> CR2 = 0;
 80006e4:	4b76      	ldr	r3, [pc, #472]	; (80008c0 <adc_Config+0x23c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]

	/* Comenzamos la configuraci贸n del ADC1 */
	/* 3. Resoluci贸n del ADC */
	switch(adcConfig -> resolution){
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	785b      	ldrb	r3, [r3, #1]
 80006ee:	2b03      	cmp	r3, #3
 80006f0:	d83e      	bhi.n	8000770 <adc_Config+0xec>
 80006f2:	a201      	add	r2, pc, #4	; (adr r2, 80006f8 <adc_Config+0x74>)
 80006f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f8:	08000709 	.word	0x08000709
 80006fc:	08000723 	.word	0x08000723
 8000700:	0800073d 	.word	0x0800073d
 8000704:	08000757 	.word	0x08000757
	case ADC_RESOLUTION_12_BIT:
	{
		ADC1 -> CR1 &= ~ADC_CR1_RES_0;
 8000708:	4b6d      	ldr	r3, [pc, #436]	; (80008c0 <adc_Config+0x23c>)
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	4a6c      	ldr	r2, [pc, #432]	; (80008c0 <adc_Config+0x23c>)
 800070e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000712:	6053      	str	r3, [r2, #4]
		ADC1 -> CR1 &= ~ADC_CR1_RES_1;
 8000714:	4b6a      	ldr	r3, [pc, #424]	; (80008c0 <adc_Config+0x23c>)
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	4a69      	ldr	r2, [pc, #420]	; (80008c0 <adc_Config+0x23c>)
 800071a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800071e:	6053      	str	r3, [r2, #4]
		break;
 8000720:	e027      	b.n	8000772 <adc_Config+0xee>
	}

	case ADC_RESOLUTION_10_BIT:
	{
		ADC1 -> CR1 |= ADC_CR1_RES_0;
 8000722:	4b67      	ldr	r3, [pc, #412]	; (80008c0 <adc_Config+0x23c>)
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	4a66      	ldr	r2, [pc, #408]	; (80008c0 <adc_Config+0x23c>)
 8000728:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800072c:	6053      	str	r3, [r2, #4]
		ADC1 -> CR1 &= ~ADC_CR1_RES_1;
 800072e:	4b64      	ldr	r3, [pc, #400]	; (80008c0 <adc_Config+0x23c>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	4a63      	ldr	r2, [pc, #396]	; (80008c0 <adc_Config+0x23c>)
 8000734:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000738:	6053      	str	r3, [r2, #4]
		break;
 800073a:	e01a      	b.n	8000772 <adc_Config+0xee>
	}

	case ADC_RESOLUTION_8_BIT:
	{
		ADC1 -> CR1 &= ~ADC_CR1_RES_0;
 800073c:	4b60      	ldr	r3, [pc, #384]	; (80008c0 <adc_Config+0x23c>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	4a5f      	ldr	r2, [pc, #380]	; (80008c0 <adc_Config+0x23c>)
 8000742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000746:	6053      	str	r3, [r2, #4]
		ADC1 -> CR1 |= ADC_CR1_RES_1;
 8000748:	4b5d      	ldr	r3, [pc, #372]	; (80008c0 <adc_Config+0x23c>)
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	4a5c      	ldr	r2, [pc, #368]	; (80008c0 <adc_Config+0x23c>)
 800074e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000752:	6053      	str	r3, [r2, #4]
		break;
 8000754:	e00d      	b.n	8000772 <adc_Config+0xee>
	}
	case ADC_RESOLUTION_6_BIT:
	{
		ADC1 -> CR1 |= ADC_CR1_RES_0;
 8000756:	4b5a      	ldr	r3, [pc, #360]	; (80008c0 <adc_Config+0x23c>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	4a59      	ldr	r2, [pc, #356]	; (80008c0 <adc_Config+0x23c>)
 800075c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000760:	6053      	str	r3, [r2, #4]
		ADC1 -> CR1 |= ADC_CR1_RES_1;
 8000762:	4b57      	ldr	r3, [pc, #348]	; (80008c0 <adc_Config+0x23c>)
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	4a56      	ldr	r2, [pc, #344]	; (80008c0 <adc_Config+0x23c>)
 8000768:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800076c:	6053      	str	r3, [r2, #4]
		break;
 800076e:	e000      	b.n	8000772 <adc_Config+0xee>
	}

	default:
	{
		break;
 8000770:	bf00      	nop
	}
	}

	/* 4. Configuramos el modo Scan mode */
	if(adcConfig -> channelMode == ADC_SINGLE_CHANNEL){
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	795b      	ldrb	r3, [r3, #5]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d106      	bne.n	8000788 <adc_Config+0x104>
		//Configuramos el modo Scan como desactivado
		ADC1 -> CR1 &= ~(ADC_CR1_SCAN);
 800077a:	4b51      	ldr	r3, [pc, #324]	; (80008c0 <adc_Config+0x23c>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	4a50      	ldr	r2, [pc, #320]	; (80008c0 <adc_Config+0x23c>)
 8000780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000784:	6053      	str	r3, [r2, #4]
 8000786:	e00b      	b.n	80007a0 <adc_Config+0x11c>
	}
	else if(adcConfig -> channelMode == ADC_MULTI_CHANNEL){
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	795b      	ldrb	r3, [r3, #5]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d106      	bne.n	800079e <adc_Config+0x11a>
		//Configuramos el modo Scan como activado
		ADC1 -> CR1  |= (ADC_CR1_SCAN);
 8000790:	4b4b      	ldr	r3, [pc, #300]	; (80008c0 <adc_Config+0x23c>)
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	4a4a      	ldr	r2, [pc, #296]	; (80008c0 <adc_Config+0x23c>)
 8000796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800079a:	6053      	str	r3, [r2, #4]
 800079c:	e000      	b.n	80007a0 <adc_Config+0x11c>
	}
	else{
		__NOP();
 800079e:	bf00      	nop
	}

	/* 5. Configuramos la alineaci贸n de los datos (derecha o izquierda) */
	if(adcConfig -> dataAlignment == ADC_ALIGNMENT_RIGHT){
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	791b      	ldrb	r3, [r3, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d106      	bne.n	80007b6 <adc_Config+0x132>
		// Alineaci贸n a la derecha (esta es la forma "natural")
		ADC1 -> CR2 &= ~(ADC_CR2_ALIGN);
 80007a8:	4b45      	ldr	r3, [pc, #276]	; (80008c0 <adc_Config+0x23c>)
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	4a44      	ldr	r2, [pc, #272]	; (80008c0 <adc_Config+0x23c>)
 80007ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007b2:	6093      	str	r3, [r2, #8]
 80007b4:	e005      	b.n	80007c2 <adc_Config+0x13e>
	}
	else{
		// Alineaci贸n a la izquierda (para algunos c谩lculos matem谩ticos).
		ADC1 -> CR2 |= ADC_CR2_ALIGN;
 80007b6:	4b42      	ldr	r3, [pc, #264]	; (80008c0 <adc_Config+0x23c>)
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	4a41      	ldr	r2, [pc, #260]	; (80008c0 <adc_Config+0x23c>)
 80007bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007c0:	6093      	str	r3, [r2, #8]
	}

	/* 6. Desactivamos el "continuos mode" */
	ADC1 -> CR2 &= ~(ADC_CR2_CONT);
 80007c2:	4b3f      	ldr	r3, [pc, #252]	; (80008c0 <adc_Config+0x23c>)
 80007c4:	689b      	ldr	r3, [r3, #8]
 80007c6:	4a3e      	ldr	r2, [pc, #248]	; (80008c0 <adc_Config+0x23c>)
 80007c8:	f023 0302 	bic.w	r3, r3, #2
 80007cc:	6093      	str	r3, [r2, #8]

	/* 7. Ac谩 se deber铆a configurar el sampling */

	if(adcConfig -> channelMode == ADC_SINGLE_CHANNEL){
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	795b      	ldrb	r3, [r3, #5]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d125      	bne.n	8000822 <adc_Config+0x19e>
		if(adcConfig -> channel < ADC_CHANNEL_9){
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b08      	cmp	r3, #8
 80007dc:	d810      	bhi.n	8000800 <adc_Config+0x17c>
			ADC1 -> SMPR2 |= (adcConfig -> samplingPeriod << (3 * (adcConfig -> channel)));
 80007de:	4b38      	ldr	r3, [pc, #224]	; (80008c0 <adc_Config+0x23c>)
 80007e0:	691a      	ldr	r2, [r3, #16]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	885b      	ldrh	r3, [r3, #2]
 80007e6:	4618      	mov	r0, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4619      	mov	r1, r3
 80007ee:	460b      	mov	r3, r1
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	440b      	add	r3, r1
 80007f4:	fa00 f303 	lsl.w	r3, r0, r3
 80007f8:	4931      	ldr	r1, [pc, #196]	; (80008c0 <adc_Config+0x23c>)
 80007fa:	4313      	orrs	r3, r2
 80007fc:	610b      	str	r3, [r1, #16]
 80007fe:	e04c      	b.n	800089a <adc_Config+0x216>
		}
		else{
			ADC1 -> SMPR1 |= (adcConfig -> samplingPeriod << (3 * (adcConfig -> channel)));
 8000800:	4b2f      	ldr	r3, [pc, #188]	; (80008c0 <adc_Config+0x23c>)
 8000802:	68da      	ldr	r2, [r3, #12]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	885b      	ldrh	r3, [r3, #2]
 8000808:	4618      	mov	r0, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	4619      	mov	r1, r3
 8000810:	460b      	mov	r3, r1
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	440b      	add	r3, r1
 8000816:	fa00 f303 	lsl.w	r3, r0, r3
 800081a:	4929      	ldr	r1, [pc, #164]	; (80008c0 <adc_Config+0x23c>)
 800081c:	4313      	orrs	r3, r2
 800081e:	60cb      	str	r3, [r1, #12]
 8000820:	e03b      	b.n	800089a <adc_Config+0x216>
		}
	}
	else if(adcConfig -> channelMode == ADC_MULTI_CHANNEL){
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	795b      	ldrb	r3, [r3, #5]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d136      	bne.n	8000898 <adc_Config+0x214>

		if(adcConfig -> numberOfChannels <= ADC_CHANNEL_9){
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	799b      	ldrb	r3, [r3, #6]
 800082e:	2b09      	cmp	r3, #9
 8000830:	d830      	bhi.n	8000894 <adc_Config+0x210>
			ADC1 -> SMPR2 |= (adcConfig -> samplingPeriod << (3 * (adcConfig -> channel_First)));
 8000832:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <adc_Config+0x23c>)
 8000834:	691a      	ldr	r2, [r3, #16]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	885b      	ldrh	r3, [r3, #2]
 800083a:	4618      	mov	r0, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	7a1b      	ldrb	r3, [r3, #8]
 8000840:	4619      	mov	r1, r3
 8000842:	460b      	mov	r3, r1
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	440b      	add	r3, r1
 8000848:	fa00 f303 	lsl.w	r3, r0, r3
 800084c:	491c      	ldr	r1, [pc, #112]	; (80008c0 <adc_Config+0x23c>)
 800084e:	4313      	orrs	r3, r2
 8000850:	610b      	str	r3, [r1, #16]
			ADC1 -> SMPR2 |= (adcConfig -> samplingPeriod << (3 * (adcConfig -> channel_Second)));
 8000852:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <adc_Config+0x23c>)
 8000854:	691a      	ldr	r2, [r3, #16]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	885b      	ldrh	r3, [r3, #2]
 800085a:	4618      	mov	r0, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	7a5b      	ldrb	r3, [r3, #9]
 8000860:	4619      	mov	r1, r3
 8000862:	460b      	mov	r3, r1
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	440b      	add	r3, r1
 8000868:	fa00 f303 	lsl.w	r3, r0, r3
 800086c:	4914      	ldr	r1, [pc, #80]	; (80008c0 <adc_Config+0x23c>)
 800086e:	4313      	orrs	r3, r2
 8000870:	610b      	str	r3, [r1, #16]
			ADC1 -> SMPR2 |= (adcConfig -> samplingPeriod << (3 * (adcConfig -> channel_Third)));
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <adc_Config+0x23c>)
 8000874:	691a      	ldr	r2, [r3, #16]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	885b      	ldrh	r3, [r3, #2]
 800087a:	4618      	mov	r0, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	7a9b      	ldrb	r3, [r3, #10]
 8000880:	4619      	mov	r1, r3
 8000882:	460b      	mov	r3, r1
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	440b      	add	r3, r1
 8000888:	fa00 f303 	lsl.w	r3, r0, r3
 800088c:	490c      	ldr	r1, [pc, #48]	; (80008c0 <adc_Config+0x23c>)
 800088e:	4313      	orrs	r3, r2
 8000890:	610b      	str	r3, [r1, #16]
 8000892:	e002      	b.n	800089a <adc_Config+0x216>
		}
		else{
			__NOP();//ADC1 -> SMPR1 |= (adcConfig -> samplingPeriod << (3 * (adcConfig -> channel)));
 8000894:	bf00      	nop
 8000896:	e000      	b.n	800089a <adc_Config+0x216>
		}
	}
	else{
		__NOP();
 8000898:	bf00      	nop
	}


	/* 8. Configuramos la secuencia y cuantos elementos hay en la secuencia */

	if(adcConfig -> channelMode == ADC_SINGLE_CHANNEL){
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	795b      	ldrb	r3, [r3, #5]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d110      	bne.n	80008c4 <adc_Config+0x240>
		// Al hacerlo todo 0, estamos seleccionando solo 1 elemento en el conteo de la secuencia
		ADC1 -> SQR1 = 0;
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <adc_Config+0x23c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	62da      	str	r2, [r3, #44]	; 0x2c
		// Asignamos el canal de la conversi贸n a la primera posici贸n en la secuencia
		ADC1 -> SQR3 |= (adcConfig -> channel << 0);
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <adc_Config+0x23c>)
 80008aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	7812      	ldrb	r2, [r2, #0]
 80008b0:	4611      	mov	r1, r2
 80008b2:	4a03      	ldr	r2, [pc, #12]	; (80008c0 <adc_Config+0x23c>)
 80008b4:	430b      	orrs	r3, r1
 80008b6:	6353      	str	r3, [r2, #52]	; 0x34
 80008b8:	e08e      	b.n	80009d8 <adc_Config+0x354>
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40012000 	.word	0x40012000
	}
	else if(adcConfig -> channelMode == ADC_MULTI_CHANNEL){
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	795b      	ldrb	r3, [r3, #5]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	f040 8085 	bne.w	80009d8 <adc_Config+0x354>

		// Activamos la interrupci贸n al final de cada conversi贸n single.
		ADC1 -> CR2 |= ADC_CR2_EOCS;
 80008ce:	4b50      	ldr	r3, [pc, #320]	; (8000a10 <adc_Config+0x38c>)
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	4a4f      	ldr	r2, [pc, #316]	; (8000a10 <adc_Config+0x38c>)
 80008d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008d8:	6093      	str	r3, [r2, #8]

		// Activamos cuantos elementos hay en la secuencia
		ADC1 -> SQR1 |= ((adcConfig -> numberOfChannels-1) << ADC_SQR1_L_Pos);
 80008da:	4b4d      	ldr	r3, [pc, #308]	; (8000a10 <adc_Config+0x38c>)
 80008dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	7992      	ldrb	r2, [r2, #6]
 80008e2:	3a01      	subs	r2, #1
 80008e4:	0512      	lsls	r2, r2, #20
 80008e6:	4611      	mov	r1, r2
 80008e8:	4a49      	ldr	r2, [pc, #292]	; (8000a10 <adc_Config+0x38c>)
 80008ea:	430b      	orrs	r3, r1
 80008ec:	62d3      	str	r3, [r2, #44]	; 0x2c

		if((adcConfig -> numberOfChannels >= 1) & (adcConfig -> numberOfChannels <= 6)){
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	799b      	ldrb	r3, [r3, #6]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	bf14      	ite	ne
 80008f6:	2301      	movne	r3, #1
 80008f8:	2300      	moveq	r3, #0
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	799b      	ldrb	r3, [r3, #6]
 8000900:	2b06      	cmp	r3, #6
 8000902:	bf94      	ite	ls
 8000904:	2301      	movls	r3, #1
 8000906:	2300      	movhi	r3, #0
 8000908:	b2db      	uxtb	r3, r3
 800090a:	4013      	ands	r3, r2
 800090c:	b2db      	uxtb	r3, r3
 800090e:	2b00      	cmp	r3, #0
 8000910:	d01a      	beq.n	8000948 <adc_Config+0x2c4>
			ADC1 -> SQR3 |= adcConfig -> channel_First << 0;
 8000912:	4b3f      	ldr	r3, [pc, #252]	; (8000a10 <adc_Config+0x38c>)
 8000914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	7a12      	ldrb	r2, [r2, #8]
 800091a:	4611      	mov	r1, r2
 800091c:	4a3c      	ldr	r2, [pc, #240]	; (8000a10 <adc_Config+0x38c>)
 800091e:	430b      	orrs	r3, r1
 8000920:	6353      	str	r3, [r2, #52]	; 0x34
			ADC1 -> SQR3 |= adcConfig -> channel_Second << 5;
 8000922:	4b3b      	ldr	r3, [pc, #236]	; (8000a10 <adc_Config+0x38c>)
 8000924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	7a52      	ldrb	r2, [r2, #9]
 800092a:	0152      	lsls	r2, r2, #5
 800092c:	4611      	mov	r1, r2
 800092e:	4a38      	ldr	r2, [pc, #224]	; (8000a10 <adc_Config+0x38c>)
 8000930:	430b      	orrs	r3, r1
 8000932:	6353      	str	r3, [r2, #52]	; 0x34
			ADC1 -> SQR3 |= adcConfig -> channel_Third << 10;
 8000934:	4b36      	ldr	r3, [pc, #216]	; (8000a10 <adc_Config+0x38c>)
 8000936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	7a92      	ldrb	r2, [r2, #10]
 800093c:	0292      	lsls	r2, r2, #10
 800093e:	4611      	mov	r1, r2
 8000940:	4a33      	ldr	r2, [pc, #204]	; (8000a10 <adc_Config+0x38c>)
 8000942:	430b      	orrs	r3, r1
 8000944:	6353      	str	r3, [r2, #52]	; 0x34
 8000946:	e047      	b.n	80009d8 <adc_Config+0x354>
			//ADC1 -> SQR3 |= (adcConfig -> channel << ((adcConfig -> sequencePos -1)*5));
		}
		else if((adcConfig -> numberOfChannels >= 7) & (adcConfig -> numberOfChannels <= 12)){
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	799b      	ldrb	r3, [r3, #6]
 800094c:	2b06      	cmp	r3, #6
 800094e:	bf8c      	ite	hi
 8000950:	2301      	movhi	r3, #1
 8000952:	2300      	movls	r3, #0
 8000954:	b2da      	uxtb	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	799b      	ldrb	r3, [r3, #6]
 800095a:	2b0c      	cmp	r3, #12
 800095c:	bf94      	ite	ls
 800095e:	2301      	movls	r3, #1
 8000960:	2300      	movhi	r3, #0
 8000962:	b2db      	uxtb	r3, r3
 8000964:	4013      	ands	r3, r2
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d010      	beq.n	800098e <adc_Config+0x30a>
			ADC1 -> SQR2 |= (adcConfig -> channel << ((adcConfig -> sequencePos -7)*5));
 800096c:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <adc_Config+0x38c>)
 800096e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4618      	mov	r0, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	79db      	ldrb	r3, [r3, #7]
 800097a:	1fda      	subs	r2, r3, #7
 800097c:	4613      	mov	r3, r2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	4413      	add	r3, r2
 8000982:	fa00 f303 	lsl.w	r3, r0, r3
 8000986:	4a22      	ldr	r2, [pc, #136]	; (8000a10 <adc_Config+0x38c>)
 8000988:	430b      	orrs	r3, r1
 800098a:	6313      	str	r3, [r2, #48]	; 0x30
 800098c:	e024      	b.n	80009d8 <adc_Config+0x354>
		}
		else if((adcConfig -> numberOfChannels >= 13) & (adcConfig -> numberOfChannels <= 16)){
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	799b      	ldrb	r3, [r3, #6]
 8000992:	2b0c      	cmp	r3, #12
 8000994:	bf8c      	ite	hi
 8000996:	2301      	movhi	r3, #1
 8000998:	2300      	movls	r3, #0
 800099a:	b2da      	uxtb	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	799b      	ldrb	r3, [r3, #6]
 80009a0:	2b10      	cmp	r3, #16
 80009a2:	bf94      	ite	ls
 80009a4:	2301      	movls	r3, #1
 80009a6:	2300      	movhi	r3, #0
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	4013      	ands	r3, r2
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d011      	beq.n	80009d6 <adc_Config+0x352>
			ADC1 -> SQR1 |= (adcConfig -> channel << ((adcConfig -> sequencePos -13)*5));
 80009b2:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <adc_Config+0x38c>)
 80009b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	79db      	ldrb	r3, [r3, #7]
 80009c0:	f1a3 020d 	sub.w	r2, r3, #13
 80009c4:	4613      	mov	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	4413      	add	r3, r2
 80009ca:	fa00 f303 	lsl.w	r3, r0, r3
 80009ce:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <adc_Config+0x38c>)
 80009d0:	430b      	orrs	r3, r1
 80009d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009d4:	e000      	b.n	80009d8 <adc_Config+0x354>
		}
		else{
			__NOP();
 80009d6:	bf00      	nop
		}
	}

	/* 9. Configuramos el preescaler del ADC en 2:1 (el m谩s r谩pido que se puede tener) */
	ADC -> CCR = 0;
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <adc_Config+0x390>)
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]

	/* 10. Desactivamos las interrupciones */

	ADC1 -> CR1 |= ADC_CR1_EOCIE;
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <adc_Config+0x38c>)
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <adc_Config+0x38c>)
 80009e4:	f043 0320 	orr.w	r3, r3, #32
 80009e8:	6053      	str	r3, [r2, #4]

	/* 11a. Matriculamos la interrupci贸n en el NVIC */
	__NVIC_EnableIRQ(ADC_IRQn);
 80009ea:	2012      	movs	r0, #18
 80009ec:	f7ff fe04 	bl	80005f8 <__NVIC_EnableIRQ>

	/* 11.b Establecemos la importancia de la interrupci贸n */

	__NVIC_SetPriority(ADC_IRQn,4);
 80009f0:	2104      	movs	r1, #4
 80009f2:	2012      	movs	r0, #18
 80009f4:	f7ff fe1c 	bl	8000630 <__NVIC_SetPriority>

	/* 12. Activamos el modulo ADC */
	ADC1 -> CR2 |= ADC_CR2_ADON;
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <adc_Config+0x38c>)
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <adc_Config+0x38c>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000a04:	b662      	cpsie	i
}
 8000a06:	bf00      	nop

	/* 13. Activamos las interrupciones globales */
	__enable_irq();
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40012000 	.word	0x40012000
 8000a14:	40012300 	.word	0x40012300

08000a18 <startSingleADC>:

/**/

void startSingleADC(void){
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
	/* Iniciamos un ciclo de conversi贸n ADC */
	ADC1 -> CR2 |= ADC_CR2_SWSTART;
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <startSingleADC+0x18>)
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	4a03      	ldr	r2, [pc, #12]	; (8000a30 <startSingleADC+0x18>)
 8000a22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000a26:	6093      	str	r3, [r2, #8]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	40012000 	.word	0x40012000

08000a34 <startContinuousADC>:

void startContinuousADC(void){
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
	/* Conversi贸n continua */
	ADC1 -> CR2 |= (ADC_CR2_CONT);
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <startContinuousADC+0x24>)
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	4a06      	ldr	r2, [pc, #24]	; (8000a58 <startContinuousADC+0x24>)
 8000a3e:	f043 0302 	orr.w	r3, r3, #2
 8000a42:	6093      	str	r3, [r2, #8]
	/* Iniciamos un ciclo de conversi贸n ADC */
	ADC1 -> CR2 |= ADC_CR2_SWSTART;
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <startContinuousADC+0x24>)
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	4a03      	ldr	r2, [pc, #12]	; (8000a58 <startContinuousADC+0x24>)
 8000a4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000a4e:	6093      	str	r3, [r2, #8]
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	40012000 	.word	0x40012000

08000a5c <stopContinousADC>:

void stopContinousADC(void){
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
	ADC1 -> CR2 &= ~(ADC_CR2_SWSTART);
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <stopContinousADC+0x18>)
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	4a03      	ldr	r2, [pc, #12]	; (8000a74 <stopContinousADC+0x18>)
 8000a66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000a6a:	6093      	str	r3, [r2, #8]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	40012000 	.word	0x40012000

08000a78 <getADC>:

/* Funci贸n que me retorna el 煤ltimo dato adquirido por la ADC */
uint16_t getADC(void){
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
	return adcRawData;
 8000a7c:	4b02      	ldr	r3, [pc, #8]	; (8000a88 <getADC+0x10>)
 8000a7e:	881b      	ldrh	r3, [r3, #0]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	200001b0 	.word	0x200001b0

08000a8c <ADC_IRQHandler>:
void multiChannelADC(ADC_Config_t *adcConfig){
	ADC1 -> SQR1 |= (adcConfig -> numberOfChannels << ADC_SQR1_L_Pos);
	ADC1 -> CR1  |= (ADC_CR1_SCAN);
}
/* Esta es la ISR de la interrupci贸n por conversi贸n ADC */
void ADC_IRQHandler(void){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	if(ADC1 -> SR & ADC_SR_EOC){
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <ADC_IRQHandler+0x24>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f003 0302 	and.w	r3, r3, #2
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d006      	beq.n	8000aaa <ADC_IRQHandler+0x1e>
		// Leemos el resultado de la conversi贸n ADC y lo cargamos en un valor auxiliar
		adcRawData = ADC1 -> DR;
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <ADC_IRQHandler+0x24>)
 8000a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <ADC_IRQHandler+0x28>)
 8000aa4:	801a      	strh	r2, [r3, #0]

		// Hacemos el llamado a la funci贸n que se ejecutar谩 en el main
		adc_Complete_Callback();
 8000aa6:	f7ff fd23 	bl	80004f0 <adc_Complete_Callback>
	}
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40012000 	.word	0x40012000
 8000ab4:	200001b0 	.word	0x200001b0

08000ab8 <configAnalogPin>:
__attribute__((weak)) void adc_Complete_Callback(void){
	__NOP();
}

/* Con esta funci贸n configuramos que pin deseamos que funcione como ADC */
void configAnalogPin(uint8_t adcChannel){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]

	// Con este switch seleccionamos el canal y lo configuramos como analogo.
	switch(adcChannel){
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	2b0f      	cmp	r3, #15
 8000ac6:	f200 8093 	bhi.w	8000bf0 <configAnalogPin+0x138>
 8000aca:	a201      	add	r2, pc, #4	; (adr r2, 8000ad0 <configAnalogPin+0x18>)
 8000acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad0:	08000b11 	.word	0x08000b11
 8000ad4:	08000b1f 	.word	0x08000b1f
 8000ad8:	08000b2d 	.word	0x08000b2d
 8000adc:	08000b3b 	.word	0x08000b3b
 8000ae0:	08000b49 	.word	0x08000b49
 8000ae4:	08000b57 	.word	0x08000b57
 8000ae8:	08000b65 	.word	0x08000b65
 8000aec:	08000b73 	.word	0x08000b73
 8000af0:	08000b81 	.word	0x08000b81
 8000af4:	08000b8f 	.word	0x08000b8f
 8000af8:	08000b9d 	.word	0x08000b9d
 8000afc:	08000bab 	.word	0x08000bab
 8000b00:	08000bb9 	.word	0x08000bb9
 8000b04:	08000bc7 	.word	0x08000bc7
 8000b08:	08000bd5 	.word	0x08000bd5
 8000b0c:	08000be3 	.word	0x08000be3

	case ADC_CHANNEL_0:
	{
		// Es el pin PA0
		handlerAdcPin.pGPIOx						= GPIOA;
 8000b10:	4b3d      	ldr	r3, [pc, #244]	; (8000c08 <configAnalogPin+0x150>)
 8000b12:	4a3e      	ldr	r2, [pc, #248]	; (8000c0c <configAnalogPin+0x154>)
 8000b14:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8000b16:	4b3c      	ldr	r3, [pc, #240]	; (8000c08 <configAnalogPin+0x150>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	711a      	strb	r2, [r3, #4]
		break;
 8000b1c:	e069      	b.n	8000bf2 <configAnalogPin+0x13a>

	// Configuraci贸n ADC1_1
	case ADC_CHANNEL_1:
	{
		// Es el pin PA1.
		handlerAdcPin.pGPIOx = GPIOA;
 8000b1e:	4b3a      	ldr	r3, [pc, #232]	; (8000c08 <configAnalogPin+0x150>)
 8000b20:	4a3a      	ldr	r2, [pc, #232]	; (8000c0c <configAnalogPin+0x154>)
 8000b22:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8000b24:	4b38      	ldr	r3, [pc, #224]	; (8000c08 <configAnalogPin+0x150>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	711a      	strb	r2, [r3, #4]
		break;
 8000b2a:	e062      	b.n	8000bf2 <configAnalogPin+0x13a>

	// Configuraci贸n ADC1_2
	case ADC_CHANNEL_2:
	{
		// Es el pin PA2.
		handlerAdcPin.pGPIOx = GPIOA;
 8000b2c:	4b36      	ldr	r3, [pc, #216]	; (8000c08 <configAnalogPin+0x150>)
 8000b2e:	4a37      	ldr	r2, [pc, #220]	; (8000c0c <configAnalogPin+0x154>)
 8000b30:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8000b32:	4b35      	ldr	r3, [pc, #212]	; (8000c08 <configAnalogPin+0x150>)
 8000b34:	2202      	movs	r2, #2
 8000b36:	711a      	strb	r2, [r3, #4]
		break;
 8000b38:	e05b      	b.n	8000bf2 <configAnalogPin+0x13a>

	// Configuraci贸n ADC1_3
	case ADC_CHANNEL_3:
	{
		// Es el pin PA3.
		handlerAdcPin.pGPIOx = GPIOA;
 8000b3a:	4b33      	ldr	r3, [pc, #204]	; (8000c08 <configAnalogPin+0x150>)
 8000b3c:	4a33      	ldr	r2, [pc, #204]	; (8000c0c <configAnalogPin+0x154>)
 8000b3e:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8000b40:	4b31      	ldr	r3, [pc, #196]	; (8000c08 <configAnalogPin+0x150>)
 8000b42:	2203      	movs	r2, #3
 8000b44:	711a      	strb	r2, [r3, #4]
		break;
 8000b46:	e054      	b.n	8000bf2 <configAnalogPin+0x13a>

	// Configuraci贸n ADC1_4
	case ADC_CHANNEL_4:
	{
		// Es el pin PA4.
		handlerAdcPin.pGPIOx = GPIOA;
 8000b48:	4b2f      	ldr	r3, [pc, #188]	; (8000c08 <configAnalogPin+0x150>)
 8000b4a:	4a30      	ldr	r2, [pc, #192]	; (8000c0c <configAnalogPin+0x154>)
 8000b4c:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 8000b4e:	4b2e      	ldr	r3, [pc, #184]	; (8000c08 <configAnalogPin+0x150>)
 8000b50:	2204      	movs	r2, #4
 8000b52:	711a      	strb	r2, [r3, #4]
		break;
 8000b54:	e04d      	b.n	8000bf2 <configAnalogPin+0x13a>

	// Configuraci贸n ADC1_5
	case ADC_CHANNEL_5:
	{
		// Es el pin PA5.
		handlerAdcPin.pGPIOx = GPIOA;
 8000b56:	4b2c      	ldr	r3, [pc, #176]	; (8000c08 <configAnalogPin+0x150>)
 8000b58:	4a2c      	ldr	r2, [pc, #176]	; (8000c0c <configAnalogPin+0x154>)
 8000b5a:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000b5c:	4b2a      	ldr	r3, [pc, #168]	; (8000c08 <configAnalogPin+0x150>)
 8000b5e:	2205      	movs	r2, #5
 8000b60:	711a      	strb	r2, [r3, #4]
		break;
 8000b62:	e046      	b.n	8000bf2 <configAnalogPin+0x13a>

	// Configuraci贸n ADC1_6
	case ADC_CHANNEL_6:
	{
		// Es el pin PA6.
		handlerAdcPin.pGPIOx = GPIOA;
 8000b64:	4b28      	ldr	r3, [pc, #160]	; (8000c08 <configAnalogPin+0x150>)
 8000b66:	4a29      	ldr	r2, [pc, #164]	; (8000c0c <configAnalogPin+0x154>)
 8000b68:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_6;
 8000b6a:	4b27      	ldr	r3, [pc, #156]	; (8000c08 <configAnalogPin+0x150>)
 8000b6c:	2206      	movs	r2, #6
 8000b6e:	711a      	strb	r2, [r3, #4]
		break;
 8000b70:	e03f      	b.n	8000bf2 <configAnalogPin+0x13a>

	// Configuraci贸n ADC1_7
	case ADC_CHANNEL_7:
	{
		// Es el pin PA7.
		handlerAdcPin.pGPIOx = GPIOA;
 8000b72:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <configAnalogPin+0x150>)
 8000b74:	4a25      	ldr	r2, [pc, #148]	; (8000c0c <configAnalogPin+0x154>)
 8000b76:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_7;
 8000b78:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <configAnalogPin+0x150>)
 8000b7a:	2207      	movs	r2, #7
 8000b7c:	711a      	strb	r2, [r3, #4]
		break;
 8000b7e:	e038      	b.n	8000bf2 <configAnalogPin+0x13a>

	// Configuraci贸n ADC1_8
	case ADC_CHANNEL_8:
	{
		// Es el pin PB0.
		handlerAdcPin.pGPIOx = GPIOB;
 8000b80:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <configAnalogPin+0x150>)
 8000b82:	4a23      	ldr	r2, [pc, #140]	; (8000c10 <configAnalogPin+0x158>)
 8000b84:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8000b86:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <configAnalogPin+0x150>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	711a      	strb	r2, [r3, #4]
		break;
 8000b8c:	e031      	b.n	8000bf2 <configAnalogPin+0x13a>

	// Configuraci贸n ADC1_9
	case ADC_CHANNEL_9:
	{
		// Es el pin PB1.
		handlerAdcPin.pGPIOx = GPIOB;
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <configAnalogPin+0x150>)
 8000b90:	4a1f      	ldr	r2, [pc, #124]	; (8000c10 <configAnalogPin+0x158>)
 8000b92:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8000b94:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <configAnalogPin+0x150>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	711a      	strb	r2, [r3, #4]
		break;
 8000b9a:	e02a      	b.n	8000bf2 <configAnalogPin+0x13a>

	// Configuraci贸n ADC1_10
	case ADC_CHANNEL_10:
	{
		// Es el pin PC0.
		handlerAdcPin.pGPIOx = GPIOC;
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <configAnalogPin+0x150>)
 8000b9e:	4a1d      	ldr	r2, [pc, #116]	; (8000c14 <configAnalogPin+0x15c>)
 8000ba0:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8000ba2:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <configAnalogPin+0x150>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	711a      	strb	r2, [r3, #4]
		break;
 8000ba8:	e023      	b.n	8000bf2 <configAnalogPin+0x13a>

	// Configuraci贸n ADC1_11
	case ADC_CHANNEL_11:
	{
		// Es el pin PC1.
		handlerAdcPin.pGPIOx = GPIOC;
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <configAnalogPin+0x150>)
 8000bac:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <configAnalogPin+0x15c>)
 8000bae:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <configAnalogPin+0x150>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	711a      	strb	r2, [r3, #4]
		break;
 8000bb6:	e01c      	b.n	8000bf2 <configAnalogPin+0x13a>

	// Configuraci贸n ADC1_12
	case ADC_CHANNEL_12:
	{
		// Es el pin PC2.
		handlerAdcPin.pGPIOx = GPIOC;
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <configAnalogPin+0x150>)
 8000bba:	4a16      	ldr	r2, [pc, #88]	; (8000c14 <configAnalogPin+0x15c>)
 8000bbc:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <configAnalogPin+0x150>)
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	711a      	strb	r2, [r3, #4]
		break;
 8000bc4:	e015      	b.n	8000bf2 <configAnalogPin+0x13a>

	// Configuraci贸n ADC1_13
	case ADC_CHANNEL_13:
	{
		// Es el pin PC3.
		handlerAdcPin.pGPIOx = GPIOC;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <configAnalogPin+0x150>)
 8000bc8:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <configAnalogPin+0x15c>)
 8000bca:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <configAnalogPin+0x150>)
 8000bce:	2203      	movs	r2, #3
 8000bd0:	711a      	strb	r2, [r3, #4]
		break;
 8000bd2:	e00e      	b.n	8000bf2 <configAnalogPin+0x13a>

	// Configuraci贸n ADC1_14
	case ADC_CHANNEL_14:
	{
		// Es el pin PC4.
		handlerAdcPin.pGPIOx = GPIOC;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <configAnalogPin+0x150>)
 8000bd6:	4a0f      	ldr	r2, [pc, #60]	; (8000c14 <configAnalogPin+0x15c>)
 8000bd8:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <configAnalogPin+0x150>)
 8000bdc:	2204      	movs	r2, #4
 8000bde:	711a      	strb	r2, [r3, #4]
		break;
 8000be0:	e007      	b.n	8000bf2 <configAnalogPin+0x13a>

	// Configuraci贸n ADC1_15
	case ADC_CHANNEL_15:
	{
		// Es el pin PC5.
		handlerAdcPin.pGPIOx = GPIOC;
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <configAnalogPin+0x150>)
 8000be4:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <configAnalogPin+0x15c>)
 8000be6:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <configAnalogPin+0x150>)
 8000bea:	2205      	movs	r2, #5
 8000bec:	711a      	strb	r2, [r3, #4]
		break;
 8000bee:	e000      	b.n	8000bf2 <configAnalogPin+0x13a>
	}

	default:
	{
		// Se termina el ciclo por defecto.
		break;
 8000bf0:	bf00      	nop
	}
	}

	// Se configura el pin en modo an谩logo.
	handlerAdcPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 8000bf2:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <configAnalogPin+0x150>)
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	715a      	strb	r2, [r3, #5]
	GPIO_Config(&handlerAdcPin);
 8000bf8:	4803      	ldr	r0, [pc, #12]	; (8000c08 <configAnalogPin+0x150>)
 8000bfa:	f000 f80d 	bl	8000c18 <GPIO_Config>
	}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200001a4 	.word	0x200001a4
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	40020400 	.word	0x40020400
 8000c14:	40020800 	.word	0x40020800

08000c18 <GPIO_Config>:
orden estricto para poder que el sistema permita configurar el perif茅rico X.
Lo primero y m谩s importante es activar la se帽al del reloj principal hacia ese
elemento espec铆fico (relacionado con el perif茅rico RCC), a esto llamaremos
simplemente "activar el perif茅rico o activar la se帽al de reloj del perif茅rico".
*/
void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60bb      	str	r3, [r7, #8]

	// 1) Activar el perif茅rico
	// Verificamos para GPIOA
	if (pGPIOHandler -> pGPIOx == GPIOA){
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a87      	ldr	r2, [pc, #540]	; (8000e4c <GPIO_Config+0x234>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d106      	bne.n	8000c40 <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posici贸n correspondiente al GPIOA
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 8000c32:	4b87      	ldr	r3, [pc, #540]	; (8000e50 <GPIO_Config+0x238>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a86      	ldr	r2, [pc, #536]	; (8000e50 <GPIO_Config+0x238>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	e03a      	b.n	8000cb6 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if (pGPIOHandler -> pGPIOx == GPIOB){
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a83      	ldr	r2, [pc, #524]	; (8000e54 <GPIO_Config+0x23c>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d106      	bne.n	8000c58 <GPIO_Config+0x40>
		// Escribimos 1 (SET) en la posici贸n correspondiente al GPIOB
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 8000c4a:	4b81      	ldr	r3, [pc, #516]	; (8000e50 <GPIO_Config+0x238>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a80      	ldr	r2, [pc, #512]	; (8000e50 <GPIO_Config+0x238>)
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	e02e      	b.n	8000cb6 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOC
	else if (pGPIOHandler -> pGPIOx == GPIOC){
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a7e      	ldr	r2, [pc, #504]	; (8000e58 <GPIO_Config+0x240>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d106      	bne.n	8000c70 <GPIO_Config+0x58>
		// Escribimos 1 (SET) en la posici贸n correspondiente al GPIOC
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8000c62:	4b7b      	ldr	r3, [pc, #492]	; (8000e50 <GPIO_Config+0x238>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a7a      	ldr	r2, [pc, #488]	; (8000e50 <GPIO_Config+0x238>)
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	e022      	b.n	8000cb6 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOD
	else if (pGPIOHandler -> pGPIOx == GPIOD){
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a79      	ldr	r2, [pc, #484]	; (8000e5c <GPIO_Config+0x244>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d106      	bne.n	8000c88 <GPIO_Config+0x70>
		// Escribimos 1 (SET) en la posici贸n correspondiente al GPIOD
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 8000c7a:	4b75      	ldr	r3, [pc, #468]	; (8000e50 <GPIO_Config+0x238>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a74      	ldr	r2, [pc, #464]	; (8000e50 <GPIO_Config+0x238>)
 8000c80:	f043 0308 	orr.w	r3, r3, #8
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	e016      	b.n	8000cb6 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOE
	else if (pGPIOHandler -> pGPIOx == GPIOE){
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a74      	ldr	r2, [pc, #464]	; (8000e60 <GPIO_Config+0x248>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d106      	bne.n	8000ca0 <GPIO_Config+0x88>
		// Escribimos 1 (SET) en la posici贸n correspondiente al GPIOE
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8000c92:	4b6f      	ldr	r3, [pc, #444]	; (8000e50 <GPIO_Config+0x238>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a6e      	ldr	r2, [pc, #440]	; (8000e50 <GPIO_Config+0x238>)
 8000c98:	f043 0310 	orr.w	r3, r3, #16
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	e00a      	b.n	8000cb6 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOH
	else if (pGPIOHandler -> pGPIOx == GPIOH){
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a6f      	ldr	r2, [pc, #444]	; (8000e64 <GPIO_Config+0x24c>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d105      	bne.n	8000cb6 <GPIO_Config+0x9e>
		// Escribimos 1 (SET) en la posici贸n correspondiente al GPIOH
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 8000caa:	4b69      	ldr	r3, [pc, #420]	; (8000e50 <GPIO_Config+0x238>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a68      	ldr	r2, [pc, #416]	; (8000e50 <GPIO_Config+0x238>)
 8000cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
	// Despu茅s de activado, podemos comenzar a configurar.

	// 2) Configurando el registro GPIOx_MODER
	// Ac谩 estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y todo eso lo cargamos en la variable aux_Config
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	795b      	ldrb	r3, [r3, #5]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	791b      	ldrb	r3, [r3, #4]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	60fb      	str	r3, [r7, #12]

	// Antes de cargar el nuevo valor, limpiamos los bits espec铆ficos de ese registro (debemos escribir 0b00)
	// para lo cual aplicamos una m谩scara y una operaci贸n bitwise AND
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	791b      	ldrb	r3, [r3, #4]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	2103      	movs	r1, #3
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	4619      	mov	r1, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	400a      	ands	r2, r1
 8000ce4:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler -> pGPIOx -> MODER |= auxConfig;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	6819      	ldr	r1, [r3, #0]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	601a      	str	r2, [r3, #0]

	// 3) Configurando el registro GPIOx_OTYPER
	// De nuevo, leemos y movemos el valor un n煤mero "PinNumber" de veces
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	7a1b      	ldrb	r3, [r3, #8]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	791b      	ldrb	r3, [r3, #4]
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler -> pGPIOx -> OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	791b      	ldrb	r3, [r3, #4]
 8000d10:	4619      	mov	r1, r3
 8000d12:	2301      	movs	r3, #1
 8000d14:	408b      	lsls	r3, r1
 8000d16:	43db      	mvns	r3, r3
 8000d18:	4619      	mov	r1, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	400a      	ands	r2, r1
 8000d20:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OTYPER |= auxConfig;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	6859      	ldr	r1, [r3, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	799b      	ldrb	r3, [r3, #6]
 8000d36:	461a      	mov	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	791b      	ldrb	r3, [r3, #4]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	60fb      	str	r3, [r7, #12]

	// Limpiando la posici贸n antes de cargar la nueva configuraci贸n
	pGPIOHandler -> pGPIOx -> OSPEEDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	689a      	ldr	r2, [r3, #8]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	791b      	ldrb	r3, [r3, #4]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	2103      	movs	r1, #3
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	4619      	mov	r1, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	400a      	ands	r2, r1
 8000d60:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OSPEEDR |= auxConfig;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	6899      	ldr	r1, [r3, #8]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante.
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	79db      	ldrb	r3, [r3, #7]
 8000d76:	461a      	mov	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	791b      	ldrb	r3, [r3, #4]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	60fb      	str	r3, [r7, #12]

	// Limpiando la posici贸n antes de cargar la nueva configuraci贸n
	pGPIOHandler -> pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	68da      	ldr	r2, [r3, #12]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	791b      	ldrb	r3, [r3, #4]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	2103      	movs	r1, #3
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	4619      	mov	r1, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	400a      	ands	r2, r1
 8000da0:	60da      	str	r2, [r3, #12]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> PUPDR |= auxConfig;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	68d9      	ldr	r1, [r3, #12]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	430a      	orrs	r2, r1
 8000db0:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuraci贸n de las funciones alternativas... Se ver谩 luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	795b      	ldrb	r3, [r3, #5]
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d143      	bne.n	8000e42 <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	791b      	ldrb	r3, [r3, #4]
 8000dbe:	2b07      	cmp	r3, #7
 8000dc0:	d81f      	bhi.n	8000e02 <GPIO_Config+0x1ea>
			// Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	791b      	ldrb	r3, [r3, #4]
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	60bb      	str	r3, [r7, #8]

			// Limpiamos primero la posici贸n del registro que deseamos escribir a continuaci贸n
			pGPIOHandler -> pGPIOx -> AFR[0] &= ~(0b1111 << auxPosition);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	6a1a      	ldr	r2, [r3, #32]
 8000dd0:	210f      	movs	r1, #15
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	4619      	mov	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	400a      	ands	r2, r1
 8000de2:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posici贸n seleccionada
			pGPIOHandler -> pGPIOx -> AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6a1a      	ldr	r2, [r3, #32]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	7a5b      	ldrb	r3, [r3, #9]
 8000dee:	4619      	mov	r1, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	4619      	mov	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurando en la posici贸n seleccionada
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} // Fin del GPIO_Config
 8000e00:	e01f      	b.n	8000e42 <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber -8);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	791b      	ldrb	r3, [r3, #4]
 8000e06:	3b08      	subs	r3, #8
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx -> AFR[1] &= ~(0b1111 << auxPosition);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e12:	210f      	movs	r1, #15
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	400a      	ands	r2, r1
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	7a5b      	ldrb	r3, [r3, #9]
 8000e30:	4619      	mov	r1, r3
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	fa01 f303 	lsl.w	r3, r1, r3
 8000e38:	4619      	mov	r1, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_Config
 8000e42:	bf00      	nop
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020400 	.word	0x40020400
 8000e58:	40020800 	.word	0x40020800
 8000e5c:	40020c00 	.word	0x40020c00
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40021c00 	.word	0x40021c00

08000e68 <__NVIC_EnableIRQ>:
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db0b      	blt.n	8000e92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f003 021f 	and.w	r2, r3, #31
 8000e80:	4906      	ldr	r1, [pc, #24]	; (8000e9c <__NVIC_EnableIRQ+0x34>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	2001      	movs	r0, #1
 8000e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	e000e100 	.word	0xe000e100

08000ea0 <__NVIC_DisableIRQ>:
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	db12      	blt.n	8000ed8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f003 021f 	and.w	r2, r3, #31
 8000eb8:	490a      	ldr	r1, [pc, #40]	; (8000ee4 <__NVIC_DisableIRQ+0x44>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	095b      	lsrs	r3, r3, #5
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec6:	3320      	adds	r3, #32
 8000ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ecc:	f3bf 8f4f 	dsb	sy
}
 8000ed0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ed2:	f3bf 8f6f 	isb	sy
}
 8000ed6:	bf00      	nop
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <__NVIC_SetPriority>:
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db0a      	blt.n	8000f12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	490c      	ldr	r1, [pc, #48]	; (8000f34 <__NVIC_SetPriority+0x4c>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	0112      	lsls	r2, r2, #4
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f10:	e00a      	b.n	8000f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4908      	ldr	r1, [pc, #32]	; (8000f38 <__NVIC_SetPriority+0x50>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	3b04      	subs	r3, #4
 8000f20:	0112      	lsls	r2, r2, #4
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	761a      	strb	r2, [r3, #24]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000e100 	.word	0xe000e100
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <Timer_Config>:
 *
 * */

//NOTA: Hay que desactivar las interrupciones globales y luego volver a activarlas

void Timer_Config(TIMER_Handler_t *ptrTimerConfig){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	bf00      	nop
	/* 0. Desactivamos las interrupciones globales */

	__disable_irq();

	/* 1. Activamos la se帽al de reloj para el perif茅rico espec铆fico */
	if(ptrTimerConfig -> ptrTIMx == TIM2){
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f50:	d106      	bne.n	8000f60 <Timer_Config+0x24>
		// Activamos la se帽al de reloj del TIM2
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000f52:	4b4b      	ldr	r3, [pc, #300]	; (8001080 <Timer_Config+0x144>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	4a4a      	ldr	r2, [pc, #296]	; (8001080 <Timer_Config+0x144>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5e:	e022      	b.n	8000fa6 <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM3){
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a47      	ldr	r2, [pc, #284]	; (8001084 <Timer_Config+0x148>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d106      	bne.n	8000f78 <Timer_Config+0x3c>
		// Activamos la se帽al de reloj del TIM3
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000f6a:	4b45      	ldr	r3, [pc, #276]	; (8001080 <Timer_Config+0x144>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a44      	ldr	r2, [pc, #272]	; (8001080 <Timer_Config+0x144>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	e016      	b.n	8000fa6 <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM4){
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a42      	ldr	r2, [pc, #264]	; (8001088 <Timer_Config+0x14c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d106      	bne.n	8000f90 <Timer_Config+0x54>
		// Activamos la se帽al de reloj del TIM4
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000f82:	4b3f      	ldr	r3, [pc, #252]	; (8001080 <Timer_Config+0x144>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	4a3e      	ldr	r2, [pc, #248]	; (8001080 <Timer_Config+0x144>)
 8000f88:	f043 0304 	orr.w	r3, r3, #4
 8000f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8e:	e00a      	b.n	8000fa6 <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM5){
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a3d      	ldr	r2, [pc, #244]	; (800108c <Timer_Config+0x150>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d105      	bne.n	8000fa6 <Timer_Config+0x6a>
		// Activamos la se帽al de reloj del TIM5
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8000f9a:	4b39      	ldr	r3, [pc, #228]	; (8001080 <Timer_Config+0x144>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a38      	ldr	r2, [pc, #224]	; (8001080 <Timer_Config+0x144>)
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuraci贸n del modo del timer (UP or DOWN) */

	if(ptrTimerConfig -> timerConfig.Timer_mode == TIMER_MODE_UP){
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	791b      	ldrb	r3, [r3, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10c      	bne.n	8000fc8 <Timer_Config+0x8c>
		// Configuramos el timer en modo UP
		ptrTimerConfig -> ptrTIMx -> CR1 &= ~(TIM_CR1_DIR);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 0210 	bic.w	r2, r2, #16
 8000fbc:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) en cero.
		ptrTimerConfig -> ptrTIMx -> CNT = 0;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24
 8000fc6:	e00d      	b.n	8000fe4 <Timer_Config+0xa8>

	}
	else{
		// Configuramos el timer en modo DOWN
		ptrTimerConfig -> ptrTIMx -> CR1 |= ~(TIM_CR1_DIR);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f062 0210 	orn	r2, r2, #16
 8000fd6:	601a      	str	r2, [r3, #0]

		// Ponemos en el contador (CNT) el valor del periodo
		ptrTimerConfig -> ptrTIMx -> CNT = ptrTimerConfig -> timerConfig.Timer_period -1;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	3a01      	subs	r2, #1
 8000fe2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuraci贸n del Prescaler */
	ptrTimerConfig -> ptrTIMx -> PSC = ptrTimerConfig -> timerConfig.Timer_speed -1;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	88db      	ldrh	r3, [r3, #6]
 8000fe8:	1e5a      	subs	r2, r3, #1
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo de las interrupciones */
	ptrTimerConfig -> ptrTIMx -> ARR = ptrTimerConfig -> timerConfig.Timer_period -1;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3a01      	subs	r2, #1
 8000ffa:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse  */
	ptrTimerConfig -> ptrTIMx -> CR1 |= TIM_CR1_CEN;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f042 0201 	orr.w	r2, r2, #1
 800100a:	601a      	str	r2, [r3, #0]

	/* 6. Activamos la interrupci贸n debida a un "update event" */
	if(ptrTimerConfig -> ptrTIMx != TIM3){
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a1c      	ldr	r2, [pc, #112]	; (8001084 <Timer_Config+0x148>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d007      	beq.n	8001026 <Timer_Config+0xea>
		ptrTimerConfig -> ptrTIMx -> DIER |= TIM_DIER_UIE;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f042 0201 	orr.w	r2, r2, #1
 8001024:	60da      	str	r2, [r3, #12]
	}

	/* 7. Activamos la se帽al de la interrupcu贸n en el NVIC */

	if(ptrTimerConfig -> ptrTIMx == TIM2){
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800102e:	d107      	bne.n	8001040 <Timer_Config+0x104>
		// Activamos la IRQ del TIM2
		__NVIC_EnableIRQ(TIM2_IRQn);
 8001030:	201c      	movs	r0, #28
 8001032:	f7ff ff19 	bl	8000e68 <__NVIC_EnableIRQ>

		// Establecemos la prioridad del timer
		__NVIC_SetPriority(TIM2_IRQn,3);
 8001036:	2103      	movs	r1, #3
 8001038:	201c      	movs	r0, #28
 800103a:	f7ff ff55 	bl	8000ee8 <__NVIC_SetPriority>
 800103e:	e019      	b.n	8001074 <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM3){
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0f      	ldr	r2, [pc, #60]	; (8001084 <Timer_Config+0x148>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d103      	bne.n	8001052 <Timer_Config+0x116>
		// Activamos la IRQ del TIM3
		__NVIC_DisableIRQ(TIM3_IRQn);
 800104a:	201d      	movs	r0, #29
 800104c:	f7ff ff28 	bl	8000ea0 <__NVIC_DisableIRQ>
 8001050:	e010      	b.n	8001074 <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM4){
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a0c      	ldr	r2, [pc, #48]	; (8001088 <Timer_Config+0x14c>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d103      	bne.n	8001064 <Timer_Config+0x128>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM4_IRQn);
 800105c:	201e      	movs	r0, #30
 800105e:	f7ff ff03 	bl	8000e68 <__NVIC_EnableIRQ>
 8001062:	e007      	b.n	8001074 <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM5){
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a08      	ldr	r2, [pc, #32]	; (800108c <Timer_Config+0x150>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d102      	bne.n	8001074 <Timer_Config+0x138>
		// Activamos la IRQ del TIM5
		__NVIC_EnableIRQ(TIM5_IRQn);
 800106e:	2032      	movs	r0, #50	; 0x32
 8001070:	f7ff fefa 	bl	8000e68 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001074:	b662      	cpsie	i
}
 8001076:	bf00      	nop
	}


	/* 8. Activamos de nuevo todas las interrupciones. */
	__enable_irq();
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40023800 	.word	0x40023800
 8001084:	40000400 	.word	0x40000400
 8001088:	40000800 	.word	0x40000800
 800108c:	40000c00 	.word	0x40000c00

08001090 <startTimer>:

void startTimer(TIMER_Handler_t *ptrTimerConfig){
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	ptrTimerConfig -> ptrTIMx -> DIER |= TIM_DIER_UIE;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f042 0201 	orr.w	r2, r2, #1
 80010a6:	60da      	str	r2, [r3, #12]


	__NVIC_EnableIRQ(TIM3_IRQn);
 80010a8:	201d      	movs	r0, #29
 80010aa:	f7ff fedd 	bl	8000e68 <__NVIC_EnableIRQ>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <stopTimer>:

void stopTimer(TIMER_Handler_t *ptrTimerConfig){
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
	ptrTimerConfig -> ptrTIMx -> DIER &= ~TIM_DIER_UIE;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f022 0201 	bic.w	r2, r2, #1
 80010cc:	60da      	str	r2, [r3, #12]
	__NVIC_DisableIRQ(TIM3_IRQn);
 80010ce:	201d      	movs	r0, #29
 80010d0:	f7ff fee6 	bl	8000ea0 <__NVIC_DisableIRQ>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <Timer4_Callback>:
__attribute__((weak)) void Timer3_Callback(void){
	__NOP();
}

// Callback Timer4
__attribute__((weak)) void Timer4_Callback(void){
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
	__NOP();
 80010e0:	bf00      	nop
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr

080010ea <Timer5_Callback>:

// Callback Timer5
__attribute__((weak)) void Timer5_Callback(void){
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
	__NOP();
 80010ee:	bf00      	nop
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <TIM2_IRQHandler>:

// Hay que hacer dos cosas: 1) Atender la interrupci贸n. 2) Llamamos al Callback
/* Rutina de atenci贸n a la interrupci贸n del TIM2 */

void TIM2_IRQHandler(void){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	TIM2 -> SR &= ~(TIM_SR_UIF);
 80010fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001106:	f023 0301 	bic.w	r3, r3, #1
 800110a:	6113      	str	r3, [r2, #16]
	Timer2_Callback();
 800110c:	f7ff f9ce 	bl	80004ac <Timer2_Callback>
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}

08001114 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	TIM3 -> SR &= ~(TIM_SR_UIF);
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <TIM3_IRQHandler+0x18>)
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	4a03      	ldr	r2, [pc, #12]	; (800112c <TIM3_IRQHandler+0x18>)
 800111e:	f023 0301 	bic.w	r3, r3, #1
 8001122:	6113      	str	r3, [r2, #16]
	Timer3_Callback();
 8001124:	f7ff f9d2 	bl	80004cc <Timer3_Callback>
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40000400 	.word	0x40000400

08001130 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	TIM4 -> SR &= ~(TIM_SR_UIF);
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <TIM4_IRQHandler+0x18>)
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	4a03      	ldr	r2, [pc, #12]	; (8001148 <TIM4_IRQHandler+0x18>)
 800113a:	f023 0301 	bic.w	r3, r3, #1
 800113e:	6113      	str	r3, [r2, #16]
	Timer4_Callback();
 8001140:	f7ff ffcc 	bl	80010dc <Timer4_Callback>
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40000800 	.word	0x40000800

0800114c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	TIM5 -> SR &= ~(TIM_SR_UIF);
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <TIM5_IRQHandler+0x18>)
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	4a03      	ldr	r2, [pc, #12]	; (8001164 <TIM5_IRQHandler+0x18>)
 8001156:	f023 0301 	bic.w	r3, r3, #1
 800115a:	6113      	str	r3, [r2, #16]
	Timer5_Callback();
 800115c:	f7ff ffc5 	bl	80010ea <Timer5_Callback>
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40000c00 	.word	0x40000c00

08001168 <__NVIC_EnableIRQ>:
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	2b00      	cmp	r3, #0
 8001178:	db0b      	blt.n	8001192 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	f003 021f 	and.w	r2, r3, #31
 8001180:	4906      	ldr	r1, [pc, #24]	; (800119c <__NVIC_EnableIRQ+0x34>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	095b      	lsrs	r3, r3, #5
 8001188:	2001      	movs	r0, #1
 800118a:	fa00 f202 	lsl.w	r2, r0, r2
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	e000e100 	.word	0xe000e100

080011a0 <USART_Config>:
 * del perif茅rico que se est谩 utilizando.
 */

uint8_t data;

void USART_Config(USART_Handler_t *ptrUsartHandler){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop

	/* 1. Activamos la se帽al de reloj que viene desde el bus al que pertenece el perif茅rico.
	 * Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6)
	 */
	/*1.1 Configuramos el USART1*/
	if(ptrUsartHandler -> ptrUSARTx == USART1){
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a8c      	ldr	r2, [pc, #560]	; (80013e4 <USART_Config+0x244>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d106      	bne.n	80011c4 <USART_Config+0x24>
		// Escribimos 1 (SET) en la posici贸n correspondiente al USART1
		RCC -> APB2ENR |= (RCC_APB2ENR_USART1EN);
 80011b6:	4b8c      	ldr	r3, [pc, #560]	; (80013e8 <USART_Config+0x248>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	4a8b      	ldr	r2, [pc, #556]	; (80013e8 <USART_Config+0x248>)
 80011bc:	f043 0310 	orr.w	r3, r3, #16
 80011c0:	6453      	str	r3, [r2, #68]	; 0x44
 80011c2:	e016      	b.n	80011f2 <USART_Config+0x52>
	}
	/*1.2 Configuramos el USART2*/
	else if(ptrUsartHandler -> ptrUSARTx == USART2){
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a88      	ldr	r2, [pc, #544]	; (80013ec <USART_Config+0x24c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d106      	bne.n	80011dc <USART_Config+0x3c>
		// Escribimos 1 (SET) en la posici贸n correspondiente al USART1
		RCC -> APB1ENR |= (RCC_APB1ENR_USART2EN);
 80011ce:	4b86      	ldr	r3, [pc, #536]	; (80013e8 <USART_Config+0x248>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a85      	ldr	r2, [pc, #532]	; (80013e8 <USART_Config+0x248>)
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	e00a      	b.n	80011f2 <USART_Config+0x52>
	}
	/*1.3 Configuramos el USART6*/
	else if(ptrUsartHandler -> ptrUSARTx == USART6){
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a83      	ldr	r2, [pc, #524]	; (80013f0 <USART_Config+0x250>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d105      	bne.n	80011f2 <USART_Config+0x52>
		// Escribimos 1 (SET) en la posici贸n correspondiente al USART1
		RCC -> APB2ENR |= (RCC_APB2ENR_USART6EN);
 80011e6:	4b80      	ldr	r3, [pc, #512]	; (80013e8 <USART_Config+0x248>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	4a7f      	ldr	r2, [pc, #508]	; (80013e8 <USART_Config+0x248>)
 80011ec:	f043 0320 	orr.w	r3, r3, #32
 80011f0:	6453      	str	r3, [r2, #68]	; 0x44
	 * Configuramos el modo: only TX, only RX, o RXTX
	 * Por 煤ltimo activamos el modulo USART cuando todo est谩 correctamente configurado
	 * */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuraci贸n desde cero.
	ptrUsartHandler -> ptrUSARTx -> CR1 = 0;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
	ptrUsartHandler -> ptrUSARTx -> CR2 = 0;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]

	// 2.2 Configuraci贸n del Parity:
	// Verificamos si el parity est谩 activado o no
	if(ptrUsartHandler -> USART_Config.USART_parity != USART_PARITY_NONE){
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	79db      	ldrb	r3, [r3, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d02b      	beq.n	8001262 <USART_Config+0xc2>

		// Verificamos si se ha seleccionado ODD or EVEN

		//Se selecciona EVEN
		if(ptrUsartHandler -> USART_Config.USART_parity == USART_PARITY_EVEN){
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	79db      	ldrb	r3, [r3, #7]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d113      	bne.n	800123a <USART_Config+0x9a>
			//Ponemos 0b0 en la posicion 9 del registo CR1 para escoger Even
			ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_PS);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68da      	ldr	r2, [r3, #12]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001220:	60da      	str	r2, [r3, #12]

			// Adem谩s, se seleccionan 9 bits.
			ptrUsartHandler -> USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2201      	movs	r2, #1
 8001226:	719a      	strb	r2, [r3, #6]
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	e01b      	b.n	8001272 <USART_Config+0xd2>
		}
		//Se selecciona ODD
		else{
			//Ponemos 0b1 en la posicion 9 del registo CR1 para escoger Even
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_PS);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68da      	ldr	r2, [r3, #12]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001248:	60da      	str	r2, [r3, #12]

			// Adem谩s, se seleccionan 9 bits.
			ptrUsartHandler -> USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2201      	movs	r2, #1
 800124e:	719a      	strb	r2, [r3, #6]
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	e007      	b.n	8001272 <USART_Config+0xd2>
		}
	}
	//No deseamos activar el parity-check
	else{
		//Ponemos 0b0 en la posicion 10 del registro CR1 para desactivar el Parity
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_PCE);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001270:	60da      	str	r2, [r3, #12]

	// 2.3 Configuramos el tama帽o del dato:

	//Verificamos si va a ser de 8 o 9 bits

	if(ptrUsartHandler -> USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	799b      	ldrb	r3, [r3, #6]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d108      	bne.n	800128c <USART_Config+0xec>
		//Ponemos 0b0 en la posicion 12 del registro CR1 para escoger 8 bits
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_M);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68da      	ldr	r2, [r3, #12]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	e007      	b.n	800129c <USART_Config+0xfc>
	}else{
		//Ponemos 0b1 en la posicion 12 del registro CR1 para escoger 9 bits
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	68da      	ldr	r2, [r3, #12]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800129a:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)

	switch(ptrUsartHandler -> USART_Config.USART_stopbits){
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	7a1b      	ldrb	r3, [r3, #8]
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d847      	bhi.n	8001334 <USART_Config+0x194>
 80012a4:	a201      	add	r2, pc, #4	; (adr r2, 80012ac <USART_Config+0x10c>)
 80012a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012aa:	bf00      	nop
 80012ac:	080012bd 	.word	0x080012bd
 80012b0:	080012cf 	.word	0x080012cf
 80012b4:	080012f1 	.word	0x080012f1
 80012b8:	08001313 	.word	0x08001313
	case USART_STOPBIT_1: {
		//Cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	691a      	ldr	r2, [r3, #16]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80012ca:	611a      	str	r2, [r3, #16]
		break;
 80012cc:	e03b      	b.n	8001346 <USART_Config+0x1a6>
	}
	case USART_STOPBIT_0_5:{
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	691a      	ldr	r2, [r3, #16]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80012dc:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b01 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP_0);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	691a      	ldr	r2, [r3, #16]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80012ec:	611a      	str	r2, [r3, #16]
		break;
 80012ee:	e02a      	b.n	8001346 <USART_Config+0x1a6>
	}
	case USART_STOPBIT_2:{
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	691a      	ldr	r2, [r3, #16]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80012fe:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b10 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP_1);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	691a      	ldr	r2, [r3, #16]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800130e:	611a      	str	r2, [r3, #16]
		break;
 8001310:	e019      	b.n	8001346 <USART_Config+0x1a6>
	}
	case USART_STOPBIT_1_5: {
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	691a      	ldr	r2, [r3, #16]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001320:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b11 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	691a      	ldr	r2, [r3, #16]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001330:	611a      	str	r2, [r3, #16]
		break;
 8001332:	e008      	b.n	8001346 <USART_Config+0x1a6>
	}
	default:{
		//Cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	691a      	ldr	r2, [r3, #16]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001342:	611a      	str	r2, [r3, #16]
		break;
 8001344:	bf00      	nop
	}
	}

	// 2.4 Configuraci贸n del Baudrate (SFR USART_BRR)
	// Ver tabla de valores (Tabla 75), Frec = 16MHz, overr = 0;
	if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	795b      	ldrb	r3, [r3, #5]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d105      	bne.n	800135a <USART_Config+0x1ba>
		// El valor a cargar es 104.1875 -> Mantiza = 104, fraction = 0.1875
		// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
		// Valor a cargar 0x683
		// Configurando el Baudrate generator para una velocidad de 9600bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0683;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f240 6283 	movw	r2, #1667	; 0x683
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	e011      	b.n	800137e <USART_Config+0x1de>
	}

	else if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_19200){
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	795b      	ldrb	r3, [r3, #5]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d105      	bne.n	800136e <USART_Config+0x1ce>
		// El valor a cargar es 52.0625 -> Mantiza = 52, fraction = 0.0625
		// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
		// Valor a cargar 0x0341
		// Configurando el Baudrate generator para una velocidad de 19200bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0341;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f240 3241 	movw	r2, #833	; 0x341
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	e007      	b.n	800137e <USART_Config+0x1de>
	}

	else if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_115200){	//**************************************DUDAAAAAA
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	795b      	ldrb	r3, [r3, #5]
 8001372:	2b02      	cmp	r3, #2
 8001374:	d103      	bne.n	800137e <USART_Config+0x1de>
		// El valor a cargar es 8.6875 -> Mantiza = 8, fraction = 0.6875
		// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11
		// Valor a cargar 0x0081
		// Configurando el Baudrate generator para una velocidad de 115200bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x08B;//0x0081;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	228b      	movs	r2, #139	; 0x8b
 800137c:	609a      	str	r2, [r3, #8]
	}

	// 2.5 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler -> USART_Config.USART_mode){
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	791b      	ldrb	r3, [r3, #4]
 8001382:	2b03      	cmp	r3, #3
 8001384:	d847      	bhi.n	8001416 <USART_Config+0x276>
 8001386:	a201      	add	r2, pc, #4	; (adr r2, 800138c <USART_Config+0x1ec>)
 8001388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138c:	0800139d 	.word	0x0800139d
 8001390:	080013af 	.word	0x080013af
 8001394:	080013c1 	.word	0x080013c1
 8001398:	080013f5 	.word	0x080013f5
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		//Cargamos el valor 0b1 en el bit TE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TE);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	68da      	ldr	r2, [r3, #12]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0208 	orr.w	r2, r2, #8
 80013aa:	60da      	str	r2, [r3, #12]
		break;
 80013ac:	e044      	b.n	8001438 <USART_Config+0x298>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		//Cargamos el valor 0b1 en el bit RE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RE);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68da      	ldr	r2, [r3, #12]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f042 0204 	orr.w	r2, r2, #4
 80013bc:	60da      	str	r2, [r3, #12]
		break;
 80013be:	e03b      	b.n	8001438 <USART_Config+0x298>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmisi贸n como recepci贸n
		//Cargamos el valor 0b1 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TE);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 0208 	orr.w	r2, r2, #8
 80013ce:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RE);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f042 0204 	orr.w	r2, r2, #4
 80013de:	60da      	str	r2, [r3, #12]
		break;
 80013e0:	e02a      	b.n	8001438 <USART_Config+0x298>
 80013e2:	bf00      	nop
 80013e4:	40011000 	.word	0x40011000
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40004400 	.word	0x40004400
 80013f0:	40011400 	.word	0x40011400
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		//Cargamos el valor 0b0 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TE);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0208 	bic.w	r2, r2, #8
 8001402:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RE);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0204 	bic.w	r2, r2, #4
 8001412:	60da      	str	r2, [r3, #12]
		break;
 8001414:	e010      	b.n	8001438 <USART_Config+0x298>
	}
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		//Cargamos el valor 0b0 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TE);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0208 	bic.w	r2, r2, #8
 8001424:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RE);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0204 	bic.w	r2, r2, #4
 8001434:	60da      	str	r2, [r3, #12]
		break;
 8001436:	bf00      	nop
	}
	}

	// 2.6 Activamos el modulo serial.

	if(ptrUsartHandler -> USART_Config.USART_mode != USART_MODE_DISABLE){
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	791b      	ldrb	r3, [r3, #4]
 800143c:	2b03      	cmp	r3, #3
 800143e:	d007      	beq.n	8001450 <USART_Config+0x2b0>
		//Cargamos el valor de 0b1 en el bit UE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_UE);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800144e:	60da      	str	r2, [r3, #12]
	}

	// 3. Activamos la interrupci贸n para el USART

	switch(ptrUsartHandler -> USART_Config.USART_interrupt){
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7a5b      	ldrb	r3, [r3, #9]
 8001454:	2b03      	cmp	r3, #3
 8001456:	d84f      	bhi.n	80014f8 <USART_Config+0x358>
 8001458:	a201      	add	r2, pc, #4	; (adr r2, 8001460 <USART_Config+0x2c0>)
 800145a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145e:	bf00      	nop
 8001460:	08001471 	.word	0x08001471
 8001464:	08001493 	.word	0x08001493
 8001468:	080014b5 	.word	0x080014b5
 800146c:	080014d7 	.word	0x080014d7
	// Analizamos los
	case USART_INTERRUPT_RX_ENABLE:
	{
		// Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RXNEIE);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 0220 	orr.w	r2, r2, #32
 800147e:	60da      	str	r2, [r3, #12]
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800148e:	60da      	str	r2, [r3, #12]
		break;
 8001490:	e043      	b.n	800151a <USART_Config+0x37a>
	}
	case USART_INTERRUPT_TX_ENABLE:
	{
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014a0:	60da      	str	r2, [r3, #12]
		// NO Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RXNEIE);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 0220 	bic.w	r2, r2, #32
 80014b0:	60da      	str	r2, [r3, #12]
		break;
 80014b2:	e032      	b.n	800151a <USART_Config+0x37a>

	}
	case USART_INTERRUPT_RXTX_ENABLE:
	{
		// Activamos las dos interrupciones tanto del RX como del TX
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TXEIE);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014c2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014d2:	60da      	str	r2, [r3, #12]
		break;
 80014d4:	e021      	b.n	800151a <USART_Config+0x37a>
	}
	case USART_INTERRUPT_RXTX_DISABLE:
	{
		// Activamos las dos interrupciones tanto del RX como del TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014e4:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014f4:	60da      	str	r2, [r3, #12]
		break;
 80014f6:	e010      	b.n	800151a <USART_Config+0x37a>
	}

	default:
	{
		// NO Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RXNEIE);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68da      	ldr	r2, [r3, #12]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0220 	bic.w	r2, r2, #32
 8001506:	60da      	str	r2, [r3, #12]
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001516:	60da      	str	r2, [r3, #12]
		break;
 8001518:	bf00      	nop
	}
	}

	// 4. Activamos la se帽al de la interrupci贸n en el NVIC

	if((ptrUsartHandler -> USART_Config.USART_interrupt == USART_INTERRUPT_RX_ENABLE) | (ptrUsartHandler -> USART_Config.USART_interrupt == USART_INTERRUPT_TX_ENABLE))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7a5b      	ldrb	r3, [r3, #9]
 800151e:	2b00      	cmp	r3, #0
 8001520:	bf0c      	ite	eq
 8001522:	2301      	moveq	r3, #1
 8001524:	2300      	movne	r3, #0
 8001526:	b2da      	uxtb	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7a5b      	ldrb	r3, [r3, #9]
 800152c:	2b01      	cmp	r3, #1
 800152e:	bf0c      	ite	eq
 8001530:	2301      	moveq	r3, #1
 8001532:	2300      	movne	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4313      	orrs	r3, r2
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d019      	beq.n	8001572 <USART_Config+0x3d2>
	{

		if(ptrUsartHandler -> ptrUSARTx == USART1){
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <USART_Config+0x3e0>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d103      	bne.n	8001550 <USART_Config+0x3b0>
			// Activamos la IRQ del USART1
			__NVIC_EnableIRQ(USART1_IRQn);
 8001548:	2025      	movs	r0, #37	; 0x25
 800154a:	f7ff fe0d 	bl	8001168 <__NVIC_EnableIRQ>
 800154e:	e010      	b.n	8001572 <USART_Config+0x3d2>

		}else if(ptrUsartHandler -> ptrUSARTx == USART2){
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <USART_Config+0x3e4>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d103      	bne.n	8001562 <USART_Config+0x3c2>
			// Activamos la IRQ del USART2
			__NVIC_EnableIRQ(USART2_IRQn);
 800155a:	2026      	movs	r0, #38	; 0x26
 800155c:	f7ff fe04 	bl	8001168 <__NVIC_EnableIRQ>
 8001560:	e007      	b.n	8001572 <USART_Config+0x3d2>

		}else if(ptrUsartHandler -> ptrUSARTx == USART6){
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a08      	ldr	r2, [pc, #32]	; (8001588 <USART_Config+0x3e8>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d102      	bne.n	8001572 <USART_Config+0x3d2>
			// Activamos la IRQ del USART6
			__NVIC_EnableIRQ(USART6_IRQn);
 800156c:	2047      	movs	r0, #71	; 0x47
 800156e:	f7ff fdfb 	bl	8001168 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001572:	b662      	cpsie	i
}
 8001574:	bf00      	nop
		}

	// 5. Activamos de nuevo todas las interrupciones

	__enable_irq();
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40011000 	.word	0x40011000
 8001584:	40004400 	.word	0x40004400
 8001588:	40011400 	.word	0x40011400

0800158c <USART1_Callback>:

//**********//  CallBacks //**********//

// Callback USART1
__attribute__((weak)) void USART1_Callback(void){
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
	__NOP();
 8001590:	bf00      	nop
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <USART6_Callback>:
__attribute__((weak)) void USART2_Callback(void){
	__NOP();
}

// Callback USART6
__attribute__((weak)) void USART6_Callback(void){
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
	__NOP();
 800159e:	bf00      	nop
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <USART1_IRQHandler>:

// Hay que hacer dos cosas: 1) Atender la interrupci贸n. 2) Llamamos al Callback
/* Rutina de atenci贸n a la interrupci贸n del USART */

void USART1_IRQHandler(void){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0

	USART1 -> SR &= ~(USART_SR_RXNE);		// Bajamos la bandera manualmente
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <USART1_IRQHandler+0x18>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a03      	ldr	r2, [pc, #12]	; (80015c0 <USART1_IRQHandler+0x18>)
 80015b2:	f023 0320 	bic.w	r3, r3, #32
 80015b6:	6013      	str	r3, [r2, #0]

	USART1_Callback();
 80015b8:	f7ff ffe8 	bl	800158c <USART1_Callback>
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40011000 	.word	0x40011000

080015c4 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	USART2 -> SR &= ~(USART_SR_RXNE);		// Desactivamos la bandera manualmente para el RX
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <USART2_IRQHandler+0x24>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <USART2_IRQHandler+0x24>)
 80015ce:	f023 0320 	bic.w	r3, r3, #32
 80015d2:	6013      	str	r3, [r2, #0]

	data = (USART2 -> DR);
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <USART2_IRQHandler+0x24>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <USART2_IRQHandler+0x28>)
 80015dc:	701a      	strb	r2, [r3, #0]

	USART2_Callback();
 80015de:	f7fe ff7b 	bl	80004d8 <USART2_Callback>

	//USART2 -> SR &= ~(USART_SR_TXE);		// Desactivamos la bandera para el TX
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40004400 	.word	0x40004400
 80015ec:	200001b2 	.word	0x200001b2

080015f0 <USART6_IRQHandler>:

void USART6_IRQHandler(void){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	USART6 -> SR &= ~(USART_SR_RXNE);
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <USART6_IRQHandler+0x18>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a03      	ldr	r2, [pc, #12]	; (8001608 <USART6_IRQHandler+0x18>)
 80015fa:	f023 0320 	bic.w	r3, r3, #32
 80015fe:	6013      	str	r3, [r2, #0]
	USART6_Callback();
 8001600:	f7ff ffcb 	bl	800159a <USART6_Callback>
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40011400 	.word	0x40011400

0800160c <returnData>:
	dataToRead = ((char) (ptrUsartHandler -> ptrUSARTx -> DR));
	return dataToRead;

}

uint8_t returnData(void){
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
	return data;				// Devolvemos el valor
 8001610:	4b02      	ldr	r3, [pc, #8]	; (800161c <returnData+0x10>)
 8001612:	781b      	ldrb	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	200001b2 	.word	0x200001b2

08001620 <writeChar>:

//**********// Funci贸n para escribir un solo char //**********//

int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend){
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
	while(!(ptrUsartHandler -> ptrUSARTx -> SR & USART_SR_TXE)){
 800162a:	e000      	b.n	800162e <writeChar+0xe>
		__NOP();
 800162c:	bf00      	nop
	while(!(ptrUsartHandler -> ptrUSARTx -> SR & USART_SR_TXE)){
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f7      	beq.n	800162c <writeChar+0xc>
	// Permitimos la bandera del TX para el USART2
	//ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TXEIE);
	//USART2 -> SR |= (USART_SR_TXE);

	//Cargamos el valor de dataToSend en el USER DATA Register
	ptrUsartHandler -> ptrUSARTx -> DR = (dataToSend);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	605a      	str	r2, [r3, #4]

	//ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
	//USART2 -> SR &= ~(USART_SR_TXE);		// Desactivamos la bandera para el TX
	return dataToSend;
 8001644:	683b      	ldr	r3, [r7, #0]
}
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <writeMsg>:

/* Funci贸n para escribir un mensaje */

void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
	while(*msgToSend != '\0'){
 800165a:	e008      	b.n	800166e <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffdc 	bl	8001620 <writeChar>
		msgToSend++;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f2      	bne.n	800165c <writeMsg+0xc>
	}
}
 8001676:	bf00      	nop
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <__errno>:
 8001680:	4b01      	ldr	r3, [pc, #4]	; (8001688 <__errno+0x8>)
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000000 	.word	0x20000000

0800168c <__libc_init_array>:
 800168c:	b570      	push	{r4, r5, r6, lr}
 800168e:	4d0d      	ldr	r5, [pc, #52]	; (80016c4 <__libc_init_array+0x38>)
 8001690:	4c0d      	ldr	r4, [pc, #52]	; (80016c8 <__libc_init_array+0x3c>)
 8001692:	1b64      	subs	r4, r4, r5
 8001694:	10a4      	asrs	r4, r4, #2
 8001696:	2600      	movs	r6, #0
 8001698:	42a6      	cmp	r6, r4
 800169a:	d109      	bne.n	80016b0 <__libc_init_array+0x24>
 800169c:	4d0b      	ldr	r5, [pc, #44]	; (80016cc <__libc_init_array+0x40>)
 800169e:	4c0c      	ldr	r4, [pc, #48]	; (80016d0 <__libc_init_array+0x44>)
 80016a0:	f000 fc84 	bl	8001fac <_init>
 80016a4:	1b64      	subs	r4, r4, r5
 80016a6:	10a4      	asrs	r4, r4, #2
 80016a8:	2600      	movs	r6, #0
 80016aa:	42a6      	cmp	r6, r4
 80016ac:	d105      	bne.n	80016ba <__libc_init_array+0x2e>
 80016ae:	bd70      	pop	{r4, r5, r6, pc}
 80016b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80016b4:	4798      	blx	r3
 80016b6:	3601      	adds	r6, #1
 80016b8:	e7ee      	b.n	8001698 <__libc_init_array+0xc>
 80016ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80016be:	4798      	blx	r3
 80016c0:	3601      	adds	r6, #1
 80016c2:	e7f2      	b.n	80016aa <__libc_init_array+0x1e>
 80016c4:	08001ffc 	.word	0x08001ffc
 80016c8:	08001ffc 	.word	0x08001ffc
 80016cc:	08001ffc 	.word	0x08001ffc
 80016d0:	08002000 	.word	0x08002000

080016d4 <siprintf>:
 80016d4:	b40e      	push	{r1, r2, r3}
 80016d6:	b500      	push	{lr}
 80016d8:	b09c      	sub	sp, #112	; 0x70
 80016da:	ab1d      	add	r3, sp, #116	; 0x74
 80016dc:	9002      	str	r0, [sp, #8]
 80016de:	9006      	str	r0, [sp, #24]
 80016e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80016e4:	4809      	ldr	r0, [pc, #36]	; (800170c <siprintf+0x38>)
 80016e6:	9107      	str	r1, [sp, #28]
 80016e8:	9104      	str	r1, [sp, #16]
 80016ea:	4909      	ldr	r1, [pc, #36]	; (8001710 <siprintf+0x3c>)
 80016ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80016f0:	9105      	str	r1, [sp, #20]
 80016f2:	6800      	ldr	r0, [r0, #0]
 80016f4:	9301      	str	r3, [sp, #4]
 80016f6:	a902      	add	r1, sp, #8
 80016f8:	f000 f868 	bl	80017cc <_svfiprintf_r>
 80016fc:	9b02      	ldr	r3, [sp, #8]
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
 8001702:	b01c      	add	sp, #112	; 0x70
 8001704:	f85d eb04 	ldr.w	lr, [sp], #4
 8001708:	b003      	add	sp, #12
 800170a:	4770      	bx	lr
 800170c:	20000000 	.word	0x20000000
 8001710:	ffff0208 	.word	0xffff0208

08001714 <__ssputs_r>:
 8001714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001718:	688e      	ldr	r6, [r1, #8]
 800171a:	429e      	cmp	r6, r3
 800171c:	4682      	mov	sl, r0
 800171e:	460c      	mov	r4, r1
 8001720:	4690      	mov	r8, r2
 8001722:	461f      	mov	r7, r3
 8001724:	d838      	bhi.n	8001798 <__ssputs_r+0x84>
 8001726:	898a      	ldrh	r2, [r1, #12]
 8001728:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800172c:	d032      	beq.n	8001794 <__ssputs_r+0x80>
 800172e:	6825      	ldr	r5, [r4, #0]
 8001730:	6909      	ldr	r1, [r1, #16]
 8001732:	eba5 0901 	sub.w	r9, r5, r1
 8001736:	6965      	ldr	r5, [r4, #20]
 8001738:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800173c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001740:	3301      	adds	r3, #1
 8001742:	444b      	add	r3, r9
 8001744:	106d      	asrs	r5, r5, #1
 8001746:	429d      	cmp	r5, r3
 8001748:	bf38      	it	cc
 800174a:	461d      	movcc	r5, r3
 800174c:	0553      	lsls	r3, r2, #21
 800174e:	d531      	bpl.n	80017b4 <__ssputs_r+0xa0>
 8001750:	4629      	mov	r1, r5
 8001752:	f000 fb61 	bl	8001e18 <_malloc_r>
 8001756:	4606      	mov	r6, r0
 8001758:	b950      	cbnz	r0, 8001770 <__ssputs_r+0x5c>
 800175a:	230c      	movs	r3, #12
 800175c:	f8ca 3000 	str.w	r3, [sl]
 8001760:	89a3      	ldrh	r3, [r4, #12]
 8001762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001766:	81a3      	strh	r3, [r4, #12]
 8001768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800176c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001770:	6921      	ldr	r1, [r4, #16]
 8001772:	464a      	mov	r2, r9
 8001774:	f000 fabe 	bl	8001cf4 <memcpy>
 8001778:	89a3      	ldrh	r3, [r4, #12]
 800177a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800177e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001782:	81a3      	strh	r3, [r4, #12]
 8001784:	6126      	str	r6, [r4, #16]
 8001786:	6165      	str	r5, [r4, #20]
 8001788:	444e      	add	r6, r9
 800178a:	eba5 0509 	sub.w	r5, r5, r9
 800178e:	6026      	str	r6, [r4, #0]
 8001790:	60a5      	str	r5, [r4, #8]
 8001792:	463e      	mov	r6, r7
 8001794:	42be      	cmp	r6, r7
 8001796:	d900      	bls.n	800179a <__ssputs_r+0x86>
 8001798:	463e      	mov	r6, r7
 800179a:	6820      	ldr	r0, [r4, #0]
 800179c:	4632      	mov	r2, r6
 800179e:	4641      	mov	r1, r8
 80017a0:	f000 fab6 	bl	8001d10 <memmove>
 80017a4:	68a3      	ldr	r3, [r4, #8]
 80017a6:	1b9b      	subs	r3, r3, r6
 80017a8:	60a3      	str	r3, [r4, #8]
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	4433      	add	r3, r6
 80017ae:	6023      	str	r3, [r4, #0]
 80017b0:	2000      	movs	r0, #0
 80017b2:	e7db      	b.n	800176c <__ssputs_r+0x58>
 80017b4:	462a      	mov	r2, r5
 80017b6:	f000 fba3 	bl	8001f00 <_realloc_r>
 80017ba:	4606      	mov	r6, r0
 80017bc:	2800      	cmp	r0, #0
 80017be:	d1e1      	bne.n	8001784 <__ssputs_r+0x70>
 80017c0:	6921      	ldr	r1, [r4, #16]
 80017c2:	4650      	mov	r0, sl
 80017c4:	f000 fabe 	bl	8001d44 <_free_r>
 80017c8:	e7c7      	b.n	800175a <__ssputs_r+0x46>
	...

080017cc <_svfiprintf_r>:
 80017cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017d0:	4698      	mov	r8, r3
 80017d2:	898b      	ldrh	r3, [r1, #12]
 80017d4:	061b      	lsls	r3, r3, #24
 80017d6:	b09d      	sub	sp, #116	; 0x74
 80017d8:	4607      	mov	r7, r0
 80017da:	460d      	mov	r5, r1
 80017dc:	4614      	mov	r4, r2
 80017de:	d50e      	bpl.n	80017fe <_svfiprintf_r+0x32>
 80017e0:	690b      	ldr	r3, [r1, #16]
 80017e2:	b963      	cbnz	r3, 80017fe <_svfiprintf_r+0x32>
 80017e4:	2140      	movs	r1, #64	; 0x40
 80017e6:	f000 fb17 	bl	8001e18 <_malloc_r>
 80017ea:	6028      	str	r0, [r5, #0]
 80017ec:	6128      	str	r0, [r5, #16]
 80017ee:	b920      	cbnz	r0, 80017fa <_svfiprintf_r+0x2e>
 80017f0:	230c      	movs	r3, #12
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017f8:	e0d1      	b.n	800199e <_svfiprintf_r+0x1d2>
 80017fa:	2340      	movs	r3, #64	; 0x40
 80017fc:	616b      	str	r3, [r5, #20]
 80017fe:	2300      	movs	r3, #0
 8001800:	9309      	str	r3, [sp, #36]	; 0x24
 8001802:	2320      	movs	r3, #32
 8001804:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001808:	f8cd 800c 	str.w	r8, [sp, #12]
 800180c:	2330      	movs	r3, #48	; 0x30
 800180e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80019b8 <_svfiprintf_r+0x1ec>
 8001812:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001816:	f04f 0901 	mov.w	r9, #1
 800181a:	4623      	mov	r3, r4
 800181c:	469a      	mov	sl, r3
 800181e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001822:	b10a      	cbz	r2, 8001828 <_svfiprintf_r+0x5c>
 8001824:	2a25      	cmp	r2, #37	; 0x25
 8001826:	d1f9      	bne.n	800181c <_svfiprintf_r+0x50>
 8001828:	ebba 0b04 	subs.w	fp, sl, r4
 800182c:	d00b      	beq.n	8001846 <_svfiprintf_r+0x7a>
 800182e:	465b      	mov	r3, fp
 8001830:	4622      	mov	r2, r4
 8001832:	4629      	mov	r1, r5
 8001834:	4638      	mov	r0, r7
 8001836:	f7ff ff6d 	bl	8001714 <__ssputs_r>
 800183a:	3001      	adds	r0, #1
 800183c:	f000 80aa 	beq.w	8001994 <_svfiprintf_r+0x1c8>
 8001840:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001842:	445a      	add	r2, fp
 8001844:	9209      	str	r2, [sp, #36]	; 0x24
 8001846:	f89a 3000 	ldrb.w	r3, [sl]
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 80a2 	beq.w	8001994 <_svfiprintf_r+0x1c8>
 8001850:	2300      	movs	r3, #0
 8001852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800185a:	f10a 0a01 	add.w	sl, sl, #1
 800185e:	9304      	str	r3, [sp, #16]
 8001860:	9307      	str	r3, [sp, #28]
 8001862:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001866:	931a      	str	r3, [sp, #104]	; 0x68
 8001868:	4654      	mov	r4, sl
 800186a:	2205      	movs	r2, #5
 800186c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001870:	4851      	ldr	r0, [pc, #324]	; (80019b8 <_svfiprintf_r+0x1ec>)
 8001872:	f7fe fcb5 	bl	80001e0 <memchr>
 8001876:	9a04      	ldr	r2, [sp, #16]
 8001878:	b9d8      	cbnz	r0, 80018b2 <_svfiprintf_r+0xe6>
 800187a:	06d0      	lsls	r0, r2, #27
 800187c:	bf44      	itt	mi
 800187e:	2320      	movmi	r3, #32
 8001880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001884:	0711      	lsls	r1, r2, #28
 8001886:	bf44      	itt	mi
 8001888:	232b      	movmi	r3, #43	; 0x2b
 800188a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800188e:	f89a 3000 	ldrb.w	r3, [sl]
 8001892:	2b2a      	cmp	r3, #42	; 0x2a
 8001894:	d015      	beq.n	80018c2 <_svfiprintf_r+0xf6>
 8001896:	9a07      	ldr	r2, [sp, #28]
 8001898:	4654      	mov	r4, sl
 800189a:	2000      	movs	r0, #0
 800189c:	f04f 0c0a 	mov.w	ip, #10
 80018a0:	4621      	mov	r1, r4
 80018a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80018a6:	3b30      	subs	r3, #48	; 0x30
 80018a8:	2b09      	cmp	r3, #9
 80018aa:	d94e      	bls.n	800194a <_svfiprintf_r+0x17e>
 80018ac:	b1b0      	cbz	r0, 80018dc <_svfiprintf_r+0x110>
 80018ae:	9207      	str	r2, [sp, #28]
 80018b0:	e014      	b.n	80018dc <_svfiprintf_r+0x110>
 80018b2:	eba0 0308 	sub.w	r3, r0, r8
 80018b6:	fa09 f303 	lsl.w	r3, r9, r3
 80018ba:	4313      	orrs	r3, r2
 80018bc:	9304      	str	r3, [sp, #16]
 80018be:	46a2      	mov	sl, r4
 80018c0:	e7d2      	b.n	8001868 <_svfiprintf_r+0x9c>
 80018c2:	9b03      	ldr	r3, [sp, #12]
 80018c4:	1d19      	adds	r1, r3, #4
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	9103      	str	r1, [sp, #12]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	bfbb      	ittet	lt
 80018ce:	425b      	neglt	r3, r3
 80018d0:	f042 0202 	orrlt.w	r2, r2, #2
 80018d4:	9307      	strge	r3, [sp, #28]
 80018d6:	9307      	strlt	r3, [sp, #28]
 80018d8:	bfb8      	it	lt
 80018da:	9204      	strlt	r2, [sp, #16]
 80018dc:	7823      	ldrb	r3, [r4, #0]
 80018de:	2b2e      	cmp	r3, #46	; 0x2e
 80018e0:	d10c      	bne.n	80018fc <_svfiprintf_r+0x130>
 80018e2:	7863      	ldrb	r3, [r4, #1]
 80018e4:	2b2a      	cmp	r3, #42	; 0x2a
 80018e6:	d135      	bne.n	8001954 <_svfiprintf_r+0x188>
 80018e8:	9b03      	ldr	r3, [sp, #12]
 80018ea:	1d1a      	adds	r2, r3, #4
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	9203      	str	r2, [sp, #12]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bfb8      	it	lt
 80018f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80018f8:	3402      	adds	r4, #2
 80018fa:	9305      	str	r3, [sp, #20]
 80018fc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80019bc <_svfiprintf_r+0x1f0>
 8001900:	7821      	ldrb	r1, [r4, #0]
 8001902:	2203      	movs	r2, #3
 8001904:	4650      	mov	r0, sl
 8001906:	f7fe fc6b 	bl	80001e0 <memchr>
 800190a:	b140      	cbz	r0, 800191e <_svfiprintf_r+0x152>
 800190c:	2340      	movs	r3, #64	; 0x40
 800190e:	eba0 000a 	sub.w	r0, r0, sl
 8001912:	fa03 f000 	lsl.w	r0, r3, r0
 8001916:	9b04      	ldr	r3, [sp, #16]
 8001918:	4303      	orrs	r3, r0
 800191a:	3401      	adds	r4, #1
 800191c:	9304      	str	r3, [sp, #16]
 800191e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001922:	4827      	ldr	r0, [pc, #156]	; (80019c0 <_svfiprintf_r+0x1f4>)
 8001924:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001928:	2206      	movs	r2, #6
 800192a:	f7fe fc59 	bl	80001e0 <memchr>
 800192e:	2800      	cmp	r0, #0
 8001930:	d038      	beq.n	80019a4 <_svfiprintf_r+0x1d8>
 8001932:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <_svfiprintf_r+0x1f8>)
 8001934:	bb1b      	cbnz	r3, 800197e <_svfiprintf_r+0x1b2>
 8001936:	9b03      	ldr	r3, [sp, #12]
 8001938:	3307      	adds	r3, #7
 800193a:	f023 0307 	bic.w	r3, r3, #7
 800193e:	3308      	adds	r3, #8
 8001940:	9303      	str	r3, [sp, #12]
 8001942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001944:	4433      	add	r3, r6
 8001946:	9309      	str	r3, [sp, #36]	; 0x24
 8001948:	e767      	b.n	800181a <_svfiprintf_r+0x4e>
 800194a:	fb0c 3202 	mla	r2, ip, r2, r3
 800194e:	460c      	mov	r4, r1
 8001950:	2001      	movs	r0, #1
 8001952:	e7a5      	b.n	80018a0 <_svfiprintf_r+0xd4>
 8001954:	2300      	movs	r3, #0
 8001956:	3401      	adds	r4, #1
 8001958:	9305      	str	r3, [sp, #20]
 800195a:	4619      	mov	r1, r3
 800195c:	f04f 0c0a 	mov.w	ip, #10
 8001960:	4620      	mov	r0, r4
 8001962:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001966:	3a30      	subs	r2, #48	; 0x30
 8001968:	2a09      	cmp	r2, #9
 800196a:	d903      	bls.n	8001974 <_svfiprintf_r+0x1a8>
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0c5      	beq.n	80018fc <_svfiprintf_r+0x130>
 8001970:	9105      	str	r1, [sp, #20]
 8001972:	e7c3      	b.n	80018fc <_svfiprintf_r+0x130>
 8001974:	fb0c 2101 	mla	r1, ip, r1, r2
 8001978:	4604      	mov	r4, r0
 800197a:	2301      	movs	r3, #1
 800197c:	e7f0      	b.n	8001960 <_svfiprintf_r+0x194>
 800197e:	ab03      	add	r3, sp, #12
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	462a      	mov	r2, r5
 8001984:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <_svfiprintf_r+0x1fc>)
 8001986:	a904      	add	r1, sp, #16
 8001988:	4638      	mov	r0, r7
 800198a:	f3af 8000 	nop.w
 800198e:	1c42      	adds	r2, r0, #1
 8001990:	4606      	mov	r6, r0
 8001992:	d1d6      	bne.n	8001942 <_svfiprintf_r+0x176>
 8001994:	89ab      	ldrh	r3, [r5, #12]
 8001996:	065b      	lsls	r3, r3, #25
 8001998:	f53f af2c 	bmi.w	80017f4 <_svfiprintf_r+0x28>
 800199c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800199e:	b01d      	add	sp, #116	; 0x74
 80019a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019a4:	ab03      	add	r3, sp, #12
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	462a      	mov	r2, r5
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <_svfiprintf_r+0x1fc>)
 80019ac:	a904      	add	r1, sp, #16
 80019ae:	4638      	mov	r0, r7
 80019b0:	f000 f87a 	bl	8001aa8 <_printf_i>
 80019b4:	e7eb      	b.n	800198e <_svfiprintf_r+0x1c2>
 80019b6:	bf00      	nop
 80019b8:	08001fc9 	.word	0x08001fc9
 80019bc:	08001fcf 	.word	0x08001fcf
 80019c0:	08001fd3 	.word	0x08001fd3
 80019c4:	00000000 	.word	0x00000000
 80019c8:	08001715 	.word	0x08001715

080019cc <_printf_common>:
 80019cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019d0:	4616      	mov	r6, r2
 80019d2:	4699      	mov	r9, r3
 80019d4:	688a      	ldr	r2, [r1, #8]
 80019d6:	690b      	ldr	r3, [r1, #16]
 80019d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80019dc:	4293      	cmp	r3, r2
 80019de:	bfb8      	it	lt
 80019e0:	4613      	movlt	r3, r2
 80019e2:	6033      	str	r3, [r6, #0]
 80019e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80019e8:	4607      	mov	r7, r0
 80019ea:	460c      	mov	r4, r1
 80019ec:	b10a      	cbz	r2, 80019f2 <_printf_common+0x26>
 80019ee:	3301      	adds	r3, #1
 80019f0:	6033      	str	r3, [r6, #0]
 80019f2:	6823      	ldr	r3, [r4, #0]
 80019f4:	0699      	lsls	r1, r3, #26
 80019f6:	bf42      	ittt	mi
 80019f8:	6833      	ldrmi	r3, [r6, #0]
 80019fa:	3302      	addmi	r3, #2
 80019fc:	6033      	strmi	r3, [r6, #0]
 80019fe:	6825      	ldr	r5, [r4, #0]
 8001a00:	f015 0506 	ands.w	r5, r5, #6
 8001a04:	d106      	bne.n	8001a14 <_printf_common+0x48>
 8001a06:	f104 0a19 	add.w	sl, r4, #25
 8001a0a:	68e3      	ldr	r3, [r4, #12]
 8001a0c:	6832      	ldr	r2, [r6, #0]
 8001a0e:	1a9b      	subs	r3, r3, r2
 8001a10:	42ab      	cmp	r3, r5
 8001a12:	dc26      	bgt.n	8001a62 <_printf_common+0x96>
 8001a14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001a18:	1e13      	subs	r3, r2, #0
 8001a1a:	6822      	ldr	r2, [r4, #0]
 8001a1c:	bf18      	it	ne
 8001a1e:	2301      	movne	r3, #1
 8001a20:	0692      	lsls	r2, r2, #26
 8001a22:	d42b      	bmi.n	8001a7c <_printf_common+0xb0>
 8001a24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001a28:	4649      	mov	r1, r9
 8001a2a:	4638      	mov	r0, r7
 8001a2c:	47c0      	blx	r8
 8001a2e:	3001      	adds	r0, #1
 8001a30:	d01e      	beq.n	8001a70 <_printf_common+0xa4>
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	68e5      	ldr	r5, [r4, #12]
 8001a36:	6832      	ldr	r2, [r6, #0]
 8001a38:	f003 0306 	and.w	r3, r3, #6
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	bf08      	it	eq
 8001a40:	1aad      	subeq	r5, r5, r2
 8001a42:	68a3      	ldr	r3, [r4, #8]
 8001a44:	6922      	ldr	r2, [r4, #16]
 8001a46:	bf0c      	ite	eq
 8001a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a4c:	2500      	movne	r5, #0
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	bfc4      	itt	gt
 8001a52:	1a9b      	subgt	r3, r3, r2
 8001a54:	18ed      	addgt	r5, r5, r3
 8001a56:	2600      	movs	r6, #0
 8001a58:	341a      	adds	r4, #26
 8001a5a:	42b5      	cmp	r5, r6
 8001a5c:	d11a      	bne.n	8001a94 <_printf_common+0xc8>
 8001a5e:	2000      	movs	r0, #0
 8001a60:	e008      	b.n	8001a74 <_printf_common+0xa8>
 8001a62:	2301      	movs	r3, #1
 8001a64:	4652      	mov	r2, sl
 8001a66:	4649      	mov	r1, r9
 8001a68:	4638      	mov	r0, r7
 8001a6a:	47c0      	blx	r8
 8001a6c:	3001      	adds	r0, #1
 8001a6e:	d103      	bne.n	8001a78 <_printf_common+0xac>
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a78:	3501      	adds	r5, #1
 8001a7a:	e7c6      	b.n	8001a0a <_printf_common+0x3e>
 8001a7c:	18e1      	adds	r1, r4, r3
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	2030      	movs	r0, #48	; 0x30
 8001a82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001a86:	4422      	add	r2, r4
 8001a88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001a8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001a90:	3302      	adds	r3, #2
 8001a92:	e7c7      	b.n	8001a24 <_printf_common+0x58>
 8001a94:	2301      	movs	r3, #1
 8001a96:	4622      	mov	r2, r4
 8001a98:	4649      	mov	r1, r9
 8001a9a:	4638      	mov	r0, r7
 8001a9c:	47c0      	blx	r8
 8001a9e:	3001      	adds	r0, #1
 8001aa0:	d0e6      	beq.n	8001a70 <_printf_common+0xa4>
 8001aa2:	3601      	adds	r6, #1
 8001aa4:	e7d9      	b.n	8001a5a <_printf_common+0x8e>
	...

08001aa8 <_printf_i>:
 8001aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001aac:	7e0f      	ldrb	r7, [r1, #24]
 8001aae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001ab0:	2f78      	cmp	r7, #120	; 0x78
 8001ab2:	4691      	mov	r9, r2
 8001ab4:	4680      	mov	r8, r0
 8001ab6:	460c      	mov	r4, r1
 8001ab8:	469a      	mov	sl, r3
 8001aba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001abe:	d807      	bhi.n	8001ad0 <_printf_i+0x28>
 8001ac0:	2f62      	cmp	r7, #98	; 0x62
 8001ac2:	d80a      	bhi.n	8001ada <_printf_i+0x32>
 8001ac4:	2f00      	cmp	r7, #0
 8001ac6:	f000 80d8 	beq.w	8001c7a <_printf_i+0x1d2>
 8001aca:	2f58      	cmp	r7, #88	; 0x58
 8001acc:	f000 80a3 	beq.w	8001c16 <_printf_i+0x16e>
 8001ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ad4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001ad8:	e03a      	b.n	8001b50 <_printf_i+0xa8>
 8001ada:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001ade:	2b15      	cmp	r3, #21
 8001ae0:	d8f6      	bhi.n	8001ad0 <_printf_i+0x28>
 8001ae2:	a101      	add	r1, pc, #4	; (adr r1, 8001ae8 <_printf_i+0x40>)
 8001ae4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001ae8:	08001b41 	.word	0x08001b41
 8001aec:	08001b55 	.word	0x08001b55
 8001af0:	08001ad1 	.word	0x08001ad1
 8001af4:	08001ad1 	.word	0x08001ad1
 8001af8:	08001ad1 	.word	0x08001ad1
 8001afc:	08001ad1 	.word	0x08001ad1
 8001b00:	08001b55 	.word	0x08001b55
 8001b04:	08001ad1 	.word	0x08001ad1
 8001b08:	08001ad1 	.word	0x08001ad1
 8001b0c:	08001ad1 	.word	0x08001ad1
 8001b10:	08001ad1 	.word	0x08001ad1
 8001b14:	08001c61 	.word	0x08001c61
 8001b18:	08001b85 	.word	0x08001b85
 8001b1c:	08001c43 	.word	0x08001c43
 8001b20:	08001ad1 	.word	0x08001ad1
 8001b24:	08001ad1 	.word	0x08001ad1
 8001b28:	08001c83 	.word	0x08001c83
 8001b2c:	08001ad1 	.word	0x08001ad1
 8001b30:	08001b85 	.word	0x08001b85
 8001b34:	08001ad1 	.word	0x08001ad1
 8001b38:	08001ad1 	.word	0x08001ad1
 8001b3c:	08001c4b 	.word	0x08001c4b
 8001b40:	682b      	ldr	r3, [r5, #0]
 8001b42:	1d1a      	adds	r2, r3, #4
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	602a      	str	r2, [r5, #0]
 8001b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0a3      	b.n	8001c9c <_printf_i+0x1f4>
 8001b54:	6820      	ldr	r0, [r4, #0]
 8001b56:	6829      	ldr	r1, [r5, #0]
 8001b58:	0606      	lsls	r6, r0, #24
 8001b5a:	f101 0304 	add.w	r3, r1, #4
 8001b5e:	d50a      	bpl.n	8001b76 <_printf_i+0xce>
 8001b60:	680e      	ldr	r6, [r1, #0]
 8001b62:	602b      	str	r3, [r5, #0]
 8001b64:	2e00      	cmp	r6, #0
 8001b66:	da03      	bge.n	8001b70 <_printf_i+0xc8>
 8001b68:	232d      	movs	r3, #45	; 0x2d
 8001b6a:	4276      	negs	r6, r6
 8001b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b70:	485e      	ldr	r0, [pc, #376]	; (8001cec <_printf_i+0x244>)
 8001b72:	230a      	movs	r3, #10
 8001b74:	e019      	b.n	8001baa <_printf_i+0x102>
 8001b76:	680e      	ldr	r6, [r1, #0]
 8001b78:	602b      	str	r3, [r5, #0]
 8001b7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001b7e:	bf18      	it	ne
 8001b80:	b236      	sxthne	r6, r6
 8001b82:	e7ef      	b.n	8001b64 <_printf_i+0xbc>
 8001b84:	682b      	ldr	r3, [r5, #0]
 8001b86:	6820      	ldr	r0, [r4, #0]
 8001b88:	1d19      	adds	r1, r3, #4
 8001b8a:	6029      	str	r1, [r5, #0]
 8001b8c:	0601      	lsls	r1, r0, #24
 8001b8e:	d501      	bpl.n	8001b94 <_printf_i+0xec>
 8001b90:	681e      	ldr	r6, [r3, #0]
 8001b92:	e002      	b.n	8001b9a <_printf_i+0xf2>
 8001b94:	0646      	lsls	r6, r0, #25
 8001b96:	d5fb      	bpl.n	8001b90 <_printf_i+0xe8>
 8001b98:	881e      	ldrh	r6, [r3, #0]
 8001b9a:	4854      	ldr	r0, [pc, #336]	; (8001cec <_printf_i+0x244>)
 8001b9c:	2f6f      	cmp	r7, #111	; 0x6f
 8001b9e:	bf0c      	ite	eq
 8001ba0:	2308      	moveq	r3, #8
 8001ba2:	230a      	movne	r3, #10
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001baa:	6865      	ldr	r5, [r4, #4]
 8001bac:	60a5      	str	r5, [r4, #8]
 8001bae:	2d00      	cmp	r5, #0
 8001bb0:	bfa2      	ittt	ge
 8001bb2:	6821      	ldrge	r1, [r4, #0]
 8001bb4:	f021 0104 	bicge.w	r1, r1, #4
 8001bb8:	6021      	strge	r1, [r4, #0]
 8001bba:	b90e      	cbnz	r6, 8001bc0 <_printf_i+0x118>
 8001bbc:	2d00      	cmp	r5, #0
 8001bbe:	d04d      	beq.n	8001c5c <_printf_i+0x1b4>
 8001bc0:	4615      	mov	r5, r2
 8001bc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8001bc6:	fb03 6711 	mls	r7, r3, r1, r6
 8001bca:	5dc7      	ldrb	r7, [r0, r7]
 8001bcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001bd0:	4637      	mov	r7, r6
 8001bd2:	42bb      	cmp	r3, r7
 8001bd4:	460e      	mov	r6, r1
 8001bd6:	d9f4      	bls.n	8001bc2 <_printf_i+0x11a>
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d10b      	bne.n	8001bf4 <_printf_i+0x14c>
 8001bdc:	6823      	ldr	r3, [r4, #0]
 8001bde:	07de      	lsls	r6, r3, #31
 8001be0:	d508      	bpl.n	8001bf4 <_printf_i+0x14c>
 8001be2:	6923      	ldr	r3, [r4, #16]
 8001be4:	6861      	ldr	r1, [r4, #4]
 8001be6:	4299      	cmp	r1, r3
 8001be8:	bfde      	ittt	le
 8001bea:	2330      	movle	r3, #48	; 0x30
 8001bec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001bf0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001bf4:	1b52      	subs	r2, r2, r5
 8001bf6:	6122      	str	r2, [r4, #16]
 8001bf8:	f8cd a000 	str.w	sl, [sp]
 8001bfc:	464b      	mov	r3, r9
 8001bfe:	aa03      	add	r2, sp, #12
 8001c00:	4621      	mov	r1, r4
 8001c02:	4640      	mov	r0, r8
 8001c04:	f7ff fee2 	bl	80019cc <_printf_common>
 8001c08:	3001      	adds	r0, #1
 8001c0a:	d14c      	bne.n	8001ca6 <_printf_i+0x1fe>
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c10:	b004      	add	sp, #16
 8001c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c16:	4835      	ldr	r0, [pc, #212]	; (8001cec <_printf_i+0x244>)
 8001c18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001c1c:	6829      	ldr	r1, [r5, #0]
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	f851 6b04 	ldr.w	r6, [r1], #4
 8001c24:	6029      	str	r1, [r5, #0]
 8001c26:	061d      	lsls	r5, r3, #24
 8001c28:	d514      	bpl.n	8001c54 <_printf_i+0x1ac>
 8001c2a:	07df      	lsls	r7, r3, #31
 8001c2c:	bf44      	itt	mi
 8001c2e:	f043 0320 	orrmi.w	r3, r3, #32
 8001c32:	6023      	strmi	r3, [r4, #0]
 8001c34:	b91e      	cbnz	r6, 8001c3e <_printf_i+0x196>
 8001c36:	6823      	ldr	r3, [r4, #0]
 8001c38:	f023 0320 	bic.w	r3, r3, #32
 8001c3c:	6023      	str	r3, [r4, #0]
 8001c3e:	2310      	movs	r3, #16
 8001c40:	e7b0      	b.n	8001ba4 <_printf_i+0xfc>
 8001c42:	6823      	ldr	r3, [r4, #0]
 8001c44:	f043 0320 	orr.w	r3, r3, #32
 8001c48:	6023      	str	r3, [r4, #0]
 8001c4a:	2378      	movs	r3, #120	; 0x78
 8001c4c:	4828      	ldr	r0, [pc, #160]	; (8001cf0 <_printf_i+0x248>)
 8001c4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c52:	e7e3      	b.n	8001c1c <_printf_i+0x174>
 8001c54:	0659      	lsls	r1, r3, #25
 8001c56:	bf48      	it	mi
 8001c58:	b2b6      	uxthmi	r6, r6
 8001c5a:	e7e6      	b.n	8001c2a <_printf_i+0x182>
 8001c5c:	4615      	mov	r5, r2
 8001c5e:	e7bb      	b.n	8001bd8 <_printf_i+0x130>
 8001c60:	682b      	ldr	r3, [r5, #0]
 8001c62:	6826      	ldr	r6, [r4, #0]
 8001c64:	6961      	ldr	r1, [r4, #20]
 8001c66:	1d18      	adds	r0, r3, #4
 8001c68:	6028      	str	r0, [r5, #0]
 8001c6a:	0635      	lsls	r5, r6, #24
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	d501      	bpl.n	8001c74 <_printf_i+0x1cc>
 8001c70:	6019      	str	r1, [r3, #0]
 8001c72:	e002      	b.n	8001c7a <_printf_i+0x1d2>
 8001c74:	0670      	lsls	r0, r6, #25
 8001c76:	d5fb      	bpl.n	8001c70 <_printf_i+0x1c8>
 8001c78:	8019      	strh	r1, [r3, #0]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	6123      	str	r3, [r4, #16]
 8001c7e:	4615      	mov	r5, r2
 8001c80:	e7ba      	b.n	8001bf8 <_printf_i+0x150>
 8001c82:	682b      	ldr	r3, [r5, #0]
 8001c84:	1d1a      	adds	r2, r3, #4
 8001c86:	602a      	str	r2, [r5, #0]
 8001c88:	681d      	ldr	r5, [r3, #0]
 8001c8a:	6862      	ldr	r2, [r4, #4]
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4628      	mov	r0, r5
 8001c90:	f7fe faa6 	bl	80001e0 <memchr>
 8001c94:	b108      	cbz	r0, 8001c9a <_printf_i+0x1f2>
 8001c96:	1b40      	subs	r0, r0, r5
 8001c98:	6060      	str	r0, [r4, #4]
 8001c9a:	6863      	ldr	r3, [r4, #4]
 8001c9c:	6123      	str	r3, [r4, #16]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ca4:	e7a8      	b.n	8001bf8 <_printf_i+0x150>
 8001ca6:	6923      	ldr	r3, [r4, #16]
 8001ca8:	462a      	mov	r2, r5
 8001caa:	4649      	mov	r1, r9
 8001cac:	4640      	mov	r0, r8
 8001cae:	47d0      	blx	sl
 8001cb0:	3001      	adds	r0, #1
 8001cb2:	d0ab      	beq.n	8001c0c <_printf_i+0x164>
 8001cb4:	6823      	ldr	r3, [r4, #0]
 8001cb6:	079b      	lsls	r3, r3, #30
 8001cb8:	d413      	bmi.n	8001ce2 <_printf_i+0x23a>
 8001cba:	68e0      	ldr	r0, [r4, #12]
 8001cbc:	9b03      	ldr	r3, [sp, #12]
 8001cbe:	4298      	cmp	r0, r3
 8001cc0:	bfb8      	it	lt
 8001cc2:	4618      	movlt	r0, r3
 8001cc4:	e7a4      	b.n	8001c10 <_printf_i+0x168>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	4632      	mov	r2, r6
 8001cca:	4649      	mov	r1, r9
 8001ccc:	4640      	mov	r0, r8
 8001cce:	47d0      	blx	sl
 8001cd0:	3001      	adds	r0, #1
 8001cd2:	d09b      	beq.n	8001c0c <_printf_i+0x164>
 8001cd4:	3501      	adds	r5, #1
 8001cd6:	68e3      	ldr	r3, [r4, #12]
 8001cd8:	9903      	ldr	r1, [sp, #12]
 8001cda:	1a5b      	subs	r3, r3, r1
 8001cdc:	42ab      	cmp	r3, r5
 8001cde:	dcf2      	bgt.n	8001cc6 <_printf_i+0x21e>
 8001ce0:	e7eb      	b.n	8001cba <_printf_i+0x212>
 8001ce2:	2500      	movs	r5, #0
 8001ce4:	f104 0619 	add.w	r6, r4, #25
 8001ce8:	e7f5      	b.n	8001cd6 <_printf_i+0x22e>
 8001cea:	bf00      	nop
 8001cec:	08001fda 	.word	0x08001fda
 8001cf0:	08001feb 	.word	0x08001feb

08001cf4 <memcpy>:
 8001cf4:	440a      	add	r2, r1
 8001cf6:	4291      	cmp	r1, r2
 8001cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001cfc:	d100      	bne.n	8001d00 <memcpy+0xc>
 8001cfe:	4770      	bx	lr
 8001d00:	b510      	push	{r4, lr}
 8001d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001d06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001d0a:	4291      	cmp	r1, r2
 8001d0c:	d1f9      	bne.n	8001d02 <memcpy+0xe>
 8001d0e:	bd10      	pop	{r4, pc}

08001d10 <memmove>:
 8001d10:	4288      	cmp	r0, r1
 8001d12:	b510      	push	{r4, lr}
 8001d14:	eb01 0402 	add.w	r4, r1, r2
 8001d18:	d902      	bls.n	8001d20 <memmove+0x10>
 8001d1a:	4284      	cmp	r4, r0
 8001d1c:	4623      	mov	r3, r4
 8001d1e:	d807      	bhi.n	8001d30 <memmove+0x20>
 8001d20:	1e43      	subs	r3, r0, #1
 8001d22:	42a1      	cmp	r1, r4
 8001d24:	d008      	beq.n	8001d38 <memmove+0x28>
 8001d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001d2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001d2e:	e7f8      	b.n	8001d22 <memmove+0x12>
 8001d30:	4402      	add	r2, r0
 8001d32:	4601      	mov	r1, r0
 8001d34:	428a      	cmp	r2, r1
 8001d36:	d100      	bne.n	8001d3a <memmove+0x2a>
 8001d38:	bd10      	pop	{r4, pc}
 8001d3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001d3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001d42:	e7f7      	b.n	8001d34 <memmove+0x24>

08001d44 <_free_r>:
 8001d44:	b538      	push	{r3, r4, r5, lr}
 8001d46:	4605      	mov	r5, r0
 8001d48:	2900      	cmp	r1, #0
 8001d4a:	d041      	beq.n	8001dd0 <_free_r+0x8c>
 8001d4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d50:	1f0c      	subs	r4, r1, #4
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	bfb8      	it	lt
 8001d56:	18e4      	addlt	r4, r4, r3
 8001d58:	f000 f912 	bl	8001f80 <__malloc_lock>
 8001d5c:	4a1d      	ldr	r2, [pc, #116]	; (8001dd4 <_free_r+0x90>)
 8001d5e:	6813      	ldr	r3, [r2, #0]
 8001d60:	b933      	cbnz	r3, 8001d70 <_free_r+0x2c>
 8001d62:	6063      	str	r3, [r4, #4]
 8001d64:	6014      	str	r4, [r2, #0]
 8001d66:	4628      	mov	r0, r5
 8001d68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d6c:	f000 b90e 	b.w	8001f8c <__malloc_unlock>
 8001d70:	42a3      	cmp	r3, r4
 8001d72:	d908      	bls.n	8001d86 <_free_r+0x42>
 8001d74:	6820      	ldr	r0, [r4, #0]
 8001d76:	1821      	adds	r1, r4, r0
 8001d78:	428b      	cmp	r3, r1
 8001d7a:	bf01      	itttt	eq
 8001d7c:	6819      	ldreq	r1, [r3, #0]
 8001d7e:	685b      	ldreq	r3, [r3, #4]
 8001d80:	1809      	addeq	r1, r1, r0
 8001d82:	6021      	streq	r1, [r4, #0]
 8001d84:	e7ed      	b.n	8001d62 <_free_r+0x1e>
 8001d86:	461a      	mov	r2, r3
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	b10b      	cbz	r3, 8001d90 <_free_r+0x4c>
 8001d8c:	42a3      	cmp	r3, r4
 8001d8e:	d9fa      	bls.n	8001d86 <_free_r+0x42>
 8001d90:	6811      	ldr	r1, [r2, #0]
 8001d92:	1850      	adds	r0, r2, r1
 8001d94:	42a0      	cmp	r0, r4
 8001d96:	d10b      	bne.n	8001db0 <_free_r+0x6c>
 8001d98:	6820      	ldr	r0, [r4, #0]
 8001d9a:	4401      	add	r1, r0
 8001d9c:	1850      	adds	r0, r2, r1
 8001d9e:	4283      	cmp	r3, r0
 8001da0:	6011      	str	r1, [r2, #0]
 8001da2:	d1e0      	bne.n	8001d66 <_free_r+0x22>
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	6053      	str	r3, [r2, #4]
 8001daa:	4401      	add	r1, r0
 8001dac:	6011      	str	r1, [r2, #0]
 8001dae:	e7da      	b.n	8001d66 <_free_r+0x22>
 8001db0:	d902      	bls.n	8001db8 <_free_r+0x74>
 8001db2:	230c      	movs	r3, #12
 8001db4:	602b      	str	r3, [r5, #0]
 8001db6:	e7d6      	b.n	8001d66 <_free_r+0x22>
 8001db8:	6820      	ldr	r0, [r4, #0]
 8001dba:	1821      	adds	r1, r4, r0
 8001dbc:	428b      	cmp	r3, r1
 8001dbe:	bf04      	itt	eq
 8001dc0:	6819      	ldreq	r1, [r3, #0]
 8001dc2:	685b      	ldreq	r3, [r3, #4]
 8001dc4:	6063      	str	r3, [r4, #4]
 8001dc6:	bf04      	itt	eq
 8001dc8:	1809      	addeq	r1, r1, r0
 8001dca:	6021      	streq	r1, [r4, #0]
 8001dcc:	6054      	str	r4, [r2, #4]
 8001dce:	e7ca      	b.n	8001d66 <_free_r+0x22>
 8001dd0:	bd38      	pop	{r3, r4, r5, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200001b4 	.word	0x200001b4

08001dd8 <sbrk_aligned>:
 8001dd8:	b570      	push	{r4, r5, r6, lr}
 8001dda:	4e0e      	ldr	r6, [pc, #56]	; (8001e14 <sbrk_aligned+0x3c>)
 8001ddc:	460c      	mov	r4, r1
 8001dde:	6831      	ldr	r1, [r6, #0]
 8001de0:	4605      	mov	r5, r0
 8001de2:	b911      	cbnz	r1, 8001dea <sbrk_aligned+0x12>
 8001de4:	f000 f8bc 	bl	8001f60 <_sbrk_r>
 8001de8:	6030      	str	r0, [r6, #0]
 8001dea:	4621      	mov	r1, r4
 8001dec:	4628      	mov	r0, r5
 8001dee:	f000 f8b7 	bl	8001f60 <_sbrk_r>
 8001df2:	1c43      	adds	r3, r0, #1
 8001df4:	d00a      	beq.n	8001e0c <sbrk_aligned+0x34>
 8001df6:	1cc4      	adds	r4, r0, #3
 8001df8:	f024 0403 	bic.w	r4, r4, #3
 8001dfc:	42a0      	cmp	r0, r4
 8001dfe:	d007      	beq.n	8001e10 <sbrk_aligned+0x38>
 8001e00:	1a21      	subs	r1, r4, r0
 8001e02:	4628      	mov	r0, r5
 8001e04:	f000 f8ac 	bl	8001f60 <_sbrk_r>
 8001e08:	3001      	adds	r0, #1
 8001e0a:	d101      	bne.n	8001e10 <sbrk_aligned+0x38>
 8001e0c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001e10:	4620      	mov	r0, r4
 8001e12:	bd70      	pop	{r4, r5, r6, pc}
 8001e14:	200001b8 	.word	0x200001b8

08001e18 <_malloc_r>:
 8001e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e1c:	1ccd      	adds	r5, r1, #3
 8001e1e:	f025 0503 	bic.w	r5, r5, #3
 8001e22:	3508      	adds	r5, #8
 8001e24:	2d0c      	cmp	r5, #12
 8001e26:	bf38      	it	cc
 8001e28:	250c      	movcc	r5, #12
 8001e2a:	2d00      	cmp	r5, #0
 8001e2c:	4607      	mov	r7, r0
 8001e2e:	db01      	blt.n	8001e34 <_malloc_r+0x1c>
 8001e30:	42a9      	cmp	r1, r5
 8001e32:	d905      	bls.n	8001e40 <_malloc_r+0x28>
 8001e34:	230c      	movs	r3, #12
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	2600      	movs	r6, #0
 8001e3a:	4630      	mov	r0, r6
 8001e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e40:	4e2e      	ldr	r6, [pc, #184]	; (8001efc <_malloc_r+0xe4>)
 8001e42:	f000 f89d 	bl	8001f80 <__malloc_lock>
 8001e46:	6833      	ldr	r3, [r6, #0]
 8001e48:	461c      	mov	r4, r3
 8001e4a:	bb34      	cbnz	r4, 8001e9a <_malloc_r+0x82>
 8001e4c:	4629      	mov	r1, r5
 8001e4e:	4638      	mov	r0, r7
 8001e50:	f7ff ffc2 	bl	8001dd8 <sbrk_aligned>
 8001e54:	1c43      	adds	r3, r0, #1
 8001e56:	4604      	mov	r4, r0
 8001e58:	d14d      	bne.n	8001ef6 <_malloc_r+0xde>
 8001e5a:	6834      	ldr	r4, [r6, #0]
 8001e5c:	4626      	mov	r6, r4
 8001e5e:	2e00      	cmp	r6, #0
 8001e60:	d140      	bne.n	8001ee4 <_malloc_r+0xcc>
 8001e62:	6823      	ldr	r3, [r4, #0]
 8001e64:	4631      	mov	r1, r6
 8001e66:	4638      	mov	r0, r7
 8001e68:	eb04 0803 	add.w	r8, r4, r3
 8001e6c:	f000 f878 	bl	8001f60 <_sbrk_r>
 8001e70:	4580      	cmp	r8, r0
 8001e72:	d13a      	bne.n	8001eea <_malloc_r+0xd2>
 8001e74:	6821      	ldr	r1, [r4, #0]
 8001e76:	3503      	adds	r5, #3
 8001e78:	1a6d      	subs	r5, r5, r1
 8001e7a:	f025 0503 	bic.w	r5, r5, #3
 8001e7e:	3508      	adds	r5, #8
 8001e80:	2d0c      	cmp	r5, #12
 8001e82:	bf38      	it	cc
 8001e84:	250c      	movcc	r5, #12
 8001e86:	4629      	mov	r1, r5
 8001e88:	4638      	mov	r0, r7
 8001e8a:	f7ff ffa5 	bl	8001dd8 <sbrk_aligned>
 8001e8e:	3001      	adds	r0, #1
 8001e90:	d02b      	beq.n	8001eea <_malloc_r+0xd2>
 8001e92:	6823      	ldr	r3, [r4, #0]
 8001e94:	442b      	add	r3, r5
 8001e96:	6023      	str	r3, [r4, #0]
 8001e98:	e00e      	b.n	8001eb8 <_malloc_r+0xa0>
 8001e9a:	6822      	ldr	r2, [r4, #0]
 8001e9c:	1b52      	subs	r2, r2, r5
 8001e9e:	d41e      	bmi.n	8001ede <_malloc_r+0xc6>
 8001ea0:	2a0b      	cmp	r2, #11
 8001ea2:	d916      	bls.n	8001ed2 <_malloc_r+0xba>
 8001ea4:	1961      	adds	r1, r4, r5
 8001ea6:	42a3      	cmp	r3, r4
 8001ea8:	6025      	str	r5, [r4, #0]
 8001eaa:	bf18      	it	ne
 8001eac:	6059      	strne	r1, [r3, #4]
 8001eae:	6863      	ldr	r3, [r4, #4]
 8001eb0:	bf08      	it	eq
 8001eb2:	6031      	streq	r1, [r6, #0]
 8001eb4:	5162      	str	r2, [r4, r5]
 8001eb6:	604b      	str	r3, [r1, #4]
 8001eb8:	4638      	mov	r0, r7
 8001eba:	f104 060b 	add.w	r6, r4, #11
 8001ebe:	f000 f865 	bl	8001f8c <__malloc_unlock>
 8001ec2:	f026 0607 	bic.w	r6, r6, #7
 8001ec6:	1d23      	adds	r3, r4, #4
 8001ec8:	1af2      	subs	r2, r6, r3
 8001eca:	d0b6      	beq.n	8001e3a <_malloc_r+0x22>
 8001ecc:	1b9b      	subs	r3, r3, r6
 8001ece:	50a3      	str	r3, [r4, r2]
 8001ed0:	e7b3      	b.n	8001e3a <_malloc_r+0x22>
 8001ed2:	6862      	ldr	r2, [r4, #4]
 8001ed4:	42a3      	cmp	r3, r4
 8001ed6:	bf0c      	ite	eq
 8001ed8:	6032      	streq	r2, [r6, #0]
 8001eda:	605a      	strne	r2, [r3, #4]
 8001edc:	e7ec      	b.n	8001eb8 <_malloc_r+0xa0>
 8001ede:	4623      	mov	r3, r4
 8001ee0:	6864      	ldr	r4, [r4, #4]
 8001ee2:	e7b2      	b.n	8001e4a <_malloc_r+0x32>
 8001ee4:	4634      	mov	r4, r6
 8001ee6:	6876      	ldr	r6, [r6, #4]
 8001ee8:	e7b9      	b.n	8001e5e <_malloc_r+0x46>
 8001eea:	230c      	movs	r3, #12
 8001eec:	603b      	str	r3, [r7, #0]
 8001eee:	4638      	mov	r0, r7
 8001ef0:	f000 f84c 	bl	8001f8c <__malloc_unlock>
 8001ef4:	e7a1      	b.n	8001e3a <_malloc_r+0x22>
 8001ef6:	6025      	str	r5, [r4, #0]
 8001ef8:	e7de      	b.n	8001eb8 <_malloc_r+0xa0>
 8001efa:	bf00      	nop
 8001efc:	200001b4 	.word	0x200001b4

08001f00 <_realloc_r>:
 8001f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f04:	4680      	mov	r8, r0
 8001f06:	4614      	mov	r4, r2
 8001f08:	460e      	mov	r6, r1
 8001f0a:	b921      	cbnz	r1, 8001f16 <_realloc_r+0x16>
 8001f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f10:	4611      	mov	r1, r2
 8001f12:	f7ff bf81 	b.w	8001e18 <_malloc_r>
 8001f16:	b92a      	cbnz	r2, 8001f24 <_realloc_r+0x24>
 8001f18:	f7ff ff14 	bl	8001d44 <_free_r>
 8001f1c:	4625      	mov	r5, r4
 8001f1e:	4628      	mov	r0, r5
 8001f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f24:	f000 f838 	bl	8001f98 <_malloc_usable_size_r>
 8001f28:	4284      	cmp	r4, r0
 8001f2a:	4607      	mov	r7, r0
 8001f2c:	d802      	bhi.n	8001f34 <_realloc_r+0x34>
 8001f2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001f32:	d812      	bhi.n	8001f5a <_realloc_r+0x5a>
 8001f34:	4621      	mov	r1, r4
 8001f36:	4640      	mov	r0, r8
 8001f38:	f7ff ff6e 	bl	8001e18 <_malloc_r>
 8001f3c:	4605      	mov	r5, r0
 8001f3e:	2800      	cmp	r0, #0
 8001f40:	d0ed      	beq.n	8001f1e <_realloc_r+0x1e>
 8001f42:	42bc      	cmp	r4, r7
 8001f44:	4622      	mov	r2, r4
 8001f46:	4631      	mov	r1, r6
 8001f48:	bf28      	it	cs
 8001f4a:	463a      	movcs	r2, r7
 8001f4c:	f7ff fed2 	bl	8001cf4 <memcpy>
 8001f50:	4631      	mov	r1, r6
 8001f52:	4640      	mov	r0, r8
 8001f54:	f7ff fef6 	bl	8001d44 <_free_r>
 8001f58:	e7e1      	b.n	8001f1e <_realloc_r+0x1e>
 8001f5a:	4635      	mov	r5, r6
 8001f5c:	e7df      	b.n	8001f1e <_realloc_r+0x1e>
	...

08001f60 <_sbrk_r>:
 8001f60:	b538      	push	{r3, r4, r5, lr}
 8001f62:	4d06      	ldr	r5, [pc, #24]	; (8001f7c <_sbrk_r+0x1c>)
 8001f64:	2300      	movs	r3, #0
 8001f66:	4604      	mov	r4, r0
 8001f68:	4608      	mov	r0, r1
 8001f6a:	602b      	str	r3, [r5, #0]
 8001f6c:	f7fe fae4 	bl	8000538 <_sbrk>
 8001f70:	1c43      	adds	r3, r0, #1
 8001f72:	d102      	bne.n	8001f7a <_sbrk_r+0x1a>
 8001f74:	682b      	ldr	r3, [r5, #0]
 8001f76:	b103      	cbz	r3, 8001f7a <_sbrk_r+0x1a>
 8001f78:	6023      	str	r3, [r4, #0]
 8001f7a:	bd38      	pop	{r3, r4, r5, pc}
 8001f7c:	200001bc 	.word	0x200001bc

08001f80 <__malloc_lock>:
 8001f80:	4801      	ldr	r0, [pc, #4]	; (8001f88 <__malloc_lock+0x8>)
 8001f82:	f000 b811 	b.w	8001fa8 <__retarget_lock_acquire_recursive>
 8001f86:	bf00      	nop
 8001f88:	200001c0 	.word	0x200001c0

08001f8c <__malloc_unlock>:
 8001f8c:	4801      	ldr	r0, [pc, #4]	; (8001f94 <__malloc_unlock+0x8>)
 8001f8e:	f000 b80c 	b.w	8001faa <__retarget_lock_release_recursive>
 8001f92:	bf00      	nop
 8001f94:	200001c0 	.word	0x200001c0

08001f98 <_malloc_usable_size_r>:
 8001f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f9c:	1f18      	subs	r0, r3, #4
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	bfbc      	itt	lt
 8001fa2:	580b      	ldrlt	r3, [r1, r0]
 8001fa4:	18c0      	addlt	r0, r0, r3
 8001fa6:	4770      	bx	lr

08001fa8 <__retarget_lock_acquire_recursive>:
 8001fa8:	4770      	bx	lr

08001faa <__retarget_lock_release_recursive>:
 8001faa:	4770      	bx	lr

08001fac <_init>:
 8001fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fae:	bf00      	nop
 8001fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fb2:	bc08      	pop	{r3}
 8001fb4:	469e      	mov	lr, r3
 8001fb6:	4770      	bx	lr

08001fb8 <_fini>:
 8001fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fba:	bf00      	nop
 8001fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fbe:	bc08      	pop	{r3}
 8001fc0:	469e      	mov	lr, r3
 8001fc2:	4770      	bx	lr
