
ADC_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006aa8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  08006c48  08006c48  00016c48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070fc  080070fc  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  080070fc  080070fc  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070fc  080070fc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070fc  080070fc  000170fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007100  08007100  00017100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  200001d4  080072d8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  080072d8  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000036fa  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c2b  00000000  00000000  000238fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002d8  00000000  00000000  00024530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000260  00000000  00000000  00024808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010280  00000000  00000000  00024a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003571  00000000  00000000  00034ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00056599  00000000  00000000  00038259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008e7f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f68  00000000  00000000  0008e844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006c30 	.word	0x08006c30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08006c30 	.word	0x08006c30

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <main>:

void initSystem(void);

// *************** // MAIN // *************** //
int main(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af02      	add	r7, sp, #8
		// Inicializamos el sistema
		initSystem();
 8000d0a:	f000 f85b 	bl	8000dc4 <initSystem>

	    /* Ciclo principal */
		while(1){

			// Hacemos un "eco" con el valor que nos llega por el serial
			if((rxData != '\0')){
 8000d0e:	4b25      	ldr	r3, [pc, #148]	; (8000da4 <main+0xa0>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d024      	beq.n	8000d60 <main+0x5c>
				writeChar(&handlerUsart2, rxData);
 8000d16:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <main+0xa0>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4822      	ldr	r0, [pc, #136]	; (8000da8 <main+0xa4>)
 8000d1e:	f001 fab1 	bl	8002284 <writeChar>

				if(rxData == 's'){
 8000d22:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <main+0xa0>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b73      	cmp	r3, #115	; 0x73
 8000d28:	d101      	bne.n	8000d2e <main+0x2a>
					//Lanzamos una nueva conversión ADC de un sólo valor
					startSingleADC();
 8000d2a:	f000 fc4d 	bl	80015c8 <startSingleADC>
				}
				if(rxData == 'c'){
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <main+0xa0>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b63      	cmp	r3, #99	; 0x63
 8000d34:	d102      	bne.n	8000d3c <main+0x38>
					// Conversión de modo continua
					//startContinuousADC();
					startTimer(&handlerTimer3);
 8000d36:	481d      	ldr	r0, [pc, #116]	; (8000dac <main+0xa8>)
 8000d38:	f000 ffba 	bl	8001cb0 <startTimer>
				}
				if(rxData == 'm'){
 8000d3c:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <main+0xa0>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b6d      	cmp	r3, #109	; 0x6d
 8000d42:	d101      	bne.n	8000d48 <main+0x44>
					// Conversión de modo continua
					startContinuousADC();
 8000d44:	f000 fc50 	bl	80015e8 <startContinuousADC>
				}
				if(rxData == 'p'){
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <main+0xa0>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b70      	cmp	r3, #112	; 0x70
 8000d4e:	d104      	bne.n	8000d5a <main+0x56>
					stopContinousADC();
 8000d50:	f000 fc60 	bl	8001614 <stopContinousADC>
					stopTimer(&handlerTimer3);
 8000d54:	4815      	ldr	r0, [pc, #84]	; (8000dac <main+0xa8>)
 8000d56:	f000 ffbe 	bl	8001cd6 <stopTimer>
				}
				// Limpiamos el valor de la variable que guarda los datos del RX
				rxData = '\0';
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <main+0xa0>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
			}

			if(adcIsComplete == true){
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <main+0xac>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d1d2      	bne.n	8000d0e <main+0xa>
				ADC1 -> CR2 &= ~(ADC_CR2_SWSTART);
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <main+0xb0>)
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	4a11      	ldr	r2, [pc, #68]	; (8000db4 <main+0xb0>)
 8000d6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000d72:	6093      	str	r3, [r2, #8]
				stopContinousADC();
 8000d74:	f000 fc4e 	bl	8001614 <stopContinousADC>
				//sprintf(bufferData, "ADC = %u, %u \n\r",(unsigned int ) adcData,(unsigned int )counter);
//				for(uint16_t j = 0; j < ADC_SIGNAL_SIZE; j++){
//					sprintf(bufferData, "%u\n\r",(unsigned int) adcSignal[j]);
//					writeMsg(&handlerUsart2, bufferData);
//				}
				sprintf(bufferData, "%d %d %d \n\r",(int) adcSignal[0],(int) adcSignal[1],
 8000d78:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <main+0xb4>)
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <main+0xb4>)
 8000d80:	885b      	ldrh	r3, [r3, #2]
 8000d82:	4619      	mov	r1, r3
						(int) adcSignal[2]);
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <main+0xb4>)
 8000d86:	889b      	ldrh	r3, [r3, #4]
				sprintf(bufferData, "%d %d %d \n\r",(int) adcSignal[0],(int) adcSignal[1],
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	490b      	ldr	r1, [pc, #44]	; (8000dbc <main+0xb8>)
 8000d8e:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <main+0xbc>)
 8000d90:	f002 f95c 	bl	800304c <siprintf>
				writeMsg(&handlerUsart2, bufferData);
 8000d94:	490a      	ldr	r1, [pc, #40]	; (8000dc0 <main+0xbc>)
 8000d96:	4804      	ldr	r0, [pc, #16]	; (8000da8 <main+0xa4>)
 8000d98:	f001 fa8d 	bl	80022b6 <writeMsg>
//				counter++;
				adcIsComplete = false;
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <main+0xac>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
			if((rxData != '\0')){
 8000da2:	e7b4      	b.n	8000d0e <main+0xa>
 8000da4:	200002c4 	.word	0x200002c4
 8000da8:	20000238 	.word	0x20000238
 8000dac:	20000214 	.word	0x20000214
 8000db0:	200002c5 	.word	0x200002c5
 8000db4:	40012000 	.word	0x40012000
 8000db8:	20000308 	.word	0x20000308
 8000dbc:	08006c48 	.word	0x08006c48
 8000dc0:	200002c8 	.word	0x200002c8

08000dc4 <initSystem>:

//***********// InitSystem //***********//

// Función que define la configuración de todos los pines y periféricos

void initSystem(void){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0

	// Configuración el State LED
	handlerStateLED.pGPIOx								= GPIOA;
 8000dc8:	4b50      	ldr	r3, [pc, #320]	; (8000f0c <initSystem+0x148>)
 8000dca:	4a51      	ldr	r2, [pc, #324]	; (8000f10 <initSystem+0x14c>)
 8000dcc:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 8000dce:	4b4f      	ldr	r3, [pc, #316]	; (8000f0c <initSystem+0x148>)
 8000dd0:	2205      	movs	r2, #5
 8000dd2:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 8000dd4:	4b4d      	ldr	r3, [pc, #308]	; (8000f0c <initSystem+0x148>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 8000dda:	4b4c      	ldr	r3, [pc, #304]	; (8000f0c <initSystem+0x148>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000de0:	4b4a      	ldr	r3, [pc, #296]	; (8000f0c <initSystem+0x148>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	71da      	strb	r2, [r3, #7]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 8000de6:	4b49      	ldr	r3, [pc, #292]	; (8000f0c <initSystem+0x148>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	719a      	strb	r2, [r3, #6]

	GPIO_Config(&handlerStateLED);
 8000dec:	4847      	ldr	r0, [pc, #284]	; (8000f0c <initSystem+0x148>)
 8000dee:	f000 fcf3 	bl	80017d8 <GPIO_Config>

	GPIO_WritePin(&handlerStateLED, SET);
 8000df2:	2101      	movs	r1, #1
 8000df4:	4845      	ldr	r0, [pc, #276]	; (8000f0c <initSystem+0x148>)
 8000df6:	f000 fe19 	bl	8001a2c <GPIO_WritePin>

	// Configuración del ADC1

	//configADC1.channel								= ADC_CHANNEL_4;
	configADC1.resolution								= ADC_RESOLUTION_12_BIT;
 8000dfa:	4b46      	ldr	r3, [pc, #280]	; (8000f14 <initSystem+0x150>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	705a      	strb	r2, [r3, #1]
	configADC1.samplingPeriod							= ADC_SAMPLING_PERIOD_28_CYCLES;
 8000e00:	4b44      	ldr	r3, [pc, #272]	; (8000f14 <initSystem+0x150>)
 8000e02:	2202      	movs	r2, #2
 8000e04:	805a      	strh	r2, [r3, #2]
	configADC1.dataAlignment							= ADC_ALIGNMENT_RIGHT;
 8000e06:	4b43      	ldr	r3, [pc, #268]	; (8000f14 <initSystem+0x150>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	711a      	strb	r2, [r3, #4]
	configADC1.numberOfChannels							= 3;
 8000e0c:	4b41      	ldr	r3, [pc, #260]	; (8000f14 <initSystem+0x150>)
 8000e0e:	2203      	movs	r2, #3
 8000e10:	719a      	strb	r2, [r3, #6]
	configADC1.channelMode								= ADC_MULTI_CHANNEL;
 8000e12:	4b40      	ldr	r3, [pc, #256]	; (8000f14 <initSystem+0x150>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	715a      	strb	r2, [r3, #5]
	configADC1.channel_First							= ADC_CHANNEL_8;
 8000e18:	4b3e      	ldr	r3, [pc, #248]	; (8000f14 <initSystem+0x150>)
 8000e1a:	2208      	movs	r2, #8
 8000e1c:	721a      	strb	r2, [r3, #8]
	configADC1.channel_Second							= ADC_CHANNEL_0;
 8000e1e:	4b3d      	ldr	r3, [pc, #244]	; (8000f14 <initSystem+0x150>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	725a      	strb	r2, [r3, #9]
	configADC1.channel_Third							= ADC_CHANNEL_1;
 8000e24:	4b3b      	ldr	r3, [pc, #236]	; (8000f14 <initSystem+0x150>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	729a      	strb	r2, [r3, #10]

	adc_Config(&configADC1);
 8000e2a:	483a      	ldr	r0, [pc, #232]	; (8000f14 <initSystem+0x150>)
 8000e2c:	f000 fa02 	bl	8001234 <adc_Config>

	//multiChannelADC(&configADC1);

	// Configuración del pin PA3 USB RX
	handlerUSBRX.pGPIOx									= GPIOA;
 8000e30:	4b39      	ldr	r3, [pc, #228]	; (8000f18 <initSystem+0x154>)
 8000e32:	4a37      	ldr	r2, [pc, #220]	; (8000f10 <initSystem+0x14c>)
 8000e34:	601a      	str	r2, [r3, #0]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinNumber			= PIN_3;
 8000e36:	4b38      	ldr	r3, [pc, #224]	; (8000f18 <initSystem+0x154>)
 8000e38:	2203      	movs	r2, #3
 8000e3a:	711a      	strb	r2, [r3, #4]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 8000e3c:	4b36      	ldr	r3, [pc, #216]	; (8000f18 <initSystem+0x154>)
 8000e3e:	2202      	movs	r2, #2
 8000e40:	715a      	strb	r2, [r3, #5]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 8000e42:	4b35      	ldr	r3, [pc, #212]	; (8000f18 <initSystem+0x154>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	721a      	strb	r2, [r3, #8]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 8000e48:	4b33      	ldr	r3, [pc, #204]	; (8000f18 <initSystem+0x154>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	71da      	strb	r2, [r3, #7]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_MEDIUM;
 8000e4e:	4b32      	ldr	r3, [pc, #200]	; (8000f18 <initSystem+0x154>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	719a      	strb	r2, [r3, #6]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinAltFunMode 		= AF7;
 8000e54:	4b30      	ldr	r3, [pc, #192]	; (8000f18 <initSystem+0x154>)
 8000e56:	2207      	movs	r2, #7
 8000e58:	725a      	strb	r2, [r3, #9]

	// Configuración del pin PA2 USB TX
	handlerUSBTX.pGPIOx									= GPIOA;
 8000e5a:	4b30      	ldr	r3, [pc, #192]	; (8000f1c <initSystem+0x158>)
 8000e5c:	4a2c      	ldr	r2, [pc, #176]	; (8000f10 <initSystem+0x14c>)
 8000e5e:	601a      	str	r2, [r3, #0]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinNumber			= PIN_2;
 8000e60:	4b2e      	ldr	r3, [pc, #184]	; (8000f1c <initSystem+0x158>)
 8000e62:	2202      	movs	r2, #2
 8000e64:	711a      	strb	r2, [r3, #4]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 8000e66:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <initSystem+0x158>)
 8000e68:	2202      	movs	r2, #2
 8000e6a:	715a      	strb	r2, [r3, #5]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 8000e6c:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <initSystem+0x158>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	721a      	strb	r2, [r3, #8]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 8000e72:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <initSystem+0x158>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	71da      	strb	r2, [r3, #7]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_MEDIUM;
 8000e78:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <initSystem+0x158>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	719a      	strb	r2, [r3, #6]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinAltFunMode 		= AF7;
 8000e7e:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <initSystem+0x158>)
 8000e80:	2207      	movs	r2, #7
 8000e82:	725a      	strb	r2, [r3, #9]

	// Configuración del USART del USB para RXTX
	handlerUsart2.ptrUSARTx								= USART2;
 8000e84:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <initSystem+0x15c>)
 8000e86:	4a27      	ldr	r2, [pc, #156]	; (8000f24 <initSystem+0x160>)
 8000e88:	601a      	str	r2, [r3, #0]
	handlerUsart2.USART_Config.USART_mode				= USART_MODE_RXTX;
 8000e8a:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <initSystem+0x15c>)
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	711a      	strb	r2, [r3, #4]
	handlerUsart2.USART_Config.USART_baudrate			= USART_BAUDRATE_19200;
 8000e90:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <initSystem+0x15c>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	715a      	strb	r2, [r3, #5]
	handlerUsart2.USART_Config.USART_datasize			= USART_DATASIZE_8BIT;
 8000e96:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <initSystem+0x15c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	719a      	strb	r2, [r3, #6]
	handlerUsart2.USART_Config.USART_parity				= USART_PARITY_ODD;
 8000e9c:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <initSystem+0x15c>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	71da      	strb	r2, [r3, #7]
	handlerUsart2.USART_Config.USART_stopbits			= USART_STOPBIT_1;
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <initSystem+0x15c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	721a      	strb	r2, [r3, #8]
	handlerUsart2.USART_Config.USART_interrupt 			= USART_INTERRUPT_RX_ENABLE;
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <initSystem+0x15c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	725a      	strb	r2, [r3, #9]


	// Configuración del timer2
	handlerTimer2.ptrTIMx								= TIM2;
 8000eae:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <initSystem+0x164>)
 8000eb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb4:	601a      	str	r2, [r3, #0]
	handlerTimer2.timerConfig.Timer_mode				= TIMER_MODE_UP;
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <initSystem+0x164>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	711a      	strb	r2, [r3, #4]
	handlerTimer2.timerConfig.Timer_speed				= TIMER_INCR_SPEED_1ms;
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <initSystem+0x164>)
 8000ebe:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000ec2:	80da      	strh	r2, [r3, #6]
	handlerTimer2.timerConfig.Timer_period				= 250;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <initSystem+0x164>)
 8000ec6:	22fa      	movs	r2, #250	; 0xfa
 8000ec8:	609a      	str	r2, [r3, #8]

	// Configuración del timer3
	handlerTimer3.ptrTIMx								= TIM3;
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <initSystem+0x168>)
 8000ecc:	4a18      	ldr	r2, [pc, #96]	; (8000f30 <initSystem+0x16c>)
 8000ece:	601a      	str	r2, [r3, #0]
	handlerTimer3.timerConfig.Timer_mode				= TIMER_MODE_UP;
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <initSystem+0x168>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	711a      	strb	r2, [r3, #4]
	handlerTimer3.timerConfig.Timer_speed				= TIMER_INCR_SPEED_100us;
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <initSystem+0x168>)
 8000ed8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000edc:	80da      	strh	r2, [r3, #6]
	handlerTimer3.timerConfig.Timer_period				= 10;
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <initSystem+0x168>)
 8000ee0:	220a      	movs	r2, #10
 8000ee2:	609a      	str	r2, [r3, #8]

	//Cargamos la configuración
	GPIO_Config(&handlerStateLED);
 8000ee4:	4809      	ldr	r0, [pc, #36]	; (8000f0c <initSystem+0x148>)
 8000ee6:	f000 fc77 	bl	80017d8 <GPIO_Config>
	GPIO_Config(&handlerUSBRX);
 8000eea:	480b      	ldr	r0, [pc, #44]	; (8000f18 <initSystem+0x154>)
 8000eec:	f000 fc74 	bl	80017d8 <GPIO_Config>
	GPIO_Config(&handlerUSBTX);
 8000ef0:	480a      	ldr	r0, [pc, #40]	; (8000f1c <initSystem+0x158>)
 8000ef2:	f000 fc71 	bl	80017d8 <GPIO_Config>
	USART_Config(&handlerUsart2);
 8000ef6:	480a      	ldr	r0, [pc, #40]	; (8000f20 <initSystem+0x15c>)
 8000ef8:	f000 ff66 	bl	8001dc8 <USART_Config>
	Timer_Config(&handlerTimer2);
 8000efc:	480a      	ldr	r0, [pc, #40]	; (8000f28 <initSystem+0x164>)
 8000efe:	f000 fe2d 	bl	8001b5c <Timer_Config>
	Timer_Config(&handlerTimer3);
 8000f02:	480a      	ldr	r0, [pc, #40]	; (8000f2c <initSystem+0x168>)
 8000f04:	f000 fe2a 	bl	8001b5c <Timer_Config>
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200001f0 	.word	0x200001f0
 8000f10:	40020000 	.word	0x40020000
 8000f14:	200001fc 	.word	0x200001fc
 8000f18:	20000220 	.word	0x20000220
 8000f1c:	2000022c 	.word	0x2000022c
 8000f20:	20000238 	.word	0x20000238
 8000f24:	40004400 	.word	0x40004400
 8000f28:	20000208 	.word	0x20000208
 8000f2c:	20000214 	.word	0x20000214
 8000f30:	40000400 	.word	0x40000400

08000f34 <Timer2_Callback>:
//***********// CallBacks //***********//
void Timer2_Callback(void){
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
	handlerStateLED.pGPIOx -> ODR ^= GPIO_ODR_OD5;		// Encendido y apagado StateLED
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <Timer2_Callback+0x20>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	695a      	ldr	r2, [r3, #20]
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <Timer2_Callback+0x20>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f082 0220 	eor.w	r2, r2, #32
 8000f46:	615a      	str	r2, [r3, #20]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	200001f0 	.word	0x200001f0

08000f58 <Timer3_Callback>:

void Timer3_Callback(void){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	startSingleADC();									// Lanzamos la conversión ADC
 8000f5c:	f000 fb34 	bl	80015c8 <startSingleADC>
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <USART2_Callback>:

void USART2_Callback(void){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	// Lectura de los datos recibidos
	rxData = returnData();
 8000f68:	f001 f980 	bl	800226c <returnData>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b01      	ldr	r3, [pc, #4]	; (8000f78 <USART2_Callback+0x14>)
 8000f72:	701a      	strb	r2, [r3, #0]
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200002c4 	.word	0x200002c4

08000f7c <adc_Complete_Callback>:

void adc_Complete_Callback(void){
 8000f7c:	b598      	push	{r3, r4, r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	// Cambiamos el valor de adcIsComplete
//	adcData = getADC();
//	adcIsComplete = true;
	adcSignal[dataPosition] = getADC();
 8000f80:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <adc_Complete_Callback+0x3c>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	461c      	mov	r4, r3
 8000f86:	f000 fb55 	bl	8001634 <getADC>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <adc_Complete_Callback+0x40>)
 8000f90:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	dataPosition++;
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <adc_Complete_Callback+0x3c>)
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <adc_Complete_Callback+0x3c>)
 8000f9e:	801a      	strh	r2, [r3, #0]
	if (dataPosition >= ADC_SIGNAL_SIZE){
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <adc_Complete_Callback+0x3c>)
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d905      	bls.n	8000fb4 <adc_Complete_Callback+0x38>
		dataPosition = 0;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <adc_Complete_Callback+0x3c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
		adcIsComplete = true;
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <adc_Complete_Callback+0x44>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	701a      	strb	r2, [r3, #0]
	}
}
 8000fb4:	bf00      	nop
 8000fb6:	bd98      	pop	{r3, r4, r7, pc}
 8000fb8:	2000030e 	.word	0x2000030e
 8000fbc:	20000308 	.word	0x20000308
 8000fc0:	200002c5 	.word	0x200002c5

08000fc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
	return 1;
 8000fc8:	2301      	movs	r3, #1
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_kill>:

int _kill(int pid, int sig)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fde:	f001 f983 	bl	80022e8 <__errno>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2216      	movs	r2, #22
 8000fe6:	601a      	str	r2, [r3, #0]
	return -1;
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_exit>:

void _exit (int status)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ffe7 	bl	8000fd4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001006:	e7fe      	b.n	8001006 <_exit+0x12>

08001008 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	e00a      	b.n	8001030 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800101a:	f3af 8000 	nop.w
 800101e:	4601      	mov	r1, r0
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	60ba      	str	r2, [r7, #8]
 8001026:	b2ca      	uxtb	r2, r1
 8001028:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	3301      	adds	r3, #1
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	429a      	cmp	r2, r3
 8001036:	dbf0      	blt.n	800101a <_read+0x12>
	}

return len;
 8001038:	687b      	ldr	r3, [r7, #4]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b086      	sub	sp, #24
 8001046:	af00      	add	r7, sp, #0
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	e009      	b.n	8001068 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	60ba      	str	r2, [r7, #8]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	429a      	cmp	r2, r3
 800106e:	dbf1      	blt.n	8001054 <_write+0x12>
	}
	return len;
 8001070:	687b      	ldr	r3, [r7, #4]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <_close>:

int _close(int file)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
	return -1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010a2:	605a      	str	r2, [r3, #4]
	return 0;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <_isatty>:

int _isatty(int file)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
	return 1;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
	return 0;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ec:	4a14      	ldr	r2, [pc, #80]	; (8001140 <_sbrk+0x5c>)
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <_sbrk+0x60>)
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <_sbrk+0x64>)
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <_sbrk+0x68>)
 8001104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	429a      	cmp	r2, r3
 8001112:	d207      	bcs.n	8001124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001114:	f001 f8e8 	bl	80022e8 <__errno>
 8001118:	4603      	mov	r3, r0
 800111a:	220c      	movs	r2, #12
 800111c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001122:	e009      	b.n	8001138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <_sbrk+0x64>)
 8001134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20020000 	.word	0x20020000
 8001144:	00000400 	.word	0x00000400
 8001148:	20000310 	.word	0x20000310
 800114c:	20000338 	.word	0x20000338

08001150 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001150:	480d      	ldr	r0, [pc, #52]	; (8001188 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001152:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001154:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001158:	480c      	ldr	r0, [pc, #48]	; (800118c <LoopForever+0x6>)
  ldr r1, =_edata
 800115a:	490d      	ldr	r1, [pc, #52]	; (8001190 <LoopForever+0xa>)
  ldr r2, =_sidata
 800115c:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <LoopForever+0xe>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001160:	e002      	b.n	8001168 <LoopCopyDataInit>

08001162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001166:	3304      	adds	r3, #4

08001168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800116c:	d3f9      	bcc.n	8001162 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001170:	4c0a      	ldr	r4, [pc, #40]	; (800119c <LoopForever+0x16>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001174:	e001      	b.n	800117a <LoopFillZerobss>

08001176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001178:	3204      	adds	r2, #4

0800117a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800117c:	d3fb      	bcc.n	8001176 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800117e:	f001 f8b9 	bl	80022f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001182:	f7ff fdbf 	bl	8000d04 <main>

08001186 <LoopForever>:

LoopForever:
    b LoopForever
 8001186:	e7fe      	b.n	8001186 <LoopForever>
  ldr   r0, =_estack
 8001188:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001194:	08007104 	.word	0x08007104
  ldr r2, =_sbss
 8001198:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800119c:	20000334 	.word	0x20000334

080011a0 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <BusFault_Handler>
	...

080011a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	db0b      	blt.n	80011ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	f003 021f 	and.w	r2, r3, #31
 80011bc:	4907      	ldr	r1, [pc, #28]	; (80011dc <__NVIC_EnableIRQ+0x38>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	095b      	lsrs	r3, r3, #5
 80011c4:	2001      	movs	r0, #1
 80011c6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	db0a      	blt.n	800120a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	490c      	ldr	r1, [pc, #48]	; (800122c <__NVIC_SetPriority+0x4c>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	440b      	add	r3, r1
 8001204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001208:	e00a      	b.n	8001220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4908      	ldr	r1, [pc, #32]	; (8001230 <__NVIC_SetPriority+0x50>)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	3b04      	subs	r3, #4
 8001218:	0112      	lsls	r2, r2, #4
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	440b      	add	r3, r1
 800121e:	761a      	strb	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <adc_Config>:
#include "GPIOxDriver.h"

GPIO_Handler_t handlerAdcPin = {0};
uint16_t 		adcRawData 	 = {0};

void adc_Config(ADC_Config_t *adcConfig){
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800123c:	b672      	cpsid	i
}
 800123e:	bf00      	nop
	__disable_irq();

	/* 1. Configuramos el PinX para que cumpla la función de canal análogo deseado. */

	/*1. Verificamos si es single Channel, o multichannel */
	if(adcConfig -> channelMode == ADC_SINGLE_CHANNEL){
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	795b      	ldrb	r3, [r3, #5]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d105      	bne.n	8001254 <adc_Config+0x20>
		configAnalogPin(adcConfig -> channel);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f000 fa13 	bl	8001678 <configAnalogPin>
 8001252:	e016      	b.n	8001282 <adc_Config+0x4e>
	}
	else if(adcConfig -> channelMode == ADC_MULTI_CHANNEL){
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	795b      	ldrb	r3, [r3, #5]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d112      	bne.n	8001282 <adc_Config+0x4e>
		if(adcConfig -> numberOfChannels == 3){
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	799b      	ldrb	r3, [r3, #6]
 8001260:	2b03      	cmp	r3, #3
 8001262:	d10e      	bne.n	8001282 <adc_Config+0x4e>
			configAnalogPin(adcConfig -> channel_First);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7a1b      	ldrb	r3, [r3, #8]
 8001268:	4618      	mov	r0, r3
 800126a:	f000 fa05 	bl	8001678 <configAnalogPin>
			configAnalogPin(adcConfig -> channel_Second);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7a5b      	ldrb	r3, [r3, #9]
 8001272:	4618      	mov	r0, r3
 8001274:	f000 fa00 	bl	8001678 <configAnalogPin>
			configAnalogPin(adcConfig -> channel_Third);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	7a9b      	ldrb	r3, [r3, #10]
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f9fb 	bl	8001678 <configAnalogPin>
		}
	}

	/* 2. Activamos la señal de reloj para el periférico ADC1 (bus APB2) */
	RCC -> APB2ENR |= RCC_APB2ENR_ADC1EN;
 8001282:	4b7a      	ldr	r3, [pc, #488]	; (800146c <adc_Config+0x238>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a79      	ldr	r2, [pc, #484]	; (800146c <adc_Config+0x238>)
 8001288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128c:	6453      	str	r3, [r2, #68]	; 0x44

	// Limpiamos los registros antes de comenzar a configurar
	ADC1 -> CR1 = 0;
 800128e:	4b78      	ldr	r3, [pc, #480]	; (8001470 <adc_Config+0x23c>)
 8001290:	2200      	movs	r2, #0
 8001292:	605a      	str	r2, [r3, #4]
	ADC1 -> CR2 = 0;
 8001294:	4b76      	ldr	r3, [pc, #472]	; (8001470 <adc_Config+0x23c>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]

	/* Comenzamos la configuración del ADC1 */
	/* 3. Resolución del ADC */
	switch(adcConfig -> resolution){
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	785b      	ldrb	r3, [r3, #1]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d83e      	bhi.n	8001320 <adc_Config+0xec>
 80012a2:	a201      	add	r2, pc, #4	; (adr r2, 80012a8 <adc_Config+0x74>)
 80012a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a8:	080012b9 	.word	0x080012b9
 80012ac:	080012d3 	.word	0x080012d3
 80012b0:	080012ed 	.word	0x080012ed
 80012b4:	08001307 	.word	0x08001307
	case ADC_RESOLUTION_12_BIT:
	{
		ADC1 -> CR1 &= ~ADC_CR1_RES_0;
 80012b8:	4b6d      	ldr	r3, [pc, #436]	; (8001470 <adc_Config+0x23c>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	4a6c      	ldr	r2, [pc, #432]	; (8001470 <adc_Config+0x23c>)
 80012be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012c2:	6053      	str	r3, [r2, #4]
		ADC1 -> CR1 &= ~ADC_CR1_RES_1;
 80012c4:	4b6a      	ldr	r3, [pc, #424]	; (8001470 <adc_Config+0x23c>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	4a69      	ldr	r2, [pc, #420]	; (8001470 <adc_Config+0x23c>)
 80012ca:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80012ce:	6053      	str	r3, [r2, #4]
		break;
 80012d0:	e027      	b.n	8001322 <adc_Config+0xee>
	}

	case ADC_RESOLUTION_10_BIT:
	{
		ADC1 -> CR1 |= ADC_CR1_RES_0;
 80012d2:	4b67      	ldr	r3, [pc, #412]	; (8001470 <adc_Config+0x23c>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	4a66      	ldr	r2, [pc, #408]	; (8001470 <adc_Config+0x23c>)
 80012d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012dc:	6053      	str	r3, [r2, #4]
		ADC1 -> CR1 &= ~ADC_CR1_RES_1;
 80012de:	4b64      	ldr	r3, [pc, #400]	; (8001470 <adc_Config+0x23c>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	4a63      	ldr	r2, [pc, #396]	; (8001470 <adc_Config+0x23c>)
 80012e4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80012e8:	6053      	str	r3, [r2, #4]
		break;
 80012ea:	e01a      	b.n	8001322 <adc_Config+0xee>
	}

	case ADC_RESOLUTION_8_BIT:
	{
		ADC1 -> CR1 &= ~ADC_CR1_RES_0;
 80012ec:	4b60      	ldr	r3, [pc, #384]	; (8001470 <adc_Config+0x23c>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	4a5f      	ldr	r2, [pc, #380]	; (8001470 <adc_Config+0x23c>)
 80012f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012f6:	6053      	str	r3, [r2, #4]
		ADC1 -> CR1 |= ADC_CR1_RES_1;
 80012f8:	4b5d      	ldr	r3, [pc, #372]	; (8001470 <adc_Config+0x23c>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	4a5c      	ldr	r2, [pc, #368]	; (8001470 <adc_Config+0x23c>)
 80012fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001302:	6053      	str	r3, [r2, #4]
		break;
 8001304:	e00d      	b.n	8001322 <adc_Config+0xee>
	}
	case ADC_RESOLUTION_6_BIT:
	{
		ADC1 -> CR1 |= ADC_CR1_RES_0;
 8001306:	4b5a      	ldr	r3, [pc, #360]	; (8001470 <adc_Config+0x23c>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4a59      	ldr	r2, [pc, #356]	; (8001470 <adc_Config+0x23c>)
 800130c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001310:	6053      	str	r3, [r2, #4]
		ADC1 -> CR1 |= ADC_CR1_RES_1;
 8001312:	4b57      	ldr	r3, [pc, #348]	; (8001470 <adc_Config+0x23c>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	4a56      	ldr	r2, [pc, #344]	; (8001470 <adc_Config+0x23c>)
 8001318:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800131c:	6053      	str	r3, [r2, #4]
		break;
 800131e:	e000      	b.n	8001322 <adc_Config+0xee>
	}

	default:
	{
		break;
 8001320:	bf00      	nop
	}
	}

	/* 4. Configuramos el modo Scan mode */
	if(adcConfig -> channelMode == ADC_SINGLE_CHANNEL){
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	795b      	ldrb	r3, [r3, #5]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d106      	bne.n	8001338 <adc_Config+0x104>
		//Configuramos el modo Scan como desactivado
		ADC1 -> CR1 &= ~(ADC_CR1_SCAN);
 800132a:	4b51      	ldr	r3, [pc, #324]	; (8001470 <adc_Config+0x23c>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	4a50      	ldr	r2, [pc, #320]	; (8001470 <adc_Config+0x23c>)
 8001330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001334:	6053      	str	r3, [r2, #4]
 8001336:	e00b      	b.n	8001350 <adc_Config+0x11c>
	}
	else if(adcConfig -> channelMode == ADC_MULTI_CHANNEL){
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	795b      	ldrb	r3, [r3, #5]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d106      	bne.n	800134e <adc_Config+0x11a>
		//Configuramos el modo Scan como activado
		ADC1 -> CR1  |= (ADC_CR1_SCAN);
 8001340:	4b4b      	ldr	r3, [pc, #300]	; (8001470 <adc_Config+0x23c>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	4a4a      	ldr	r2, [pc, #296]	; (8001470 <adc_Config+0x23c>)
 8001346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134a:	6053      	str	r3, [r2, #4]
 800134c:	e000      	b.n	8001350 <adc_Config+0x11c>
	}
	else{
		__NOP();
 800134e:	bf00      	nop
	}

	/* 5. Configuramos la alineación de los datos (derecha o izquierda) */
	if(adcConfig -> dataAlignment == ADC_ALIGNMENT_RIGHT){
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	791b      	ldrb	r3, [r3, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d106      	bne.n	8001366 <adc_Config+0x132>
		// Alineación a la derecha (esta es la forma "natural")
		ADC1 -> CR2 &= ~(ADC_CR2_ALIGN);
 8001358:	4b45      	ldr	r3, [pc, #276]	; (8001470 <adc_Config+0x23c>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	4a44      	ldr	r2, [pc, #272]	; (8001470 <adc_Config+0x23c>)
 800135e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001362:	6093      	str	r3, [r2, #8]
 8001364:	e005      	b.n	8001372 <adc_Config+0x13e>
	}
	else{
		// Alineación a la izquierda (para algunos cálculos matemáticos).
		ADC1 -> CR2 |= ADC_CR2_ALIGN;
 8001366:	4b42      	ldr	r3, [pc, #264]	; (8001470 <adc_Config+0x23c>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	4a41      	ldr	r2, [pc, #260]	; (8001470 <adc_Config+0x23c>)
 800136c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001370:	6093      	str	r3, [r2, #8]
	}

	/* 6. Desactivamos el "continuos mode" */
	ADC1 -> CR2 &= ~(ADC_CR2_CONT);
 8001372:	4b3f      	ldr	r3, [pc, #252]	; (8001470 <adc_Config+0x23c>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	4a3e      	ldr	r2, [pc, #248]	; (8001470 <adc_Config+0x23c>)
 8001378:	f023 0302 	bic.w	r3, r3, #2
 800137c:	6093      	str	r3, [r2, #8]

	/* 7. Acá se debería configurar el sampling */

	if(adcConfig -> channelMode == ADC_SINGLE_CHANNEL){
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	795b      	ldrb	r3, [r3, #5]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d125      	bne.n	80013d2 <adc_Config+0x19e>
		if(adcConfig -> channel < ADC_CHANNEL_9){
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b08      	cmp	r3, #8
 800138c:	d810      	bhi.n	80013b0 <adc_Config+0x17c>
			ADC1 -> SMPR2 |= (adcConfig -> samplingPeriod << (3 * (adcConfig -> channel)));
 800138e:	4b38      	ldr	r3, [pc, #224]	; (8001470 <adc_Config+0x23c>)
 8001390:	691a      	ldr	r2, [r3, #16]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	885b      	ldrh	r3, [r3, #2]
 8001396:	4618      	mov	r0, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	460b      	mov	r3, r1
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	440b      	add	r3, r1
 80013a4:	fa00 f303 	lsl.w	r3, r0, r3
 80013a8:	4931      	ldr	r1, [pc, #196]	; (8001470 <adc_Config+0x23c>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	610b      	str	r3, [r1, #16]
 80013ae:	e04c      	b.n	800144a <adc_Config+0x216>
		}
		else{
			ADC1 -> SMPR1 |= (adcConfig -> samplingPeriod << (3 * (adcConfig -> channel)));
 80013b0:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <adc_Config+0x23c>)
 80013b2:	68da      	ldr	r2, [r3, #12]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	885b      	ldrh	r3, [r3, #2]
 80013b8:	4618      	mov	r0, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4619      	mov	r1, r3
 80013c0:	460b      	mov	r3, r1
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	440b      	add	r3, r1
 80013c6:	fa00 f303 	lsl.w	r3, r0, r3
 80013ca:	4929      	ldr	r1, [pc, #164]	; (8001470 <adc_Config+0x23c>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	60cb      	str	r3, [r1, #12]
 80013d0:	e03b      	b.n	800144a <adc_Config+0x216>
		}
	}
	else if(adcConfig -> channelMode == ADC_MULTI_CHANNEL){
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	795b      	ldrb	r3, [r3, #5]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d136      	bne.n	8001448 <adc_Config+0x214>

		if(adcConfig -> numberOfChannels <= ADC_CHANNEL_9){
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	799b      	ldrb	r3, [r3, #6]
 80013de:	2b09      	cmp	r3, #9
 80013e0:	d830      	bhi.n	8001444 <adc_Config+0x210>
			ADC1 -> SMPR2 |= (adcConfig -> samplingPeriod << (3 * (adcConfig -> channel_First)));
 80013e2:	4b23      	ldr	r3, [pc, #140]	; (8001470 <adc_Config+0x23c>)
 80013e4:	691a      	ldr	r2, [r3, #16]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	885b      	ldrh	r3, [r3, #2]
 80013ea:	4618      	mov	r0, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7a1b      	ldrb	r3, [r3, #8]
 80013f0:	4619      	mov	r1, r3
 80013f2:	460b      	mov	r3, r1
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	440b      	add	r3, r1
 80013f8:	fa00 f303 	lsl.w	r3, r0, r3
 80013fc:	491c      	ldr	r1, [pc, #112]	; (8001470 <adc_Config+0x23c>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	610b      	str	r3, [r1, #16]
			ADC1 -> SMPR2 |= (adcConfig -> samplingPeriod << (3 * (adcConfig -> channel_Second)));
 8001402:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <adc_Config+0x23c>)
 8001404:	691a      	ldr	r2, [r3, #16]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	885b      	ldrh	r3, [r3, #2]
 800140a:	4618      	mov	r0, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7a5b      	ldrb	r3, [r3, #9]
 8001410:	4619      	mov	r1, r3
 8001412:	460b      	mov	r3, r1
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	440b      	add	r3, r1
 8001418:	fa00 f303 	lsl.w	r3, r0, r3
 800141c:	4914      	ldr	r1, [pc, #80]	; (8001470 <adc_Config+0x23c>)
 800141e:	4313      	orrs	r3, r2
 8001420:	610b      	str	r3, [r1, #16]
			ADC1 -> SMPR2 |= (adcConfig -> samplingPeriod << (3 * (adcConfig -> channel_Third)));
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <adc_Config+0x23c>)
 8001424:	691a      	ldr	r2, [r3, #16]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	885b      	ldrh	r3, [r3, #2]
 800142a:	4618      	mov	r0, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	7a9b      	ldrb	r3, [r3, #10]
 8001430:	4619      	mov	r1, r3
 8001432:	460b      	mov	r3, r1
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	440b      	add	r3, r1
 8001438:	fa00 f303 	lsl.w	r3, r0, r3
 800143c:	490c      	ldr	r1, [pc, #48]	; (8001470 <adc_Config+0x23c>)
 800143e:	4313      	orrs	r3, r2
 8001440:	610b      	str	r3, [r1, #16]
 8001442:	e002      	b.n	800144a <adc_Config+0x216>
		}
		else{
			__NOP();//ADC1 -> SMPR1 |= (adcConfig -> samplingPeriod << (3 * (adcConfig -> channel)));
 8001444:	bf00      	nop
 8001446:	e000      	b.n	800144a <adc_Config+0x216>
		}
	}
	else{
		__NOP();
 8001448:	bf00      	nop
	}


	/* 8. Configuramos la secuencia y cuantos elementos hay en la secuencia */

	if(adcConfig -> channelMode == ADC_SINGLE_CHANNEL){
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	795b      	ldrb	r3, [r3, #5]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d110      	bne.n	8001474 <adc_Config+0x240>
		// Al hacerlo todo 0, estamos seleccionando solo 1 elemento en el conteo de la secuencia
		ADC1 -> SQR1 = 0;
 8001452:	4b07      	ldr	r3, [pc, #28]	; (8001470 <adc_Config+0x23c>)
 8001454:	2200      	movs	r2, #0
 8001456:	62da      	str	r2, [r3, #44]	; 0x2c
		// Asignamos el canal de la conversión a la primera posición en la secuencia
		ADC1 -> SQR3 |= (adcConfig -> channel << 0);
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <adc_Config+0x23c>)
 800145a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	7812      	ldrb	r2, [r2, #0]
 8001460:	4611      	mov	r1, r2
 8001462:	4a03      	ldr	r2, [pc, #12]	; (8001470 <adc_Config+0x23c>)
 8001464:	430b      	orrs	r3, r1
 8001466:	6353      	str	r3, [r2, #52]	; 0x34
 8001468:	e08e      	b.n	8001588 <adc_Config+0x354>
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800
 8001470:	40012000 	.word	0x40012000
	}
	else if(adcConfig -> channelMode == ADC_MULTI_CHANNEL){
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	795b      	ldrb	r3, [r3, #5]
 8001478:	2b01      	cmp	r3, #1
 800147a:	f040 8085 	bne.w	8001588 <adc_Config+0x354>

		// Activamos la interrupción al final de cada conversión single.
		ADC1 -> CR2 |= ADC_CR2_EOCS;
 800147e:	4b50      	ldr	r3, [pc, #320]	; (80015c0 <adc_Config+0x38c>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	4a4f      	ldr	r2, [pc, #316]	; (80015c0 <adc_Config+0x38c>)
 8001484:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001488:	6093      	str	r3, [r2, #8]

		// Activamos cuantos elementos hay en la secuencia
		ADC1 -> SQR1 |= ((adcConfig -> numberOfChannels-1) << ADC_SQR1_L_Pos);
 800148a:	4b4d      	ldr	r3, [pc, #308]	; (80015c0 <adc_Config+0x38c>)
 800148c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	7992      	ldrb	r2, [r2, #6]
 8001492:	3a01      	subs	r2, #1
 8001494:	0512      	lsls	r2, r2, #20
 8001496:	4611      	mov	r1, r2
 8001498:	4a49      	ldr	r2, [pc, #292]	; (80015c0 <adc_Config+0x38c>)
 800149a:	430b      	orrs	r3, r1
 800149c:	62d3      	str	r3, [r2, #44]	; 0x2c

		if((adcConfig -> numberOfChannels >= 1) & (adcConfig -> numberOfChannels <= 6)){
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	799b      	ldrb	r3, [r3, #6]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	bf14      	ite	ne
 80014a6:	2301      	movne	r3, #1
 80014a8:	2300      	moveq	r3, #0
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	799b      	ldrb	r3, [r3, #6]
 80014b0:	2b06      	cmp	r3, #6
 80014b2:	bf94      	ite	ls
 80014b4:	2301      	movls	r3, #1
 80014b6:	2300      	movhi	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4013      	ands	r3, r2
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d01a      	beq.n	80014f8 <adc_Config+0x2c4>
			ADC1 -> SQR3 |= adcConfig -> channel_First << 0;
 80014c2:	4b3f      	ldr	r3, [pc, #252]	; (80015c0 <adc_Config+0x38c>)
 80014c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	7a12      	ldrb	r2, [r2, #8]
 80014ca:	4611      	mov	r1, r2
 80014cc:	4a3c      	ldr	r2, [pc, #240]	; (80015c0 <adc_Config+0x38c>)
 80014ce:	430b      	orrs	r3, r1
 80014d0:	6353      	str	r3, [r2, #52]	; 0x34
			ADC1 -> SQR3 |= adcConfig -> channel_Second << 5;
 80014d2:	4b3b      	ldr	r3, [pc, #236]	; (80015c0 <adc_Config+0x38c>)
 80014d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	7a52      	ldrb	r2, [r2, #9]
 80014da:	0152      	lsls	r2, r2, #5
 80014dc:	4611      	mov	r1, r2
 80014de:	4a38      	ldr	r2, [pc, #224]	; (80015c0 <adc_Config+0x38c>)
 80014e0:	430b      	orrs	r3, r1
 80014e2:	6353      	str	r3, [r2, #52]	; 0x34
			ADC1 -> SQR3 |= adcConfig -> channel_Third << 10;
 80014e4:	4b36      	ldr	r3, [pc, #216]	; (80015c0 <adc_Config+0x38c>)
 80014e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	7a92      	ldrb	r2, [r2, #10]
 80014ec:	0292      	lsls	r2, r2, #10
 80014ee:	4611      	mov	r1, r2
 80014f0:	4a33      	ldr	r2, [pc, #204]	; (80015c0 <adc_Config+0x38c>)
 80014f2:	430b      	orrs	r3, r1
 80014f4:	6353      	str	r3, [r2, #52]	; 0x34
 80014f6:	e047      	b.n	8001588 <adc_Config+0x354>
			//ADC1 -> SQR3 |= (adcConfig -> channel << ((adcConfig -> sequencePos -1)*5));
		}
		else if((adcConfig -> numberOfChannels >= 7) & (adcConfig -> numberOfChannels <= 12)){
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	799b      	ldrb	r3, [r3, #6]
 80014fc:	2b06      	cmp	r3, #6
 80014fe:	bf8c      	ite	hi
 8001500:	2301      	movhi	r3, #1
 8001502:	2300      	movls	r3, #0
 8001504:	b2da      	uxtb	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	799b      	ldrb	r3, [r3, #6]
 800150a:	2b0c      	cmp	r3, #12
 800150c:	bf94      	ite	ls
 800150e:	2301      	movls	r3, #1
 8001510:	2300      	movhi	r3, #0
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4013      	ands	r3, r2
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d010      	beq.n	800153e <adc_Config+0x30a>
			ADC1 -> SQR2 |= (adcConfig -> channel << ((adcConfig -> sequencePos -7)*5));
 800151c:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <adc_Config+0x38c>)
 800151e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	79db      	ldrb	r3, [r3, #7]
 800152a:	1fda      	subs	r2, r3, #7
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	fa00 f303 	lsl.w	r3, r0, r3
 8001536:	4a22      	ldr	r2, [pc, #136]	; (80015c0 <adc_Config+0x38c>)
 8001538:	430b      	orrs	r3, r1
 800153a:	6313      	str	r3, [r2, #48]	; 0x30
 800153c:	e024      	b.n	8001588 <adc_Config+0x354>
		}
		else if((adcConfig -> numberOfChannels >= 13) & (adcConfig -> numberOfChannels <= 16)){
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	799b      	ldrb	r3, [r3, #6]
 8001542:	2b0c      	cmp	r3, #12
 8001544:	bf8c      	ite	hi
 8001546:	2301      	movhi	r3, #1
 8001548:	2300      	movls	r3, #0
 800154a:	b2da      	uxtb	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	799b      	ldrb	r3, [r3, #6]
 8001550:	2b10      	cmp	r3, #16
 8001552:	bf94      	ite	ls
 8001554:	2301      	movls	r3, #1
 8001556:	2300      	movhi	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	4013      	ands	r3, r2
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d011      	beq.n	8001586 <adc_Config+0x352>
			ADC1 -> SQR1 |= (adcConfig -> channel << ((adcConfig -> sequencePos -13)*5));
 8001562:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <adc_Config+0x38c>)
 8001564:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	79db      	ldrb	r3, [r3, #7]
 8001570:	f1a3 020d 	sub.w	r2, r3, #13
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	fa00 f303 	lsl.w	r3, r0, r3
 800157e:	4a10      	ldr	r2, [pc, #64]	; (80015c0 <adc_Config+0x38c>)
 8001580:	430b      	orrs	r3, r1
 8001582:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001584:	e000      	b.n	8001588 <adc_Config+0x354>
		}
		else{
			__NOP();
 8001586:	bf00      	nop
		}
	}

	/* 9. Configuramos el preescaler del ADC en 2:1 (el más rápido que se puede tener) */
	ADC -> CCR = 0;
 8001588:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <adc_Config+0x390>)
 800158a:	2200      	movs	r2, #0
 800158c:	605a      	str	r2, [r3, #4]

	/* 10. Desactivamos las interrupciones */

	ADC1 -> CR1 |= ADC_CR1_EOCIE;
 800158e:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <adc_Config+0x38c>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	4a0b      	ldr	r2, [pc, #44]	; (80015c0 <adc_Config+0x38c>)
 8001594:	f043 0320 	orr.w	r3, r3, #32
 8001598:	6053      	str	r3, [r2, #4]

	/* 11a. Matriculamos la interrupción en el NVIC */
	__NVIC_EnableIRQ(ADC_IRQn);
 800159a:	2012      	movs	r0, #18
 800159c:	f7ff fe02 	bl	80011a4 <__NVIC_EnableIRQ>

	/* 11.b Establecemos la importancia de la interrupción */

	__NVIC_SetPriority(ADC_IRQn,4);
 80015a0:	2104      	movs	r1, #4
 80015a2:	2012      	movs	r0, #18
 80015a4:	f7ff fe1c 	bl	80011e0 <__NVIC_SetPriority>

	/* 12. Activamos el modulo ADC */
	ADC1 -> CR2 |= ADC_CR2_ADON;
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <adc_Config+0x38c>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <adc_Config+0x38c>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80015b4:	b662      	cpsie	i
}
 80015b6:	bf00      	nop

	/* 13. Activamos las interrupciones globales */
	__enable_irq();
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40012000 	.word	0x40012000
 80015c4:	40012300 	.word	0x40012300

080015c8 <startSingleADC>:

/**/

void startSingleADC(void){
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
	/* Iniciamos un ciclo de conversión ADC */
	ADC1 -> CR2 |= ADC_CR2_SWSTART;
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <startSingleADC+0x1c>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <startSingleADC+0x1c>)
 80015d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80015d6:	6093      	str	r3, [r2, #8]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40012000 	.word	0x40012000

080015e8 <startContinuousADC>:

void startContinuousADC(void){
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
	/* Conversión continua */
	ADC1 -> CR2 |= (ADC_CR2_CONT);
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <startContinuousADC+0x28>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	4a07      	ldr	r2, [pc, #28]	; (8001610 <startContinuousADC+0x28>)
 80015f2:	f043 0302 	orr.w	r3, r3, #2
 80015f6:	6093      	str	r3, [r2, #8]
	/* Iniciamos un ciclo de conversión ADC */
	ADC1 -> CR2 |= ADC_CR2_SWSTART;
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <startContinuousADC+0x28>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	4a04      	ldr	r2, [pc, #16]	; (8001610 <startContinuousADC+0x28>)
 80015fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001602:	6093      	str	r3, [r2, #8]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40012000 	.word	0x40012000

08001614 <stopContinousADC>:

void stopContinousADC(void){
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
	ADC1 -> CR2 &= ~(ADC_CR2_SWSTART);
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <stopContinousADC+0x1c>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	4a04      	ldr	r2, [pc, #16]	; (8001630 <stopContinousADC+0x1c>)
 800161e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001622:	6093      	str	r3, [r2, #8]
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40012000 	.word	0x40012000

08001634 <getADC>:

/* Función que me retorna el último dato adquirido por la ADC */
uint16_t getADC(void){
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
	return adcRawData;
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <getADC+0x14>)
 800163a:	881b      	ldrh	r3, [r3, #0]
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000320 	.word	0x20000320

0800164c <ADC_IRQHandler>:
void multiChannelADC(ADC_Config_t *adcConfig){
	ADC1 -> SQR1 |= (adcConfig -> numberOfChannels << ADC_SQR1_L_Pos);
	ADC1 -> CR1  |= (ADC_CR1_SCAN);
}
/* Esta es la ISR de la interrupción por conversión ADC */
void ADC_IRQHandler(void){
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	if(ADC1 -> SR & ADC_SR_EOC){
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <ADC_IRQHandler+0x24>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d006      	beq.n	800166a <ADC_IRQHandler+0x1e>
		// Leemos el resultado de la conversión ADC y lo cargamos en un valor auxiliar
		adcRawData = ADC1 -> DR;
 800165c:	4b04      	ldr	r3, [pc, #16]	; (8001670 <ADC_IRQHandler+0x24>)
 800165e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001660:	b29a      	uxth	r2, r3
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <ADC_IRQHandler+0x28>)
 8001664:	801a      	strh	r2, [r3, #0]

		// Hacemos el llamado a la función que se ejecutará en el main
		adc_Complete_Callback();
 8001666:	f7ff fc89 	bl	8000f7c <adc_Complete_Callback>
	}
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40012000 	.word	0x40012000
 8001674:	20000320 	.word	0x20000320

08001678 <configAnalogPin>:
__attribute__((weak)) void adc_Complete_Callback(void){
	__NOP();
}

/* Con esta función configuramos que pin deseamos que funcione como ADC */
void configAnalogPin(uint8_t adcChannel){
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]

	// Con este switch seleccionamos el canal y lo configuramos como analogo.
	switch(adcChannel){
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	2b0f      	cmp	r3, #15
 8001686:	f200 8093 	bhi.w	80017b0 <configAnalogPin+0x138>
 800168a:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <configAnalogPin+0x18>)
 800168c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001690:	080016d1 	.word	0x080016d1
 8001694:	080016df 	.word	0x080016df
 8001698:	080016ed 	.word	0x080016ed
 800169c:	080016fb 	.word	0x080016fb
 80016a0:	08001709 	.word	0x08001709
 80016a4:	08001717 	.word	0x08001717
 80016a8:	08001725 	.word	0x08001725
 80016ac:	08001733 	.word	0x08001733
 80016b0:	08001741 	.word	0x08001741
 80016b4:	0800174f 	.word	0x0800174f
 80016b8:	0800175d 	.word	0x0800175d
 80016bc:	0800176b 	.word	0x0800176b
 80016c0:	08001779 	.word	0x08001779
 80016c4:	08001787 	.word	0x08001787
 80016c8:	08001795 	.word	0x08001795
 80016cc:	080017a3 	.word	0x080017a3

	case ADC_CHANNEL_0:
	{
		// Es el pin PA0
		handlerAdcPin.pGPIOx						= GPIOA;
 80016d0:	4b3d      	ldr	r3, [pc, #244]	; (80017c8 <configAnalogPin+0x150>)
 80016d2:	4a3e      	ldr	r2, [pc, #248]	; (80017cc <configAnalogPin+0x154>)
 80016d4:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 80016d6:	4b3c      	ldr	r3, [pc, #240]	; (80017c8 <configAnalogPin+0x150>)
 80016d8:	2200      	movs	r2, #0
 80016da:	711a      	strb	r2, [r3, #4]
		break;
 80016dc:	e069      	b.n	80017b2 <configAnalogPin+0x13a>

	// Configuración ADC1_1
	case ADC_CHANNEL_1:
	{
		// Es el pin PA1.
		handlerAdcPin.pGPIOx = GPIOA;
 80016de:	4b3a      	ldr	r3, [pc, #232]	; (80017c8 <configAnalogPin+0x150>)
 80016e0:	4a3a      	ldr	r2, [pc, #232]	; (80017cc <configAnalogPin+0x154>)
 80016e2:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 80016e4:	4b38      	ldr	r3, [pc, #224]	; (80017c8 <configAnalogPin+0x150>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	711a      	strb	r2, [r3, #4]
		break;
 80016ea:	e062      	b.n	80017b2 <configAnalogPin+0x13a>

	// Configuración ADC1_2
	case ADC_CHANNEL_2:
	{
		// Es el pin PA2.
		handlerAdcPin.pGPIOx = GPIOA;
 80016ec:	4b36      	ldr	r3, [pc, #216]	; (80017c8 <configAnalogPin+0x150>)
 80016ee:	4a37      	ldr	r2, [pc, #220]	; (80017cc <configAnalogPin+0x154>)
 80016f0:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 80016f2:	4b35      	ldr	r3, [pc, #212]	; (80017c8 <configAnalogPin+0x150>)
 80016f4:	2202      	movs	r2, #2
 80016f6:	711a      	strb	r2, [r3, #4]
		break;
 80016f8:	e05b      	b.n	80017b2 <configAnalogPin+0x13a>

	// Configuración ADC1_3
	case ADC_CHANNEL_3:
	{
		// Es el pin PA3.
		handlerAdcPin.pGPIOx = GPIOA;
 80016fa:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <configAnalogPin+0x150>)
 80016fc:	4a33      	ldr	r2, [pc, #204]	; (80017cc <configAnalogPin+0x154>)
 80016fe:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8001700:	4b31      	ldr	r3, [pc, #196]	; (80017c8 <configAnalogPin+0x150>)
 8001702:	2203      	movs	r2, #3
 8001704:	711a      	strb	r2, [r3, #4]
		break;
 8001706:	e054      	b.n	80017b2 <configAnalogPin+0x13a>

	// Configuración ADC1_4
	case ADC_CHANNEL_4:
	{
		// Es el pin PA4.
		handlerAdcPin.pGPIOx = GPIOA;
 8001708:	4b2f      	ldr	r3, [pc, #188]	; (80017c8 <configAnalogPin+0x150>)
 800170a:	4a30      	ldr	r2, [pc, #192]	; (80017cc <configAnalogPin+0x154>)
 800170c:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 800170e:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <configAnalogPin+0x150>)
 8001710:	2204      	movs	r2, #4
 8001712:	711a      	strb	r2, [r3, #4]
		break;
 8001714:	e04d      	b.n	80017b2 <configAnalogPin+0x13a>

	// Configuración ADC1_5
	case ADC_CHANNEL_5:
	{
		// Es el pin PA5.
		handlerAdcPin.pGPIOx = GPIOA;
 8001716:	4b2c      	ldr	r3, [pc, #176]	; (80017c8 <configAnalogPin+0x150>)
 8001718:	4a2c      	ldr	r2, [pc, #176]	; (80017cc <configAnalogPin+0x154>)
 800171a:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 800171c:	4b2a      	ldr	r3, [pc, #168]	; (80017c8 <configAnalogPin+0x150>)
 800171e:	2205      	movs	r2, #5
 8001720:	711a      	strb	r2, [r3, #4]
		break;
 8001722:	e046      	b.n	80017b2 <configAnalogPin+0x13a>

	// Configuración ADC1_6
	case ADC_CHANNEL_6:
	{
		// Es el pin PA6.
		handlerAdcPin.pGPIOx = GPIOA;
 8001724:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <configAnalogPin+0x150>)
 8001726:	4a29      	ldr	r2, [pc, #164]	; (80017cc <configAnalogPin+0x154>)
 8001728:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_6;
 800172a:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <configAnalogPin+0x150>)
 800172c:	2206      	movs	r2, #6
 800172e:	711a      	strb	r2, [r3, #4]
		break;
 8001730:	e03f      	b.n	80017b2 <configAnalogPin+0x13a>

	// Configuración ADC1_7
	case ADC_CHANNEL_7:
	{
		// Es el pin PA7.
		handlerAdcPin.pGPIOx = GPIOA;
 8001732:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <configAnalogPin+0x150>)
 8001734:	4a25      	ldr	r2, [pc, #148]	; (80017cc <configAnalogPin+0x154>)
 8001736:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_7;
 8001738:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <configAnalogPin+0x150>)
 800173a:	2207      	movs	r2, #7
 800173c:	711a      	strb	r2, [r3, #4]
		break;
 800173e:	e038      	b.n	80017b2 <configAnalogPin+0x13a>

	// Configuración ADC1_8
	case ADC_CHANNEL_8:
	{
		// Es el pin PB0.
		handlerAdcPin.pGPIOx = GPIOB;
 8001740:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <configAnalogPin+0x150>)
 8001742:	4a23      	ldr	r2, [pc, #140]	; (80017d0 <configAnalogPin+0x158>)
 8001744:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8001746:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <configAnalogPin+0x150>)
 8001748:	2200      	movs	r2, #0
 800174a:	711a      	strb	r2, [r3, #4]
		break;
 800174c:	e031      	b.n	80017b2 <configAnalogPin+0x13a>

	// Configuración ADC1_9
	case ADC_CHANNEL_9:
	{
		// Es el pin PB1.
		handlerAdcPin.pGPIOx = GPIOB;
 800174e:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <configAnalogPin+0x150>)
 8001750:	4a1f      	ldr	r2, [pc, #124]	; (80017d0 <configAnalogPin+0x158>)
 8001752:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8001754:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <configAnalogPin+0x150>)
 8001756:	2201      	movs	r2, #1
 8001758:	711a      	strb	r2, [r3, #4]
		break;
 800175a:	e02a      	b.n	80017b2 <configAnalogPin+0x13a>

	// Configuración ADC1_10
	case ADC_CHANNEL_10:
	{
		// Es el pin PC0.
		handlerAdcPin.pGPIOx = GPIOC;
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <configAnalogPin+0x150>)
 800175e:	4a1d      	ldr	r2, [pc, #116]	; (80017d4 <configAnalogPin+0x15c>)
 8001760:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <configAnalogPin+0x150>)
 8001764:	2200      	movs	r2, #0
 8001766:	711a      	strb	r2, [r3, #4]
		break;
 8001768:	e023      	b.n	80017b2 <configAnalogPin+0x13a>

	// Configuración ADC1_11
	case ADC_CHANNEL_11:
	{
		// Es el pin PC1.
		handlerAdcPin.pGPIOx = GPIOC;
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <configAnalogPin+0x150>)
 800176c:	4a19      	ldr	r2, [pc, #100]	; (80017d4 <configAnalogPin+0x15c>)
 800176e:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8001770:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <configAnalogPin+0x150>)
 8001772:	2201      	movs	r2, #1
 8001774:	711a      	strb	r2, [r3, #4]
		break;
 8001776:	e01c      	b.n	80017b2 <configAnalogPin+0x13a>

	// Configuración ADC1_12
	case ADC_CHANNEL_12:
	{
		// Es el pin PC2.
		handlerAdcPin.pGPIOx = GPIOC;
 8001778:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <configAnalogPin+0x150>)
 800177a:	4a16      	ldr	r2, [pc, #88]	; (80017d4 <configAnalogPin+0x15c>)
 800177c:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 800177e:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <configAnalogPin+0x150>)
 8001780:	2202      	movs	r2, #2
 8001782:	711a      	strb	r2, [r3, #4]
		break;
 8001784:	e015      	b.n	80017b2 <configAnalogPin+0x13a>

	// Configuración ADC1_13
	case ADC_CHANNEL_13:
	{
		// Es el pin PC3.
		handlerAdcPin.pGPIOx = GPIOC;
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <configAnalogPin+0x150>)
 8001788:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <configAnalogPin+0x15c>)
 800178a:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 800178c:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <configAnalogPin+0x150>)
 800178e:	2203      	movs	r2, #3
 8001790:	711a      	strb	r2, [r3, #4]
		break;
 8001792:	e00e      	b.n	80017b2 <configAnalogPin+0x13a>

	// Configuración ADC1_14
	case ADC_CHANNEL_14:
	{
		// Es el pin PC4.
		handlerAdcPin.pGPIOx = GPIOC;
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <configAnalogPin+0x150>)
 8001796:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <configAnalogPin+0x15c>)
 8001798:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <configAnalogPin+0x150>)
 800179c:	2204      	movs	r2, #4
 800179e:	711a      	strb	r2, [r3, #4]
		break;
 80017a0:	e007      	b.n	80017b2 <configAnalogPin+0x13a>

	// Configuración ADC1_15
	case ADC_CHANNEL_15:
	{
		// Es el pin PC5.
		handlerAdcPin.pGPIOx = GPIOC;
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <configAnalogPin+0x150>)
 80017a4:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <configAnalogPin+0x15c>)
 80017a6:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <configAnalogPin+0x150>)
 80017aa:	2205      	movs	r2, #5
 80017ac:	711a      	strb	r2, [r3, #4]
		break;
 80017ae:	e000      	b.n	80017b2 <configAnalogPin+0x13a>
	}

	default:
	{
		// Se termina el ciclo por defecto.
		break;
 80017b0:	bf00      	nop
	}
	}

	// Se configura el pin en modo análogo.
	handlerAdcPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <configAnalogPin+0x150>)
 80017b4:	2203      	movs	r2, #3
 80017b6:	715a      	strb	r2, [r3, #5]
	GPIO_Config(&handlerAdcPin);
 80017b8:	4803      	ldr	r0, [pc, #12]	; (80017c8 <configAnalogPin+0x150>)
 80017ba:	f000 f80d 	bl	80017d8 <GPIO_Config>
	}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000314 	.word	0x20000314
 80017cc:	40020000 	.word	0x40020000
 80017d0:	40020400 	.word	0x40020400
 80017d4:	40020800 	.word	0x40020800

080017d8 <GPIO_Config>:
orden estricto para poder que el sistema permita configurar el periférico X.
Lo primero y más importante es activar la señal del reloj principal hacia ese
elemento específico (relacionado con el periférico RCC), a esto llamaremos
simplemente "activar el periférico o activar la señal de reloj del periférico".
*/
void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periférico
	// Verificamos para GPIOA
	if (pGPIOHandler -> pGPIOx == GPIOA){
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a88      	ldr	r2, [pc, #544]	; (8001a10 <GPIO_Config+0x238>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d106      	bne.n	8001800 <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOA
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 80017f2:	4b88      	ldr	r3, [pc, #544]	; (8001a14 <GPIO_Config+0x23c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a87      	ldr	r2, [pc, #540]	; (8001a14 <GPIO_Config+0x23c>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	e03a      	b.n	8001876 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if (pGPIOHandler -> pGPIOx == GPIOB){
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a84      	ldr	r2, [pc, #528]	; (8001a18 <GPIO_Config+0x240>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d106      	bne.n	8001818 <GPIO_Config+0x40>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOB
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 800180a:	4b82      	ldr	r3, [pc, #520]	; (8001a14 <GPIO_Config+0x23c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a81      	ldr	r2, [pc, #516]	; (8001a14 <GPIO_Config+0x23c>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	e02e      	b.n	8001876 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOC
	else if (pGPIOHandler -> pGPIOx == GPIOC){
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a7f      	ldr	r2, [pc, #508]	; (8001a1c <GPIO_Config+0x244>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d106      	bne.n	8001830 <GPIO_Config+0x58>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOC
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8001822:	4b7c      	ldr	r3, [pc, #496]	; (8001a14 <GPIO_Config+0x23c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a7b      	ldr	r2, [pc, #492]	; (8001a14 <GPIO_Config+0x23c>)
 8001828:	f043 0304 	orr.w	r3, r3, #4
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	e022      	b.n	8001876 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOD
	else if (pGPIOHandler -> pGPIOx == GPIOD){
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a7a      	ldr	r2, [pc, #488]	; (8001a20 <GPIO_Config+0x248>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d106      	bne.n	8001848 <GPIO_Config+0x70>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOD
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 800183a:	4b76      	ldr	r3, [pc, #472]	; (8001a14 <GPIO_Config+0x23c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a75      	ldr	r2, [pc, #468]	; (8001a14 <GPIO_Config+0x23c>)
 8001840:	f043 0308 	orr.w	r3, r3, #8
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	e016      	b.n	8001876 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOE
	else if (pGPIOHandler -> pGPIOx == GPIOE){
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a75      	ldr	r2, [pc, #468]	; (8001a24 <GPIO_Config+0x24c>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d106      	bne.n	8001860 <GPIO_Config+0x88>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOE
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8001852:	4b70      	ldr	r3, [pc, #448]	; (8001a14 <GPIO_Config+0x23c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a6f      	ldr	r2, [pc, #444]	; (8001a14 <GPIO_Config+0x23c>)
 8001858:	f043 0310 	orr.w	r3, r3, #16
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	e00a      	b.n	8001876 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOH
	else if (pGPIOHandler -> pGPIOx == GPIOH){
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a70      	ldr	r2, [pc, #448]	; (8001a28 <GPIO_Config+0x250>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d105      	bne.n	8001876 <GPIO_Config+0x9e>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOH
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 800186a:	4b6a      	ldr	r3, [pc, #424]	; (8001a14 <GPIO_Config+0x23c>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a69      	ldr	r2, [pc, #420]	; (8001a14 <GPIO_Config+0x23c>)
 8001870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
	// Después de activado, podemos comenzar a configurar.

	// 2) Configurando el registro GPIOx_MODER
	// Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y todo eso lo cargamos en la variable aux_Config
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	795b      	ldrb	r3, [r3, #5]
 800187a:	461a      	mov	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	791b      	ldrb	r3, [r3, #4]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	60fb      	str	r3, [r7, #12]

	// Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (debemos escribir 0b00)
	// para lo cual aplicamos una máscara y una operación bitwise AND
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	791b      	ldrb	r3, [r3, #4]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	2103      	movs	r1, #3
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	4619      	mov	r1, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	400a      	ands	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler -> pGPIOx -> MODER |= auxConfig;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6819      	ldr	r1, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	601a      	str	r2, [r3, #0]

	// 3) Configurando el registro GPIOx_OTYPER
	// De nuevo, leemos y movemos el valor un número "PinNumber" de veces
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	7a1b      	ldrb	r3, [r3, #8]
 80018ba:	461a      	mov	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	791b      	ldrb	r3, [r3, #4]
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler -> pGPIOx -> OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	791b      	ldrb	r3, [r3, #4]
 80018d0:	4619      	mov	r1, r3
 80018d2:	2301      	movs	r3, #1
 80018d4:	408b      	lsls	r3, r1
 80018d6:	43db      	mvns	r3, r3
 80018d8:	4619      	mov	r1, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	400a      	ands	r2, r1
 80018e0:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OTYPER |= auxConfig;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6859      	ldr	r1, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	799b      	ldrb	r3, [r3, #6]
 80018f6:	461a      	mov	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	791b      	ldrb	r3, [r3, #4]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler -> pGPIOx -> OSPEEDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	791b      	ldrb	r3, [r3, #4]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2103      	movs	r1, #3
 8001912:	fa01 f303 	lsl.w	r3, r1, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	4619      	mov	r1, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	400a      	ands	r2, r1
 8001920:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OSPEEDR |= auxConfig;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6899      	ldr	r1, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	430a      	orrs	r2, r1
 8001930:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante.
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	79db      	ldrb	r3, [r3, #7]
 8001936:	461a      	mov	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	791b      	ldrb	r3, [r3, #4]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler -> pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	791b      	ldrb	r3, [r3, #4]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	2103      	movs	r1, #3
 8001952:	fa01 f303 	lsl.w	r3, r1, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	4619      	mov	r1, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	400a      	ands	r2, r1
 8001960:	60da      	str	r2, [r3, #12]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> PUPDR |= auxConfig;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68d9      	ldr	r1, [r3, #12]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	430a      	orrs	r2, r1
 8001970:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuración de las funciones alternativas... Se verá luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	795b      	ldrb	r3, [r3, #5]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d143      	bne.n	8001a02 <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	791b      	ldrb	r3, [r3, #4]
 800197e:	2b07      	cmp	r3, #7
 8001980:	d81f      	bhi.n	80019c2 <GPIO_Config+0x1ea>
			// Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	791b      	ldrb	r3, [r3, #4]
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	60bb      	str	r3, [r7, #8]

			// Limpiamos primero la posición del registro que deseamos escribir a continuación
			pGPIOHandler -> pGPIOx -> AFR[0] &= ~(0b1111 << auxPosition);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6a1a      	ldr	r2, [r3, #32]
 8001990:	210f      	movs	r1, #15
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	4619      	mov	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	400a      	ands	r2, r1
 80019a2:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posición seleccionada
			pGPIOHandler -> pGPIOx -> AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6a1a      	ldr	r2, [r3, #32]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7a5b      	ldrb	r3, [r3, #9]
 80019ae:	4619      	mov	r1, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	4619      	mov	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurando en la posición seleccionada
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} // Fin del GPIO_Config
 80019c0:	e01f      	b.n	8001a02 <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber -8);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	791b      	ldrb	r3, [r3, #4]
 80019c6:	3b08      	subs	r3, #8
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx -> AFR[1] &= ~(0b1111 << auxPosition);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019d2:	210f      	movs	r1, #15
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	fa01 f303 	lsl.w	r3, r1, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	4619      	mov	r1, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	400a      	ands	r2, r1
 80019e4:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7a5b      	ldrb	r3, [r3, #9]
 80019f0:	4619      	mov	r1, r3
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	4619      	mov	r1, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_Config
 8001a02:	bf00      	nop
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40020000 	.word	0x40020000
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40020400 	.word	0x40020400
 8001a1c:	40020800 	.word	0x40020800
 8001a20:	40020c00 	.word	0x40020c00
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40021c00 	.word	0x40021c00

08001a2c <GPIO_WritePin>:
 *
 *
Función utilizada para cambiar de estado el pin entregado en el handler, asignando
el valor entregado en la variable newState
*/
void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	70fb      	strb	r3, [r7, #3]
	// Limpiamos la posición que deseamos
	// pPinHandler -> pGPIOx -> ODR &= ~(SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
	if(newState == SET){
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d10d      	bne.n	8001a5a <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler -> pGPIOx -> BSRR |= (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	699a      	ldr	r2, [r3, #24]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	791b      	ldrb	r3, [r3, #4]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	408b      	lsls	r3, r1
 8001a4e:	4619      	mov	r1, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	619a      	str	r2, [r3, #24]
	}
	else{
		// Trabajando con la parte alta del registro
		pPinHandler -> pGPIOx -> BSRR |= (SET << (pPinHandler -> GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8001a58:	e00d      	b.n	8001a76 <GPIO_WritePin+0x4a>
		pPinHandler -> pGPIOx -> BSRR |= (SET << (pPinHandler -> GPIO_PinConfig.GPIO_PinNumber + 16));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	699a      	ldr	r2, [r3, #24]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	791b      	ldrb	r3, [r3, #4]
 8001a64:	3310      	adds	r3, #16
 8001a66:	2101      	movs	r1, #1
 8001a68:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	619a      	str	r2, [r3, #24]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <__NVIC_EnableIRQ>:
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	db0b      	blt.n	8001aae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	f003 021f 	and.w	r2, r3, #31
 8001a9c:	4907      	ldr	r1, [pc, #28]	; (8001abc <__NVIC_EnableIRQ+0x38>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	095b      	lsrs	r3, r3, #5
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000e100 	.word	0xe000e100

08001ac0 <__NVIC_DisableIRQ>:
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	db12      	blt.n	8001af8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	f003 021f 	and.w	r2, r3, #31
 8001ad8:	490a      	ldr	r1, [pc, #40]	; (8001b04 <__NVIC_DisableIRQ+0x44>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	095b      	lsrs	r3, r3, #5
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae6:	3320      	adds	r3, #32
 8001ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001aec:	f3bf 8f4f 	dsb	sy
}
 8001af0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001af2:	f3bf 8f6f 	isb	sy
}
 8001af6:	bf00      	nop
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000e100 	.word	0xe000e100

08001b08 <__NVIC_SetPriority>:
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	db0a      	blt.n	8001b32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	490c      	ldr	r1, [pc, #48]	; (8001b54 <__NVIC_SetPriority+0x4c>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	0112      	lsls	r2, r2, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b30:	e00a      	b.n	8001b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4908      	ldr	r1, [pc, #32]	; (8001b58 <__NVIC_SetPriority+0x50>)
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	3b04      	subs	r3, #4
 8001b40:	0112      	lsls	r2, r2, #4
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	440b      	add	r3, r1
 8001b46:	761a      	strb	r2, [r3, #24]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000e100 	.word	0xe000e100
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <Timer_Config>:
 *
 * */

//NOTA: Hay que desactivar las interrupciones globales y luego volver a activarlas

void Timer_Config(TIMER_Handler_t *ptrTimerConfig){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b64:	b672      	cpsid	i
}
 8001b66:	bf00      	nop
	/* 0. Desactivamos las interrupciones globales */

	__disable_irq();

	/* 1. Activamos la señal de reloj para el periférico específico */
	if(ptrTimerConfig -> ptrTIMx == TIM2){
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b70:	d106      	bne.n	8001b80 <Timer_Config+0x24>
		// Activamos la señal de reloj del TIM2
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001b72:	4b4b      	ldr	r3, [pc, #300]	; (8001ca0 <Timer_Config+0x144>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	4a4a      	ldr	r2, [pc, #296]	; (8001ca0 <Timer_Config+0x144>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7e:	e022      	b.n	8001bc6 <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM3){
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a47      	ldr	r2, [pc, #284]	; (8001ca4 <Timer_Config+0x148>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d106      	bne.n	8001b98 <Timer_Config+0x3c>
		// Activamos la señal de reloj del TIM3
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001b8a:	4b45      	ldr	r3, [pc, #276]	; (8001ca0 <Timer_Config+0x144>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	4a44      	ldr	r2, [pc, #272]	; (8001ca0 <Timer_Config+0x144>)
 8001b90:	f043 0302 	orr.w	r3, r3, #2
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
 8001b96:	e016      	b.n	8001bc6 <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM4){
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a42      	ldr	r2, [pc, #264]	; (8001ca8 <Timer_Config+0x14c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d106      	bne.n	8001bb0 <Timer_Config+0x54>
		// Activamos la señal de reloj del TIM4
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001ba2:	4b3f      	ldr	r3, [pc, #252]	; (8001ca0 <Timer_Config+0x144>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	4a3e      	ldr	r2, [pc, #248]	; (8001ca0 <Timer_Config+0x144>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	6413      	str	r3, [r2, #64]	; 0x40
 8001bae:	e00a      	b.n	8001bc6 <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM5){
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a3d      	ldr	r2, [pc, #244]	; (8001cac <Timer_Config+0x150>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d105      	bne.n	8001bc6 <Timer_Config+0x6a>
		// Activamos la señal de reloj del TIM5
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001bba:	4b39      	ldr	r3, [pc, #228]	; (8001ca0 <Timer_Config+0x144>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	4a38      	ldr	r2, [pc, #224]	; (8001ca0 <Timer_Config+0x144>)
 8001bc0:	f043 0308 	orr.w	r3, r3, #8
 8001bc4:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuración del modo del timer (UP or DOWN) */

	if(ptrTimerConfig -> timerConfig.Timer_mode == TIMER_MODE_UP){
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	791b      	ldrb	r3, [r3, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10c      	bne.n	8001be8 <Timer_Config+0x8c>
		// Configuramos el timer en modo UP
		ptrTimerConfig -> ptrTIMx -> CR1 &= ~(TIM_CR1_DIR);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0210 	bic.w	r2, r2, #16
 8001bdc:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) en cero.
		ptrTimerConfig -> ptrTIMx -> CNT = 0;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2200      	movs	r2, #0
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24
 8001be6:	e00d      	b.n	8001c04 <Timer_Config+0xa8>

	}
	else{
		// Configuramos el timer en modo DOWN
		ptrTimerConfig -> ptrTIMx -> CR1 |= ~(TIM_CR1_DIR);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f062 0210 	orn	r2, r2, #16
 8001bf6:	601a      	str	r2, [r3, #0]

		// Ponemos en el contador (CNT) el valor del periodo
		ptrTimerConfig -> ptrTIMx -> CNT = ptrTimerConfig -> timerConfig.Timer_period -1;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	3a01      	subs	r2, #1
 8001c02:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuración del Prescaler */
	ptrTimerConfig -> ptrTIMx -> PSC = ptrTimerConfig -> timerConfig.Timer_speed -1;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	88db      	ldrh	r3, [r3, #6]
 8001c08:	1e5a      	subs	r2, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo de las interrupciones */
	ptrTimerConfig -> ptrTIMx -> ARR = ptrTimerConfig -> timerConfig.Timer_period -1;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	3a01      	subs	r2, #1
 8001c1a:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse  */
	ptrTimerConfig -> ptrTIMx -> CR1 |= TIM_CR1_CEN;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]

	/* 6. Activamos la interrupción debida a un "update event" */
	if(ptrTimerConfig -> ptrTIMx != TIM3){
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1c      	ldr	r2, [pc, #112]	; (8001ca4 <Timer_Config+0x148>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d007      	beq.n	8001c46 <Timer_Config+0xea>
		ptrTimerConfig -> ptrTIMx -> DIER |= TIM_DIER_UIE;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 0201 	orr.w	r2, r2, #1
 8001c44:	60da      	str	r2, [r3, #12]
	}

	/* 7. Activamos la señal de la interrupcuón en el NVIC */

	if(ptrTimerConfig -> ptrTIMx == TIM2){
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c4e:	d107      	bne.n	8001c60 <Timer_Config+0x104>
		// Activamos la IRQ del TIM2
		__NVIC_EnableIRQ(TIM2_IRQn);
 8001c50:	201c      	movs	r0, #28
 8001c52:	f7ff ff17 	bl	8001a84 <__NVIC_EnableIRQ>

		// Establecemos la prioridad del timer
		__NVIC_SetPriority(TIM2_IRQn,3);
 8001c56:	2103      	movs	r1, #3
 8001c58:	201c      	movs	r0, #28
 8001c5a:	f7ff ff55 	bl	8001b08 <__NVIC_SetPriority>
 8001c5e:	e019      	b.n	8001c94 <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM3){
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0f      	ldr	r2, [pc, #60]	; (8001ca4 <Timer_Config+0x148>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d103      	bne.n	8001c72 <Timer_Config+0x116>
		// Activamos la IRQ del TIM3
		__NVIC_DisableIRQ(TIM3_IRQn);
 8001c6a:	201d      	movs	r0, #29
 8001c6c:	f7ff ff28 	bl	8001ac0 <__NVIC_DisableIRQ>
 8001c70:	e010      	b.n	8001c94 <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM4){
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a0c      	ldr	r2, [pc, #48]	; (8001ca8 <Timer_Config+0x14c>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d103      	bne.n	8001c84 <Timer_Config+0x128>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM4_IRQn);
 8001c7c:	201e      	movs	r0, #30
 8001c7e:	f7ff ff01 	bl	8001a84 <__NVIC_EnableIRQ>
 8001c82:	e007      	b.n	8001c94 <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM5){
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a08      	ldr	r2, [pc, #32]	; (8001cac <Timer_Config+0x150>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d102      	bne.n	8001c94 <Timer_Config+0x138>
		// Activamos la IRQ del TIM5
		__NVIC_EnableIRQ(TIM5_IRQn);
 8001c8e:	2032      	movs	r0, #50	; 0x32
 8001c90:	f7ff fef8 	bl	8001a84 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001c94:	b662      	cpsie	i
}
 8001c96:	bf00      	nop
	}


	/* 8. Activamos de nuevo todas las interrupciones. */
	__enable_irq();
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40000400 	.word	0x40000400
 8001ca8:	40000800 	.word	0x40000800
 8001cac:	40000c00 	.word	0x40000c00

08001cb0 <startTimer>:

void startTimer(TIMER_Handler_t *ptrTimerConfig){
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	ptrTimerConfig -> ptrTIMx -> DIER |= TIM_DIER_UIE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0201 	orr.w	r2, r2, #1
 8001cc6:	60da      	str	r2, [r3, #12]


	__NVIC_EnableIRQ(TIM3_IRQn);
 8001cc8:	201d      	movs	r0, #29
 8001cca:	f7ff fedb 	bl	8001a84 <__NVIC_EnableIRQ>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <stopTimer>:

void stopTimer(TIMER_Handler_t *ptrTimerConfig){
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
	ptrTimerConfig -> ptrTIMx -> DIER &= ~TIM_DIER_UIE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0201 	bic.w	r2, r2, #1
 8001cec:	60da      	str	r2, [r3, #12]
	__NVIC_DisableIRQ(TIM3_IRQn);
 8001cee:	201d      	movs	r0, #29
 8001cf0:	f7ff fee6 	bl	8001ac0 <__NVIC_DisableIRQ>
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <Timer4_Callback>:
__attribute__((weak)) void Timer3_Callback(void){
	__NOP();
}

// Callback Timer4
__attribute__((weak)) void Timer4_Callback(void){
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
	__NOP();
 8001d00:	bf00      	nop
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <Timer5_Callback>:

// Callback Timer5
__attribute__((weak)) void Timer5_Callback(void){
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
	__NOP();
 8001d10:	bf00      	nop
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <TIM2_IRQHandler>:

// Hay que hacer dos cosas: 1) Atender la interrupción. 2) Llamamos al Callback
/* Rutina de atención a la interrupción del TIM2 */

void TIM2_IRQHandler(void){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
	TIM2 -> SR &= ~(TIM_SR_UIF);
 8001d20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d2a:	f023 0301 	bic.w	r3, r3, #1
 8001d2e:	6113      	str	r3, [r2, #16]
	Timer2_Callback();
 8001d30:	f7ff f900 	bl	8000f34 <Timer2_Callback>
}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
	TIM3 -> SR &= ~(TIM_SR_UIF);
 8001d3c:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <TIM3_IRQHandler+0x18>)
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	4a03      	ldr	r2, [pc, #12]	; (8001d50 <TIM3_IRQHandler+0x18>)
 8001d42:	f023 0301 	bic.w	r3, r3, #1
 8001d46:	6113      	str	r3, [r2, #16]
	Timer3_Callback();
 8001d48:	f7ff f906 	bl	8000f58 <Timer3_Callback>
}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40000400 	.word	0x40000400

08001d54 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
	TIM4 -> SR &= ~(TIM_SR_UIF);
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <TIM4_IRQHandler+0x18>)
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	4a03      	ldr	r2, [pc, #12]	; (8001d6c <TIM4_IRQHandler+0x18>)
 8001d5e:	f023 0301 	bic.w	r3, r3, #1
 8001d62:	6113      	str	r3, [r2, #16]
	Timer4_Callback();
 8001d64:	f7ff ffca 	bl	8001cfc <Timer4_Callback>
}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40000800 	.word	0x40000800

08001d70 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
	TIM5 -> SR &= ~(TIM_SR_UIF);
 8001d74:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <TIM5_IRQHandler+0x18>)
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	4a03      	ldr	r2, [pc, #12]	; (8001d88 <TIM5_IRQHandler+0x18>)
 8001d7a:	f023 0301 	bic.w	r3, r3, #1
 8001d7e:	6113      	str	r3, [r2, #16]
	Timer5_Callback();
 8001d80:	f7ff ffc4 	bl	8001d0c <Timer5_Callback>
}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40000c00 	.word	0x40000c00

08001d8c <__NVIC_EnableIRQ>:
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	db0b      	blt.n	8001db6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	f003 021f 	and.w	r2, r3, #31
 8001da4:	4907      	ldr	r1, [pc, #28]	; (8001dc4 <__NVIC_EnableIRQ+0x38>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	2001      	movs	r0, #1
 8001dae:	fa00 f202 	lsl.w	r2, r0, r2
 8001db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000e100 	.word	0xe000e100

08001dc8 <USART_Config>:
 * del periférico que se está utilizando.
 */

uint8_t data;

void USART_Config(USART_Handler_t *ptrUsartHandler){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd0:	b672      	cpsid	i
}
 8001dd2:	bf00      	nop

	/* 1. Activamos la señal de reloj que viene desde el bus al que pertenece el periférico.
	 * Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6)
	 */
	/*1.1 Configuramos el USART1*/
	if(ptrUsartHandler -> ptrUSARTx == USART1){
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a91      	ldr	r2, [pc, #580]	; (8002020 <USART_Config+0x258>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d106      	bne.n	8001dec <USART_Config+0x24>
		// Escribimos 1 (SET) en la posición correspondiente al USART1
		RCC -> APB2ENR |= (RCC_APB2ENR_USART1EN);
 8001dde:	4b91      	ldr	r3, [pc, #580]	; (8002024 <USART_Config+0x25c>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	4a90      	ldr	r2, [pc, #576]	; (8002024 <USART_Config+0x25c>)
 8001de4:	f043 0310 	orr.w	r3, r3, #16
 8001de8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dea:	e016      	b.n	8001e1a <USART_Config+0x52>
	}
	/*1.2 Configuramos el USART2*/
	else if(ptrUsartHandler -> ptrUSARTx == USART2){
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a8d      	ldr	r2, [pc, #564]	; (8002028 <USART_Config+0x260>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d106      	bne.n	8001e04 <USART_Config+0x3c>
		// Escribimos 1 (SET) en la posición correspondiente al USART1
		RCC -> APB1ENR |= (RCC_APB1ENR_USART2EN);
 8001df6:	4b8b      	ldr	r3, [pc, #556]	; (8002024 <USART_Config+0x25c>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	4a8a      	ldr	r2, [pc, #552]	; (8002024 <USART_Config+0x25c>)
 8001dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e00:	6413      	str	r3, [r2, #64]	; 0x40
 8001e02:	e00a      	b.n	8001e1a <USART_Config+0x52>
	}
	/*1.3 Configuramos el USART6*/
	else if(ptrUsartHandler -> ptrUSARTx == USART6){
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a88      	ldr	r2, [pc, #544]	; (800202c <USART_Config+0x264>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d105      	bne.n	8001e1a <USART_Config+0x52>
		// Escribimos 1 (SET) en la posición correspondiente al USART1
		RCC -> APB2ENR |= (RCC_APB2ENR_USART6EN);
 8001e0e:	4b85      	ldr	r3, [pc, #532]	; (8002024 <USART_Config+0x25c>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	4a84      	ldr	r2, [pc, #528]	; (8002024 <USART_Config+0x25c>)
 8001e14:	f043 0320 	orr.w	r3, r3, #32
 8001e18:	6453      	str	r3, [r2, #68]	; 0x44
	 * Configuramos el modo: only TX, only RX, o RXTX
	 * Por último activamos el modulo USART cuando todo está correctamente configurado
	 * */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero.
	ptrUsartHandler -> ptrUSARTx -> CR1 = 0;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
	ptrUsartHandler -> ptrUSARTx -> CR2 = 0;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]

	// 2.2 Configuración del Parity:
	// Verificamos si el parity está activado o no
	if(ptrUsartHandler -> USART_Config.USART_parity != USART_PARITY_NONE){
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	79db      	ldrb	r3, [r3, #7]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d02b      	beq.n	8001e8a <USART_Config+0xc2>

		// Verificamos si se ha seleccionado ODD or EVEN

		//Se selecciona EVEN
		if(ptrUsartHandler -> USART_Config.USART_parity == USART_PARITY_EVEN){
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	79db      	ldrb	r3, [r3, #7]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d113      	bne.n	8001e62 <USART_Config+0x9a>
			//Ponemos 0b0 en la posicion 9 del registo CR1 para escoger Even
			ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_PS);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e48:	60da      	str	r2, [r3, #12]

			// Además, se seleccionan 9 bits.
			ptrUsartHandler -> USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	719a      	strb	r2, [r3, #6]
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e5e:	60da      	str	r2, [r3, #12]
 8001e60:	e01b      	b.n	8001e9a <USART_Config+0xd2>
		}
		//Se selecciona ODD
		else{
			//Ponemos 0b1 en la posicion 9 del registo CR1 para escoger Even
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_PS);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e70:	60da      	str	r2, [r3, #12]

			// Además, se seleccionan 9 bits.
			ptrUsartHandler -> USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	719a      	strb	r2, [r3, #6]
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e86:	60da      	str	r2, [r3, #12]
 8001e88:	e007      	b.n	8001e9a <USART_Config+0xd2>
		}
	}
	//No deseamos activar el parity-check
	else{
		//Ponemos 0b0 en la posicion 10 del registro CR1 para desactivar el Parity
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_PCE);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e98:	60da      	str	r2, [r3, #12]

	// 2.3 Configuramos el tamaño del dato:

	//Verificamos si va a ser de 8 o 9 bits

	if(ptrUsartHandler -> USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	799b      	ldrb	r3, [r3, #6]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d108      	bne.n	8001eb4 <USART_Config+0xec>
		//Ponemos 0b0 en la posicion 12 del registro CR1 para escoger 8 bits
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_M);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	e007      	b.n	8001ec4 <USART_Config+0xfc>
	}else{
		//Ponemos 0b1 en la posicion 12 del registro CR1 para escoger 9 bits
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ec2:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)

	switch(ptrUsartHandler -> USART_Config.USART_stopbits){
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	7a1b      	ldrb	r3, [r3, #8]
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	d847      	bhi.n	8001f5c <USART_Config+0x194>
 8001ecc:	a201      	add	r2, pc, #4	; (adr r2, 8001ed4 <USART_Config+0x10c>)
 8001ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed2:	bf00      	nop
 8001ed4:	08001ee5 	.word	0x08001ee5
 8001ed8:	08001ef7 	.word	0x08001ef7
 8001edc:	08001f19 	.word	0x08001f19
 8001ee0:	08001f3b 	.word	0x08001f3b
	case USART_STOPBIT_1: {
		//Cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001ef2:	611a      	str	r2, [r3, #16]
		break;
 8001ef4:	e03b      	b.n	8001f6e <USART_Config+0x1a6>
	}
	case USART_STOPBIT_0_5:{
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	691a      	ldr	r2, [r3, #16]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001f04:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b01 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP_0);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f14:	611a      	str	r2, [r3, #16]
		break;
 8001f16:	e02a      	b.n	8001f6e <USART_Config+0x1a6>
	}
	case USART_STOPBIT_2:{
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001f26:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b10 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP_1);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691a      	ldr	r2, [r3, #16]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f36:	611a      	str	r2, [r3, #16]
		break;
 8001f38:	e019      	b.n	8001f6e <USART_Config+0x1a6>
	}
	case USART_STOPBIT_1_5: {
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001f48:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b11 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001f58:	611a      	str	r2, [r3, #16]
		break;
 8001f5a:	e008      	b.n	8001f6e <USART_Config+0x1a6>
	}
	default:{
		//Cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691a      	ldr	r2, [r3, #16]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001f6a:	611a      	str	r2, [r3, #16]
		break;
 8001f6c:	bf00      	nop
	}
	}

	// 2.4 Configuración del Baudrate (SFR USART_BRR)
	// Ver tabla de valores (Tabla 75), Frec = 16MHz, overr = 0;
	if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	795b      	ldrb	r3, [r3, #5]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d105      	bne.n	8001f82 <USART_Config+0x1ba>
		// El valor a cargar es 104.1875 -> Mantiza = 104, fraction = 0.1875
		// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
		// Valor a cargar 0x683
		// Configurando el Baudrate generator para una velocidad de 9600bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0683;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f240 6283 	movw	r2, #1667	; 0x683
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	e01b      	b.n	8001fba <USART_Config+0x1f2>
	}

	else if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_19200){
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	795b      	ldrb	r3, [r3, #5]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d105      	bne.n	8001f96 <USART_Config+0x1ce>
		// El valor a cargar es 52.0625 -> Mantiza = 52, fraction = 0.0625
		// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
		// Valor a cargar 0x0341
		// Configurando el Baudrate generator para una velocidad de 19200bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0341;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f240 3241 	movw	r2, #833	; 0x341
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	e011      	b.n	8001fba <USART_Config+0x1f2>
	}

	else if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_115200){	//**************************************DUDAAAAAA
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	795b      	ldrb	r3, [r3, #5]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d104      	bne.n	8001fa8 <USART_Config+0x1e0>
		// El valor a cargar es 8.6875 -> Mantiza = 8, fraction = 0.6875
		// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11 = 0xB
		// Valor a cargar 0x008B
		// Configurando el Baudrate generator para una velocidad de 115200bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x08B;//0x0081;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	228b      	movs	r2, #139	; 0x8b
 8001fa4:	609a      	str	r2, [r3, #8]
 8001fa6:	e008      	b.n	8001fba <USART_Config+0x1f2>
	}

	else if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_38400){	//**************************************DUDAAAAAA
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	795b      	ldrb	r3, [r3, #5]
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d104      	bne.n	8001fba <USART_Config+0x1f2>
		// El valor a cargar es 26.0625 -> Mantiza = 26, fraction = 0.0625
		// Mantiza = 26 = 0x1A, fraction = 16 * 0.0625 = 1
		// Valor a cargar 0x1A1
		// Configurando el Baudrate generator para una velocidad de 38400bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x1A1;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f240 12a1 	movw	r2, #417	; 0x1a1
 8001fb8:	609a      	str	r2, [r3, #8]
	}

	// 2.5 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler -> USART_Config.USART_mode){
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	791b      	ldrb	r3, [r3, #4]
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d847      	bhi.n	8002052 <USART_Config+0x28a>
 8001fc2:	a201      	add	r2, pc, #4	; (adr r2, 8001fc8 <USART_Config+0x200>)
 8001fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc8:	08001fd9 	.word	0x08001fd9
 8001fcc:	08001feb 	.word	0x08001feb
 8001fd0:	08001ffd 	.word	0x08001ffd
 8001fd4:	08002031 	.word	0x08002031
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		//Cargamos el valor 0b1 en el bit TE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TE);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0208 	orr.w	r2, r2, #8
 8001fe6:	60da      	str	r2, [r3, #12]
		break;
 8001fe8:	e044      	b.n	8002074 <USART_Config+0x2ac>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		//Cargamos el valor 0b1 en el bit RE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RE);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0204 	orr.w	r2, r2, #4
 8001ff8:	60da      	str	r2, [r3, #12]
		break;
 8001ffa:	e03b      	b.n	8002074 <USART_Config+0x2ac>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmisión como recepción
		//Cargamos el valor 0b1 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TE);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0208 	orr.w	r2, r2, #8
 800200a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0204 	orr.w	r2, r2, #4
 800201a:	60da      	str	r2, [r3, #12]
		break;
 800201c:	e02a      	b.n	8002074 <USART_Config+0x2ac>
 800201e:	bf00      	nop
 8002020:	40011000 	.word	0x40011000
 8002024:	40023800 	.word	0x40023800
 8002028:	40004400 	.word	0x40004400
 800202c:	40011400 	.word	0x40011400
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		//Cargamos el valor 0b0 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0208 	bic.w	r2, r2, #8
 800203e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0204 	bic.w	r2, r2, #4
 800204e:	60da      	str	r2, [r3, #12]
		break;
 8002050:	e010      	b.n	8002074 <USART_Config+0x2ac>
	}
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		//Cargamos el valor 0b0 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0208 	bic.w	r2, r2, #8
 8002060:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0204 	bic.w	r2, r2, #4
 8002070:	60da      	str	r2, [r3, #12]
		break;
 8002072:	bf00      	nop
	}
	}

	// 2.6 Activamos el modulo serial.

	if(ptrUsartHandler -> USART_Config.USART_mode != USART_MODE_DISABLE){
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	791b      	ldrb	r3, [r3, #4]
 8002078:	2b03      	cmp	r3, #3
 800207a:	d007      	beq.n	800208c <USART_Config+0x2c4>
		//Cargamos el valor de 0b1 en el bit UE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_UE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800208a:	60da      	str	r2, [r3, #12]
	}

	// 3. Activamos la interrupción para el USART

	switch(ptrUsartHandler -> USART_Config.USART_interrupt){
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	7a5b      	ldrb	r3, [r3, #9]
 8002090:	2b03      	cmp	r3, #3
 8002092:	d84f      	bhi.n	8002134 <USART_Config+0x36c>
 8002094:	a201      	add	r2, pc, #4	; (adr r2, 800209c <USART_Config+0x2d4>)
 8002096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209a:	bf00      	nop
 800209c:	080020ad 	.word	0x080020ad
 80020a0:	080020cf 	.word	0x080020cf
 80020a4:	080020f1 	.word	0x080020f1
 80020a8:	08002113 	.word	0x08002113
	// Analizamos los
	case USART_INTERRUPT_RX_ENABLE:
	{
		// Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RXNEIE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0220 	orr.w	r2, r2, #32
 80020ba:	60da      	str	r2, [r3, #12]
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020ca:	60da      	str	r2, [r3, #12]
		break;
 80020cc:	e043      	b.n	8002156 <USART_Config+0x38e>
	}
	case USART_INTERRUPT_TX_ENABLE:
	{
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020dc:	60da      	str	r2, [r3, #12]
		// NO Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RXNEIE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0220 	bic.w	r2, r2, #32
 80020ec:	60da      	str	r2, [r3, #12]
		break;
 80020ee:	e032      	b.n	8002156 <USART_Config+0x38e>

	}
	case USART_INTERRUPT_RXTX_ENABLE:
	{
		// Activamos las dos interrupciones tanto del RX como del TX
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TXEIE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020fe:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800210e:	60da      	str	r2, [r3, #12]
		break;
 8002110:	e021      	b.n	8002156 <USART_Config+0x38e>
	}
	case USART_INTERRUPT_RXTX_DISABLE:
	{
		// Activamos las dos interrupciones tanto del RX como del TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002120:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002130:	60da      	str	r2, [r3, #12]
		break;
 8002132:	e010      	b.n	8002156 <USART_Config+0x38e>
	}

	default:
	{
		// NO Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RXNEIE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0220 	bic.w	r2, r2, #32
 8002142:	60da      	str	r2, [r3, #12]
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002152:	60da      	str	r2, [r3, #12]
		break;
 8002154:	bf00      	nop
	}
	}

	// 4. Activamos la señal de la interrupción en el NVIC

	if((ptrUsartHandler -> USART_Config.USART_interrupt == USART_INTERRUPT_RX_ENABLE) | (ptrUsartHandler -> USART_Config.USART_interrupt == USART_INTERRUPT_TX_ENABLE))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	7a5b      	ldrb	r3, [r3, #9]
 800215a:	2b00      	cmp	r3, #0
 800215c:	bf0c      	ite	eq
 800215e:	2301      	moveq	r3, #1
 8002160:	2300      	movne	r3, #0
 8002162:	b2da      	uxtb	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	7a5b      	ldrb	r3, [r3, #9]
 8002168:	2b01      	cmp	r3, #1
 800216a:	bf0c      	ite	eq
 800216c:	2301      	moveq	r3, #1
 800216e:	2300      	movne	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	4313      	orrs	r3, r2
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d019      	beq.n	80021ae <USART_Config+0x3e6>
	{

		if(ptrUsartHandler -> ptrUSARTx == USART1){
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a0f      	ldr	r2, [pc, #60]	; (80021bc <USART_Config+0x3f4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d103      	bne.n	800218c <USART_Config+0x3c4>
			// Activamos la IRQ del USART1
			__NVIC_EnableIRQ(USART1_IRQn);
 8002184:	2025      	movs	r0, #37	; 0x25
 8002186:	f7ff fe01 	bl	8001d8c <__NVIC_EnableIRQ>
 800218a:	e010      	b.n	80021ae <USART_Config+0x3e6>

		}else if(ptrUsartHandler -> ptrUSARTx == USART2){
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0b      	ldr	r2, [pc, #44]	; (80021c0 <USART_Config+0x3f8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d103      	bne.n	800219e <USART_Config+0x3d6>
			// Activamos la IRQ del USART2
			__NVIC_EnableIRQ(USART2_IRQn);
 8002196:	2026      	movs	r0, #38	; 0x26
 8002198:	f7ff fdf8 	bl	8001d8c <__NVIC_EnableIRQ>
 800219c:	e007      	b.n	80021ae <USART_Config+0x3e6>

		}else if(ptrUsartHandler -> ptrUSARTx == USART6){
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a08      	ldr	r2, [pc, #32]	; (80021c4 <USART_Config+0x3fc>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d102      	bne.n	80021ae <USART_Config+0x3e6>
			// Activamos la IRQ del USART6
			__NVIC_EnableIRQ(USART6_IRQn);
 80021a8:	2047      	movs	r0, #71	; 0x47
 80021aa:	f7ff fdef 	bl	8001d8c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80021ae:	b662      	cpsie	i
}
 80021b0:	bf00      	nop
		}

	// 5. Activamos de nuevo todas las interrupciones

	__enable_irq();
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40011000 	.word	0x40011000
 80021c0:	40004400 	.word	0x40004400
 80021c4:	40011400 	.word	0x40011400

080021c8 <USART1_Callback>:

//**********//  CallBacks //**********//

// Callback USART1
__attribute__((weak)) void USART1_Callback(void){
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
	__NOP();
 80021cc:	bf00      	nop
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <USART6_Callback>:
__attribute__((weak)) void USART2_Callback(void){
	__NOP();
}

// Callback USART6
__attribute__((weak)) void USART6_Callback(void){
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
	__NOP();
 80021dc:	bf00      	nop
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <USART1_IRQHandler>:

// Hay que hacer dos cosas: 1) Atender la interrupción. 2) Llamamos al Callback
/* Rutina de atención a la interrupción del USART */

void USART1_IRQHandler(void){
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0

	USART1 -> SR &= ~(USART_SR_RXNE);		// Bajamos la bandera manualmente
 80021ec:	4b07      	ldr	r3, [pc, #28]	; (800220c <USART1_IRQHandler+0x24>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a06      	ldr	r2, [pc, #24]	; (800220c <USART1_IRQHandler+0x24>)
 80021f2:	f023 0320 	bic.w	r3, r3, #32
 80021f6:	6013      	str	r3, [r2, #0]

	data = (USART1 -> DR);
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <USART1_IRQHandler+0x24>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	4b04      	ldr	r3, [pc, #16]	; (8002210 <USART1_IRQHandler+0x28>)
 8002200:	701a      	strb	r2, [r3, #0]

	USART1_Callback();
 8002202:	f7ff ffe1 	bl	80021c8 <USART1_Callback>
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40011000 	.word	0x40011000
 8002210:	20000322 	.word	0x20000322

08002214 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
	USART2 -> SR &= ~(USART_SR_RXNE);		// Desactivamos la bandera manualmente para el RX
 8002218:	4b07      	ldr	r3, [pc, #28]	; (8002238 <USART2_IRQHandler+0x24>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a06      	ldr	r2, [pc, #24]	; (8002238 <USART2_IRQHandler+0x24>)
 800221e:	f023 0320 	bic.w	r3, r3, #32
 8002222:	6013      	str	r3, [r2, #0]

	data = (USART2 -> DR);
 8002224:	4b04      	ldr	r3, [pc, #16]	; (8002238 <USART2_IRQHandler+0x24>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	b2da      	uxtb	r2, r3
 800222a:	4b04      	ldr	r3, [pc, #16]	; (800223c <USART2_IRQHandler+0x28>)
 800222c:	701a      	strb	r2, [r3, #0]

	USART2_Callback();
 800222e:	f7fe fe99 	bl	8000f64 <USART2_Callback>

	//USART2 -> SR &= ~(USART_SR_TXE);		// Desactivamos la bandera para el TX
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40004400 	.word	0x40004400
 800223c:	20000322 	.word	0x20000322

08002240 <USART6_IRQHandler>:

void USART6_IRQHandler(void){
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
	USART6 -> SR &= ~(USART_SR_RXNE);
 8002244:	4b07      	ldr	r3, [pc, #28]	; (8002264 <USART6_IRQHandler+0x24>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a06      	ldr	r2, [pc, #24]	; (8002264 <USART6_IRQHandler+0x24>)
 800224a:	f023 0320 	bic.w	r3, r3, #32
 800224e:	6013      	str	r3, [r2, #0]

	data = (USART6 -> DR);
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <USART6_IRQHandler+0x24>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4b04      	ldr	r3, [pc, #16]	; (8002268 <USART6_IRQHandler+0x28>)
 8002258:	701a      	strb	r2, [r3, #0]

	USART6_Callback();
 800225a:	f7ff ffbd 	bl	80021d8 <USART6_Callback>
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40011400 	.word	0x40011400
 8002268:	20000322 	.word	0x20000322

0800226c <returnData>:
	dataToRead = ((char) (ptrUsartHandler -> ptrUSARTx -> DR));
	return dataToRead;

}

uint8_t returnData(void){
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
	return data;				// Devolvemos el valor
 8002270:	4b03      	ldr	r3, [pc, #12]	; (8002280 <returnData+0x14>)
 8002272:	781b      	ldrb	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20000322 	.word	0x20000322

08002284 <writeChar>:

//**********// Función para escribir un solo char //**********//

int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend){
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
	while(!(ptrUsartHandler -> ptrUSARTx -> SR & USART_SR_TXE)){
 800228e:	e000      	b.n	8002292 <writeChar+0xe>
		__NOP();
 8002290:	bf00      	nop
	while(!(ptrUsartHandler -> ptrUSARTx -> SR & USART_SR_TXE)){
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f7      	beq.n	8002290 <writeChar+0xc>
	// Permitimos la bandera del TX para el USART2
	//ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TXEIE);
	//USART2 -> SR |= (USART_SR_TXE);

	//Cargamos el valor de dataToSend en el USER DATA Register
	ptrUsartHandler -> ptrUSARTx -> DR = (dataToSend);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	605a      	str	r2, [r3, #4]

	//ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
	//USART2 -> SR &= ~(USART_SR_TXE);		// Desactivamos la bandera para el TX
	return dataToSend;
 80022a8:	683b      	ldr	r3, [r7, #0]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <writeMsg>:

/* Función para escribir un mensaje */

void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	6039      	str	r1, [r7, #0]
	while(*msgToSend != '\0'){
 80022c0:	e008      	b.n	80022d4 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	4619      	mov	r1, r3
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff ffdb 	bl	8002284 <writeChar>
		msgToSend++;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	3301      	adds	r3, #1
 80022d2:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f2      	bne.n	80022c2 <writeMsg+0xc>
	}
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <__errno>:
 80022e8:	4b01      	ldr	r3, [pc, #4]	; (80022f0 <__errno+0x8>)
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	20000000 	.word	0x20000000

080022f4 <__libc_init_array>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	4d0d      	ldr	r5, [pc, #52]	; (800232c <__libc_init_array+0x38>)
 80022f8:	4c0d      	ldr	r4, [pc, #52]	; (8002330 <__libc_init_array+0x3c>)
 80022fa:	1b64      	subs	r4, r4, r5
 80022fc:	10a4      	asrs	r4, r4, #2
 80022fe:	2600      	movs	r6, #0
 8002300:	42a6      	cmp	r6, r4
 8002302:	d109      	bne.n	8002318 <__libc_init_array+0x24>
 8002304:	4d0b      	ldr	r5, [pc, #44]	; (8002334 <__libc_init_array+0x40>)
 8002306:	4c0c      	ldr	r4, [pc, #48]	; (8002338 <__libc_init_array+0x44>)
 8002308:	f004 fc92 	bl	8006c30 <_init>
 800230c:	1b64      	subs	r4, r4, r5
 800230e:	10a4      	asrs	r4, r4, #2
 8002310:	2600      	movs	r6, #0
 8002312:	42a6      	cmp	r6, r4
 8002314:	d105      	bne.n	8002322 <__libc_init_array+0x2e>
 8002316:	bd70      	pop	{r4, r5, r6, pc}
 8002318:	f855 3b04 	ldr.w	r3, [r5], #4
 800231c:	4798      	blx	r3
 800231e:	3601      	adds	r6, #1
 8002320:	e7ee      	b.n	8002300 <__libc_init_array+0xc>
 8002322:	f855 3b04 	ldr.w	r3, [r5], #4
 8002326:	4798      	blx	r3
 8002328:	3601      	adds	r6, #1
 800232a:	e7f2      	b.n	8002312 <__libc_init_array+0x1e>
 800232c:	080070fc 	.word	0x080070fc
 8002330:	080070fc 	.word	0x080070fc
 8002334:	080070fc 	.word	0x080070fc
 8002338:	08007100 	.word	0x08007100

0800233c <memset>:
 800233c:	4402      	add	r2, r0
 800233e:	4603      	mov	r3, r0
 8002340:	4293      	cmp	r3, r2
 8002342:	d100      	bne.n	8002346 <memset+0xa>
 8002344:	4770      	bx	lr
 8002346:	f803 1b01 	strb.w	r1, [r3], #1
 800234a:	e7f9      	b.n	8002340 <memset+0x4>

0800234c <__cvt>:
 800234c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002350:	ec55 4b10 	vmov	r4, r5, d0
 8002354:	2d00      	cmp	r5, #0
 8002356:	460e      	mov	r6, r1
 8002358:	4619      	mov	r1, r3
 800235a:	462b      	mov	r3, r5
 800235c:	bfbb      	ittet	lt
 800235e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002362:	461d      	movlt	r5, r3
 8002364:	2300      	movge	r3, #0
 8002366:	232d      	movlt	r3, #45	; 0x2d
 8002368:	700b      	strb	r3, [r1, #0]
 800236a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800236c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002370:	4691      	mov	r9, r2
 8002372:	f023 0820 	bic.w	r8, r3, #32
 8002376:	bfbc      	itt	lt
 8002378:	4622      	movlt	r2, r4
 800237a:	4614      	movlt	r4, r2
 800237c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002380:	d005      	beq.n	800238e <__cvt+0x42>
 8002382:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002386:	d100      	bne.n	800238a <__cvt+0x3e>
 8002388:	3601      	adds	r6, #1
 800238a:	2102      	movs	r1, #2
 800238c:	e000      	b.n	8002390 <__cvt+0x44>
 800238e:	2103      	movs	r1, #3
 8002390:	ab03      	add	r3, sp, #12
 8002392:	9301      	str	r3, [sp, #4]
 8002394:	ab02      	add	r3, sp, #8
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	ec45 4b10 	vmov	d0, r4, r5
 800239c:	4653      	mov	r3, sl
 800239e:	4632      	mov	r2, r6
 80023a0:	f001 fdae 	bl	8003f00 <_dtoa_r>
 80023a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80023a8:	4607      	mov	r7, r0
 80023aa:	d102      	bne.n	80023b2 <__cvt+0x66>
 80023ac:	f019 0f01 	tst.w	r9, #1
 80023b0:	d022      	beq.n	80023f8 <__cvt+0xac>
 80023b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80023b6:	eb07 0906 	add.w	r9, r7, r6
 80023ba:	d110      	bne.n	80023de <__cvt+0x92>
 80023bc:	783b      	ldrb	r3, [r7, #0]
 80023be:	2b30      	cmp	r3, #48	; 0x30
 80023c0:	d10a      	bne.n	80023d8 <__cvt+0x8c>
 80023c2:	2200      	movs	r2, #0
 80023c4:	2300      	movs	r3, #0
 80023c6:	4620      	mov	r0, r4
 80023c8:	4629      	mov	r1, r5
 80023ca:	f7fe fb85 	bl	8000ad8 <__aeabi_dcmpeq>
 80023ce:	b918      	cbnz	r0, 80023d8 <__cvt+0x8c>
 80023d0:	f1c6 0601 	rsb	r6, r6, #1
 80023d4:	f8ca 6000 	str.w	r6, [sl]
 80023d8:	f8da 3000 	ldr.w	r3, [sl]
 80023dc:	4499      	add	r9, r3
 80023de:	2200      	movs	r2, #0
 80023e0:	2300      	movs	r3, #0
 80023e2:	4620      	mov	r0, r4
 80023e4:	4629      	mov	r1, r5
 80023e6:	f7fe fb77 	bl	8000ad8 <__aeabi_dcmpeq>
 80023ea:	b108      	cbz	r0, 80023f0 <__cvt+0xa4>
 80023ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80023f0:	2230      	movs	r2, #48	; 0x30
 80023f2:	9b03      	ldr	r3, [sp, #12]
 80023f4:	454b      	cmp	r3, r9
 80023f6:	d307      	bcc.n	8002408 <__cvt+0xbc>
 80023f8:	9b03      	ldr	r3, [sp, #12]
 80023fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80023fc:	1bdb      	subs	r3, r3, r7
 80023fe:	4638      	mov	r0, r7
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	b004      	add	sp, #16
 8002404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002408:	1c59      	adds	r1, r3, #1
 800240a:	9103      	str	r1, [sp, #12]
 800240c:	701a      	strb	r2, [r3, #0]
 800240e:	e7f0      	b.n	80023f2 <__cvt+0xa6>

08002410 <__exponent>:
 8002410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002412:	4603      	mov	r3, r0
 8002414:	2900      	cmp	r1, #0
 8002416:	bfb8      	it	lt
 8002418:	4249      	neglt	r1, r1
 800241a:	f803 2b02 	strb.w	r2, [r3], #2
 800241e:	bfb4      	ite	lt
 8002420:	222d      	movlt	r2, #45	; 0x2d
 8002422:	222b      	movge	r2, #43	; 0x2b
 8002424:	2909      	cmp	r1, #9
 8002426:	7042      	strb	r2, [r0, #1]
 8002428:	dd2a      	ble.n	8002480 <__exponent+0x70>
 800242a:	f10d 0407 	add.w	r4, sp, #7
 800242e:	46a4      	mov	ip, r4
 8002430:	270a      	movs	r7, #10
 8002432:	46a6      	mov	lr, r4
 8002434:	460a      	mov	r2, r1
 8002436:	fb91 f6f7 	sdiv	r6, r1, r7
 800243a:	fb07 1516 	mls	r5, r7, r6, r1
 800243e:	3530      	adds	r5, #48	; 0x30
 8002440:	2a63      	cmp	r2, #99	; 0x63
 8002442:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8002446:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800244a:	4631      	mov	r1, r6
 800244c:	dcf1      	bgt.n	8002432 <__exponent+0x22>
 800244e:	3130      	adds	r1, #48	; 0x30
 8002450:	f1ae 0502 	sub.w	r5, lr, #2
 8002454:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002458:	1c44      	adds	r4, r0, #1
 800245a:	4629      	mov	r1, r5
 800245c:	4561      	cmp	r1, ip
 800245e:	d30a      	bcc.n	8002476 <__exponent+0x66>
 8002460:	f10d 0209 	add.w	r2, sp, #9
 8002464:	eba2 020e 	sub.w	r2, r2, lr
 8002468:	4565      	cmp	r5, ip
 800246a:	bf88      	it	hi
 800246c:	2200      	movhi	r2, #0
 800246e:	4413      	add	r3, r2
 8002470:	1a18      	subs	r0, r3, r0
 8002472:	b003      	add	sp, #12
 8002474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002476:	f811 2b01 	ldrb.w	r2, [r1], #1
 800247a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800247e:	e7ed      	b.n	800245c <__exponent+0x4c>
 8002480:	2330      	movs	r3, #48	; 0x30
 8002482:	3130      	adds	r1, #48	; 0x30
 8002484:	7083      	strb	r3, [r0, #2]
 8002486:	70c1      	strb	r1, [r0, #3]
 8002488:	1d03      	adds	r3, r0, #4
 800248a:	e7f1      	b.n	8002470 <__exponent+0x60>

0800248c <_printf_float>:
 800248c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002490:	ed2d 8b02 	vpush	{d8}
 8002494:	b08d      	sub	sp, #52	; 0x34
 8002496:	460c      	mov	r4, r1
 8002498:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800249c:	4616      	mov	r6, r2
 800249e:	461f      	mov	r7, r3
 80024a0:	4605      	mov	r5, r0
 80024a2:	f002 fe8b 	bl	80051bc <_localeconv_r>
 80024a6:	f8d0 a000 	ldr.w	sl, [r0]
 80024aa:	4650      	mov	r0, sl
 80024ac:	f7fd fe98 	bl	80001e0 <strlen>
 80024b0:	2300      	movs	r3, #0
 80024b2:	930a      	str	r3, [sp, #40]	; 0x28
 80024b4:	6823      	ldr	r3, [r4, #0]
 80024b6:	9305      	str	r3, [sp, #20]
 80024b8:	f8d8 3000 	ldr.w	r3, [r8]
 80024bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80024c0:	3307      	adds	r3, #7
 80024c2:	f023 0307 	bic.w	r3, r3, #7
 80024c6:	f103 0208 	add.w	r2, r3, #8
 80024ca:	f8c8 2000 	str.w	r2, [r8]
 80024ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80024d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80024da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80024de:	9307      	str	r3, [sp, #28]
 80024e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80024e4:	ee08 0a10 	vmov	s16, r0
 80024e8:	4b9f      	ldr	r3, [pc, #636]	; (8002768 <_printf_float+0x2dc>)
 80024ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80024ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024f2:	f7fe fb23 	bl	8000b3c <__aeabi_dcmpun>
 80024f6:	bb88      	cbnz	r0, 800255c <_printf_float+0xd0>
 80024f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80024fc:	4b9a      	ldr	r3, [pc, #616]	; (8002768 <_printf_float+0x2dc>)
 80024fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002502:	f7fe fafd 	bl	8000b00 <__aeabi_dcmple>
 8002506:	bb48      	cbnz	r0, 800255c <_printf_float+0xd0>
 8002508:	2200      	movs	r2, #0
 800250a:	2300      	movs	r3, #0
 800250c:	4640      	mov	r0, r8
 800250e:	4649      	mov	r1, r9
 8002510:	f7fe faec 	bl	8000aec <__aeabi_dcmplt>
 8002514:	b110      	cbz	r0, 800251c <_printf_float+0x90>
 8002516:	232d      	movs	r3, #45	; 0x2d
 8002518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800251c:	4b93      	ldr	r3, [pc, #588]	; (800276c <_printf_float+0x2e0>)
 800251e:	4894      	ldr	r0, [pc, #592]	; (8002770 <_printf_float+0x2e4>)
 8002520:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002524:	bf94      	ite	ls
 8002526:	4698      	movls	r8, r3
 8002528:	4680      	movhi	r8, r0
 800252a:	2303      	movs	r3, #3
 800252c:	6123      	str	r3, [r4, #16]
 800252e:	9b05      	ldr	r3, [sp, #20]
 8002530:	f023 0204 	bic.w	r2, r3, #4
 8002534:	6022      	str	r2, [r4, #0]
 8002536:	f04f 0900 	mov.w	r9, #0
 800253a:	9700      	str	r7, [sp, #0]
 800253c:	4633      	mov	r3, r6
 800253e:	aa0b      	add	r2, sp, #44	; 0x2c
 8002540:	4621      	mov	r1, r4
 8002542:	4628      	mov	r0, r5
 8002544:	f000 f9d8 	bl	80028f8 <_printf_common>
 8002548:	3001      	adds	r0, #1
 800254a:	f040 8090 	bne.w	800266e <_printf_float+0x1e2>
 800254e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002552:	b00d      	add	sp, #52	; 0x34
 8002554:	ecbd 8b02 	vpop	{d8}
 8002558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800255c:	4642      	mov	r2, r8
 800255e:	464b      	mov	r3, r9
 8002560:	4640      	mov	r0, r8
 8002562:	4649      	mov	r1, r9
 8002564:	f7fe faea 	bl	8000b3c <__aeabi_dcmpun>
 8002568:	b140      	cbz	r0, 800257c <_printf_float+0xf0>
 800256a:	464b      	mov	r3, r9
 800256c:	2b00      	cmp	r3, #0
 800256e:	bfbc      	itt	lt
 8002570:	232d      	movlt	r3, #45	; 0x2d
 8002572:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002576:	487f      	ldr	r0, [pc, #508]	; (8002774 <_printf_float+0x2e8>)
 8002578:	4b7f      	ldr	r3, [pc, #508]	; (8002778 <_printf_float+0x2ec>)
 800257a:	e7d1      	b.n	8002520 <_printf_float+0x94>
 800257c:	6863      	ldr	r3, [r4, #4]
 800257e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002582:	9206      	str	r2, [sp, #24]
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	d13f      	bne.n	8002608 <_printf_float+0x17c>
 8002588:	2306      	movs	r3, #6
 800258a:	6063      	str	r3, [r4, #4]
 800258c:	9b05      	ldr	r3, [sp, #20]
 800258e:	6861      	ldr	r1, [r4, #4]
 8002590:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002594:	2300      	movs	r3, #0
 8002596:	9303      	str	r3, [sp, #12]
 8002598:	ab0a      	add	r3, sp, #40	; 0x28
 800259a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800259e:	ab09      	add	r3, sp, #36	; 0x24
 80025a0:	ec49 8b10 	vmov	d0, r8, r9
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	6022      	str	r2, [r4, #0]
 80025a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80025ac:	4628      	mov	r0, r5
 80025ae:	f7ff fecd 	bl	800234c <__cvt>
 80025b2:	9b06      	ldr	r3, [sp, #24]
 80025b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80025b6:	2b47      	cmp	r3, #71	; 0x47
 80025b8:	4680      	mov	r8, r0
 80025ba:	d108      	bne.n	80025ce <_printf_float+0x142>
 80025bc:	1cc8      	adds	r0, r1, #3
 80025be:	db02      	blt.n	80025c6 <_printf_float+0x13a>
 80025c0:	6863      	ldr	r3, [r4, #4]
 80025c2:	4299      	cmp	r1, r3
 80025c4:	dd41      	ble.n	800264a <_printf_float+0x1be>
 80025c6:	f1ab 0b02 	sub.w	fp, fp, #2
 80025ca:	fa5f fb8b 	uxtb.w	fp, fp
 80025ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80025d2:	d820      	bhi.n	8002616 <_printf_float+0x18a>
 80025d4:	3901      	subs	r1, #1
 80025d6:	465a      	mov	r2, fp
 80025d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80025dc:	9109      	str	r1, [sp, #36]	; 0x24
 80025de:	f7ff ff17 	bl	8002410 <__exponent>
 80025e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80025e4:	1813      	adds	r3, r2, r0
 80025e6:	2a01      	cmp	r2, #1
 80025e8:	4681      	mov	r9, r0
 80025ea:	6123      	str	r3, [r4, #16]
 80025ec:	dc02      	bgt.n	80025f4 <_printf_float+0x168>
 80025ee:	6822      	ldr	r2, [r4, #0]
 80025f0:	07d2      	lsls	r2, r2, #31
 80025f2:	d501      	bpl.n	80025f8 <_printf_float+0x16c>
 80025f4:	3301      	adds	r3, #1
 80025f6:	6123      	str	r3, [r4, #16]
 80025f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d09c      	beq.n	800253a <_printf_float+0xae>
 8002600:	232d      	movs	r3, #45	; 0x2d
 8002602:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002606:	e798      	b.n	800253a <_printf_float+0xae>
 8002608:	9a06      	ldr	r2, [sp, #24]
 800260a:	2a47      	cmp	r2, #71	; 0x47
 800260c:	d1be      	bne.n	800258c <_printf_float+0x100>
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1bc      	bne.n	800258c <_printf_float+0x100>
 8002612:	2301      	movs	r3, #1
 8002614:	e7b9      	b.n	800258a <_printf_float+0xfe>
 8002616:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800261a:	d118      	bne.n	800264e <_printf_float+0x1c2>
 800261c:	2900      	cmp	r1, #0
 800261e:	6863      	ldr	r3, [r4, #4]
 8002620:	dd0b      	ble.n	800263a <_printf_float+0x1ae>
 8002622:	6121      	str	r1, [r4, #16]
 8002624:	b913      	cbnz	r3, 800262c <_printf_float+0x1a0>
 8002626:	6822      	ldr	r2, [r4, #0]
 8002628:	07d0      	lsls	r0, r2, #31
 800262a:	d502      	bpl.n	8002632 <_printf_float+0x1a6>
 800262c:	3301      	adds	r3, #1
 800262e:	440b      	add	r3, r1
 8002630:	6123      	str	r3, [r4, #16]
 8002632:	65a1      	str	r1, [r4, #88]	; 0x58
 8002634:	f04f 0900 	mov.w	r9, #0
 8002638:	e7de      	b.n	80025f8 <_printf_float+0x16c>
 800263a:	b913      	cbnz	r3, 8002642 <_printf_float+0x1b6>
 800263c:	6822      	ldr	r2, [r4, #0]
 800263e:	07d2      	lsls	r2, r2, #31
 8002640:	d501      	bpl.n	8002646 <_printf_float+0x1ba>
 8002642:	3302      	adds	r3, #2
 8002644:	e7f4      	b.n	8002630 <_printf_float+0x1a4>
 8002646:	2301      	movs	r3, #1
 8002648:	e7f2      	b.n	8002630 <_printf_float+0x1a4>
 800264a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800264e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002650:	4299      	cmp	r1, r3
 8002652:	db05      	blt.n	8002660 <_printf_float+0x1d4>
 8002654:	6823      	ldr	r3, [r4, #0]
 8002656:	6121      	str	r1, [r4, #16]
 8002658:	07d8      	lsls	r0, r3, #31
 800265a:	d5ea      	bpl.n	8002632 <_printf_float+0x1a6>
 800265c:	1c4b      	adds	r3, r1, #1
 800265e:	e7e7      	b.n	8002630 <_printf_float+0x1a4>
 8002660:	2900      	cmp	r1, #0
 8002662:	bfd4      	ite	le
 8002664:	f1c1 0202 	rsble	r2, r1, #2
 8002668:	2201      	movgt	r2, #1
 800266a:	4413      	add	r3, r2
 800266c:	e7e0      	b.n	8002630 <_printf_float+0x1a4>
 800266e:	6823      	ldr	r3, [r4, #0]
 8002670:	055a      	lsls	r2, r3, #21
 8002672:	d407      	bmi.n	8002684 <_printf_float+0x1f8>
 8002674:	6923      	ldr	r3, [r4, #16]
 8002676:	4642      	mov	r2, r8
 8002678:	4631      	mov	r1, r6
 800267a:	4628      	mov	r0, r5
 800267c:	47b8      	blx	r7
 800267e:	3001      	adds	r0, #1
 8002680:	d12c      	bne.n	80026dc <_printf_float+0x250>
 8002682:	e764      	b.n	800254e <_printf_float+0xc2>
 8002684:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002688:	f240 80e0 	bls.w	800284c <_printf_float+0x3c0>
 800268c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002690:	2200      	movs	r2, #0
 8002692:	2300      	movs	r3, #0
 8002694:	f7fe fa20 	bl	8000ad8 <__aeabi_dcmpeq>
 8002698:	2800      	cmp	r0, #0
 800269a:	d034      	beq.n	8002706 <_printf_float+0x27a>
 800269c:	4a37      	ldr	r2, [pc, #220]	; (800277c <_printf_float+0x2f0>)
 800269e:	2301      	movs	r3, #1
 80026a0:	4631      	mov	r1, r6
 80026a2:	4628      	mov	r0, r5
 80026a4:	47b8      	blx	r7
 80026a6:	3001      	adds	r0, #1
 80026a8:	f43f af51 	beq.w	800254e <_printf_float+0xc2>
 80026ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80026b0:	429a      	cmp	r2, r3
 80026b2:	db02      	blt.n	80026ba <_printf_float+0x22e>
 80026b4:	6823      	ldr	r3, [r4, #0]
 80026b6:	07d8      	lsls	r0, r3, #31
 80026b8:	d510      	bpl.n	80026dc <_printf_float+0x250>
 80026ba:	ee18 3a10 	vmov	r3, s16
 80026be:	4652      	mov	r2, sl
 80026c0:	4631      	mov	r1, r6
 80026c2:	4628      	mov	r0, r5
 80026c4:	47b8      	blx	r7
 80026c6:	3001      	adds	r0, #1
 80026c8:	f43f af41 	beq.w	800254e <_printf_float+0xc2>
 80026cc:	f04f 0800 	mov.w	r8, #0
 80026d0:	f104 091a 	add.w	r9, r4, #26
 80026d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80026d6:	3b01      	subs	r3, #1
 80026d8:	4543      	cmp	r3, r8
 80026da:	dc09      	bgt.n	80026f0 <_printf_float+0x264>
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	079b      	lsls	r3, r3, #30
 80026e0:	f100 8105 	bmi.w	80028ee <_printf_float+0x462>
 80026e4:	68e0      	ldr	r0, [r4, #12]
 80026e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80026e8:	4298      	cmp	r0, r3
 80026ea:	bfb8      	it	lt
 80026ec:	4618      	movlt	r0, r3
 80026ee:	e730      	b.n	8002552 <_printf_float+0xc6>
 80026f0:	2301      	movs	r3, #1
 80026f2:	464a      	mov	r2, r9
 80026f4:	4631      	mov	r1, r6
 80026f6:	4628      	mov	r0, r5
 80026f8:	47b8      	blx	r7
 80026fa:	3001      	adds	r0, #1
 80026fc:	f43f af27 	beq.w	800254e <_printf_float+0xc2>
 8002700:	f108 0801 	add.w	r8, r8, #1
 8002704:	e7e6      	b.n	80026d4 <_printf_float+0x248>
 8002706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002708:	2b00      	cmp	r3, #0
 800270a:	dc39      	bgt.n	8002780 <_printf_float+0x2f4>
 800270c:	4a1b      	ldr	r2, [pc, #108]	; (800277c <_printf_float+0x2f0>)
 800270e:	2301      	movs	r3, #1
 8002710:	4631      	mov	r1, r6
 8002712:	4628      	mov	r0, r5
 8002714:	47b8      	blx	r7
 8002716:	3001      	adds	r0, #1
 8002718:	f43f af19 	beq.w	800254e <_printf_float+0xc2>
 800271c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002720:	4313      	orrs	r3, r2
 8002722:	d102      	bne.n	800272a <_printf_float+0x29e>
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	07d9      	lsls	r1, r3, #31
 8002728:	d5d8      	bpl.n	80026dc <_printf_float+0x250>
 800272a:	ee18 3a10 	vmov	r3, s16
 800272e:	4652      	mov	r2, sl
 8002730:	4631      	mov	r1, r6
 8002732:	4628      	mov	r0, r5
 8002734:	47b8      	blx	r7
 8002736:	3001      	adds	r0, #1
 8002738:	f43f af09 	beq.w	800254e <_printf_float+0xc2>
 800273c:	f04f 0900 	mov.w	r9, #0
 8002740:	f104 0a1a 	add.w	sl, r4, #26
 8002744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002746:	425b      	negs	r3, r3
 8002748:	454b      	cmp	r3, r9
 800274a:	dc01      	bgt.n	8002750 <_printf_float+0x2c4>
 800274c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800274e:	e792      	b.n	8002676 <_printf_float+0x1ea>
 8002750:	2301      	movs	r3, #1
 8002752:	4652      	mov	r2, sl
 8002754:	4631      	mov	r1, r6
 8002756:	4628      	mov	r0, r5
 8002758:	47b8      	blx	r7
 800275a:	3001      	adds	r0, #1
 800275c:	f43f aef7 	beq.w	800254e <_printf_float+0xc2>
 8002760:	f109 0901 	add.w	r9, r9, #1
 8002764:	e7ee      	b.n	8002744 <_printf_float+0x2b8>
 8002766:	bf00      	nop
 8002768:	7fefffff 	.word	0x7fefffff
 800276c:	08006c58 	.word	0x08006c58
 8002770:	08006c5c 	.word	0x08006c5c
 8002774:	08006c64 	.word	0x08006c64
 8002778:	08006c60 	.word	0x08006c60
 800277c:	08006c68 	.word	0x08006c68
 8002780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002782:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002784:	429a      	cmp	r2, r3
 8002786:	bfa8      	it	ge
 8002788:	461a      	movge	r2, r3
 800278a:	2a00      	cmp	r2, #0
 800278c:	4691      	mov	r9, r2
 800278e:	dc37      	bgt.n	8002800 <_printf_float+0x374>
 8002790:	f04f 0b00 	mov.w	fp, #0
 8002794:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002798:	f104 021a 	add.w	r2, r4, #26
 800279c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800279e:	9305      	str	r3, [sp, #20]
 80027a0:	eba3 0309 	sub.w	r3, r3, r9
 80027a4:	455b      	cmp	r3, fp
 80027a6:	dc33      	bgt.n	8002810 <_printf_float+0x384>
 80027a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80027ac:	429a      	cmp	r2, r3
 80027ae:	db3b      	blt.n	8002828 <_printf_float+0x39c>
 80027b0:	6823      	ldr	r3, [r4, #0]
 80027b2:	07da      	lsls	r2, r3, #31
 80027b4:	d438      	bmi.n	8002828 <_printf_float+0x39c>
 80027b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80027b8:	9a05      	ldr	r2, [sp, #20]
 80027ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80027bc:	1a9a      	subs	r2, r3, r2
 80027be:	eba3 0901 	sub.w	r9, r3, r1
 80027c2:	4591      	cmp	r9, r2
 80027c4:	bfa8      	it	ge
 80027c6:	4691      	movge	r9, r2
 80027c8:	f1b9 0f00 	cmp.w	r9, #0
 80027cc:	dc35      	bgt.n	800283a <_printf_float+0x3ae>
 80027ce:	f04f 0800 	mov.w	r8, #0
 80027d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80027d6:	f104 0a1a 	add.w	sl, r4, #26
 80027da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80027de:	1a9b      	subs	r3, r3, r2
 80027e0:	eba3 0309 	sub.w	r3, r3, r9
 80027e4:	4543      	cmp	r3, r8
 80027e6:	f77f af79 	ble.w	80026dc <_printf_float+0x250>
 80027ea:	2301      	movs	r3, #1
 80027ec:	4652      	mov	r2, sl
 80027ee:	4631      	mov	r1, r6
 80027f0:	4628      	mov	r0, r5
 80027f2:	47b8      	blx	r7
 80027f4:	3001      	adds	r0, #1
 80027f6:	f43f aeaa 	beq.w	800254e <_printf_float+0xc2>
 80027fa:	f108 0801 	add.w	r8, r8, #1
 80027fe:	e7ec      	b.n	80027da <_printf_float+0x34e>
 8002800:	4613      	mov	r3, r2
 8002802:	4631      	mov	r1, r6
 8002804:	4642      	mov	r2, r8
 8002806:	4628      	mov	r0, r5
 8002808:	47b8      	blx	r7
 800280a:	3001      	adds	r0, #1
 800280c:	d1c0      	bne.n	8002790 <_printf_float+0x304>
 800280e:	e69e      	b.n	800254e <_printf_float+0xc2>
 8002810:	2301      	movs	r3, #1
 8002812:	4631      	mov	r1, r6
 8002814:	4628      	mov	r0, r5
 8002816:	9205      	str	r2, [sp, #20]
 8002818:	47b8      	blx	r7
 800281a:	3001      	adds	r0, #1
 800281c:	f43f ae97 	beq.w	800254e <_printf_float+0xc2>
 8002820:	9a05      	ldr	r2, [sp, #20]
 8002822:	f10b 0b01 	add.w	fp, fp, #1
 8002826:	e7b9      	b.n	800279c <_printf_float+0x310>
 8002828:	ee18 3a10 	vmov	r3, s16
 800282c:	4652      	mov	r2, sl
 800282e:	4631      	mov	r1, r6
 8002830:	4628      	mov	r0, r5
 8002832:	47b8      	blx	r7
 8002834:	3001      	adds	r0, #1
 8002836:	d1be      	bne.n	80027b6 <_printf_float+0x32a>
 8002838:	e689      	b.n	800254e <_printf_float+0xc2>
 800283a:	9a05      	ldr	r2, [sp, #20]
 800283c:	464b      	mov	r3, r9
 800283e:	4442      	add	r2, r8
 8002840:	4631      	mov	r1, r6
 8002842:	4628      	mov	r0, r5
 8002844:	47b8      	blx	r7
 8002846:	3001      	adds	r0, #1
 8002848:	d1c1      	bne.n	80027ce <_printf_float+0x342>
 800284a:	e680      	b.n	800254e <_printf_float+0xc2>
 800284c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800284e:	2a01      	cmp	r2, #1
 8002850:	dc01      	bgt.n	8002856 <_printf_float+0x3ca>
 8002852:	07db      	lsls	r3, r3, #31
 8002854:	d538      	bpl.n	80028c8 <_printf_float+0x43c>
 8002856:	2301      	movs	r3, #1
 8002858:	4642      	mov	r2, r8
 800285a:	4631      	mov	r1, r6
 800285c:	4628      	mov	r0, r5
 800285e:	47b8      	blx	r7
 8002860:	3001      	adds	r0, #1
 8002862:	f43f ae74 	beq.w	800254e <_printf_float+0xc2>
 8002866:	ee18 3a10 	vmov	r3, s16
 800286a:	4652      	mov	r2, sl
 800286c:	4631      	mov	r1, r6
 800286e:	4628      	mov	r0, r5
 8002870:	47b8      	blx	r7
 8002872:	3001      	adds	r0, #1
 8002874:	f43f ae6b 	beq.w	800254e <_printf_float+0xc2>
 8002878:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800287c:	2200      	movs	r2, #0
 800287e:	2300      	movs	r3, #0
 8002880:	f7fe f92a 	bl	8000ad8 <__aeabi_dcmpeq>
 8002884:	b9d8      	cbnz	r0, 80028be <_printf_float+0x432>
 8002886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002888:	f108 0201 	add.w	r2, r8, #1
 800288c:	3b01      	subs	r3, #1
 800288e:	4631      	mov	r1, r6
 8002890:	4628      	mov	r0, r5
 8002892:	47b8      	blx	r7
 8002894:	3001      	adds	r0, #1
 8002896:	d10e      	bne.n	80028b6 <_printf_float+0x42a>
 8002898:	e659      	b.n	800254e <_printf_float+0xc2>
 800289a:	2301      	movs	r3, #1
 800289c:	4652      	mov	r2, sl
 800289e:	4631      	mov	r1, r6
 80028a0:	4628      	mov	r0, r5
 80028a2:	47b8      	blx	r7
 80028a4:	3001      	adds	r0, #1
 80028a6:	f43f ae52 	beq.w	800254e <_printf_float+0xc2>
 80028aa:	f108 0801 	add.w	r8, r8, #1
 80028ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028b0:	3b01      	subs	r3, #1
 80028b2:	4543      	cmp	r3, r8
 80028b4:	dcf1      	bgt.n	800289a <_printf_float+0x40e>
 80028b6:	464b      	mov	r3, r9
 80028b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80028bc:	e6dc      	b.n	8002678 <_printf_float+0x1ec>
 80028be:	f04f 0800 	mov.w	r8, #0
 80028c2:	f104 0a1a 	add.w	sl, r4, #26
 80028c6:	e7f2      	b.n	80028ae <_printf_float+0x422>
 80028c8:	2301      	movs	r3, #1
 80028ca:	4642      	mov	r2, r8
 80028cc:	e7df      	b.n	800288e <_printf_float+0x402>
 80028ce:	2301      	movs	r3, #1
 80028d0:	464a      	mov	r2, r9
 80028d2:	4631      	mov	r1, r6
 80028d4:	4628      	mov	r0, r5
 80028d6:	47b8      	blx	r7
 80028d8:	3001      	adds	r0, #1
 80028da:	f43f ae38 	beq.w	800254e <_printf_float+0xc2>
 80028de:	f108 0801 	add.w	r8, r8, #1
 80028e2:	68e3      	ldr	r3, [r4, #12]
 80028e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80028e6:	1a5b      	subs	r3, r3, r1
 80028e8:	4543      	cmp	r3, r8
 80028ea:	dcf0      	bgt.n	80028ce <_printf_float+0x442>
 80028ec:	e6fa      	b.n	80026e4 <_printf_float+0x258>
 80028ee:	f04f 0800 	mov.w	r8, #0
 80028f2:	f104 0919 	add.w	r9, r4, #25
 80028f6:	e7f4      	b.n	80028e2 <_printf_float+0x456>

080028f8 <_printf_common>:
 80028f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028fc:	4616      	mov	r6, r2
 80028fe:	4699      	mov	r9, r3
 8002900:	688a      	ldr	r2, [r1, #8]
 8002902:	690b      	ldr	r3, [r1, #16]
 8002904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002908:	4293      	cmp	r3, r2
 800290a:	bfb8      	it	lt
 800290c:	4613      	movlt	r3, r2
 800290e:	6033      	str	r3, [r6, #0]
 8002910:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002914:	4607      	mov	r7, r0
 8002916:	460c      	mov	r4, r1
 8002918:	b10a      	cbz	r2, 800291e <_printf_common+0x26>
 800291a:	3301      	adds	r3, #1
 800291c:	6033      	str	r3, [r6, #0]
 800291e:	6823      	ldr	r3, [r4, #0]
 8002920:	0699      	lsls	r1, r3, #26
 8002922:	bf42      	ittt	mi
 8002924:	6833      	ldrmi	r3, [r6, #0]
 8002926:	3302      	addmi	r3, #2
 8002928:	6033      	strmi	r3, [r6, #0]
 800292a:	6825      	ldr	r5, [r4, #0]
 800292c:	f015 0506 	ands.w	r5, r5, #6
 8002930:	d106      	bne.n	8002940 <_printf_common+0x48>
 8002932:	f104 0a19 	add.w	sl, r4, #25
 8002936:	68e3      	ldr	r3, [r4, #12]
 8002938:	6832      	ldr	r2, [r6, #0]
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	42ab      	cmp	r3, r5
 800293e:	dc26      	bgt.n	800298e <_printf_common+0x96>
 8002940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002944:	1e13      	subs	r3, r2, #0
 8002946:	6822      	ldr	r2, [r4, #0]
 8002948:	bf18      	it	ne
 800294a:	2301      	movne	r3, #1
 800294c:	0692      	lsls	r2, r2, #26
 800294e:	d42b      	bmi.n	80029a8 <_printf_common+0xb0>
 8002950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002954:	4649      	mov	r1, r9
 8002956:	4638      	mov	r0, r7
 8002958:	47c0      	blx	r8
 800295a:	3001      	adds	r0, #1
 800295c:	d01e      	beq.n	800299c <_printf_common+0xa4>
 800295e:	6823      	ldr	r3, [r4, #0]
 8002960:	68e5      	ldr	r5, [r4, #12]
 8002962:	6832      	ldr	r2, [r6, #0]
 8002964:	f003 0306 	and.w	r3, r3, #6
 8002968:	2b04      	cmp	r3, #4
 800296a:	bf08      	it	eq
 800296c:	1aad      	subeq	r5, r5, r2
 800296e:	68a3      	ldr	r3, [r4, #8]
 8002970:	6922      	ldr	r2, [r4, #16]
 8002972:	bf0c      	ite	eq
 8002974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002978:	2500      	movne	r5, #0
 800297a:	4293      	cmp	r3, r2
 800297c:	bfc4      	itt	gt
 800297e:	1a9b      	subgt	r3, r3, r2
 8002980:	18ed      	addgt	r5, r5, r3
 8002982:	2600      	movs	r6, #0
 8002984:	341a      	adds	r4, #26
 8002986:	42b5      	cmp	r5, r6
 8002988:	d11a      	bne.n	80029c0 <_printf_common+0xc8>
 800298a:	2000      	movs	r0, #0
 800298c:	e008      	b.n	80029a0 <_printf_common+0xa8>
 800298e:	2301      	movs	r3, #1
 8002990:	4652      	mov	r2, sl
 8002992:	4649      	mov	r1, r9
 8002994:	4638      	mov	r0, r7
 8002996:	47c0      	blx	r8
 8002998:	3001      	adds	r0, #1
 800299a:	d103      	bne.n	80029a4 <_printf_common+0xac>
 800299c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029a4:	3501      	adds	r5, #1
 80029a6:	e7c6      	b.n	8002936 <_printf_common+0x3e>
 80029a8:	18e1      	adds	r1, r4, r3
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	2030      	movs	r0, #48	; 0x30
 80029ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80029b2:	4422      	add	r2, r4
 80029b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80029b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80029bc:	3302      	adds	r3, #2
 80029be:	e7c7      	b.n	8002950 <_printf_common+0x58>
 80029c0:	2301      	movs	r3, #1
 80029c2:	4622      	mov	r2, r4
 80029c4:	4649      	mov	r1, r9
 80029c6:	4638      	mov	r0, r7
 80029c8:	47c0      	blx	r8
 80029ca:	3001      	adds	r0, #1
 80029cc:	d0e6      	beq.n	800299c <_printf_common+0xa4>
 80029ce:	3601      	adds	r6, #1
 80029d0:	e7d9      	b.n	8002986 <_printf_common+0x8e>
	...

080029d4 <_printf_i>:
 80029d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80029d8:	7e0f      	ldrb	r7, [r1, #24]
 80029da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80029dc:	2f78      	cmp	r7, #120	; 0x78
 80029de:	4691      	mov	r9, r2
 80029e0:	4680      	mov	r8, r0
 80029e2:	460c      	mov	r4, r1
 80029e4:	469a      	mov	sl, r3
 80029e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80029ea:	d807      	bhi.n	80029fc <_printf_i+0x28>
 80029ec:	2f62      	cmp	r7, #98	; 0x62
 80029ee:	d80a      	bhi.n	8002a06 <_printf_i+0x32>
 80029f0:	2f00      	cmp	r7, #0
 80029f2:	f000 80d8 	beq.w	8002ba6 <_printf_i+0x1d2>
 80029f6:	2f58      	cmp	r7, #88	; 0x58
 80029f8:	f000 80a3 	beq.w	8002b42 <_printf_i+0x16e>
 80029fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002a04:	e03a      	b.n	8002a7c <_printf_i+0xa8>
 8002a06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002a0a:	2b15      	cmp	r3, #21
 8002a0c:	d8f6      	bhi.n	80029fc <_printf_i+0x28>
 8002a0e:	a101      	add	r1, pc, #4	; (adr r1, 8002a14 <_printf_i+0x40>)
 8002a10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002a14:	08002a6d 	.word	0x08002a6d
 8002a18:	08002a81 	.word	0x08002a81
 8002a1c:	080029fd 	.word	0x080029fd
 8002a20:	080029fd 	.word	0x080029fd
 8002a24:	080029fd 	.word	0x080029fd
 8002a28:	080029fd 	.word	0x080029fd
 8002a2c:	08002a81 	.word	0x08002a81
 8002a30:	080029fd 	.word	0x080029fd
 8002a34:	080029fd 	.word	0x080029fd
 8002a38:	080029fd 	.word	0x080029fd
 8002a3c:	080029fd 	.word	0x080029fd
 8002a40:	08002b8d 	.word	0x08002b8d
 8002a44:	08002ab1 	.word	0x08002ab1
 8002a48:	08002b6f 	.word	0x08002b6f
 8002a4c:	080029fd 	.word	0x080029fd
 8002a50:	080029fd 	.word	0x080029fd
 8002a54:	08002baf 	.word	0x08002baf
 8002a58:	080029fd 	.word	0x080029fd
 8002a5c:	08002ab1 	.word	0x08002ab1
 8002a60:	080029fd 	.word	0x080029fd
 8002a64:	080029fd 	.word	0x080029fd
 8002a68:	08002b77 	.word	0x08002b77
 8002a6c:	682b      	ldr	r3, [r5, #0]
 8002a6e:	1d1a      	adds	r2, r3, #4
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	602a      	str	r2, [r5, #0]
 8002a74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0a3      	b.n	8002bc8 <_printf_i+0x1f4>
 8002a80:	6820      	ldr	r0, [r4, #0]
 8002a82:	6829      	ldr	r1, [r5, #0]
 8002a84:	0606      	lsls	r6, r0, #24
 8002a86:	f101 0304 	add.w	r3, r1, #4
 8002a8a:	d50a      	bpl.n	8002aa2 <_printf_i+0xce>
 8002a8c:	680e      	ldr	r6, [r1, #0]
 8002a8e:	602b      	str	r3, [r5, #0]
 8002a90:	2e00      	cmp	r6, #0
 8002a92:	da03      	bge.n	8002a9c <_printf_i+0xc8>
 8002a94:	232d      	movs	r3, #45	; 0x2d
 8002a96:	4276      	negs	r6, r6
 8002a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a9c:	485e      	ldr	r0, [pc, #376]	; (8002c18 <_printf_i+0x244>)
 8002a9e:	230a      	movs	r3, #10
 8002aa0:	e019      	b.n	8002ad6 <_printf_i+0x102>
 8002aa2:	680e      	ldr	r6, [r1, #0]
 8002aa4:	602b      	str	r3, [r5, #0]
 8002aa6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002aaa:	bf18      	it	ne
 8002aac:	b236      	sxthne	r6, r6
 8002aae:	e7ef      	b.n	8002a90 <_printf_i+0xbc>
 8002ab0:	682b      	ldr	r3, [r5, #0]
 8002ab2:	6820      	ldr	r0, [r4, #0]
 8002ab4:	1d19      	adds	r1, r3, #4
 8002ab6:	6029      	str	r1, [r5, #0]
 8002ab8:	0601      	lsls	r1, r0, #24
 8002aba:	d501      	bpl.n	8002ac0 <_printf_i+0xec>
 8002abc:	681e      	ldr	r6, [r3, #0]
 8002abe:	e002      	b.n	8002ac6 <_printf_i+0xf2>
 8002ac0:	0646      	lsls	r6, r0, #25
 8002ac2:	d5fb      	bpl.n	8002abc <_printf_i+0xe8>
 8002ac4:	881e      	ldrh	r6, [r3, #0]
 8002ac6:	4854      	ldr	r0, [pc, #336]	; (8002c18 <_printf_i+0x244>)
 8002ac8:	2f6f      	cmp	r7, #111	; 0x6f
 8002aca:	bf0c      	ite	eq
 8002acc:	2308      	moveq	r3, #8
 8002ace:	230a      	movne	r3, #10
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ad6:	6865      	ldr	r5, [r4, #4]
 8002ad8:	60a5      	str	r5, [r4, #8]
 8002ada:	2d00      	cmp	r5, #0
 8002adc:	bfa2      	ittt	ge
 8002ade:	6821      	ldrge	r1, [r4, #0]
 8002ae0:	f021 0104 	bicge.w	r1, r1, #4
 8002ae4:	6021      	strge	r1, [r4, #0]
 8002ae6:	b90e      	cbnz	r6, 8002aec <_printf_i+0x118>
 8002ae8:	2d00      	cmp	r5, #0
 8002aea:	d04d      	beq.n	8002b88 <_printf_i+0x1b4>
 8002aec:	4615      	mov	r5, r2
 8002aee:	fbb6 f1f3 	udiv	r1, r6, r3
 8002af2:	fb03 6711 	mls	r7, r3, r1, r6
 8002af6:	5dc7      	ldrb	r7, [r0, r7]
 8002af8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002afc:	4637      	mov	r7, r6
 8002afe:	42bb      	cmp	r3, r7
 8002b00:	460e      	mov	r6, r1
 8002b02:	d9f4      	bls.n	8002aee <_printf_i+0x11a>
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d10b      	bne.n	8002b20 <_printf_i+0x14c>
 8002b08:	6823      	ldr	r3, [r4, #0]
 8002b0a:	07de      	lsls	r6, r3, #31
 8002b0c:	d508      	bpl.n	8002b20 <_printf_i+0x14c>
 8002b0e:	6923      	ldr	r3, [r4, #16]
 8002b10:	6861      	ldr	r1, [r4, #4]
 8002b12:	4299      	cmp	r1, r3
 8002b14:	bfde      	ittt	le
 8002b16:	2330      	movle	r3, #48	; 0x30
 8002b18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b1c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002b20:	1b52      	subs	r2, r2, r5
 8002b22:	6122      	str	r2, [r4, #16]
 8002b24:	f8cd a000 	str.w	sl, [sp]
 8002b28:	464b      	mov	r3, r9
 8002b2a:	aa03      	add	r2, sp, #12
 8002b2c:	4621      	mov	r1, r4
 8002b2e:	4640      	mov	r0, r8
 8002b30:	f7ff fee2 	bl	80028f8 <_printf_common>
 8002b34:	3001      	adds	r0, #1
 8002b36:	d14c      	bne.n	8002bd2 <_printf_i+0x1fe>
 8002b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b3c:	b004      	add	sp, #16
 8002b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b42:	4835      	ldr	r0, [pc, #212]	; (8002c18 <_printf_i+0x244>)
 8002b44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002b48:	6829      	ldr	r1, [r5, #0]
 8002b4a:	6823      	ldr	r3, [r4, #0]
 8002b4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002b50:	6029      	str	r1, [r5, #0]
 8002b52:	061d      	lsls	r5, r3, #24
 8002b54:	d514      	bpl.n	8002b80 <_printf_i+0x1ac>
 8002b56:	07df      	lsls	r7, r3, #31
 8002b58:	bf44      	itt	mi
 8002b5a:	f043 0320 	orrmi.w	r3, r3, #32
 8002b5e:	6023      	strmi	r3, [r4, #0]
 8002b60:	b91e      	cbnz	r6, 8002b6a <_printf_i+0x196>
 8002b62:	6823      	ldr	r3, [r4, #0]
 8002b64:	f023 0320 	bic.w	r3, r3, #32
 8002b68:	6023      	str	r3, [r4, #0]
 8002b6a:	2310      	movs	r3, #16
 8002b6c:	e7b0      	b.n	8002ad0 <_printf_i+0xfc>
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	f043 0320 	orr.w	r3, r3, #32
 8002b74:	6023      	str	r3, [r4, #0]
 8002b76:	2378      	movs	r3, #120	; 0x78
 8002b78:	4828      	ldr	r0, [pc, #160]	; (8002c1c <_printf_i+0x248>)
 8002b7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b7e:	e7e3      	b.n	8002b48 <_printf_i+0x174>
 8002b80:	0659      	lsls	r1, r3, #25
 8002b82:	bf48      	it	mi
 8002b84:	b2b6      	uxthmi	r6, r6
 8002b86:	e7e6      	b.n	8002b56 <_printf_i+0x182>
 8002b88:	4615      	mov	r5, r2
 8002b8a:	e7bb      	b.n	8002b04 <_printf_i+0x130>
 8002b8c:	682b      	ldr	r3, [r5, #0]
 8002b8e:	6826      	ldr	r6, [r4, #0]
 8002b90:	6961      	ldr	r1, [r4, #20]
 8002b92:	1d18      	adds	r0, r3, #4
 8002b94:	6028      	str	r0, [r5, #0]
 8002b96:	0635      	lsls	r5, r6, #24
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	d501      	bpl.n	8002ba0 <_printf_i+0x1cc>
 8002b9c:	6019      	str	r1, [r3, #0]
 8002b9e:	e002      	b.n	8002ba6 <_printf_i+0x1d2>
 8002ba0:	0670      	lsls	r0, r6, #25
 8002ba2:	d5fb      	bpl.n	8002b9c <_printf_i+0x1c8>
 8002ba4:	8019      	strh	r1, [r3, #0]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	6123      	str	r3, [r4, #16]
 8002baa:	4615      	mov	r5, r2
 8002bac:	e7ba      	b.n	8002b24 <_printf_i+0x150>
 8002bae:	682b      	ldr	r3, [r5, #0]
 8002bb0:	1d1a      	adds	r2, r3, #4
 8002bb2:	602a      	str	r2, [r5, #0]
 8002bb4:	681d      	ldr	r5, [r3, #0]
 8002bb6:	6862      	ldr	r2, [r4, #4]
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4628      	mov	r0, r5
 8002bbc:	f7fd fb18 	bl	80001f0 <memchr>
 8002bc0:	b108      	cbz	r0, 8002bc6 <_printf_i+0x1f2>
 8002bc2:	1b40      	subs	r0, r0, r5
 8002bc4:	6060      	str	r0, [r4, #4]
 8002bc6:	6863      	ldr	r3, [r4, #4]
 8002bc8:	6123      	str	r3, [r4, #16]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bd0:	e7a8      	b.n	8002b24 <_printf_i+0x150>
 8002bd2:	6923      	ldr	r3, [r4, #16]
 8002bd4:	462a      	mov	r2, r5
 8002bd6:	4649      	mov	r1, r9
 8002bd8:	4640      	mov	r0, r8
 8002bda:	47d0      	blx	sl
 8002bdc:	3001      	adds	r0, #1
 8002bde:	d0ab      	beq.n	8002b38 <_printf_i+0x164>
 8002be0:	6823      	ldr	r3, [r4, #0]
 8002be2:	079b      	lsls	r3, r3, #30
 8002be4:	d413      	bmi.n	8002c0e <_printf_i+0x23a>
 8002be6:	68e0      	ldr	r0, [r4, #12]
 8002be8:	9b03      	ldr	r3, [sp, #12]
 8002bea:	4298      	cmp	r0, r3
 8002bec:	bfb8      	it	lt
 8002bee:	4618      	movlt	r0, r3
 8002bf0:	e7a4      	b.n	8002b3c <_printf_i+0x168>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	4632      	mov	r2, r6
 8002bf6:	4649      	mov	r1, r9
 8002bf8:	4640      	mov	r0, r8
 8002bfa:	47d0      	blx	sl
 8002bfc:	3001      	adds	r0, #1
 8002bfe:	d09b      	beq.n	8002b38 <_printf_i+0x164>
 8002c00:	3501      	adds	r5, #1
 8002c02:	68e3      	ldr	r3, [r4, #12]
 8002c04:	9903      	ldr	r1, [sp, #12]
 8002c06:	1a5b      	subs	r3, r3, r1
 8002c08:	42ab      	cmp	r3, r5
 8002c0a:	dcf2      	bgt.n	8002bf2 <_printf_i+0x21e>
 8002c0c:	e7eb      	b.n	8002be6 <_printf_i+0x212>
 8002c0e:	2500      	movs	r5, #0
 8002c10:	f104 0619 	add.w	r6, r4, #25
 8002c14:	e7f5      	b.n	8002c02 <_printf_i+0x22e>
 8002c16:	bf00      	nop
 8002c18:	08006c6a 	.word	0x08006c6a
 8002c1c:	08006c7b 	.word	0x08006c7b

08002c20 <_scanf_float>:
 8002c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c24:	b087      	sub	sp, #28
 8002c26:	4617      	mov	r7, r2
 8002c28:	9303      	str	r3, [sp, #12]
 8002c2a:	688b      	ldr	r3, [r1, #8]
 8002c2c:	1e5a      	subs	r2, r3, #1
 8002c2e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8002c32:	bf83      	ittte	hi
 8002c34:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8002c38:	195b      	addhi	r3, r3, r5
 8002c3a:	9302      	strhi	r3, [sp, #8]
 8002c3c:	2300      	movls	r3, #0
 8002c3e:	bf86      	itte	hi
 8002c40:	f240 135d 	movwhi	r3, #349	; 0x15d
 8002c44:	608b      	strhi	r3, [r1, #8]
 8002c46:	9302      	strls	r3, [sp, #8]
 8002c48:	680b      	ldr	r3, [r1, #0]
 8002c4a:	468b      	mov	fp, r1
 8002c4c:	2500      	movs	r5, #0
 8002c4e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8002c52:	f84b 3b1c 	str.w	r3, [fp], #28
 8002c56:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8002c5a:	4680      	mov	r8, r0
 8002c5c:	460c      	mov	r4, r1
 8002c5e:	465e      	mov	r6, fp
 8002c60:	46aa      	mov	sl, r5
 8002c62:	46a9      	mov	r9, r5
 8002c64:	9501      	str	r5, [sp, #4]
 8002c66:	68a2      	ldr	r2, [r4, #8]
 8002c68:	b152      	cbz	r2, 8002c80 <_scanf_float+0x60>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b4e      	cmp	r3, #78	; 0x4e
 8002c70:	d864      	bhi.n	8002d3c <_scanf_float+0x11c>
 8002c72:	2b40      	cmp	r3, #64	; 0x40
 8002c74:	d83c      	bhi.n	8002cf0 <_scanf_float+0xd0>
 8002c76:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8002c7a:	b2c8      	uxtb	r0, r1
 8002c7c:	280e      	cmp	r0, #14
 8002c7e:	d93a      	bls.n	8002cf6 <_scanf_float+0xd6>
 8002c80:	f1b9 0f00 	cmp.w	r9, #0
 8002c84:	d003      	beq.n	8002c8e <_scanf_float+0x6e>
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c8c:	6023      	str	r3, [r4, #0]
 8002c8e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8002c92:	f1ba 0f01 	cmp.w	sl, #1
 8002c96:	f200 8113 	bhi.w	8002ec0 <_scanf_float+0x2a0>
 8002c9a:	455e      	cmp	r6, fp
 8002c9c:	f200 8105 	bhi.w	8002eaa <_scanf_float+0x28a>
 8002ca0:	2501      	movs	r5, #1
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	b007      	add	sp, #28
 8002ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002caa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8002cae:	2a0d      	cmp	r2, #13
 8002cb0:	d8e6      	bhi.n	8002c80 <_scanf_float+0x60>
 8002cb2:	a101      	add	r1, pc, #4	; (adr r1, 8002cb8 <_scanf_float+0x98>)
 8002cb4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002cb8:	08002df7 	.word	0x08002df7
 8002cbc:	08002c81 	.word	0x08002c81
 8002cc0:	08002c81 	.word	0x08002c81
 8002cc4:	08002c81 	.word	0x08002c81
 8002cc8:	08002e57 	.word	0x08002e57
 8002ccc:	08002e2f 	.word	0x08002e2f
 8002cd0:	08002c81 	.word	0x08002c81
 8002cd4:	08002c81 	.word	0x08002c81
 8002cd8:	08002e05 	.word	0x08002e05
 8002cdc:	08002c81 	.word	0x08002c81
 8002ce0:	08002c81 	.word	0x08002c81
 8002ce4:	08002c81 	.word	0x08002c81
 8002ce8:	08002c81 	.word	0x08002c81
 8002cec:	08002dbd 	.word	0x08002dbd
 8002cf0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002cf4:	e7db      	b.n	8002cae <_scanf_float+0x8e>
 8002cf6:	290e      	cmp	r1, #14
 8002cf8:	d8c2      	bhi.n	8002c80 <_scanf_float+0x60>
 8002cfa:	a001      	add	r0, pc, #4	; (adr r0, 8002d00 <_scanf_float+0xe0>)
 8002cfc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8002d00:	08002daf 	.word	0x08002daf
 8002d04:	08002c81 	.word	0x08002c81
 8002d08:	08002daf 	.word	0x08002daf
 8002d0c:	08002e43 	.word	0x08002e43
 8002d10:	08002c81 	.word	0x08002c81
 8002d14:	08002d5d 	.word	0x08002d5d
 8002d18:	08002d99 	.word	0x08002d99
 8002d1c:	08002d99 	.word	0x08002d99
 8002d20:	08002d99 	.word	0x08002d99
 8002d24:	08002d99 	.word	0x08002d99
 8002d28:	08002d99 	.word	0x08002d99
 8002d2c:	08002d99 	.word	0x08002d99
 8002d30:	08002d99 	.word	0x08002d99
 8002d34:	08002d99 	.word	0x08002d99
 8002d38:	08002d99 	.word	0x08002d99
 8002d3c:	2b6e      	cmp	r3, #110	; 0x6e
 8002d3e:	d809      	bhi.n	8002d54 <_scanf_float+0x134>
 8002d40:	2b60      	cmp	r3, #96	; 0x60
 8002d42:	d8b2      	bhi.n	8002caa <_scanf_float+0x8a>
 8002d44:	2b54      	cmp	r3, #84	; 0x54
 8002d46:	d077      	beq.n	8002e38 <_scanf_float+0x218>
 8002d48:	2b59      	cmp	r3, #89	; 0x59
 8002d4a:	d199      	bne.n	8002c80 <_scanf_float+0x60>
 8002d4c:	2d07      	cmp	r5, #7
 8002d4e:	d197      	bne.n	8002c80 <_scanf_float+0x60>
 8002d50:	2508      	movs	r5, #8
 8002d52:	e029      	b.n	8002da8 <_scanf_float+0x188>
 8002d54:	2b74      	cmp	r3, #116	; 0x74
 8002d56:	d06f      	beq.n	8002e38 <_scanf_float+0x218>
 8002d58:	2b79      	cmp	r3, #121	; 0x79
 8002d5a:	e7f6      	b.n	8002d4a <_scanf_float+0x12a>
 8002d5c:	6821      	ldr	r1, [r4, #0]
 8002d5e:	05c8      	lsls	r0, r1, #23
 8002d60:	d51a      	bpl.n	8002d98 <_scanf_float+0x178>
 8002d62:	9b02      	ldr	r3, [sp, #8]
 8002d64:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002d68:	6021      	str	r1, [r4, #0]
 8002d6a:	f109 0901 	add.w	r9, r9, #1
 8002d6e:	b11b      	cbz	r3, 8002d78 <_scanf_float+0x158>
 8002d70:	3b01      	subs	r3, #1
 8002d72:	3201      	adds	r2, #1
 8002d74:	9302      	str	r3, [sp, #8]
 8002d76:	60a2      	str	r2, [r4, #8]
 8002d78:	68a3      	ldr	r3, [r4, #8]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	60a3      	str	r3, [r4, #8]
 8002d7e:	6923      	ldr	r3, [r4, #16]
 8002d80:	3301      	adds	r3, #1
 8002d82:	6123      	str	r3, [r4, #16]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	607b      	str	r3, [r7, #4]
 8002d8c:	f340 8084 	ble.w	8002e98 <_scanf_float+0x278>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	3301      	adds	r3, #1
 8002d94:	603b      	str	r3, [r7, #0]
 8002d96:	e766      	b.n	8002c66 <_scanf_float+0x46>
 8002d98:	eb1a 0f05 	cmn.w	sl, r5
 8002d9c:	f47f af70 	bne.w	8002c80 <_scanf_float+0x60>
 8002da0:	6822      	ldr	r2, [r4, #0]
 8002da2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8002da6:	6022      	str	r2, [r4, #0]
 8002da8:	f806 3b01 	strb.w	r3, [r6], #1
 8002dac:	e7e4      	b.n	8002d78 <_scanf_float+0x158>
 8002dae:	6822      	ldr	r2, [r4, #0]
 8002db0:	0610      	lsls	r0, r2, #24
 8002db2:	f57f af65 	bpl.w	8002c80 <_scanf_float+0x60>
 8002db6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dba:	e7f4      	b.n	8002da6 <_scanf_float+0x186>
 8002dbc:	f1ba 0f00 	cmp.w	sl, #0
 8002dc0:	d10e      	bne.n	8002de0 <_scanf_float+0x1c0>
 8002dc2:	f1b9 0f00 	cmp.w	r9, #0
 8002dc6:	d10e      	bne.n	8002de6 <_scanf_float+0x1c6>
 8002dc8:	6822      	ldr	r2, [r4, #0]
 8002dca:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8002dce:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8002dd2:	d108      	bne.n	8002de6 <_scanf_float+0x1c6>
 8002dd4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8002dd8:	6022      	str	r2, [r4, #0]
 8002dda:	f04f 0a01 	mov.w	sl, #1
 8002dde:	e7e3      	b.n	8002da8 <_scanf_float+0x188>
 8002de0:	f1ba 0f02 	cmp.w	sl, #2
 8002de4:	d055      	beq.n	8002e92 <_scanf_float+0x272>
 8002de6:	2d01      	cmp	r5, #1
 8002de8:	d002      	beq.n	8002df0 <_scanf_float+0x1d0>
 8002dea:	2d04      	cmp	r5, #4
 8002dec:	f47f af48 	bne.w	8002c80 <_scanf_float+0x60>
 8002df0:	3501      	adds	r5, #1
 8002df2:	b2ed      	uxtb	r5, r5
 8002df4:	e7d8      	b.n	8002da8 <_scanf_float+0x188>
 8002df6:	f1ba 0f01 	cmp.w	sl, #1
 8002dfa:	f47f af41 	bne.w	8002c80 <_scanf_float+0x60>
 8002dfe:	f04f 0a02 	mov.w	sl, #2
 8002e02:	e7d1      	b.n	8002da8 <_scanf_float+0x188>
 8002e04:	b97d      	cbnz	r5, 8002e26 <_scanf_float+0x206>
 8002e06:	f1b9 0f00 	cmp.w	r9, #0
 8002e0a:	f47f af3c 	bne.w	8002c86 <_scanf_float+0x66>
 8002e0e:	6822      	ldr	r2, [r4, #0]
 8002e10:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8002e14:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8002e18:	f47f af39 	bne.w	8002c8e <_scanf_float+0x6e>
 8002e1c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8002e20:	6022      	str	r2, [r4, #0]
 8002e22:	2501      	movs	r5, #1
 8002e24:	e7c0      	b.n	8002da8 <_scanf_float+0x188>
 8002e26:	2d03      	cmp	r5, #3
 8002e28:	d0e2      	beq.n	8002df0 <_scanf_float+0x1d0>
 8002e2a:	2d05      	cmp	r5, #5
 8002e2c:	e7de      	b.n	8002dec <_scanf_float+0x1cc>
 8002e2e:	2d02      	cmp	r5, #2
 8002e30:	f47f af26 	bne.w	8002c80 <_scanf_float+0x60>
 8002e34:	2503      	movs	r5, #3
 8002e36:	e7b7      	b.n	8002da8 <_scanf_float+0x188>
 8002e38:	2d06      	cmp	r5, #6
 8002e3a:	f47f af21 	bne.w	8002c80 <_scanf_float+0x60>
 8002e3e:	2507      	movs	r5, #7
 8002e40:	e7b2      	b.n	8002da8 <_scanf_float+0x188>
 8002e42:	6822      	ldr	r2, [r4, #0]
 8002e44:	0591      	lsls	r1, r2, #22
 8002e46:	f57f af1b 	bpl.w	8002c80 <_scanf_float+0x60>
 8002e4a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8002e4e:	6022      	str	r2, [r4, #0]
 8002e50:	f8cd 9004 	str.w	r9, [sp, #4]
 8002e54:	e7a8      	b.n	8002da8 <_scanf_float+0x188>
 8002e56:	6822      	ldr	r2, [r4, #0]
 8002e58:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8002e5c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8002e60:	d006      	beq.n	8002e70 <_scanf_float+0x250>
 8002e62:	0550      	lsls	r0, r2, #21
 8002e64:	f57f af0c 	bpl.w	8002c80 <_scanf_float+0x60>
 8002e68:	f1b9 0f00 	cmp.w	r9, #0
 8002e6c:	f43f af0f 	beq.w	8002c8e <_scanf_float+0x6e>
 8002e70:	0591      	lsls	r1, r2, #22
 8002e72:	bf58      	it	pl
 8002e74:	9901      	ldrpl	r1, [sp, #4]
 8002e76:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8002e7a:	bf58      	it	pl
 8002e7c:	eba9 0101 	subpl.w	r1, r9, r1
 8002e80:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8002e84:	bf58      	it	pl
 8002e86:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8002e8a:	6022      	str	r2, [r4, #0]
 8002e8c:	f04f 0900 	mov.w	r9, #0
 8002e90:	e78a      	b.n	8002da8 <_scanf_float+0x188>
 8002e92:	f04f 0a03 	mov.w	sl, #3
 8002e96:	e787      	b.n	8002da8 <_scanf_float+0x188>
 8002e98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002e9c:	4639      	mov	r1, r7
 8002e9e:	4640      	mov	r0, r8
 8002ea0:	4798      	blx	r3
 8002ea2:	2800      	cmp	r0, #0
 8002ea4:	f43f aedf 	beq.w	8002c66 <_scanf_float+0x46>
 8002ea8:	e6ea      	b.n	8002c80 <_scanf_float+0x60>
 8002eaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002eae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002eb2:	463a      	mov	r2, r7
 8002eb4:	4640      	mov	r0, r8
 8002eb6:	4798      	blx	r3
 8002eb8:	6923      	ldr	r3, [r4, #16]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	6123      	str	r3, [r4, #16]
 8002ebe:	e6ec      	b.n	8002c9a <_scanf_float+0x7a>
 8002ec0:	1e6b      	subs	r3, r5, #1
 8002ec2:	2b06      	cmp	r3, #6
 8002ec4:	d825      	bhi.n	8002f12 <_scanf_float+0x2f2>
 8002ec6:	2d02      	cmp	r5, #2
 8002ec8:	d836      	bhi.n	8002f38 <_scanf_float+0x318>
 8002eca:	455e      	cmp	r6, fp
 8002ecc:	f67f aee8 	bls.w	8002ca0 <_scanf_float+0x80>
 8002ed0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002ed4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002ed8:	463a      	mov	r2, r7
 8002eda:	4640      	mov	r0, r8
 8002edc:	4798      	blx	r3
 8002ede:	6923      	ldr	r3, [r4, #16]
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	6123      	str	r3, [r4, #16]
 8002ee4:	e7f1      	b.n	8002eca <_scanf_float+0x2aa>
 8002ee6:	9802      	ldr	r0, [sp, #8]
 8002ee8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002eec:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8002ef0:	9002      	str	r0, [sp, #8]
 8002ef2:	463a      	mov	r2, r7
 8002ef4:	4640      	mov	r0, r8
 8002ef6:	4798      	blx	r3
 8002ef8:	6923      	ldr	r3, [r4, #16]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	6123      	str	r3, [r4, #16]
 8002efe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8002f02:	fa5f fa8a 	uxtb.w	sl, sl
 8002f06:	f1ba 0f02 	cmp.w	sl, #2
 8002f0a:	d1ec      	bne.n	8002ee6 <_scanf_float+0x2c6>
 8002f0c:	3d03      	subs	r5, #3
 8002f0e:	b2ed      	uxtb	r5, r5
 8002f10:	1b76      	subs	r6, r6, r5
 8002f12:	6823      	ldr	r3, [r4, #0]
 8002f14:	05da      	lsls	r2, r3, #23
 8002f16:	d52f      	bpl.n	8002f78 <_scanf_float+0x358>
 8002f18:	055b      	lsls	r3, r3, #21
 8002f1a:	d510      	bpl.n	8002f3e <_scanf_float+0x31e>
 8002f1c:	455e      	cmp	r6, fp
 8002f1e:	f67f aebf 	bls.w	8002ca0 <_scanf_float+0x80>
 8002f22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002f26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002f2a:	463a      	mov	r2, r7
 8002f2c:	4640      	mov	r0, r8
 8002f2e:	4798      	blx	r3
 8002f30:	6923      	ldr	r3, [r4, #16]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	6123      	str	r3, [r4, #16]
 8002f36:	e7f1      	b.n	8002f1c <_scanf_float+0x2fc>
 8002f38:	46aa      	mov	sl, r5
 8002f3a:	9602      	str	r6, [sp, #8]
 8002f3c:	e7df      	b.n	8002efe <_scanf_float+0x2de>
 8002f3e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8002f42:	6923      	ldr	r3, [r4, #16]
 8002f44:	2965      	cmp	r1, #101	; 0x65
 8002f46:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8002f4a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8002f4e:	6123      	str	r3, [r4, #16]
 8002f50:	d00c      	beq.n	8002f6c <_scanf_float+0x34c>
 8002f52:	2945      	cmp	r1, #69	; 0x45
 8002f54:	d00a      	beq.n	8002f6c <_scanf_float+0x34c>
 8002f56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002f5a:	463a      	mov	r2, r7
 8002f5c:	4640      	mov	r0, r8
 8002f5e:	4798      	blx	r3
 8002f60:	6923      	ldr	r3, [r4, #16]
 8002f62:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	1eb5      	subs	r5, r6, #2
 8002f6a:	6123      	str	r3, [r4, #16]
 8002f6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002f70:	463a      	mov	r2, r7
 8002f72:	4640      	mov	r0, r8
 8002f74:	4798      	blx	r3
 8002f76:	462e      	mov	r6, r5
 8002f78:	6825      	ldr	r5, [r4, #0]
 8002f7a:	f015 0510 	ands.w	r5, r5, #16
 8002f7e:	d159      	bne.n	8003034 <_scanf_float+0x414>
 8002f80:	7035      	strb	r5, [r6, #0]
 8002f82:	6823      	ldr	r3, [r4, #0]
 8002f84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f8c:	d11b      	bne.n	8002fc6 <_scanf_float+0x3a6>
 8002f8e:	9b01      	ldr	r3, [sp, #4]
 8002f90:	454b      	cmp	r3, r9
 8002f92:	eba3 0209 	sub.w	r2, r3, r9
 8002f96:	d123      	bne.n	8002fe0 <_scanf_float+0x3c0>
 8002f98:	2200      	movs	r2, #0
 8002f9a:	4659      	mov	r1, fp
 8002f9c:	4640      	mov	r0, r8
 8002f9e:	f000 fe99 	bl	8003cd4 <_strtod_r>
 8002fa2:	6822      	ldr	r2, [r4, #0]
 8002fa4:	9b03      	ldr	r3, [sp, #12]
 8002fa6:	f012 0f02 	tst.w	r2, #2
 8002faa:	ec57 6b10 	vmov	r6, r7, d0
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	d021      	beq.n	8002ff6 <_scanf_float+0x3d6>
 8002fb2:	9903      	ldr	r1, [sp, #12]
 8002fb4:	1d1a      	adds	r2, r3, #4
 8002fb6:	600a      	str	r2, [r1, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	e9c3 6700 	strd	r6, r7, [r3]
 8002fbe:	68e3      	ldr	r3, [r4, #12]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	60e3      	str	r3, [r4, #12]
 8002fc4:	e66d      	b.n	8002ca2 <_scanf_float+0x82>
 8002fc6:	9b04      	ldr	r3, [sp, #16]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0e5      	beq.n	8002f98 <_scanf_float+0x378>
 8002fcc:	9905      	ldr	r1, [sp, #20]
 8002fce:	230a      	movs	r3, #10
 8002fd0:	462a      	mov	r2, r5
 8002fd2:	3101      	adds	r1, #1
 8002fd4:	4640      	mov	r0, r8
 8002fd6:	f000 ff05 	bl	8003de4 <_strtol_r>
 8002fda:	9b04      	ldr	r3, [sp, #16]
 8002fdc:	9e05      	ldr	r6, [sp, #20]
 8002fde:	1ac2      	subs	r2, r0, r3
 8002fe0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8002fe4:	429e      	cmp	r6, r3
 8002fe6:	bf28      	it	cs
 8002fe8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8002fec:	4912      	ldr	r1, [pc, #72]	; (8003038 <_scanf_float+0x418>)
 8002fee:	4630      	mov	r0, r6
 8002ff0:	f000 f82c 	bl	800304c <siprintf>
 8002ff4:	e7d0      	b.n	8002f98 <_scanf_float+0x378>
 8002ff6:	9903      	ldr	r1, [sp, #12]
 8002ff8:	f012 0f04 	tst.w	r2, #4
 8002ffc:	f103 0204 	add.w	r2, r3, #4
 8003000:	600a      	str	r2, [r1, #0]
 8003002:	d1d9      	bne.n	8002fb8 <_scanf_float+0x398>
 8003004:	f8d3 8000 	ldr.w	r8, [r3]
 8003008:	ee10 2a10 	vmov	r2, s0
 800300c:	ee10 0a10 	vmov	r0, s0
 8003010:	463b      	mov	r3, r7
 8003012:	4639      	mov	r1, r7
 8003014:	f7fd fd92 	bl	8000b3c <__aeabi_dcmpun>
 8003018:	b128      	cbz	r0, 8003026 <_scanf_float+0x406>
 800301a:	4808      	ldr	r0, [pc, #32]	; (800303c <_scanf_float+0x41c>)
 800301c:	f000 f810 	bl	8003040 <nanf>
 8003020:	ed88 0a00 	vstr	s0, [r8]
 8003024:	e7cb      	b.n	8002fbe <_scanf_float+0x39e>
 8003026:	4630      	mov	r0, r6
 8003028:	4639      	mov	r1, r7
 800302a:	f7fd fde5 	bl	8000bf8 <__aeabi_d2f>
 800302e:	f8c8 0000 	str.w	r0, [r8]
 8003032:	e7c4      	b.n	8002fbe <_scanf_float+0x39e>
 8003034:	2500      	movs	r5, #0
 8003036:	e634      	b.n	8002ca2 <_scanf_float+0x82>
 8003038:	08006c8c 	.word	0x08006c8c
 800303c:	08007098 	.word	0x08007098

08003040 <nanf>:
 8003040:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003048 <nanf+0x8>
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	7fc00000 	.word	0x7fc00000

0800304c <siprintf>:
 800304c:	b40e      	push	{r1, r2, r3}
 800304e:	b500      	push	{lr}
 8003050:	b09c      	sub	sp, #112	; 0x70
 8003052:	ab1d      	add	r3, sp, #116	; 0x74
 8003054:	9002      	str	r0, [sp, #8]
 8003056:	9006      	str	r0, [sp, #24]
 8003058:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800305c:	4809      	ldr	r0, [pc, #36]	; (8003084 <siprintf+0x38>)
 800305e:	9107      	str	r1, [sp, #28]
 8003060:	9104      	str	r1, [sp, #16]
 8003062:	4909      	ldr	r1, [pc, #36]	; (8003088 <siprintf+0x3c>)
 8003064:	f853 2b04 	ldr.w	r2, [r3], #4
 8003068:	9105      	str	r1, [sp, #20]
 800306a:	6800      	ldr	r0, [r0, #0]
 800306c:	9301      	str	r3, [sp, #4]
 800306e:	a902      	add	r1, sp, #8
 8003070:	f002 fee4 	bl	8005e3c <_svfiprintf_r>
 8003074:	9b02      	ldr	r3, [sp, #8]
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	b01c      	add	sp, #112	; 0x70
 800307c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003080:	b003      	add	sp, #12
 8003082:	4770      	bx	lr
 8003084:	20000000 	.word	0x20000000
 8003088:	ffff0208 	.word	0xffff0208

0800308c <sulp>:
 800308c:	b570      	push	{r4, r5, r6, lr}
 800308e:	4604      	mov	r4, r0
 8003090:	460d      	mov	r5, r1
 8003092:	ec45 4b10 	vmov	d0, r4, r5
 8003096:	4616      	mov	r6, r2
 8003098:	f002 fc2e 	bl	80058f8 <__ulp>
 800309c:	ec51 0b10 	vmov	r0, r1, d0
 80030a0:	b17e      	cbz	r6, 80030c2 <sulp+0x36>
 80030a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80030a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	dd09      	ble.n	80030c2 <sulp+0x36>
 80030ae:	051b      	lsls	r3, r3, #20
 80030b0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80030b4:	2400      	movs	r4, #0
 80030b6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80030ba:	4622      	mov	r2, r4
 80030bc:	462b      	mov	r3, r5
 80030be:	f7fd faa3 	bl	8000608 <__aeabi_dmul>
 80030c2:	bd70      	pop	{r4, r5, r6, pc}
 80030c4:	0000      	movs	r0, r0
	...

080030c8 <_strtod_l>:
 80030c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030cc:	ed2d 8b02 	vpush	{d8}
 80030d0:	b09d      	sub	sp, #116	; 0x74
 80030d2:	461f      	mov	r7, r3
 80030d4:	2300      	movs	r3, #0
 80030d6:	9318      	str	r3, [sp, #96]	; 0x60
 80030d8:	4ba2      	ldr	r3, [pc, #648]	; (8003364 <_strtod_l+0x29c>)
 80030da:	9213      	str	r2, [sp, #76]	; 0x4c
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	9305      	str	r3, [sp, #20]
 80030e0:	4604      	mov	r4, r0
 80030e2:	4618      	mov	r0, r3
 80030e4:	4688      	mov	r8, r1
 80030e6:	f7fd f87b 	bl	80001e0 <strlen>
 80030ea:	f04f 0a00 	mov.w	sl, #0
 80030ee:	4605      	mov	r5, r0
 80030f0:	f04f 0b00 	mov.w	fp, #0
 80030f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80030f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80030fa:	781a      	ldrb	r2, [r3, #0]
 80030fc:	2a2b      	cmp	r2, #43	; 0x2b
 80030fe:	d04e      	beq.n	800319e <_strtod_l+0xd6>
 8003100:	d83b      	bhi.n	800317a <_strtod_l+0xb2>
 8003102:	2a0d      	cmp	r2, #13
 8003104:	d834      	bhi.n	8003170 <_strtod_l+0xa8>
 8003106:	2a08      	cmp	r2, #8
 8003108:	d834      	bhi.n	8003174 <_strtod_l+0xac>
 800310a:	2a00      	cmp	r2, #0
 800310c:	d03e      	beq.n	800318c <_strtod_l+0xc4>
 800310e:	2300      	movs	r3, #0
 8003110:	930a      	str	r3, [sp, #40]	; 0x28
 8003112:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8003114:	7833      	ldrb	r3, [r6, #0]
 8003116:	2b30      	cmp	r3, #48	; 0x30
 8003118:	f040 80b0 	bne.w	800327c <_strtod_l+0x1b4>
 800311c:	7873      	ldrb	r3, [r6, #1]
 800311e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003122:	2b58      	cmp	r3, #88	; 0x58
 8003124:	d168      	bne.n	80031f8 <_strtod_l+0x130>
 8003126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003128:	9301      	str	r3, [sp, #4]
 800312a:	ab18      	add	r3, sp, #96	; 0x60
 800312c:	9702      	str	r7, [sp, #8]
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	4a8d      	ldr	r2, [pc, #564]	; (8003368 <_strtod_l+0x2a0>)
 8003132:	ab19      	add	r3, sp, #100	; 0x64
 8003134:	a917      	add	r1, sp, #92	; 0x5c
 8003136:	4620      	mov	r0, r4
 8003138:	f001 fd38 	bl	8004bac <__gethex>
 800313c:	f010 0707 	ands.w	r7, r0, #7
 8003140:	4605      	mov	r5, r0
 8003142:	d005      	beq.n	8003150 <_strtod_l+0x88>
 8003144:	2f06      	cmp	r7, #6
 8003146:	d12c      	bne.n	80031a2 <_strtod_l+0xda>
 8003148:	3601      	adds	r6, #1
 800314a:	2300      	movs	r3, #0
 800314c:	9617      	str	r6, [sp, #92]	; 0x5c
 800314e:	930a      	str	r3, [sp, #40]	; 0x28
 8003150:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003152:	2b00      	cmp	r3, #0
 8003154:	f040 8590 	bne.w	8003c78 <_strtod_l+0xbb0>
 8003158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800315a:	b1eb      	cbz	r3, 8003198 <_strtod_l+0xd0>
 800315c:	4652      	mov	r2, sl
 800315e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003162:	ec43 2b10 	vmov	d0, r2, r3
 8003166:	b01d      	add	sp, #116	; 0x74
 8003168:	ecbd 8b02 	vpop	{d8}
 800316c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003170:	2a20      	cmp	r2, #32
 8003172:	d1cc      	bne.n	800310e <_strtod_l+0x46>
 8003174:	3301      	adds	r3, #1
 8003176:	9317      	str	r3, [sp, #92]	; 0x5c
 8003178:	e7be      	b.n	80030f8 <_strtod_l+0x30>
 800317a:	2a2d      	cmp	r2, #45	; 0x2d
 800317c:	d1c7      	bne.n	800310e <_strtod_l+0x46>
 800317e:	2201      	movs	r2, #1
 8003180:	920a      	str	r2, [sp, #40]	; 0x28
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	9217      	str	r2, [sp, #92]	; 0x5c
 8003186:	785b      	ldrb	r3, [r3, #1]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1c2      	bne.n	8003112 <_strtod_l+0x4a>
 800318c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800318e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8003192:	2b00      	cmp	r3, #0
 8003194:	f040 856e 	bne.w	8003c74 <_strtod_l+0xbac>
 8003198:	4652      	mov	r2, sl
 800319a:	465b      	mov	r3, fp
 800319c:	e7e1      	b.n	8003162 <_strtod_l+0x9a>
 800319e:	2200      	movs	r2, #0
 80031a0:	e7ee      	b.n	8003180 <_strtod_l+0xb8>
 80031a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80031a4:	b13a      	cbz	r2, 80031b6 <_strtod_l+0xee>
 80031a6:	2135      	movs	r1, #53	; 0x35
 80031a8:	a81a      	add	r0, sp, #104	; 0x68
 80031aa:	f002 fcb0 	bl	8005b0e <__copybits>
 80031ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80031b0:	4620      	mov	r0, r4
 80031b2:	f002 f86f 	bl	8005294 <_Bfree>
 80031b6:	3f01      	subs	r7, #1
 80031b8:	2f04      	cmp	r7, #4
 80031ba:	d806      	bhi.n	80031ca <_strtod_l+0x102>
 80031bc:	e8df f007 	tbb	[pc, r7]
 80031c0:	1714030a 	.word	0x1714030a
 80031c4:	0a          	.byte	0x0a
 80031c5:	00          	.byte	0x00
 80031c6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80031ca:	0728      	lsls	r0, r5, #28
 80031cc:	d5c0      	bpl.n	8003150 <_strtod_l+0x88>
 80031ce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80031d2:	e7bd      	b.n	8003150 <_strtod_l+0x88>
 80031d4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80031d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80031da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80031de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80031e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80031e6:	e7f0      	b.n	80031ca <_strtod_l+0x102>
 80031e8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800336c <_strtod_l+0x2a4>
 80031ec:	e7ed      	b.n	80031ca <_strtod_l+0x102>
 80031ee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80031f2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80031f6:	e7e8      	b.n	80031ca <_strtod_l+0x102>
 80031f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80031fe:	785b      	ldrb	r3, [r3, #1]
 8003200:	2b30      	cmp	r3, #48	; 0x30
 8003202:	d0f9      	beq.n	80031f8 <_strtod_l+0x130>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0a3      	beq.n	8003150 <_strtod_l+0x88>
 8003208:	2301      	movs	r3, #1
 800320a:	f04f 0900 	mov.w	r9, #0
 800320e:	9304      	str	r3, [sp, #16]
 8003210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003212:	9308      	str	r3, [sp, #32]
 8003214:	f8cd 901c 	str.w	r9, [sp, #28]
 8003218:	464f      	mov	r7, r9
 800321a:	220a      	movs	r2, #10
 800321c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800321e:	7806      	ldrb	r6, [r0, #0]
 8003220:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8003224:	b2d9      	uxtb	r1, r3
 8003226:	2909      	cmp	r1, #9
 8003228:	d92a      	bls.n	8003280 <_strtod_l+0x1b8>
 800322a:	9905      	ldr	r1, [sp, #20]
 800322c:	462a      	mov	r2, r5
 800322e:	f002 ff1f 	bl	8006070 <strncmp>
 8003232:	b398      	cbz	r0, 800329c <_strtod_l+0x1d4>
 8003234:	2000      	movs	r0, #0
 8003236:	4632      	mov	r2, r6
 8003238:	463d      	mov	r5, r7
 800323a:	9005      	str	r0, [sp, #20]
 800323c:	4603      	mov	r3, r0
 800323e:	2a65      	cmp	r2, #101	; 0x65
 8003240:	d001      	beq.n	8003246 <_strtod_l+0x17e>
 8003242:	2a45      	cmp	r2, #69	; 0x45
 8003244:	d118      	bne.n	8003278 <_strtod_l+0x1b0>
 8003246:	b91d      	cbnz	r5, 8003250 <_strtod_l+0x188>
 8003248:	9a04      	ldr	r2, [sp, #16]
 800324a:	4302      	orrs	r2, r0
 800324c:	d09e      	beq.n	800318c <_strtod_l+0xc4>
 800324e:	2500      	movs	r5, #0
 8003250:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8003254:	f108 0201 	add.w	r2, r8, #1
 8003258:	9217      	str	r2, [sp, #92]	; 0x5c
 800325a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800325e:	2a2b      	cmp	r2, #43	; 0x2b
 8003260:	d075      	beq.n	800334e <_strtod_l+0x286>
 8003262:	2a2d      	cmp	r2, #45	; 0x2d
 8003264:	d07b      	beq.n	800335e <_strtod_l+0x296>
 8003266:	f04f 0c00 	mov.w	ip, #0
 800326a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800326e:	2909      	cmp	r1, #9
 8003270:	f240 8082 	bls.w	8003378 <_strtod_l+0x2b0>
 8003274:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8003278:	2600      	movs	r6, #0
 800327a:	e09d      	b.n	80033b8 <_strtod_l+0x2f0>
 800327c:	2300      	movs	r3, #0
 800327e:	e7c4      	b.n	800320a <_strtod_l+0x142>
 8003280:	2f08      	cmp	r7, #8
 8003282:	bfd8      	it	le
 8003284:	9907      	ldrle	r1, [sp, #28]
 8003286:	f100 0001 	add.w	r0, r0, #1
 800328a:	bfda      	itte	le
 800328c:	fb02 3301 	mlale	r3, r2, r1, r3
 8003290:	9307      	strle	r3, [sp, #28]
 8003292:	fb02 3909 	mlagt	r9, r2, r9, r3
 8003296:	3701      	adds	r7, #1
 8003298:	9017      	str	r0, [sp, #92]	; 0x5c
 800329a:	e7bf      	b.n	800321c <_strtod_l+0x154>
 800329c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800329e:	195a      	adds	r2, r3, r5
 80032a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80032a2:	5d5a      	ldrb	r2, [r3, r5]
 80032a4:	2f00      	cmp	r7, #0
 80032a6:	d037      	beq.n	8003318 <_strtod_l+0x250>
 80032a8:	9005      	str	r0, [sp, #20]
 80032aa:	463d      	mov	r5, r7
 80032ac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80032b0:	2b09      	cmp	r3, #9
 80032b2:	d912      	bls.n	80032da <_strtod_l+0x212>
 80032b4:	2301      	movs	r3, #1
 80032b6:	e7c2      	b.n	800323e <_strtod_l+0x176>
 80032b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80032be:	785a      	ldrb	r2, [r3, #1]
 80032c0:	3001      	adds	r0, #1
 80032c2:	2a30      	cmp	r2, #48	; 0x30
 80032c4:	d0f8      	beq.n	80032b8 <_strtod_l+0x1f0>
 80032c6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	f200 84d9 	bhi.w	8003c82 <_strtod_l+0xbba>
 80032d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80032d2:	9005      	str	r0, [sp, #20]
 80032d4:	2000      	movs	r0, #0
 80032d6:	9308      	str	r3, [sp, #32]
 80032d8:	4605      	mov	r5, r0
 80032da:	3a30      	subs	r2, #48	; 0x30
 80032dc:	f100 0301 	add.w	r3, r0, #1
 80032e0:	d014      	beq.n	800330c <_strtod_l+0x244>
 80032e2:	9905      	ldr	r1, [sp, #20]
 80032e4:	4419      	add	r1, r3
 80032e6:	9105      	str	r1, [sp, #20]
 80032e8:	462b      	mov	r3, r5
 80032ea:	eb00 0e05 	add.w	lr, r0, r5
 80032ee:	210a      	movs	r1, #10
 80032f0:	4573      	cmp	r3, lr
 80032f2:	d113      	bne.n	800331c <_strtod_l+0x254>
 80032f4:	182b      	adds	r3, r5, r0
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	f105 0501 	add.w	r5, r5, #1
 80032fc:	4405      	add	r5, r0
 80032fe:	dc1c      	bgt.n	800333a <_strtod_l+0x272>
 8003300:	9907      	ldr	r1, [sp, #28]
 8003302:	230a      	movs	r3, #10
 8003304:	fb03 2301 	mla	r3, r3, r1, r2
 8003308:	9307      	str	r3, [sp, #28]
 800330a:	2300      	movs	r3, #0
 800330c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800330e:	1c51      	adds	r1, r2, #1
 8003310:	9117      	str	r1, [sp, #92]	; 0x5c
 8003312:	7852      	ldrb	r2, [r2, #1]
 8003314:	4618      	mov	r0, r3
 8003316:	e7c9      	b.n	80032ac <_strtod_l+0x1e4>
 8003318:	4638      	mov	r0, r7
 800331a:	e7d2      	b.n	80032c2 <_strtod_l+0x1fa>
 800331c:	2b08      	cmp	r3, #8
 800331e:	dc04      	bgt.n	800332a <_strtod_l+0x262>
 8003320:	9e07      	ldr	r6, [sp, #28]
 8003322:	434e      	muls	r6, r1
 8003324:	9607      	str	r6, [sp, #28]
 8003326:	3301      	adds	r3, #1
 8003328:	e7e2      	b.n	80032f0 <_strtod_l+0x228>
 800332a:	f103 0c01 	add.w	ip, r3, #1
 800332e:	f1bc 0f10 	cmp.w	ip, #16
 8003332:	bfd8      	it	le
 8003334:	fb01 f909 	mulle.w	r9, r1, r9
 8003338:	e7f5      	b.n	8003326 <_strtod_l+0x25e>
 800333a:	2d10      	cmp	r5, #16
 800333c:	bfdc      	itt	le
 800333e:	230a      	movle	r3, #10
 8003340:	fb03 2909 	mlale	r9, r3, r9, r2
 8003344:	e7e1      	b.n	800330a <_strtod_l+0x242>
 8003346:	2300      	movs	r3, #0
 8003348:	9305      	str	r3, [sp, #20]
 800334a:	2301      	movs	r3, #1
 800334c:	e77c      	b.n	8003248 <_strtod_l+0x180>
 800334e:	f04f 0c00 	mov.w	ip, #0
 8003352:	f108 0202 	add.w	r2, r8, #2
 8003356:	9217      	str	r2, [sp, #92]	; 0x5c
 8003358:	f898 2002 	ldrb.w	r2, [r8, #2]
 800335c:	e785      	b.n	800326a <_strtod_l+0x1a2>
 800335e:	f04f 0c01 	mov.w	ip, #1
 8003362:	e7f6      	b.n	8003352 <_strtod_l+0x28a>
 8003364:	08006ee0 	.word	0x08006ee0
 8003368:	08006c94 	.word	0x08006c94
 800336c:	7ff00000 	.word	0x7ff00000
 8003370:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003372:	1c51      	adds	r1, r2, #1
 8003374:	9117      	str	r1, [sp, #92]	; 0x5c
 8003376:	7852      	ldrb	r2, [r2, #1]
 8003378:	2a30      	cmp	r2, #48	; 0x30
 800337a:	d0f9      	beq.n	8003370 <_strtod_l+0x2a8>
 800337c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8003380:	2908      	cmp	r1, #8
 8003382:	f63f af79 	bhi.w	8003278 <_strtod_l+0x1b0>
 8003386:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800338a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800338c:	9206      	str	r2, [sp, #24]
 800338e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003390:	1c51      	adds	r1, r2, #1
 8003392:	9117      	str	r1, [sp, #92]	; 0x5c
 8003394:	7852      	ldrb	r2, [r2, #1]
 8003396:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800339a:	2e09      	cmp	r6, #9
 800339c:	d937      	bls.n	800340e <_strtod_l+0x346>
 800339e:	9e06      	ldr	r6, [sp, #24]
 80033a0:	1b89      	subs	r1, r1, r6
 80033a2:	2908      	cmp	r1, #8
 80033a4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80033a8:	dc02      	bgt.n	80033b0 <_strtod_l+0x2e8>
 80033aa:	4576      	cmp	r6, lr
 80033ac:	bfa8      	it	ge
 80033ae:	4676      	movge	r6, lr
 80033b0:	f1bc 0f00 	cmp.w	ip, #0
 80033b4:	d000      	beq.n	80033b8 <_strtod_l+0x2f0>
 80033b6:	4276      	negs	r6, r6
 80033b8:	2d00      	cmp	r5, #0
 80033ba:	d14d      	bne.n	8003458 <_strtod_l+0x390>
 80033bc:	9904      	ldr	r1, [sp, #16]
 80033be:	4301      	orrs	r1, r0
 80033c0:	f47f aec6 	bne.w	8003150 <_strtod_l+0x88>
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f47f aee1 	bne.w	800318c <_strtod_l+0xc4>
 80033ca:	2a69      	cmp	r2, #105	; 0x69
 80033cc:	d027      	beq.n	800341e <_strtod_l+0x356>
 80033ce:	dc24      	bgt.n	800341a <_strtod_l+0x352>
 80033d0:	2a49      	cmp	r2, #73	; 0x49
 80033d2:	d024      	beq.n	800341e <_strtod_l+0x356>
 80033d4:	2a4e      	cmp	r2, #78	; 0x4e
 80033d6:	f47f aed9 	bne.w	800318c <_strtod_l+0xc4>
 80033da:	499f      	ldr	r1, [pc, #636]	; (8003658 <_strtod_l+0x590>)
 80033dc:	a817      	add	r0, sp, #92	; 0x5c
 80033de:	f001 fe3d 	bl	800505c <__match>
 80033e2:	2800      	cmp	r0, #0
 80033e4:	f43f aed2 	beq.w	800318c <_strtod_l+0xc4>
 80033e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b28      	cmp	r3, #40	; 0x28
 80033ee:	d12d      	bne.n	800344c <_strtod_l+0x384>
 80033f0:	499a      	ldr	r1, [pc, #616]	; (800365c <_strtod_l+0x594>)
 80033f2:	aa1a      	add	r2, sp, #104	; 0x68
 80033f4:	a817      	add	r0, sp, #92	; 0x5c
 80033f6:	f001 fe45 	bl	8005084 <__hexnan>
 80033fa:	2805      	cmp	r0, #5
 80033fc:	d126      	bne.n	800344c <_strtod_l+0x384>
 80033fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003400:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8003404:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8003408:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800340c:	e6a0      	b.n	8003150 <_strtod_l+0x88>
 800340e:	210a      	movs	r1, #10
 8003410:	fb01 2e0e 	mla	lr, r1, lr, r2
 8003414:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8003418:	e7b9      	b.n	800338e <_strtod_l+0x2c6>
 800341a:	2a6e      	cmp	r2, #110	; 0x6e
 800341c:	e7db      	b.n	80033d6 <_strtod_l+0x30e>
 800341e:	4990      	ldr	r1, [pc, #576]	; (8003660 <_strtod_l+0x598>)
 8003420:	a817      	add	r0, sp, #92	; 0x5c
 8003422:	f001 fe1b 	bl	800505c <__match>
 8003426:	2800      	cmp	r0, #0
 8003428:	f43f aeb0 	beq.w	800318c <_strtod_l+0xc4>
 800342c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800342e:	498d      	ldr	r1, [pc, #564]	; (8003664 <_strtod_l+0x59c>)
 8003430:	3b01      	subs	r3, #1
 8003432:	a817      	add	r0, sp, #92	; 0x5c
 8003434:	9317      	str	r3, [sp, #92]	; 0x5c
 8003436:	f001 fe11 	bl	800505c <__match>
 800343a:	b910      	cbnz	r0, 8003442 <_strtod_l+0x37a>
 800343c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800343e:	3301      	adds	r3, #1
 8003440:	9317      	str	r3, [sp, #92]	; 0x5c
 8003442:	f8df b230 	ldr.w	fp, [pc, #560]	; 8003674 <_strtod_l+0x5ac>
 8003446:	f04f 0a00 	mov.w	sl, #0
 800344a:	e681      	b.n	8003150 <_strtod_l+0x88>
 800344c:	4886      	ldr	r0, [pc, #536]	; (8003668 <_strtod_l+0x5a0>)
 800344e:	f002 fdf7 	bl	8006040 <nan>
 8003452:	ec5b ab10 	vmov	sl, fp, d0
 8003456:	e67b      	b.n	8003150 <_strtod_l+0x88>
 8003458:	9b05      	ldr	r3, [sp, #20]
 800345a:	9807      	ldr	r0, [sp, #28]
 800345c:	1af3      	subs	r3, r6, r3
 800345e:	2f00      	cmp	r7, #0
 8003460:	bf08      	it	eq
 8003462:	462f      	moveq	r7, r5
 8003464:	2d10      	cmp	r5, #16
 8003466:	9306      	str	r3, [sp, #24]
 8003468:	46a8      	mov	r8, r5
 800346a:	bfa8      	it	ge
 800346c:	f04f 0810 	movge.w	r8, #16
 8003470:	f7fd f850 	bl	8000514 <__aeabi_ui2d>
 8003474:	2d09      	cmp	r5, #9
 8003476:	4682      	mov	sl, r0
 8003478:	468b      	mov	fp, r1
 800347a:	dd13      	ble.n	80034a4 <_strtod_l+0x3dc>
 800347c:	4b7b      	ldr	r3, [pc, #492]	; (800366c <_strtod_l+0x5a4>)
 800347e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003482:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003486:	f7fd f8bf 	bl	8000608 <__aeabi_dmul>
 800348a:	4682      	mov	sl, r0
 800348c:	4648      	mov	r0, r9
 800348e:	468b      	mov	fp, r1
 8003490:	f7fd f840 	bl	8000514 <__aeabi_ui2d>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4650      	mov	r0, sl
 800349a:	4659      	mov	r1, fp
 800349c:	f7fc fefe 	bl	800029c <__adddf3>
 80034a0:	4682      	mov	sl, r0
 80034a2:	468b      	mov	fp, r1
 80034a4:	2d0f      	cmp	r5, #15
 80034a6:	dc38      	bgt.n	800351a <_strtod_l+0x452>
 80034a8:	9b06      	ldr	r3, [sp, #24]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f43f ae50 	beq.w	8003150 <_strtod_l+0x88>
 80034b0:	dd24      	ble.n	80034fc <_strtod_l+0x434>
 80034b2:	2b16      	cmp	r3, #22
 80034b4:	dc0b      	bgt.n	80034ce <_strtod_l+0x406>
 80034b6:	496d      	ldr	r1, [pc, #436]	; (800366c <_strtod_l+0x5a4>)
 80034b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80034bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034c0:	4652      	mov	r2, sl
 80034c2:	465b      	mov	r3, fp
 80034c4:	f7fd f8a0 	bl	8000608 <__aeabi_dmul>
 80034c8:	4682      	mov	sl, r0
 80034ca:	468b      	mov	fp, r1
 80034cc:	e640      	b.n	8003150 <_strtod_l+0x88>
 80034ce:	9a06      	ldr	r2, [sp, #24]
 80034d0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80034d4:	4293      	cmp	r3, r2
 80034d6:	db20      	blt.n	800351a <_strtod_l+0x452>
 80034d8:	4c64      	ldr	r4, [pc, #400]	; (800366c <_strtod_l+0x5a4>)
 80034da:	f1c5 050f 	rsb	r5, r5, #15
 80034de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80034e2:	4652      	mov	r2, sl
 80034e4:	465b      	mov	r3, fp
 80034e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034ea:	f7fd f88d 	bl	8000608 <__aeabi_dmul>
 80034ee:	9b06      	ldr	r3, [sp, #24]
 80034f0:	1b5d      	subs	r5, r3, r5
 80034f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80034f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80034fa:	e7e3      	b.n	80034c4 <_strtod_l+0x3fc>
 80034fc:	9b06      	ldr	r3, [sp, #24]
 80034fe:	3316      	adds	r3, #22
 8003500:	db0b      	blt.n	800351a <_strtod_l+0x452>
 8003502:	9b05      	ldr	r3, [sp, #20]
 8003504:	1b9e      	subs	r6, r3, r6
 8003506:	4b59      	ldr	r3, [pc, #356]	; (800366c <_strtod_l+0x5a4>)
 8003508:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800350c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003510:	4650      	mov	r0, sl
 8003512:	4659      	mov	r1, fp
 8003514:	f7fd f9a2 	bl	800085c <__aeabi_ddiv>
 8003518:	e7d6      	b.n	80034c8 <_strtod_l+0x400>
 800351a:	9b06      	ldr	r3, [sp, #24]
 800351c:	eba5 0808 	sub.w	r8, r5, r8
 8003520:	4498      	add	r8, r3
 8003522:	f1b8 0f00 	cmp.w	r8, #0
 8003526:	dd74      	ble.n	8003612 <_strtod_l+0x54a>
 8003528:	f018 030f 	ands.w	r3, r8, #15
 800352c:	d00a      	beq.n	8003544 <_strtod_l+0x47c>
 800352e:	494f      	ldr	r1, [pc, #316]	; (800366c <_strtod_l+0x5a4>)
 8003530:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003534:	4652      	mov	r2, sl
 8003536:	465b      	mov	r3, fp
 8003538:	e9d1 0100 	ldrd	r0, r1, [r1]
 800353c:	f7fd f864 	bl	8000608 <__aeabi_dmul>
 8003540:	4682      	mov	sl, r0
 8003542:	468b      	mov	fp, r1
 8003544:	f038 080f 	bics.w	r8, r8, #15
 8003548:	d04f      	beq.n	80035ea <_strtod_l+0x522>
 800354a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800354e:	dd22      	ble.n	8003596 <_strtod_l+0x4ce>
 8003550:	2500      	movs	r5, #0
 8003552:	462e      	mov	r6, r5
 8003554:	9507      	str	r5, [sp, #28]
 8003556:	9505      	str	r5, [sp, #20]
 8003558:	2322      	movs	r3, #34	; 0x22
 800355a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8003674 <_strtod_l+0x5ac>
 800355e:	6023      	str	r3, [r4, #0]
 8003560:	f04f 0a00 	mov.w	sl, #0
 8003564:	9b07      	ldr	r3, [sp, #28]
 8003566:	2b00      	cmp	r3, #0
 8003568:	f43f adf2 	beq.w	8003150 <_strtod_l+0x88>
 800356c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800356e:	4620      	mov	r0, r4
 8003570:	f001 fe90 	bl	8005294 <_Bfree>
 8003574:	9905      	ldr	r1, [sp, #20]
 8003576:	4620      	mov	r0, r4
 8003578:	f001 fe8c 	bl	8005294 <_Bfree>
 800357c:	4631      	mov	r1, r6
 800357e:	4620      	mov	r0, r4
 8003580:	f001 fe88 	bl	8005294 <_Bfree>
 8003584:	9907      	ldr	r1, [sp, #28]
 8003586:	4620      	mov	r0, r4
 8003588:	f001 fe84 	bl	8005294 <_Bfree>
 800358c:	4629      	mov	r1, r5
 800358e:	4620      	mov	r0, r4
 8003590:	f001 fe80 	bl	8005294 <_Bfree>
 8003594:	e5dc      	b.n	8003150 <_strtod_l+0x88>
 8003596:	4b36      	ldr	r3, [pc, #216]	; (8003670 <_strtod_l+0x5a8>)
 8003598:	9304      	str	r3, [sp, #16]
 800359a:	2300      	movs	r3, #0
 800359c:	ea4f 1828 	mov.w	r8, r8, asr #4
 80035a0:	4650      	mov	r0, sl
 80035a2:	4659      	mov	r1, fp
 80035a4:	4699      	mov	r9, r3
 80035a6:	f1b8 0f01 	cmp.w	r8, #1
 80035aa:	dc21      	bgt.n	80035f0 <_strtod_l+0x528>
 80035ac:	b10b      	cbz	r3, 80035b2 <_strtod_l+0x4ea>
 80035ae:	4682      	mov	sl, r0
 80035b0:	468b      	mov	fp, r1
 80035b2:	4b2f      	ldr	r3, [pc, #188]	; (8003670 <_strtod_l+0x5a8>)
 80035b4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80035b8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80035bc:	4652      	mov	r2, sl
 80035be:	465b      	mov	r3, fp
 80035c0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80035c4:	f7fd f820 	bl	8000608 <__aeabi_dmul>
 80035c8:	4b2a      	ldr	r3, [pc, #168]	; (8003674 <_strtod_l+0x5ac>)
 80035ca:	460a      	mov	r2, r1
 80035cc:	400b      	ands	r3, r1
 80035ce:	492a      	ldr	r1, [pc, #168]	; (8003678 <_strtod_l+0x5b0>)
 80035d0:	428b      	cmp	r3, r1
 80035d2:	4682      	mov	sl, r0
 80035d4:	d8bc      	bhi.n	8003550 <_strtod_l+0x488>
 80035d6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80035da:	428b      	cmp	r3, r1
 80035dc:	bf86      	itte	hi
 80035de:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800367c <_strtod_l+0x5b4>
 80035e2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80035e6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80035ea:	2300      	movs	r3, #0
 80035ec:	9304      	str	r3, [sp, #16]
 80035ee:	e084      	b.n	80036fa <_strtod_l+0x632>
 80035f0:	f018 0f01 	tst.w	r8, #1
 80035f4:	d005      	beq.n	8003602 <_strtod_l+0x53a>
 80035f6:	9b04      	ldr	r3, [sp, #16]
 80035f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fc:	f7fd f804 	bl	8000608 <__aeabi_dmul>
 8003600:	2301      	movs	r3, #1
 8003602:	9a04      	ldr	r2, [sp, #16]
 8003604:	3208      	adds	r2, #8
 8003606:	f109 0901 	add.w	r9, r9, #1
 800360a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800360e:	9204      	str	r2, [sp, #16]
 8003610:	e7c9      	b.n	80035a6 <_strtod_l+0x4de>
 8003612:	d0ea      	beq.n	80035ea <_strtod_l+0x522>
 8003614:	f1c8 0800 	rsb	r8, r8, #0
 8003618:	f018 020f 	ands.w	r2, r8, #15
 800361c:	d00a      	beq.n	8003634 <_strtod_l+0x56c>
 800361e:	4b13      	ldr	r3, [pc, #76]	; (800366c <_strtod_l+0x5a4>)
 8003620:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003624:	4650      	mov	r0, sl
 8003626:	4659      	mov	r1, fp
 8003628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362c:	f7fd f916 	bl	800085c <__aeabi_ddiv>
 8003630:	4682      	mov	sl, r0
 8003632:	468b      	mov	fp, r1
 8003634:	ea5f 1828 	movs.w	r8, r8, asr #4
 8003638:	d0d7      	beq.n	80035ea <_strtod_l+0x522>
 800363a:	f1b8 0f1f 	cmp.w	r8, #31
 800363e:	dd1f      	ble.n	8003680 <_strtod_l+0x5b8>
 8003640:	2500      	movs	r5, #0
 8003642:	462e      	mov	r6, r5
 8003644:	9507      	str	r5, [sp, #28]
 8003646:	9505      	str	r5, [sp, #20]
 8003648:	2322      	movs	r3, #34	; 0x22
 800364a:	f04f 0a00 	mov.w	sl, #0
 800364e:	f04f 0b00 	mov.w	fp, #0
 8003652:	6023      	str	r3, [r4, #0]
 8003654:	e786      	b.n	8003564 <_strtod_l+0x49c>
 8003656:	bf00      	nop
 8003658:	08006c65 	.word	0x08006c65
 800365c:	08006ca8 	.word	0x08006ca8
 8003660:	08006c5d 	.word	0x08006c5d
 8003664:	08006dec 	.word	0x08006dec
 8003668:	08007098 	.word	0x08007098
 800366c:	08006f78 	.word	0x08006f78
 8003670:	08006f50 	.word	0x08006f50
 8003674:	7ff00000 	.word	0x7ff00000
 8003678:	7ca00000 	.word	0x7ca00000
 800367c:	7fefffff 	.word	0x7fefffff
 8003680:	f018 0310 	ands.w	r3, r8, #16
 8003684:	bf18      	it	ne
 8003686:	236a      	movne	r3, #106	; 0x6a
 8003688:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8003a38 <_strtod_l+0x970>
 800368c:	9304      	str	r3, [sp, #16]
 800368e:	4650      	mov	r0, sl
 8003690:	4659      	mov	r1, fp
 8003692:	2300      	movs	r3, #0
 8003694:	f018 0f01 	tst.w	r8, #1
 8003698:	d004      	beq.n	80036a4 <_strtod_l+0x5dc>
 800369a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800369e:	f7fc ffb3 	bl	8000608 <__aeabi_dmul>
 80036a2:	2301      	movs	r3, #1
 80036a4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80036a8:	f109 0908 	add.w	r9, r9, #8
 80036ac:	d1f2      	bne.n	8003694 <_strtod_l+0x5cc>
 80036ae:	b10b      	cbz	r3, 80036b4 <_strtod_l+0x5ec>
 80036b0:	4682      	mov	sl, r0
 80036b2:	468b      	mov	fp, r1
 80036b4:	9b04      	ldr	r3, [sp, #16]
 80036b6:	b1c3      	cbz	r3, 80036ea <_strtod_l+0x622>
 80036b8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80036bc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	4659      	mov	r1, fp
 80036c4:	dd11      	ble.n	80036ea <_strtod_l+0x622>
 80036c6:	2b1f      	cmp	r3, #31
 80036c8:	f340 8124 	ble.w	8003914 <_strtod_l+0x84c>
 80036cc:	2b34      	cmp	r3, #52	; 0x34
 80036ce:	bfde      	ittt	le
 80036d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80036d4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80036d8:	fa03 f202 	lslle.w	r2, r3, r2
 80036dc:	f04f 0a00 	mov.w	sl, #0
 80036e0:	bfcc      	ite	gt
 80036e2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80036e6:	ea02 0b01 	andle.w	fp, r2, r1
 80036ea:	2200      	movs	r2, #0
 80036ec:	2300      	movs	r3, #0
 80036ee:	4650      	mov	r0, sl
 80036f0:	4659      	mov	r1, fp
 80036f2:	f7fd f9f1 	bl	8000ad8 <__aeabi_dcmpeq>
 80036f6:	2800      	cmp	r0, #0
 80036f8:	d1a2      	bne.n	8003640 <_strtod_l+0x578>
 80036fa:	9b07      	ldr	r3, [sp, #28]
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	9908      	ldr	r1, [sp, #32]
 8003700:	462b      	mov	r3, r5
 8003702:	463a      	mov	r2, r7
 8003704:	4620      	mov	r0, r4
 8003706:	f001 fe2d 	bl	8005364 <__s2b>
 800370a:	9007      	str	r0, [sp, #28]
 800370c:	2800      	cmp	r0, #0
 800370e:	f43f af1f 	beq.w	8003550 <_strtod_l+0x488>
 8003712:	9b05      	ldr	r3, [sp, #20]
 8003714:	1b9e      	subs	r6, r3, r6
 8003716:	9b06      	ldr	r3, [sp, #24]
 8003718:	2b00      	cmp	r3, #0
 800371a:	bfb4      	ite	lt
 800371c:	4633      	movlt	r3, r6
 800371e:	2300      	movge	r3, #0
 8003720:	930c      	str	r3, [sp, #48]	; 0x30
 8003722:	9b06      	ldr	r3, [sp, #24]
 8003724:	2500      	movs	r5, #0
 8003726:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800372a:	9312      	str	r3, [sp, #72]	; 0x48
 800372c:	462e      	mov	r6, r5
 800372e:	9b07      	ldr	r3, [sp, #28]
 8003730:	4620      	mov	r0, r4
 8003732:	6859      	ldr	r1, [r3, #4]
 8003734:	f001 fd6e 	bl	8005214 <_Balloc>
 8003738:	9005      	str	r0, [sp, #20]
 800373a:	2800      	cmp	r0, #0
 800373c:	f43f af0c 	beq.w	8003558 <_strtod_l+0x490>
 8003740:	9b07      	ldr	r3, [sp, #28]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	3202      	adds	r2, #2
 8003746:	f103 010c 	add.w	r1, r3, #12
 800374a:	0092      	lsls	r2, r2, #2
 800374c:	300c      	adds	r0, #12
 800374e:	f001 fd53 	bl	80051f8 <memcpy>
 8003752:	ec4b ab10 	vmov	d0, sl, fp
 8003756:	aa1a      	add	r2, sp, #104	; 0x68
 8003758:	a919      	add	r1, sp, #100	; 0x64
 800375a:	4620      	mov	r0, r4
 800375c:	f002 f948 	bl	80059f0 <__d2b>
 8003760:	ec4b ab18 	vmov	d8, sl, fp
 8003764:	9018      	str	r0, [sp, #96]	; 0x60
 8003766:	2800      	cmp	r0, #0
 8003768:	f43f aef6 	beq.w	8003558 <_strtod_l+0x490>
 800376c:	2101      	movs	r1, #1
 800376e:	4620      	mov	r0, r4
 8003770:	f001 fe92 	bl	8005498 <__i2b>
 8003774:	4606      	mov	r6, r0
 8003776:	2800      	cmp	r0, #0
 8003778:	f43f aeee 	beq.w	8003558 <_strtod_l+0x490>
 800377c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800377e:	9904      	ldr	r1, [sp, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	bfab      	itete	ge
 8003784:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8003786:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8003788:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800378a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800378e:	bfac      	ite	ge
 8003790:	eb03 0902 	addge.w	r9, r3, r2
 8003794:	1ad7      	sublt	r7, r2, r3
 8003796:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003798:	eba3 0801 	sub.w	r8, r3, r1
 800379c:	4490      	add	r8, r2
 800379e:	4ba1      	ldr	r3, [pc, #644]	; (8003a24 <_strtod_l+0x95c>)
 80037a0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80037a4:	4598      	cmp	r8, r3
 80037a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80037aa:	f280 80c7 	bge.w	800393c <_strtod_l+0x874>
 80037ae:	eba3 0308 	sub.w	r3, r3, r8
 80037b2:	2b1f      	cmp	r3, #31
 80037b4:	eba2 0203 	sub.w	r2, r2, r3
 80037b8:	f04f 0101 	mov.w	r1, #1
 80037bc:	f300 80b1 	bgt.w	8003922 <_strtod_l+0x85a>
 80037c0:	fa01 f303 	lsl.w	r3, r1, r3
 80037c4:	930d      	str	r3, [sp, #52]	; 0x34
 80037c6:	2300      	movs	r3, #0
 80037c8:	9308      	str	r3, [sp, #32]
 80037ca:	eb09 0802 	add.w	r8, r9, r2
 80037ce:	9b04      	ldr	r3, [sp, #16]
 80037d0:	45c1      	cmp	r9, r8
 80037d2:	4417      	add	r7, r2
 80037d4:	441f      	add	r7, r3
 80037d6:	464b      	mov	r3, r9
 80037d8:	bfa8      	it	ge
 80037da:	4643      	movge	r3, r8
 80037dc:	42bb      	cmp	r3, r7
 80037de:	bfa8      	it	ge
 80037e0:	463b      	movge	r3, r7
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	bfc2      	ittt	gt
 80037e6:	eba8 0803 	subgt.w	r8, r8, r3
 80037ea:	1aff      	subgt	r7, r7, r3
 80037ec:	eba9 0903 	subgt.w	r9, r9, r3
 80037f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	dd17      	ble.n	8003826 <_strtod_l+0x75e>
 80037f6:	4631      	mov	r1, r6
 80037f8:	461a      	mov	r2, r3
 80037fa:	4620      	mov	r0, r4
 80037fc:	f001 ff0c 	bl	8005618 <__pow5mult>
 8003800:	4606      	mov	r6, r0
 8003802:	2800      	cmp	r0, #0
 8003804:	f43f aea8 	beq.w	8003558 <_strtod_l+0x490>
 8003808:	4601      	mov	r1, r0
 800380a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800380c:	4620      	mov	r0, r4
 800380e:	f001 fe59 	bl	80054c4 <__multiply>
 8003812:	900b      	str	r0, [sp, #44]	; 0x2c
 8003814:	2800      	cmp	r0, #0
 8003816:	f43f ae9f 	beq.w	8003558 <_strtod_l+0x490>
 800381a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800381c:	4620      	mov	r0, r4
 800381e:	f001 fd39 	bl	8005294 <_Bfree>
 8003822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003824:	9318      	str	r3, [sp, #96]	; 0x60
 8003826:	f1b8 0f00 	cmp.w	r8, #0
 800382a:	f300 808c 	bgt.w	8003946 <_strtod_l+0x87e>
 800382e:	9b06      	ldr	r3, [sp, #24]
 8003830:	2b00      	cmp	r3, #0
 8003832:	dd08      	ble.n	8003846 <_strtod_l+0x77e>
 8003834:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003836:	9905      	ldr	r1, [sp, #20]
 8003838:	4620      	mov	r0, r4
 800383a:	f001 feed 	bl	8005618 <__pow5mult>
 800383e:	9005      	str	r0, [sp, #20]
 8003840:	2800      	cmp	r0, #0
 8003842:	f43f ae89 	beq.w	8003558 <_strtod_l+0x490>
 8003846:	2f00      	cmp	r7, #0
 8003848:	dd08      	ble.n	800385c <_strtod_l+0x794>
 800384a:	9905      	ldr	r1, [sp, #20]
 800384c:	463a      	mov	r2, r7
 800384e:	4620      	mov	r0, r4
 8003850:	f001 ff3c 	bl	80056cc <__lshift>
 8003854:	9005      	str	r0, [sp, #20]
 8003856:	2800      	cmp	r0, #0
 8003858:	f43f ae7e 	beq.w	8003558 <_strtod_l+0x490>
 800385c:	f1b9 0f00 	cmp.w	r9, #0
 8003860:	dd08      	ble.n	8003874 <_strtod_l+0x7ac>
 8003862:	4631      	mov	r1, r6
 8003864:	464a      	mov	r2, r9
 8003866:	4620      	mov	r0, r4
 8003868:	f001 ff30 	bl	80056cc <__lshift>
 800386c:	4606      	mov	r6, r0
 800386e:	2800      	cmp	r0, #0
 8003870:	f43f ae72 	beq.w	8003558 <_strtod_l+0x490>
 8003874:	9a05      	ldr	r2, [sp, #20]
 8003876:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003878:	4620      	mov	r0, r4
 800387a:	f001 ffb3 	bl	80057e4 <__mdiff>
 800387e:	4605      	mov	r5, r0
 8003880:	2800      	cmp	r0, #0
 8003882:	f43f ae69 	beq.w	8003558 <_strtod_l+0x490>
 8003886:	68c3      	ldr	r3, [r0, #12]
 8003888:	930b      	str	r3, [sp, #44]	; 0x2c
 800388a:	2300      	movs	r3, #0
 800388c:	60c3      	str	r3, [r0, #12]
 800388e:	4631      	mov	r1, r6
 8003890:	f001 ff8c 	bl	80057ac <__mcmp>
 8003894:	2800      	cmp	r0, #0
 8003896:	da60      	bge.n	800395a <_strtod_l+0x892>
 8003898:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800389a:	ea53 030a 	orrs.w	r3, r3, sl
 800389e:	f040 8082 	bne.w	80039a6 <_strtod_l+0x8de>
 80038a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d17d      	bne.n	80039a6 <_strtod_l+0x8de>
 80038aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80038ae:	0d1b      	lsrs	r3, r3, #20
 80038b0:	051b      	lsls	r3, r3, #20
 80038b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80038b6:	d976      	bls.n	80039a6 <_strtod_l+0x8de>
 80038b8:	696b      	ldr	r3, [r5, #20]
 80038ba:	b913      	cbnz	r3, 80038c2 <_strtod_l+0x7fa>
 80038bc:	692b      	ldr	r3, [r5, #16]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	dd71      	ble.n	80039a6 <_strtod_l+0x8de>
 80038c2:	4629      	mov	r1, r5
 80038c4:	2201      	movs	r2, #1
 80038c6:	4620      	mov	r0, r4
 80038c8:	f001 ff00 	bl	80056cc <__lshift>
 80038cc:	4631      	mov	r1, r6
 80038ce:	4605      	mov	r5, r0
 80038d0:	f001 ff6c 	bl	80057ac <__mcmp>
 80038d4:	2800      	cmp	r0, #0
 80038d6:	dd66      	ble.n	80039a6 <_strtod_l+0x8de>
 80038d8:	9904      	ldr	r1, [sp, #16]
 80038da:	4a53      	ldr	r2, [pc, #332]	; (8003a28 <_strtod_l+0x960>)
 80038dc:	465b      	mov	r3, fp
 80038de:	2900      	cmp	r1, #0
 80038e0:	f000 8081 	beq.w	80039e6 <_strtod_l+0x91e>
 80038e4:	ea02 010b 	and.w	r1, r2, fp
 80038e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80038ec:	dc7b      	bgt.n	80039e6 <_strtod_l+0x91e>
 80038ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80038f2:	f77f aea9 	ble.w	8003648 <_strtod_l+0x580>
 80038f6:	4b4d      	ldr	r3, [pc, #308]	; (8003a2c <_strtod_l+0x964>)
 80038f8:	4650      	mov	r0, sl
 80038fa:	4659      	mov	r1, fp
 80038fc:	2200      	movs	r2, #0
 80038fe:	f7fc fe83 	bl	8000608 <__aeabi_dmul>
 8003902:	460b      	mov	r3, r1
 8003904:	4303      	orrs	r3, r0
 8003906:	bf08      	it	eq
 8003908:	2322      	moveq	r3, #34	; 0x22
 800390a:	4682      	mov	sl, r0
 800390c:	468b      	mov	fp, r1
 800390e:	bf08      	it	eq
 8003910:	6023      	streq	r3, [r4, #0]
 8003912:	e62b      	b.n	800356c <_strtod_l+0x4a4>
 8003914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	ea03 0a0a 	and.w	sl, r3, sl
 8003920:	e6e3      	b.n	80036ea <_strtod_l+0x622>
 8003922:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8003926:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800392a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800392e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8003932:	fa01 f308 	lsl.w	r3, r1, r8
 8003936:	9308      	str	r3, [sp, #32]
 8003938:	910d      	str	r1, [sp, #52]	; 0x34
 800393a:	e746      	b.n	80037ca <_strtod_l+0x702>
 800393c:	2300      	movs	r3, #0
 800393e:	9308      	str	r3, [sp, #32]
 8003940:	2301      	movs	r3, #1
 8003942:	930d      	str	r3, [sp, #52]	; 0x34
 8003944:	e741      	b.n	80037ca <_strtod_l+0x702>
 8003946:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003948:	4642      	mov	r2, r8
 800394a:	4620      	mov	r0, r4
 800394c:	f001 febe 	bl	80056cc <__lshift>
 8003950:	9018      	str	r0, [sp, #96]	; 0x60
 8003952:	2800      	cmp	r0, #0
 8003954:	f47f af6b 	bne.w	800382e <_strtod_l+0x766>
 8003958:	e5fe      	b.n	8003558 <_strtod_l+0x490>
 800395a:	465f      	mov	r7, fp
 800395c:	d16e      	bne.n	8003a3c <_strtod_l+0x974>
 800395e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003960:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003964:	b342      	cbz	r2, 80039b8 <_strtod_l+0x8f0>
 8003966:	4a32      	ldr	r2, [pc, #200]	; (8003a30 <_strtod_l+0x968>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d128      	bne.n	80039be <_strtod_l+0x8f6>
 800396c:	9b04      	ldr	r3, [sp, #16]
 800396e:	4651      	mov	r1, sl
 8003970:	b1eb      	cbz	r3, 80039ae <_strtod_l+0x8e6>
 8003972:	4b2d      	ldr	r3, [pc, #180]	; (8003a28 <_strtod_l+0x960>)
 8003974:	403b      	ands	r3, r7
 8003976:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800397a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800397e:	d819      	bhi.n	80039b4 <_strtod_l+0x8ec>
 8003980:	0d1b      	lsrs	r3, r3, #20
 8003982:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	4299      	cmp	r1, r3
 800398c:	d117      	bne.n	80039be <_strtod_l+0x8f6>
 800398e:	4b29      	ldr	r3, [pc, #164]	; (8003a34 <_strtod_l+0x96c>)
 8003990:	429f      	cmp	r7, r3
 8003992:	d102      	bne.n	800399a <_strtod_l+0x8d2>
 8003994:	3101      	adds	r1, #1
 8003996:	f43f addf 	beq.w	8003558 <_strtod_l+0x490>
 800399a:	4b23      	ldr	r3, [pc, #140]	; (8003a28 <_strtod_l+0x960>)
 800399c:	403b      	ands	r3, r7
 800399e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80039a2:	f04f 0a00 	mov.w	sl, #0
 80039a6:	9b04      	ldr	r3, [sp, #16]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1a4      	bne.n	80038f6 <_strtod_l+0x82e>
 80039ac:	e5de      	b.n	800356c <_strtod_l+0x4a4>
 80039ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039b2:	e7ea      	b.n	800398a <_strtod_l+0x8c2>
 80039b4:	4613      	mov	r3, r2
 80039b6:	e7e8      	b.n	800398a <_strtod_l+0x8c2>
 80039b8:	ea53 030a 	orrs.w	r3, r3, sl
 80039bc:	d08c      	beq.n	80038d8 <_strtod_l+0x810>
 80039be:	9b08      	ldr	r3, [sp, #32]
 80039c0:	b1db      	cbz	r3, 80039fa <_strtod_l+0x932>
 80039c2:	423b      	tst	r3, r7
 80039c4:	d0ef      	beq.n	80039a6 <_strtod_l+0x8de>
 80039c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80039c8:	9a04      	ldr	r2, [sp, #16]
 80039ca:	4650      	mov	r0, sl
 80039cc:	4659      	mov	r1, fp
 80039ce:	b1c3      	cbz	r3, 8003a02 <_strtod_l+0x93a>
 80039d0:	f7ff fb5c 	bl	800308c <sulp>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	ec51 0b18 	vmov	r0, r1, d8
 80039dc:	f7fc fc5e 	bl	800029c <__adddf3>
 80039e0:	4682      	mov	sl, r0
 80039e2:	468b      	mov	fp, r1
 80039e4:	e7df      	b.n	80039a6 <_strtod_l+0x8de>
 80039e6:	4013      	ands	r3, r2
 80039e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80039ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80039f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80039f4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80039f8:	e7d5      	b.n	80039a6 <_strtod_l+0x8de>
 80039fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80039fc:	ea13 0f0a 	tst.w	r3, sl
 8003a00:	e7e0      	b.n	80039c4 <_strtod_l+0x8fc>
 8003a02:	f7ff fb43 	bl	800308c <sulp>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	ec51 0b18 	vmov	r0, r1, d8
 8003a0e:	f7fc fc43 	bl	8000298 <__aeabi_dsub>
 8003a12:	2200      	movs	r2, #0
 8003a14:	2300      	movs	r3, #0
 8003a16:	4682      	mov	sl, r0
 8003a18:	468b      	mov	fp, r1
 8003a1a:	f7fd f85d 	bl	8000ad8 <__aeabi_dcmpeq>
 8003a1e:	2800      	cmp	r0, #0
 8003a20:	d0c1      	beq.n	80039a6 <_strtod_l+0x8de>
 8003a22:	e611      	b.n	8003648 <_strtod_l+0x580>
 8003a24:	fffffc02 	.word	0xfffffc02
 8003a28:	7ff00000 	.word	0x7ff00000
 8003a2c:	39500000 	.word	0x39500000
 8003a30:	000fffff 	.word	0x000fffff
 8003a34:	7fefffff 	.word	0x7fefffff
 8003a38:	08006cc0 	.word	0x08006cc0
 8003a3c:	4631      	mov	r1, r6
 8003a3e:	4628      	mov	r0, r5
 8003a40:	f002 f832 	bl	8005aa8 <__ratio>
 8003a44:	ec59 8b10 	vmov	r8, r9, d0
 8003a48:	ee10 0a10 	vmov	r0, s0
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a52:	4649      	mov	r1, r9
 8003a54:	f7fd f854 	bl	8000b00 <__aeabi_dcmple>
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	d07a      	beq.n	8003b52 <_strtod_l+0xa8a>
 8003a5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d04a      	beq.n	8003af8 <_strtod_l+0xa30>
 8003a62:	4b95      	ldr	r3, [pc, #596]	; (8003cb8 <_strtod_l+0xbf0>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003a6a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8003cb8 <_strtod_l+0xbf0>
 8003a6e:	f04f 0800 	mov.w	r8, #0
 8003a72:	4b92      	ldr	r3, [pc, #584]	; (8003cbc <_strtod_l+0xbf4>)
 8003a74:	403b      	ands	r3, r7
 8003a76:	930d      	str	r3, [sp, #52]	; 0x34
 8003a78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003a7a:	4b91      	ldr	r3, [pc, #580]	; (8003cc0 <_strtod_l+0xbf8>)
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	f040 80b0 	bne.w	8003be2 <_strtod_l+0xb1a>
 8003a82:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003a86:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8003a8a:	ec4b ab10 	vmov	d0, sl, fp
 8003a8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003a92:	f001 ff31 	bl	80058f8 <__ulp>
 8003a96:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003a9a:	ec53 2b10 	vmov	r2, r3, d0
 8003a9e:	f7fc fdb3 	bl	8000608 <__aeabi_dmul>
 8003aa2:	4652      	mov	r2, sl
 8003aa4:	465b      	mov	r3, fp
 8003aa6:	f7fc fbf9 	bl	800029c <__adddf3>
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4983      	ldr	r1, [pc, #524]	; (8003cbc <_strtod_l+0xbf4>)
 8003aae:	4a85      	ldr	r2, [pc, #532]	; (8003cc4 <_strtod_l+0xbfc>)
 8003ab0:	4019      	ands	r1, r3
 8003ab2:	4291      	cmp	r1, r2
 8003ab4:	4682      	mov	sl, r0
 8003ab6:	d960      	bls.n	8003b7a <_strtod_l+0xab2>
 8003ab8:	ee18 3a90 	vmov	r3, s17
 8003abc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d104      	bne.n	8003ace <_strtod_l+0xa06>
 8003ac4:	ee18 3a10 	vmov	r3, s16
 8003ac8:	3301      	adds	r3, #1
 8003aca:	f43f ad45 	beq.w	8003558 <_strtod_l+0x490>
 8003ace:	f8df b200 	ldr.w	fp, [pc, #512]	; 8003cd0 <_strtod_l+0xc08>
 8003ad2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8003ad6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f001 fbdb 	bl	8005294 <_Bfree>
 8003ade:	9905      	ldr	r1, [sp, #20]
 8003ae0:	4620      	mov	r0, r4
 8003ae2:	f001 fbd7 	bl	8005294 <_Bfree>
 8003ae6:	4631      	mov	r1, r6
 8003ae8:	4620      	mov	r0, r4
 8003aea:	f001 fbd3 	bl	8005294 <_Bfree>
 8003aee:	4629      	mov	r1, r5
 8003af0:	4620      	mov	r0, r4
 8003af2:	f001 fbcf 	bl	8005294 <_Bfree>
 8003af6:	e61a      	b.n	800372e <_strtod_l+0x666>
 8003af8:	f1ba 0f00 	cmp.w	sl, #0
 8003afc:	d11b      	bne.n	8003b36 <_strtod_l+0xa6e>
 8003afe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003b02:	b9f3      	cbnz	r3, 8003b42 <_strtod_l+0xa7a>
 8003b04:	4b6c      	ldr	r3, [pc, #432]	; (8003cb8 <_strtod_l+0xbf0>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	4640      	mov	r0, r8
 8003b0a:	4649      	mov	r1, r9
 8003b0c:	f7fc ffee 	bl	8000aec <__aeabi_dcmplt>
 8003b10:	b9d0      	cbnz	r0, 8003b48 <_strtod_l+0xa80>
 8003b12:	4640      	mov	r0, r8
 8003b14:	4649      	mov	r1, r9
 8003b16:	4b6c      	ldr	r3, [pc, #432]	; (8003cc8 <_strtod_l+0xc00>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f7fc fd75 	bl	8000608 <__aeabi_dmul>
 8003b1e:	4680      	mov	r8, r0
 8003b20:	4689      	mov	r9, r1
 8003b22:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003b26:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8003b2a:	9315      	str	r3, [sp, #84]	; 0x54
 8003b2c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8003b30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003b34:	e79d      	b.n	8003a72 <_strtod_l+0x9aa>
 8003b36:	f1ba 0f01 	cmp.w	sl, #1
 8003b3a:	d102      	bne.n	8003b42 <_strtod_l+0xa7a>
 8003b3c:	2f00      	cmp	r7, #0
 8003b3e:	f43f ad83 	beq.w	8003648 <_strtod_l+0x580>
 8003b42:	4b62      	ldr	r3, [pc, #392]	; (8003ccc <_strtod_l+0xc04>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	e78e      	b.n	8003a66 <_strtod_l+0x99e>
 8003b48:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8003cc8 <_strtod_l+0xc00>
 8003b4c:	f04f 0800 	mov.w	r8, #0
 8003b50:	e7e7      	b.n	8003b22 <_strtod_l+0xa5a>
 8003b52:	4b5d      	ldr	r3, [pc, #372]	; (8003cc8 <_strtod_l+0xc00>)
 8003b54:	4640      	mov	r0, r8
 8003b56:	4649      	mov	r1, r9
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f7fc fd55 	bl	8000608 <__aeabi_dmul>
 8003b5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b60:	4680      	mov	r8, r0
 8003b62:	4689      	mov	r9, r1
 8003b64:	b933      	cbnz	r3, 8003b74 <_strtod_l+0xaac>
 8003b66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003b6a:	900e      	str	r0, [sp, #56]	; 0x38
 8003b6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8003b6e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003b72:	e7dd      	b.n	8003b30 <_strtod_l+0xa68>
 8003b74:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8003b78:	e7f9      	b.n	8003b6e <_strtod_l+0xaa6>
 8003b7a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8003b7e:	9b04      	ldr	r3, [sp, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1a8      	bne.n	8003ad6 <_strtod_l+0xa0e>
 8003b84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003b88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003b8a:	0d1b      	lsrs	r3, r3, #20
 8003b8c:	051b      	lsls	r3, r3, #20
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d1a1      	bne.n	8003ad6 <_strtod_l+0xa0e>
 8003b92:	4640      	mov	r0, r8
 8003b94:	4649      	mov	r1, r9
 8003b96:	f7fd f87f 	bl	8000c98 <__aeabi_d2lz>
 8003b9a:	f7fc fd07 	bl	80005ac <__aeabi_l2d>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4640      	mov	r0, r8
 8003ba4:	4649      	mov	r1, r9
 8003ba6:	f7fc fb77 	bl	8000298 <__aeabi_dsub>
 8003baa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003bac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003bb0:	ea43 030a 	orr.w	r3, r3, sl
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	4680      	mov	r8, r0
 8003bb8:	4689      	mov	r9, r1
 8003bba:	d055      	beq.n	8003c68 <_strtod_l+0xba0>
 8003bbc:	a336      	add	r3, pc, #216	; (adr r3, 8003c98 <_strtod_l+0xbd0>)
 8003bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc2:	f7fc ff93 	bl	8000aec <__aeabi_dcmplt>
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	f47f acd0 	bne.w	800356c <_strtod_l+0x4a4>
 8003bcc:	a334      	add	r3, pc, #208	; (adr r3, 8003ca0 <_strtod_l+0xbd8>)
 8003bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd2:	4640      	mov	r0, r8
 8003bd4:	4649      	mov	r1, r9
 8003bd6:	f7fc ffa7 	bl	8000b28 <__aeabi_dcmpgt>
 8003bda:	2800      	cmp	r0, #0
 8003bdc:	f43f af7b 	beq.w	8003ad6 <_strtod_l+0xa0e>
 8003be0:	e4c4      	b.n	800356c <_strtod_l+0x4a4>
 8003be2:	9b04      	ldr	r3, [sp, #16]
 8003be4:	b333      	cbz	r3, 8003c34 <_strtod_l+0xb6c>
 8003be6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003be8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8003bec:	d822      	bhi.n	8003c34 <_strtod_l+0xb6c>
 8003bee:	a32e      	add	r3, pc, #184	; (adr r3, 8003ca8 <_strtod_l+0xbe0>)
 8003bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf4:	4640      	mov	r0, r8
 8003bf6:	4649      	mov	r1, r9
 8003bf8:	f7fc ff82 	bl	8000b00 <__aeabi_dcmple>
 8003bfc:	b1a0      	cbz	r0, 8003c28 <_strtod_l+0xb60>
 8003bfe:	4649      	mov	r1, r9
 8003c00:	4640      	mov	r0, r8
 8003c02:	f7fc ffd9 	bl	8000bb8 <__aeabi_d2uiz>
 8003c06:	2801      	cmp	r0, #1
 8003c08:	bf38      	it	cc
 8003c0a:	2001      	movcc	r0, #1
 8003c0c:	f7fc fc82 	bl	8000514 <__aeabi_ui2d>
 8003c10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c12:	4680      	mov	r8, r0
 8003c14:	4689      	mov	r9, r1
 8003c16:	bb23      	cbnz	r3, 8003c62 <_strtod_l+0xb9a>
 8003c18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003c1c:	9010      	str	r0, [sp, #64]	; 0x40
 8003c1e:	9311      	str	r3, [sp, #68]	; 0x44
 8003c20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003c24:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003c2c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8003c30:	1a9b      	subs	r3, r3, r2
 8003c32:	9309      	str	r3, [sp, #36]	; 0x24
 8003c34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003c38:	eeb0 0a48 	vmov.f32	s0, s16
 8003c3c:	eef0 0a68 	vmov.f32	s1, s17
 8003c40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003c44:	f001 fe58 	bl	80058f8 <__ulp>
 8003c48:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003c4c:	ec53 2b10 	vmov	r2, r3, d0
 8003c50:	f7fc fcda 	bl	8000608 <__aeabi_dmul>
 8003c54:	ec53 2b18 	vmov	r2, r3, d8
 8003c58:	f7fc fb20 	bl	800029c <__adddf3>
 8003c5c:	4682      	mov	sl, r0
 8003c5e:	468b      	mov	fp, r1
 8003c60:	e78d      	b.n	8003b7e <_strtod_l+0xab6>
 8003c62:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8003c66:	e7db      	b.n	8003c20 <_strtod_l+0xb58>
 8003c68:	a311      	add	r3, pc, #68	; (adr r3, 8003cb0 <_strtod_l+0xbe8>)
 8003c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6e:	f7fc ff3d 	bl	8000aec <__aeabi_dcmplt>
 8003c72:	e7b2      	b.n	8003bda <_strtod_l+0xb12>
 8003c74:	2300      	movs	r3, #0
 8003c76:	930a      	str	r3, [sp, #40]	; 0x28
 8003c78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003c7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	f7ff ba6b 	b.w	8003158 <_strtod_l+0x90>
 8003c82:	2a65      	cmp	r2, #101	; 0x65
 8003c84:	f43f ab5f 	beq.w	8003346 <_strtod_l+0x27e>
 8003c88:	2a45      	cmp	r2, #69	; 0x45
 8003c8a:	f43f ab5c 	beq.w	8003346 <_strtod_l+0x27e>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	f7ff bb94 	b.w	80033bc <_strtod_l+0x2f4>
 8003c94:	f3af 8000 	nop.w
 8003c98:	94a03595 	.word	0x94a03595
 8003c9c:	3fdfffff 	.word	0x3fdfffff
 8003ca0:	35afe535 	.word	0x35afe535
 8003ca4:	3fe00000 	.word	0x3fe00000
 8003ca8:	ffc00000 	.word	0xffc00000
 8003cac:	41dfffff 	.word	0x41dfffff
 8003cb0:	94a03595 	.word	0x94a03595
 8003cb4:	3fcfffff 	.word	0x3fcfffff
 8003cb8:	3ff00000 	.word	0x3ff00000
 8003cbc:	7ff00000 	.word	0x7ff00000
 8003cc0:	7fe00000 	.word	0x7fe00000
 8003cc4:	7c9fffff 	.word	0x7c9fffff
 8003cc8:	3fe00000 	.word	0x3fe00000
 8003ccc:	bff00000 	.word	0xbff00000
 8003cd0:	7fefffff 	.word	0x7fefffff

08003cd4 <_strtod_r>:
 8003cd4:	4b01      	ldr	r3, [pc, #4]	; (8003cdc <_strtod_r+0x8>)
 8003cd6:	f7ff b9f7 	b.w	80030c8 <_strtod_l>
 8003cda:	bf00      	nop
 8003cdc:	20000068 	.word	0x20000068

08003ce0 <_strtol_l.constprop.0>:
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce6:	d001      	beq.n	8003cec <_strtol_l.constprop.0+0xc>
 8003ce8:	2b24      	cmp	r3, #36	; 0x24
 8003cea:	d906      	bls.n	8003cfa <_strtol_l.constprop.0+0x1a>
 8003cec:	f7fe fafc 	bl	80022e8 <__errno>
 8003cf0:	2316      	movs	r3, #22
 8003cf2:	6003      	str	r3, [r0, #0]
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cfa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003de0 <_strtol_l.constprop.0+0x100>
 8003cfe:	460d      	mov	r5, r1
 8003d00:	462e      	mov	r6, r5
 8003d02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d06:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003d0a:	f017 0708 	ands.w	r7, r7, #8
 8003d0e:	d1f7      	bne.n	8003d00 <_strtol_l.constprop.0+0x20>
 8003d10:	2c2d      	cmp	r4, #45	; 0x2d
 8003d12:	d132      	bne.n	8003d7a <_strtol_l.constprop.0+0x9a>
 8003d14:	782c      	ldrb	r4, [r5, #0]
 8003d16:	2701      	movs	r7, #1
 8003d18:	1cb5      	adds	r5, r6, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d05b      	beq.n	8003dd6 <_strtol_l.constprop.0+0xf6>
 8003d1e:	2b10      	cmp	r3, #16
 8003d20:	d109      	bne.n	8003d36 <_strtol_l.constprop.0+0x56>
 8003d22:	2c30      	cmp	r4, #48	; 0x30
 8003d24:	d107      	bne.n	8003d36 <_strtol_l.constprop.0+0x56>
 8003d26:	782c      	ldrb	r4, [r5, #0]
 8003d28:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003d2c:	2c58      	cmp	r4, #88	; 0x58
 8003d2e:	d14d      	bne.n	8003dcc <_strtol_l.constprop.0+0xec>
 8003d30:	786c      	ldrb	r4, [r5, #1]
 8003d32:	2310      	movs	r3, #16
 8003d34:	3502      	adds	r5, #2
 8003d36:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003d3a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003d3e:	f04f 0c00 	mov.w	ip, #0
 8003d42:	fbb8 f9f3 	udiv	r9, r8, r3
 8003d46:	4666      	mov	r6, ip
 8003d48:	fb03 8a19 	mls	sl, r3, r9, r8
 8003d4c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8003d50:	f1be 0f09 	cmp.w	lr, #9
 8003d54:	d816      	bhi.n	8003d84 <_strtol_l.constprop.0+0xa4>
 8003d56:	4674      	mov	r4, lr
 8003d58:	42a3      	cmp	r3, r4
 8003d5a:	dd24      	ble.n	8003da6 <_strtol_l.constprop.0+0xc6>
 8003d5c:	f1bc 0f00 	cmp.w	ip, #0
 8003d60:	db1e      	blt.n	8003da0 <_strtol_l.constprop.0+0xc0>
 8003d62:	45b1      	cmp	r9, r6
 8003d64:	d31c      	bcc.n	8003da0 <_strtol_l.constprop.0+0xc0>
 8003d66:	d101      	bne.n	8003d6c <_strtol_l.constprop.0+0x8c>
 8003d68:	45a2      	cmp	sl, r4
 8003d6a:	db19      	blt.n	8003da0 <_strtol_l.constprop.0+0xc0>
 8003d6c:	fb06 4603 	mla	r6, r6, r3, r4
 8003d70:	f04f 0c01 	mov.w	ip, #1
 8003d74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d78:	e7e8      	b.n	8003d4c <_strtol_l.constprop.0+0x6c>
 8003d7a:	2c2b      	cmp	r4, #43	; 0x2b
 8003d7c:	bf04      	itt	eq
 8003d7e:	782c      	ldrbeq	r4, [r5, #0]
 8003d80:	1cb5      	addeq	r5, r6, #2
 8003d82:	e7ca      	b.n	8003d1a <_strtol_l.constprop.0+0x3a>
 8003d84:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003d88:	f1be 0f19 	cmp.w	lr, #25
 8003d8c:	d801      	bhi.n	8003d92 <_strtol_l.constprop.0+0xb2>
 8003d8e:	3c37      	subs	r4, #55	; 0x37
 8003d90:	e7e2      	b.n	8003d58 <_strtol_l.constprop.0+0x78>
 8003d92:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003d96:	f1be 0f19 	cmp.w	lr, #25
 8003d9a:	d804      	bhi.n	8003da6 <_strtol_l.constprop.0+0xc6>
 8003d9c:	3c57      	subs	r4, #87	; 0x57
 8003d9e:	e7db      	b.n	8003d58 <_strtol_l.constprop.0+0x78>
 8003da0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8003da4:	e7e6      	b.n	8003d74 <_strtol_l.constprop.0+0x94>
 8003da6:	f1bc 0f00 	cmp.w	ip, #0
 8003daa:	da05      	bge.n	8003db8 <_strtol_l.constprop.0+0xd8>
 8003dac:	2322      	movs	r3, #34	; 0x22
 8003dae:	6003      	str	r3, [r0, #0]
 8003db0:	4646      	mov	r6, r8
 8003db2:	b942      	cbnz	r2, 8003dc6 <_strtol_l.constprop.0+0xe6>
 8003db4:	4630      	mov	r0, r6
 8003db6:	e79e      	b.n	8003cf6 <_strtol_l.constprop.0+0x16>
 8003db8:	b107      	cbz	r7, 8003dbc <_strtol_l.constprop.0+0xdc>
 8003dba:	4276      	negs	r6, r6
 8003dbc:	2a00      	cmp	r2, #0
 8003dbe:	d0f9      	beq.n	8003db4 <_strtol_l.constprop.0+0xd4>
 8003dc0:	f1bc 0f00 	cmp.w	ip, #0
 8003dc4:	d000      	beq.n	8003dc8 <_strtol_l.constprop.0+0xe8>
 8003dc6:	1e69      	subs	r1, r5, #1
 8003dc8:	6011      	str	r1, [r2, #0]
 8003dca:	e7f3      	b.n	8003db4 <_strtol_l.constprop.0+0xd4>
 8003dcc:	2430      	movs	r4, #48	; 0x30
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1b1      	bne.n	8003d36 <_strtol_l.constprop.0+0x56>
 8003dd2:	2308      	movs	r3, #8
 8003dd4:	e7af      	b.n	8003d36 <_strtol_l.constprop.0+0x56>
 8003dd6:	2c30      	cmp	r4, #48	; 0x30
 8003dd8:	d0a5      	beq.n	8003d26 <_strtol_l.constprop.0+0x46>
 8003dda:	230a      	movs	r3, #10
 8003ddc:	e7ab      	b.n	8003d36 <_strtol_l.constprop.0+0x56>
 8003dde:	bf00      	nop
 8003de0:	08006ce9 	.word	0x08006ce9

08003de4 <_strtol_r>:
 8003de4:	f7ff bf7c 	b.w	8003ce0 <_strtol_l.constprop.0>

08003de8 <quorem>:
 8003de8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dec:	6903      	ldr	r3, [r0, #16]
 8003dee:	690c      	ldr	r4, [r1, #16]
 8003df0:	42a3      	cmp	r3, r4
 8003df2:	4607      	mov	r7, r0
 8003df4:	f2c0 8081 	blt.w	8003efa <quorem+0x112>
 8003df8:	3c01      	subs	r4, #1
 8003dfa:	f101 0814 	add.w	r8, r1, #20
 8003dfe:	f100 0514 	add.w	r5, r0, #20
 8003e02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003e06:	9301      	str	r3, [sp, #4]
 8003e08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003e0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003e10:	3301      	adds	r3, #1
 8003e12:	429a      	cmp	r2, r3
 8003e14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003e18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003e1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003e20:	d331      	bcc.n	8003e86 <quorem+0x9e>
 8003e22:	f04f 0e00 	mov.w	lr, #0
 8003e26:	4640      	mov	r0, r8
 8003e28:	46ac      	mov	ip, r5
 8003e2a:	46f2      	mov	sl, lr
 8003e2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8003e30:	b293      	uxth	r3, r2
 8003e32:	fb06 e303 	mla	r3, r6, r3, lr
 8003e36:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	ebaa 0303 	sub.w	r3, sl, r3
 8003e40:	f8dc a000 	ldr.w	sl, [ip]
 8003e44:	0c12      	lsrs	r2, r2, #16
 8003e46:	fa13 f38a 	uxtah	r3, r3, sl
 8003e4a:	fb06 e202 	mla	r2, r6, r2, lr
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	9b00      	ldr	r3, [sp, #0]
 8003e52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003e56:	b292      	uxth	r2, r2
 8003e58:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003e5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003e60:	f8bd 3000 	ldrh.w	r3, [sp]
 8003e64:	4581      	cmp	r9, r0
 8003e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e6a:	f84c 3b04 	str.w	r3, [ip], #4
 8003e6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003e72:	d2db      	bcs.n	8003e2c <quorem+0x44>
 8003e74:	f855 300b 	ldr.w	r3, [r5, fp]
 8003e78:	b92b      	cbnz	r3, 8003e86 <quorem+0x9e>
 8003e7a:	9b01      	ldr	r3, [sp, #4]
 8003e7c:	3b04      	subs	r3, #4
 8003e7e:	429d      	cmp	r5, r3
 8003e80:	461a      	mov	r2, r3
 8003e82:	d32e      	bcc.n	8003ee2 <quorem+0xfa>
 8003e84:	613c      	str	r4, [r7, #16]
 8003e86:	4638      	mov	r0, r7
 8003e88:	f001 fc90 	bl	80057ac <__mcmp>
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	db24      	blt.n	8003eda <quorem+0xf2>
 8003e90:	3601      	adds	r6, #1
 8003e92:	4628      	mov	r0, r5
 8003e94:	f04f 0c00 	mov.w	ip, #0
 8003e98:	f858 2b04 	ldr.w	r2, [r8], #4
 8003e9c:	f8d0 e000 	ldr.w	lr, [r0]
 8003ea0:	b293      	uxth	r3, r2
 8003ea2:	ebac 0303 	sub.w	r3, ip, r3
 8003ea6:	0c12      	lsrs	r2, r2, #16
 8003ea8:	fa13 f38e 	uxtah	r3, r3, lr
 8003eac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003eb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003eba:	45c1      	cmp	r9, r8
 8003ebc:	f840 3b04 	str.w	r3, [r0], #4
 8003ec0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003ec4:	d2e8      	bcs.n	8003e98 <quorem+0xb0>
 8003ec6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003eca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ece:	b922      	cbnz	r2, 8003eda <quorem+0xf2>
 8003ed0:	3b04      	subs	r3, #4
 8003ed2:	429d      	cmp	r5, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	d30a      	bcc.n	8003eee <quorem+0x106>
 8003ed8:	613c      	str	r4, [r7, #16]
 8003eda:	4630      	mov	r0, r6
 8003edc:	b003      	add	sp, #12
 8003ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	3b04      	subs	r3, #4
 8003ee6:	2a00      	cmp	r2, #0
 8003ee8:	d1cc      	bne.n	8003e84 <quorem+0x9c>
 8003eea:	3c01      	subs	r4, #1
 8003eec:	e7c7      	b.n	8003e7e <quorem+0x96>
 8003eee:	6812      	ldr	r2, [r2, #0]
 8003ef0:	3b04      	subs	r3, #4
 8003ef2:	2a00      	cmp	r2, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <quorem+0xf0>
 8003ef6:	3c01      	subs	r4, #1
 8003ef8:	e7eb      	b.n	8003ed2 <quorem+0xea>
 8003efa:	2000      	movs	r0, #0
 8003efc:	e7ee      	b.n	8003edc <quorem+0xf4>
	...

08003f00 <_dtoa_r>:
 8003f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f04:	ed2d 8b04 	vpush	{d8-d9}
 8003f08:	ec57 6b10 	vmov	r6, r7, d0
 8003f0c:	b093      	sub	sp, #76	; 0x4c
 8003f0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003f10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003f14:	9106      	str	r1, [sp, #24]
 8003f16:	ee10 aa10 	vmov	sl, s0
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	9209      	str	r2, [sp, #36]	; 0x24
 8003f1e:	930c      	str	r3, [sp, #48]	; 0x30
 8003f20:	46bb      	mov	fp, r7
 8003f22:	b975      	cbnz	r5, 8003f42 <_dtoa_r+0x42>
 8003f24:	2010      	movs	r0, #16
 8003f26:	f001 f94d 	bl	80051c4 <malloc>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	6260      	str	r0, [r4, #36]	; 0x24
 8003f2e:	b920      	cbnz	r0, 8003f3a <_dtoa_r+0x3a>
 8003f30:	4ba7      	ldr	r3, [pc, #668]	; (80041d0 <_dtoa_r+0x2d0>)
 8003f32:	21ea      	movs	r1, #234	; 0xea
 8003f34:	48a7      	ldr	r0, [pc, #668]	; (80041d4 <_dtoa_r+0x2d4>)
 8003f36:	f002 f8bd 	bl	80060b4 <__assert_func>
 8003f3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003f3e:	6005      	str	r5, [r0, #0]
 8003f40:	60c5      	str	r5, [r0, #12]
 8003f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f44:	6819      	ldr	r1, [r3, #0]
 8003f46:	b151      	cbz	r1, 8003f5e <_dtoa_r+0x5e>
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	604a      	str	r2, [r1, #4]
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	4093      	lsls	r3, r2
 8003f50:	608b      	str	r3, [r1, #8]
 8003f52:	4620      	mov	r0, r4
 8003f54:	f001 f99e 	bl	8005294 <_Bfree>
 8003f58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	1e3b      	subs	r3, r7, #0
 8003f60:	bfaa      	itet	ge
 8003f62:	2300      	movge	r3, #0
 8003f64:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8003f68:	f8c8 3000 	strge.w	r3, [r8]
 8003f6c:	4b9a      	ldr	r3, [pc, #616]	; (80041d8 <_dtoa_r+0x2d8>)
 8003f6e:	bfbc      	itt	lt
 8003f70:	2201      	movlt	r2, #1
 8003f72:	f8c8 2000 	strlt.w	r2, [r8]
 8003f76:	ea33 030b 	bics.w	r3, r3, fp
 8003f7a:	d11b      	bne.n	8003fb4 <_dtoa_r+0xb4>
 8003f7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f7e:	f242 730f 	movw	r3, #9999	; 0x270f
 8003f82:	6013      	str	r3, [r2, #0]
 8003f84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003f88:	4333      	orrs	r3, r6
 8003f8a:	f000 8592 	beq.w	8004ab2 <_dtoa_r+0xbb2>
 8003f8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f90:	b963      	cbnz	r3, 8003fac <_dtoa_r+0xac>
 8003f92:	4b92      	ldr	r3, [pc, #584]	; (80041dc <_dtoa_r+0x2dc>)
 8003f94:	e022      	b.n	8003fdc <_dtoa_r+0xdc>
 8003f96:	4b92      	ldr	r3, [pc, #584]	; (80041e0 <_dtoa_r+0x2e0>)
 8003f98:	9301      	str	r3, [sp, #4]
 8003f9a:	3308      	adds	r3, #8
 8003f9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	9801      	ldr	r0, [sp, #4]
 8003fa2:	b013      	add	sp, #76	; 0x4c
 8003fa4:	ecbd 8b04 	vpop	{d8-d9}
 8003fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fac:	4b8b      	ldr	r3, [pc, #556]	; (80041dc <_dtoa_r+0x2dc>)
 8003fae:	9301      	str	r3, [sp, #4]
 8003fb0:	3303      	adds	r3, #3
 8003fb2:	e7f3      	b.n	8003f9c <_dtoa_r+0x9c>
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	4650      	mov	r0, sl
 8003fba:	4659      	mov	r1, fp
 8003fbc:	f7fc fd8c 	bl	8000ad8 <__aeabi_dcmpeq>
 8003fc0:	ec4b ab19 	vmov	d9, sl, fp
 8003fc4:	4680      	mov	r8, r0
 8003fc6:	b158      	cbz	r0, 8003fe0 <_dtoa_r+0xe0>
 8003fc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003fca:	2301      	movs	r3, #1
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 856b 	beq.w	8004aac <_dtoa_r+0xbac>
 8003fd6:	4883      	ldr	r0, [pc, #524]	; (80041e4 <_dtoa_r+0x2e4>)
 8003fd8:	6018      	str	r0, [r3, #0]
 8003fda:	1e43      	subs	r3, r0, #1
 8003fdc:	9301      	str	r3, [sp, #4]
 8003fde:	e7df      	b.n	8003fa0 <_dtoa_r+0xa0>
 8003fe0:	ec4b ab10 	vmov	d0, sl, fp
 8003fe4:	aa10      	add	r2, sp, #64	; 0x40
 8003fe6:	a911      	add	r1, sp, #68	; 0x44
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f001 fd01 	bl	80059f0 <__d2b>
 8003fee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8003ff2:	ee08 0a10 	vmov	s16, r0
 8003ff6:	2d00      	cmp	r5, #0
 8003ff8:	f000 8084 	beq.w	8004104 <_dtoa_r+0x204>
 8003ffc:	ee19 3a90 	vmov	r3, s19
 8004000:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004004:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004008:	4656      	mov	r6, sl
 800400a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800400e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004012:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004016:	4b74      	ldr	r3, [pc, #464]	; (80041e8 <_dtoa_r+0x2e8>)
 8004018:	2200      	movs	r2, #0
 800401a:	4630      	mov	r0, r6
 800401c:	4639      	mov	r1, r7
 800401e:	f7fc f93b 	bl	8000298 <__aeabi_dsub>
 8004022:	a365      	add	r3, pc, #404	; (adr r3, 80041b8 <_dtoa_r+0x2b8>)
 8004024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004028:	f7fc faee 	bl	8000608 <__aeabi_dmul>
 800402c:	a364      	add	r3, pc, #400	; (adr r3, 80041c0 <_dtoa_r+0x2c0>)
 800402e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004032:	f7fc f933 	bl	800029c <__adddf3>
 8004036:	4606      	mov	r6, r0
 8004038:	4628      	mov	r0, r5
 800403a:	460f      	mov	r7, r1
 800403c:	f7fc fa7a 	bl	8000534 <__aeabi_i2d>
 8004040:	a361      	add	r3, pc, #388	; (adr r3, 80041c8 <_dtoa_r+0x2c8>)
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	f7fc fadf 	bl	8000608 <__aeabi_dmul>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4630      	mov	r0, r6
 8004050:	4639      	mov	r1, r7
 8004052:	f7fc f923 	bl	800029c <__adddf3>
 8004056:	4606      	mov	r6, r0
 8004058:	460f      	mov	r7, r1
 800405a:	f7fc fd85 	bl	8000b68 <__aeabi_d2iz>
 800405e:	2200      	movs	r2, #0
 8004060:	9000      	str	r0, [sp, #0]
 8004062:	2300      	movs	r3, #0
 8004064:	4630      	mov	r0, r6
 8004066:	4639      	mov	r1, r7
 8004068:	f7fc fd40 	bl	8000aec <__aeabi_dcmplt>
 800406c:	b150      	cbz	r0, 8004084 <_dtoa_r+0x184>
 800406e:	9800      	ldr	r0, [sp, #0]
 8004070:	f7fc fa60 	bl	8000534 <__aeabi_i2d>
 8004074:	4632      	mov	r2, r6
 8004076:	463b      	mov	r3, r7
 8004078:	f7fc fd2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800407c:	b910      	cbnz	r0, 8004084 <_dtoa_r+0x184>
 800407e:	9b00      	ldr	r3, [sp, #0]
 8004080:	3b01      	subs	r3, #1
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	9b00      	ldr	r3, [sp, #0]
 8004086:	2b16      	cmp	r3, #22
 8004088:	d85a      	bhi.n	8004140 <_dtoa_r+0x240>
 800408a:	9a00      	ldr	r2, [sp, #0]
 800408c:	4b57      	ldr	r3, [pc, #348]	; (80041ec <_dtoa_r+0x2ec>)
 800408e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004096:	ec51 0b19 	vmov	r0, r1, d9
 800409a:	f7fc fd27 	bl	8000aec <__aeabi_dcmplt>
 800409e:	2800      	cmp	r0, #0
 80040a0:	d050      	beq.n	8004144 <_dtoa_r+0x244>
 80040a2:	9b00      	ldr	r3, [sp, #0]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	2300      	movs	r3, #0
 80040aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80040ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80040ae:	1b5d      	subs	r5, r3, r5
 80040b0:	1e6b      	subs	r3, r5, #1
 80040b2:	9305      	str	r3, [sp, #20]
 80040b4:	bf45      	ittet	mi
 80040b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80040ba:	9304      	strmi	r3, [sp, #16]
 80040bc:	2300      	movpl	r3, #0
 80040be:	2300      	movmi	r3, #0
 80040c0:	bf4c      	ite	mi
 80040c2:	9305      	strmi	r3, [sp, #20]
 80040c4:	9304      	strpl	r3, [sp, #16]
 80040c6:	9b00      	ldr	r3, [sp, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	db3d      	blt.n	8004148 <_dtoa_r+0x248>
 80040cc:	9b05      	ldr	r3, [sp, #20]
 80040ce:	9a00      	ldr	r2, [sp, #0]
 80040d0:	920a      	str	r2, [sp, #40]	; 0x28
 80040d2:	4413      	add	r3, r2
 80040d4:	9305      	str	r3, [sp, #20]
 80040d6:	2300      	movs	r3, #0
 80040d8:	9307      	str	r3, [sp, #28]
 80040da:	9b06      	ldr	r3, [sp, #24]
 80040dc:	2b09      	cmp	r3, #9
 80040de:	f200 8089 	bhi.w	80041f4 <_dtoa_r+0x2f4>
 80040e2:	2b05      	cmp	r3, #5
 80040e4:	bfc4      	itt	gt
 80040e6:	3b04      	subgt	r3, #4
 80040e8:	9306      	strgt	r3, [sp, #24]
 80040ea:	9b06      	ldr	r3, [sp, #24]
 80040ec:	f1a3 0302 	sub.w	r3, r3, #2
 80040f0:	bfcc      	ite	gt
 80040f2:	2500      	movgt	r5, #0
 80040f4:	2501      	movle	r5, #1
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	f200 8087 	bhi.w	800420a <_dtoa_r+0x30a>
 80040fc:	e8df f003 	tbb	[pc, r3]
 8004100:	59383a2d 	.word	0x59383a2d
 8004104:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004108:	441d      	add	r5, r3
 800410a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800410e:	2b20      	cmp	r3, #32
 8004110:	bfc1      	itttt	gt
 8004112:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004116:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800411a:	fa0b f303 	lslgt.w	r3, fp, r3
 800411e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004122:	bfda      	itte	le
 8004124:	f1c3 0320 	rsble	r3, r3, #32
 8004128:	fa06 f003 	lslle.w	r0, r6, r3
 800412c:	4318      	orrgt	r0, r3
 800412e:	f7fc f9f1 	bl	8000514 <__aeabi_ui2d>
 8004132:	2301      	movs	r3, #1
 8004134:	4606      	mov	r6, r0
 8004136:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800413a:	3d01      	subs	r5, #1
 800413c:	930e      	str	r3, [sp, #56]	; 0x38
 800413e:	e76a      	b.n	8004016 <_dtoa_r+0x116>
 8004140:	2301      	movs	r3, #1
 8004142:	e7b2      	b.n	80040aa <_dtoa_r+0x1aa>
 8004144:	900b      	str	r0, [sp, #44]	; 0x2c
 8004146:	e7b1      	b.n	80040ac <_dtoa_r+0x1ac>
 8004148:	9b04      	ldr	r3, [sp, #16]
 800414a:	9a00      	ldr	r2, [sp, #0]
 800414c:	1a9b      	subs	r3, r3, r2
 800414e:	9304      	str	r3, [sp, #16]
 8004150:	4253      	negs	r3, r2
 8004152:	9307      	str	r3, [sp, #28]
 8004154:	2300      	movs	r3, #0
 8004156:	930a      	str	r3, [sp, #40]	; 0x28
 8004158:	e7bf      	b.n	80040da <_dtoa_r+0x1da>
 800415a:	2300      	movs	r3, #0
 800415c:	9308      	str	r3, [sp, #32]
 800415e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004160:	2b00      	cmp	r3, #0
 8004162:	dc55      	bgt.n	8004210 <_dtoa_r+0x310>
 8004164:	2301      	movs	r3, #1
 8004166:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800416a:	461a      	mov	r2, r3
 800416c:	9209      	str	r2, [sp, #36]	; 0x24
 800416e:	e00c      	b.n	800418a <_dtoa_r+0x28a>
 8004170:	2301      	movs	r3, #1
 8004172:	e7f3      	b.n	800415c <_dtoa_r+0x25c>
 8004174:	2300      	movs	r3, #0
 8004176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004178:	9308      	str	r3, [sp, #32]
 800417a:	9b00      	ldr	r3, [sp, #0]
 800417c:	4413      	add	r3, r2
 800417e:	9302      	str	r3, [sp, #8]
 8004180:	3301      	adds	r3, #1
 8004182:	2b01      	cmp	r3, #1
 8004184:	9303      	str	r3, [sp, #12]
 8004186:	bfb8      	it	lt
 8004188:	2301      	movlt	r3, #1
 800418a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800418c:	2200      	movs	r2, #0
 800418e:	6042      	str	r2, [r0, #4]
 8004190:	2204      	movs	r2, #4
 8004192:	f102 0614 	add.w	r6, r2, #20
 8004196:	429e      	cmp	r6, r3
 8004198:	6841      	ldr	r1, [r0, #4]
 800419a:	d93d      	bls.n	8004218 <_dtoa_r+0x318>
 800419c:	4620      	mov	r0, r4
 800419e:	f001 f839 	bl	8005214 <_Balloc>
 80041a2:	9001      	str	r0, [sp, #4]
 80041a4:	2800      	cmp	r0, #0
 80041a6:	d13b      	bne.n	8004220 <_dtoa_r+0x320>
 80041a8:	4b11      	ldr	r3, [pc, #68]	; (80041f0 <_dtoa_r+0x2f0>)
 80041aa:	4602      	mov	r2, r0
 80041ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80041b0:	e6c0      	b.n	8003f34 <_dtoa_r+0x34>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e7df      	b.n	8004176 <_dtoa_r+0x276>
 80041b6:	bf00      	nop
 80041b8:	636f4361 	.word	0x636f4361
 80041bc:	3fd287a7 	.word	0x3fd287a7
 80041c0:	8b60c8b3 	.word	0x8b60c8b3
 80041c4:	3fc68a28 	.word	0x3fc68a28
 80041c8:	509f79fb 	.word	0x509f79fb
 80041cc:	3fd34413 	.word	0x3fd34413
 80041d0:	08006df6 	.word	0x08006df6
 80041d4:	08006e0d 	.word	0x08006e0d
 80041d8:	7ff00000 	.word	0x7ff00000
 80041dc:	08006df2 	.word	0x08006df2
 80041e0:	08006de9 	.word	0x08006de9
 80041e4:	08006c69 	.word	0x08006c69
 80041e8:	3ff80000 	.word	0x3ff80000
 80041ec:	08006f78 	.word	0x08006f78
 80041f0:	08006e68 	.word	0x08006e68
 80041f4:	2501      	movs	r5, #1
 80041f6:	2300      	movs	r3, #0
 80041f8:	9306      	str	r3, [sp, #24]
 80041fa:	9508      	str	r5, [sp, #32]
 80041fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004200:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004204:	2200      	movs	r2, #0
 8004206:	2312      	movs	r3, #18
 8004208:	e7b0      	b.n	800416c <_dtoa_r+0x26c>
 800420a:	2301      	movs	r3, #1
 800420c:	9308      	str	r3, [sp, #32]
 800420e:	e7f5      	b.n	80041fc <_dtoa_r+0x2fc>
 8004210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004212:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004216:	e7b8      	b.n	800418a <_dtoa_r+0x28a>
 8004218:	3101      	adds	r1, #1
 800421a:	6041      	str	r1, [r0, #4]
 800421c:	0052      	lsls	r2, r2, #1
 800421e:	e7b8      	b.n	8004192 <_dtoa_r+0x292>
 8004220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004222:	9a01      	ldr	r2, [sp, #4]
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	9b03      	ldr	r3, [sp, #12]
 8004228:	2b0e      	cmp	r3, #14
 800422a:	f200 809d 	bhi.w	8004368 <_dtoa_r+0x468>
 800422e:	2d00      	cmp	r5, #0
 8004230:	f000 809a 	beq.w	8004368 <_dtoa_r+0x468>
 8004234:	9b00      	ldr	r3, [sp, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	dd32      	ble.n	80042a0 <_dtoa_r+0x3a0>
 800423a:	4ab7      	ldr	r2, [pc, #732]	; (8004518 <_dtoa_r+0x618>)
 800423c:	f003 030f 	and.w	r3, r3, #15
 8004240:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004244:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004248:	9b00      	ldr	r3, [sp, #0]
 800424a:	05d8      	lsls	r0, r3, #23
 800424c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004250:	d516      	bpl.n	8004280 <_dtoa_r+0x380>
 8004252:	4bb2      	ldr	r3, [pc, #712]	; (800451c <_dtoa_r+0x61c>)
 8004254:	ec51 0b19 	vmov	r0, r1, d9
 8004258:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800425c:	f7fc fafe 	bl	800085c <__aeabi_ddiv>
 8004260:	f007 070f 	and.w	r7, r7, #15
 8004264:	4682      	mov	sl, r0
 8004266:	468b      	mov	fp, r1
 8004268:	2503      	movs	r5, #3
 800426a:	4eac      	ldr	r6, [pc, #688]	; (800451c <_dtoa_r+0x61c>)
 800426c:	b957      	cbnz	r7, 8004284 <_dtoa_r+0x384>
 800426e:	4642      	mov	r2, r8
 8004270:	464b      	mov	r3, r9
 8004272:	4650      	mov	r0, sl
 8004274:	4659      	mov	r1, fp
 8004276:	f7fc faf1 	bl	800085c <__aeabi_ddiv>
 800427a:	4682      	mov	sl, r0
 800427c:	468b      	mov	fp, r1
 800427e:	e028      	b.n	80042d2 <_dtoa_r+0x3d2>
 8004280:	2502      	movs	r5, #2
 8004282:	e7f2      	b.n	800426a <_dtoa_r+0x36a>
 8004284:	07f9      	lsls	r1, r7, #31
 8004286:	d508      	bpl.n	800429a <_dtoa_r+0x39a>
 8004288:	4640      	mov	r0, r8
 800428a:	4649      	mov	r1, r9
 800428c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004290:	f7fc f9ba 	bl	8000608 <__aeabi_dmul>
 8004294:	3501      	adds	r5, #1
 8004296:	4680      	mov	r8, r0
 8004298:	4689      	mov	r9, r1
 800429a:	107f      	asrs	r7, r7, #1
 800429c:	3608      	adds	r6, #8
 800429e:	e7e5      	b.n	800426c <_dtoa_r+0x36c>
 80042a0:	f000 809b 	beq.w	80043da <_dtoa_r+0x4da>
 80042a4:	9b00      	ldr	r3, [sp, #0]
 80042a6:	4f9d      	ldr	r7, [pc, #628]	; (800451c <_dtoa_r+0x61c>)
 80042a8:	425e      	negs	r6, r3
 80042aa:	4b9b      	ldr	r3, [pc, #620]	; (8004518 <_dtoa_r+0x618>)
 80042ac:	f006 020f 	and.w	r2, r6, #15
 80042b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80042b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b8:	ec51 0b19 	vmov	r0, r1, d9
 80042bc:	f7fc f9a4 	bl	8000608 <__aeabi_dmul>
 80042c0:	1136      	asrs	r6, r6, #4
 80042c2:	4682      	mov	sl, r0
 80042c4:	468b      	mov	fp, r1
 80042c6:	2300      	movs	r3, #0
 80042c8:	2502      	movs	r5, #2
 80042ca:	2e00      	cmp	r6, #0
 80042cc:	d17a      	bne.n	80043c4 <_dtoa_r+0x4c4>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1d3      	bne.n	800427a <_dtoa_r+0x37a>
 80042d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 8082 	beq.w	80043de <_dtoa_r+0x4de>
 80042da:	4b91      	ldr	r3, [pc, #580]	; (8004520 <_dtoa_r+0x620>)
 80042dc:	2200      	movs	r2, #0
 80042de:	4650      	mov	r0, sl
 80042e0:	4659      	mov	r1, fp
 80042e2:	f7fc fc03 	bl	8000aec <__aeabi_dcmplt>
 80042e6:	2800      	cmp	r0, #0
 80042e8:	d079      	beq.n	80043de <_dtoa_r+0x4de>
 80042ea:	9b03      	ldr	r3, [sp, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d076      	beq.n	80043de <_dtoa_r+0x4de>
 80042f0:	9b02      	ldr	r3, [sp, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	dd36      	ble.n	8004364 <_dtoa_r+0x464>
 80042f6:	9b00      	ldr	r3, [sp, #0]
 80042f8:	4650      	mov	r0, sl
 80042fa:	4659      	mov	r1, fp
 80042fc:	1e5f      	subs	r7, r3, #1
 80042fe:	2200      	movs	r2, #0
 8004300:	4b88      	ldr	r3, [pc, #544]	; (8004524 <_dtoa_r+0x624>)
 8004302:	f7fc f981 	bl	8000608 <__aeabi_dmul>
 8004306:	9e02      	ldr	r6, [sp, #8]
 8004308:	4682      	mov	sl, r0
 800430a:	468b      	mov	fp, r1
 800430c:	3501      	adds	r5, #1
 800430e:	4628      	mov	r0, r5
 8004310:	f7fc f910 	bl	8000534 <__aeabi_i2d>
 8004314:	4652      	mov	r2, sl
 8004316:	465b      	mov	r3, fp
 8004318:	f7fc f976 	bl	8000608 <__aeabi_dmul>
 800431c:	4b82      	ldr	r3, [pc, #520]	; (8004528 <_dtoa_r+0x628>)
 800431e:	2200      	movs	r2, #0
 8004320:	f7fb ffbc 	bl	800029c <__adddf3>
 8004324:	46d0      	mov	r8, sl
 8004326:	46d9      	mov	r9, fp
 8004328:	4682      	mov	sl, r0
 800432a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800432e:	2e00      	cmp	r6, #0
 8004330:	d158      	bne.n	80043e4 <_dtoa_r+0x4e4>
 8004332:	4b7e      	ldr	r3, [pc, #504]	; (800452c <_dtoa_r+0x62c>)
 8004334:	2200      	movs	r2, #0
 8004336:	4640      	mov	r0, r8
 8004338:	4649      	mov	r1, r9
 800433a:	f7fb ffad 	bl	8000298 <__aeabi_dsub>
 800433e:	4652      	mov	r2, sl
 8004340:	465b      	mov	r3, fp
 8004342:	4680      	mov	r8, r0
 8004344:	4689      	mov	r9, r1
 8004346:	f7fc fbef 	bl	8000b28 <__aeabi_dcmpgt>
 800434a:	2800      	cmp	r0, #0
 800434c:	f040 8295 	bne.w	800487a <_dtoa_r+0x97a>
 8004350:	4652      	mov	r2, sl
 8004352:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004356:	4640      	mov	r0, r8
 8004358:	4649      	mov	r1, r9
 800435a:	f7fc fbc7 	bl	8000aec <__aeabi_dcmplt>
 800435e:	2800      	cmp	r0, #0
 8004360:	f040 8289 	bne.w	8004876 <_dtoa_r+0x976>
 8004364:	ec5b ab19 	vmov	sl, fp, d9
 8004368:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800436a:	2b00      	cmp	r3, #0
 800436c:	f2c0 8148 	blt.w	8004600 <_dtoa_r+0x700>
 8004370:	9a00      	ldr	r2, [sp, #0]
 8004372:	2a0e      	cmp	r2, #14
 8004374:	f300 8144 	bgt.w	8004600 <_dtoa_r+0x700>
 8004378:	4b67      	ldr	r3, [pc, #412]	; (8004518 <_dtoa_r+0x618>)
 800437a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800437e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004384:	2b00      	cmp	r3, #0
 8004386:	f280 80d5 	bge.w	8004534 <_dtoa_r+0x634>
 800438a:	9b03      	ldr	r3, [sp, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	f300 80d1 	bgt.w	8004534 <_dtoa_r+0x634>
 8004392:	f040 826f 	bne.w	8004874 <_dtoa_r+0x974>
 8004396:	4b65      	ldr	r3, [pc, #404]	; (800452c <_dtoa_r+0x62c>)
 8004398:	2200      	movs	r2, #0
 800439a:	4640      	mov	r0, r8
 800439c:	4649      	mov	r1, r9
 800439e:	f7fc f933 	bl	8000608 <__aeabi_dmul>
 80043a2:	4652      	mov	r2, sl
 80043a4:	465b      	mov	r3, fp
 80043a6:	f7fc fbb5 	bl	8000b14 <__aeabi_dcmpge>
 80043aa:	9e03      	ldr	r6, [sp, #12]
 80043ac:	4637      	mov	r7, r6
 80043ae:	2800      	cmp	r0, #0
 80043b0:	f040 8245 	bne.w	800483e <_dtoa_r+0x93e>
 80043b4:	9d01      	ldr	r5, [sp, #4]
 80043b6:	2331      	movs	r3, #49	; 0x31
 80043b8:	f805 3b01 	strb.w	r3, [r5], #1
 80043bc:	9b00      	ldr	r3, [sp, #0]
 80043be:	3301      	adds	r3, #1
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	e240      	b.n	8004846 <_dtoa_r+0x946>
 80043c4:	07f2      	lsls	r2, r6, #31
 80043c6:	d505      	bpl.n	80043d4 <_dtoa_r+0x4d4>
 80043c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043cc:	f7fc f91c 	bl	8000608 <__aeabi_dmul>
 80043d0:	3501      	adds	r5, #1
 80043d2:	2301      	movs	r3, #1
 80043d4:	1076      	asrs	r6, r6, #1
 80043d6:	3708      	adds	r7, #8
 80043d8:	e777      	b.n	80042ca <_dtoa_r+0x3ca>
 80043da:	2502      	movs	r5, #2
 80043dc:	e779      	b.n	80042d2 <_dtoa_r+0x3d2>
 80043de:	9f00      	ldr	r7, [sp, #0]
 80043e0:	9e03      	ldr	r6, [sp, #12]
 80043e2:	e794      	b.n	800430e <_dtoa_r+0x40e>
 80043e4:	9901      	ldr	r1, [sp, #4]
 80043e6:	4b4c      	ldr	r3, [pc, #304]	; (8004518 <_dtoa_r+0x618>)
 80043e8:	4431      	add	r1, r6
 80043ea:	910d      	str	r1, [sp, #52]	; 0x34
 80043ec:	9908      	ldr	r1, [sp, #32]
 80043ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80043f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80043f6:	2900      	cmp	r1, #0
 80043f8:	d043      	beq.n	8004482 <_dtoa_r+0x582>
 80043fa:	494d      	ldr	r1, [pc, #308]	; (8004530 <_dtoa_r+0x630>)
 80043fc:	2000      	movs	r0, #0
 80043fe:	f7fc fa2d 	bl	800085c <__aeabi_ddiv>
 8004402:	4652      	mov	r2, sl
 8004404:	465b      	mov	r3, fp
 8004406:	f7fb ff47 	bl	8000298 <__aeabi_dsub>
 800440a:	9d01      	ldr	r5, [sp, #4]
 800440c:	4682      	mov	sl, r0
 800440e:	468b      	mov	fp, r1
 8004410:	4649      	mov	r1, r9
 8004412:	4640      	mov	r0, r8
 8004414:	f7fc fba8 	bl	8000b68 <__aeabi_d2iz>
 8004418:	4606      	mov	r6, r0
 800441a:	f7fc f88b 	bl	8000534 <__aeabi_i2d>
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	4640      	mov	r0, r8
 8004424:	4649      	mov	r1, r9
 8004426:	f7fb ff37 	bl	8000298 <__aeabi_dsub>
 800442a:	3630      	adds	r6, #48	; 0x30
 800442c:	f805 6b01 	strb.w	r6, [r5], #1
 8004430:	4652      	mov	r2, sl
 8004432:	465b      	mov	r3, fp
 8004434:	4680      	mov	r8, r0
 8004436:	4689      	mov	r9, r1
 8004438:	f7fc fb58 	bl	8000aec <__aeabi_dcmplt>
 800443c:	2800      	cmp	r0, #0
 800443e:	d163      	bne.n	8004508 <_dtoa_r+0x608>
 8004440:	4642      	mov	r2, r8
 8004442:	464b      	mov	r3, r9
 8004444:	4936      	ldr	r1, [pc, #216]	; (8004520 <_dtoa_r+0x620>)
 8004446:	2000      	movs	r0, #0
 8004448:	f7fb ff26 	bl	8000298 <__aeabi_dsub>
 800444c:	4652      	mov	r2, sl
 800444e:	465b      	mov	r3, fp
 8004450:	f7fc fb4c 	bl	8000aec <__aeabi_dcmplt>
 8004454:	2800      	cmp	r0, #0
 8004456:	f040 80b5 	bne.w	80045c4 <_dtoa_r+0x6c4>
 800445a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800445c:	429d      	cmp	r5, r3
 800445e:	d081      	beq.n	8004364 <_dtoa_r+0x464>
 8004460:	4b30      	ldr	r3, [pc, #192]	; (8004524 <_dtoa_r+0x624>)
 8004462:	2200      	movs	r2, #0
 8004464:	4650      	mov	r0, sl
 8004466:	4659      	mov	r1, fp
 8004468:	f7fc f8ce 	bl	8000608 <__aeabi_dmul>
 800446c:	4b2d      	ldr	r3, [pc, #180]	; (8004524 <_dtoa_r+0x624>)
 800446e:	4682      	mov	sl, r0
 8004470:	468b      	mov	fp, r1
 8004472:	4640      	mov	r0, r8
 8004474:	4649      	mov	r1, r9
 8004476:	2200      	movs	r2, #0
 8004478:	f7fc f8c6 	bl	8000608 <__aeabi_dmul>
 800447c:	4680      	mov	r8, r0
 800447e:	4689      	mov	r9, r1
 8004480:	e7c6      	b.n	8004410 <_dtoa_r+0x510>
 8004482:	4650      	mov	r0, sl
 8004484:	4659      	mov	r1, fp
 8004486:	f7fc f8bf 	bl	8000608 <__aeabi_dmul>
 800448a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800448c:	9d01      	ldr	r5, [sp, #4]
 800448e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004490:	4682      	mov	sl, r0
 8004492:	468b      	mov	fp, r1
 8004494:	4649      	mov	r1, r9
 8004496:	4640      	mov	r0, r8
 8004498:	f7fc fb66 	bl	8000b68 <__aeabi_d2iz>
 800449c:	4606      	mov	r6, r0
 800449e:	f7fc f849 	bl	8000534 <__aeabi_i2d>
 80044a2:	3630      	adds	r6, #48	; 0x30
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4640      	mov	r0, r8
 80044aa:	4649      	mov	r1, r9
 80044ac:	f7fb fef4 	bl	8000298 <__aeabi_dsub>
 80044b0:	f805 6b01 	strb.w	r6, [r5], #1
 80044b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044b6:	429d      	cmp	r5, r3
 80044b8:	4680      	mov	r8, r0
 80044ba:	4689      	mov	r9, r1
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	d124      	bne.n	800450c <_dtoa_r+0x60c>
 80044c2:	4b1b      	ldr	r3, [pc, #108]	; (8004530 <_dtoa_r+0x630>)
 80044c4:	4650      	mov	r0, sl
 80044c6:	4659      	mov	r1, fp
 80044c8:	f7fb fee8 	bl	800029c <__adddf3>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4640      	mov	r0, r8
 80044d2:	4649      	mov	r1, r9
 80044d4:	f7fc fb28 	bl	8000b28 <__aeabi_dcmpgt>
 80044d8:	2800      	cmp	r0, #0
 80044da:	d173      	bne.n	80045c4 <_dtoa_r+0x6c4>
 80044dc:	4652      	mov	r2, sl
 80044de:	465b      	mov	r3, fp
 80044e0:	4913      	ldr	r1, [pc, #76]	; (8004530 <_dtoa_r+0x630>)
 80044e2:	2000      	movs	r0, #0
 80044e4:	f7fb fed8 	bl	8000298 <__aeabi_dsub>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4640      	mov	r0, r8
 80044ee:	4649      	mov	r1, r9
 80044f0:	f7fc fafc 	bl	8000aec <__aeabi_dcmplt>
 80044f4:	2800      	cmp	r0, #0
 80044f6:	f43f af35 	beq.w	8004364 <_dtoa_r+0x464>
 80044fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80044fc:	1e6b      	subs	r3, r5, #1
 80044fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8004500:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004504:	2b30      	cmp	r3, #48	; 0x30
 8004506:	d0f8      	beq.n	80044fa <_dtoa_r+0x5fa>
 8004508:	9700      	str	r7, [sp, #0]
 800450a:	e049      	b.n	80045a0 <_dtoa_r+0x6a0>
 800450c:	4b05      	ldr	r3, [pc, #20]	; (8004524 <_dtoa_r+0x624>)
 800450e:	f7fc f87b 	bl	8000608 <__aeabi_dmul>
 8004512:	4680      	mov	r8, r0
 8004514:	4689      	mov	r9, r1
 8004516:	e7bd      	b.n	8004494 <_dtoa_r+0x594>
 8004518:	08006f78 	.word	0x08006f78
 800451c:	08006f50 	.word	0x08006f50
 8004520:	3ff00000 	.word	0x3ff00000
 8004524:	40240000 	.word	0x40240000
 8004528:	401c0000 	.word	0x401c0000
 800452c:	40140000 	.word	0x40140000
 8004530:	3fe00000 	.word	0x3fe00000
 8004534:	9d01      	ldr	r5, [sp, #4]
 8004536:	4656      	mov	r6, sl
 8004538:	465f      	mov	r7, fp
 800453a:	4642      	mov	r2, r8
 800453c:	464b      	mov	r3, r9
 800453e:	4630      	mov	r0, r6
 8004540:	4639      	mov	r1, r7
 8004542:	f7fc f98b 	bl	800085c <__aeabi_ddiv>
 8004546:	f7fc fb0f 	bl	8000b68 <__aeabi_d2iz>
 800454a:	4682      	mov	sl, r0
 800454c:	f7fb fff2 	bl	8000534 <__aeabi_i2d>
 8004550:	4642      	mov	r2, r8
 8004552:	464b      	mov	r3, r9
 8004554:	f7fc f858 	bl	8000608 <__aeabi_dmul>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4630      	mov	r0, r6
 800455e:	4639      	mov	r1, r7
 8004560:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004564:	f7fb fe98 	bl	8000298 <__aeabi_dsub>
 8004568:	f805 6b01 	strb.w	r6, [r5], #1
 800456c:	9e01      	ldr	r6, [sp, #4]
 800456e:	9f03      	ldr	r7, [sp, #12]
 8004570:	1bae      	subs	r6, r5, r6
 8004572:	42b7      	cmp	r7, r6
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	d135      	bne.n	80045e6 <_dtoa_r+0x6e6>
 800457a:	f7fb fe8f 	bl	800029c <__adddf3>
 800457e:	4642      	mov	r2, r8
 8004580:	464b      	mov	r3, r9
 8004582:	4606      	mov	r6, r0
 8004584:	460f      	mov	r7, r1
 8004586:	f7fc facf 	bl	8000b28 <__aeabi_dcmpgt>
 800458a:	b9d0      	cbnz	r0, 80045c2 <_dtoa_r+0x6c2>
 800458c:	4642      	mov	r2, r8
 800458e:	464b      	mov	r3, r9
 8004590:	4630      	mov	r0, r6
 8004592:	4639      	mov	r1, r7
 8004594:	f7fc faa0 	bl	8000ad8 <__aeabi_dcmpeq>
 8004598:	b110      	cbz	r0, 80045a0 <_dtoa_r+0x6a0>
 800459a:	f01a 0f01 	tst.w	sl, #1
 800459e:	d110      	bne.n	80045c2 <_dtoa_r+0x6c2>
 80045a0:	4620      	mov	r0, r4
 80045a2:	ee18 1a10 	vmov	r1, s16
 80045a6:	f000 fe75 	bl	8005294 <_Bfree>
 80045aa:	2300      	movs	r3, #0
 80045ac:	9800      	ldr	r0, [sp, #0]
 80045ae:	702b      	strb	r3, [r5, #0]
 80045b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80045b2:	3001      	adds	r0, #1
 80045b4:	6018      	str	r0, [r3, #0]
 80045b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f43f acf1 	beq.w	8003fa0 <_dtoa_r+0xa0>
 80045be:	601d      	str	r5, [r3, #0]
 80045c0:	e4ee      	b.n	8003fa0 <_dtoa_r+0xa0>
 80045c2:	9f00      	ldr	r7, [sp, #0]
 80045c4:	462b      	mov	r3, r5
 80045c6:	461d      	mov	r5, r3
 80045c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80045cc:	2a39      	cmp	r2, #57	; 0x39
 80045ce:	d106      	bne.n	80045de <_dtoa_r+0x6de>
 80045d0:	9a01      	ldr	r2, [sp, #4]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d1f7      	bne.n	80045c6 <_dtoa_r+0x6c6>
 80045d6:	9901      	ldr	r1, [sp, #4]
 80045d8:	2230      	movs	r2, #48	; 0x30
 80045da:	3701      	adds	r7, #1
 80045dc:	700a      	strb	r2, [r1, #0]
 80045de:	781a      	ldrb	r2, [r3, #0]
 80045e0:	3201      	adds	r2, #1
 80045e2:	701a      	strb	r2, [r3, #0]
 80045e4:	e790      	b.n	8004508 <_dtoa_r+0x608>
 80045e6:	4ba6      	ldr	r3, [pc, #664]	; (8004880 <_dtoa_r+0x980>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	f7fc f80d 	bl	8000608 <__aeabi_dmul>
 80045ee:	2200      	movs	r2, #0
 80045f0:	2300      	movs	r3, #0
 80045f2:	4606      	mov	r6, r0
 80045f4:	460f      	mov	r7, r1
 80045f6:	f7fc fa6f 	bl	8000ad8 <__aeabi_dcmpeq>
 80045fa:	2800      	cmp	r0, #0
 80045fc:	d09d      	beq.n	800453a <_dtoa_r+0x63a>
 80045fe:	e7cf      	b.n	80045a0 <_dtoa_r+0x6a0>
 8004600:	9a08      	ldr	r2, [sp, #32]
 8004602:	2a00      	cmp	r2, #0
 8004604:	f000 80d7 	beq.w	80047b6 <_dtoa_r+0x8b6>
 8004608:	9a06      	ldr	r2, [sp, #24]
 800460a:	2a01      	cmp	r2, #1
 800460c:	f300 80ba 	bgt.w	8004784 <_dtoa_r+0x884>
 8004610:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004612:	2a00      	cmp	r2, #0
 8004614:	f000 80b2 	beq.w	800477c <_dtoa_r+0x87c>
 8004618:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800461c:	9e07      	ldr	r6, [sp, #28]
 800461e:	9d04      	ldr	r5, [sp, #16]
 8004620:	9a04      	ldr	r2, [sp, #16]
 8004622:	441a      	add	r2, r3
 8004624:	9204      	str	r2, [sp, #16]
 8004626:	9a05      	ldr	r2, [sp, #20]
 8004628:	2101      	movs	r1, #1
 800462a:	441a      	add	r2, r3
 800462c:	4620      	mov	r0, r4
 800462e:	9205      	str	r2, [sp, #20]
 8004630:	f000 ff32 	bl	8005498 <__i2b>
 8004634:	4607      	mov	r7, r0
 8004636:	2d00      	cmp	r5, #0
 8004638:	dd0c      	ble.n	8004654 <_dtoa_r+0x754>
 800463a:	9b05      	ldr	r3, [sp, #20]
 800463c:	2b00      	cmp	r3, #0
 800463e:	dd09      	ble.n	8004654 <_dtoa_r+0x754>
 8004640:	42ab      	cmp	r3, r5
 8004642:	9a04      	ldr	r2, [sp, #16]
 8004644:	bfa8      	it	ge
 8004646:	462b      	movge	r3, r5
 8004648:	1ad2      	subs	r2, r2, r3
 800464a:	9204      	str	r2, [sp, #16]
 800464c:	9a05      	ldr	r2, [sp, #20]
 800464e:	1aed      	subs	r5, r5, r3
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	9305      	str	r3, [sp, #20]
 8004654:	9b07      	ldr	r3, [sp, #28]
 8004656:	b31b      	cbz	r3, 80046a0 <_dtoa_r+0x7a0>
 8004658:	9b08      	ldr	r3, [sp, #32]
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 80af 	beq.w	80047be <_dtoa_r+0x8be>
 8004660:	2e00      	cmp	r6, #0
 8004662:	dd13      	ble.n	800468c <_dtoa_r+0x78c>
 8004664:	4639      	mov	r1, r7
 8004666:	4632      	mov	r2, r6
 8004668:	4620      	mov	r0, r4
 800466a:	f000 ffd5 	bl	8005618 <__pow5mult>
 800466e:	ee18 2a10 	vmov	r2, s16
 8004672:	4601      	mov	r1, r0
 8004674:	4607      	mov	r7, r0
 8004676:	4620      	mov	r0, r4
 8004678:	f000 ff24 	bl	80054c4 <__multiply>
 800467c:	ee18 1a10 	vmov	r1, s16
 8004680:	4680      	mov	r8, r0
 8004682:	4620      	mov	r0, r4
 8004684:	f000 fe06 	bl	8005294 <_Bfree>
 8004688:	ee08 8a10 	vmov	s16, r8
 800468c:	9b07      	ldr	r3, [sp, #28]
 800468e:	1b9a      	subs	r2, r3, r6
 8004690:	d006      	beq.n	80046a0 <_dtoa_r+0x7a0>
 8004692:	ee18 1a10 	vmov	r1, s16
 8004696:	4620      	mov	r0, r4
 8004698:	f000 ffbe 	bl	8005618 <__pow5mult>
 800469c:	ee08 0a10 	vmov	s16, r0
 80046a0:	2101      	movs	r1, #1
 80046a2:	4620      	mov	r0, r4
 80046a4:	f000 fef8 	bl	8005498 <__i2b>
 80046a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	4606      	mov	r6, r0
 80046ae:	f340 8088 	ble.w	80047c2 <_dtoa_r+0x8c2>
 80046b2:	461a      	mov	r2, r3
 80046b4:	4601      	mov	r1, r0
 80046b6:	4620      	mov	r0, r4
 80046b8:	f000 ffae 	bl	8005618 <__pow5mult>
 80046bc:	9b06      	ldr	r3, [sp, #24]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	4606      	mov	r6, r0
 80046c2:	f340 8081 	ble.w	80047c8 <_dtoa_r+0x8c8>
 80046c6:	f04f 0800 	mov.w	r8, #0
 80046ca:	6933      	ldr	r3, [r6, #16]
 80046cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80046d0:	6918      	ldr	r0, [r3, #16]
 80046d2:	f000 fe91 	bl	80053f8 <__hi0bits>
 80046d6:	f1c0 0020 	rsb	r0, r0, #32
 80046da:	9b05      	ldr	r3, [sp, #20]
 80046dc:	4418      	add	r0, r3
 80046de:	f010 001f 	ands.w	r0, r0, #31
 80046e2:	f000 8092 	beq.w	800480a <_dtoa_r+0x90a>
 80046e6:	f1c0 0320 	rsb	r3, r0, #32
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	f340 808a 	ble.w	8004804 <_dtoa_r+0x904>
 80046f0:	f1c0 001c 	rsb	r0, r0, #28
 80046f4:	9b04      	ldr	r3, [sp, #16]
 80046f6:	4403      	add	r3, r0
 80046f8:	9304      	str	r3, [sp, #16]
 80046fa:	9b05      	ldr	r3, [sp, #20]
 80046fc:	4403      	add	r3, r0
 80046fe:	4405      	add	r5, r0
 8004700:	9305      	str	r3, [sp, #20]
 8004702:	9b04      	ldr	r3, [sp, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	dd07      	ble.n	8004718 <_dtoa_r+0x818>
 8004708:	ee18 1a10 	vmov	r1, s16
 800470c:	461a      	mov	r2, r3
 800470e:	4620      	mov	r0, r4
 8004710:	f000 ffdc 	bl	80056cc <__lshift>
 8004714:	ee08 0a10 	vmov	s16, r0
 8004718:	9b05      	ldr	r3, [sp, #20]
 800471a:	2b00      	cmp	r3, #0
 800471c:	dd05      	ble.n	800472a <_dtoa_r+0x82a>
 800471e:	4631      	mov	r1, r6
 8004720:	461a      	mov	r2, r3
 8004722:	4620      	mov	r0, r4
 8004724:	f000 ffd2 	bl	80056cc <__lshift>
 8004728:	4606      	mov	r6, r0
 800472a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800472c:	2b00      	cmp	r3, #0
 800472e:	d06e      	beq.n	800480e <_dtoa_r+0x90e>
 8004730:	ee18 0a10 	vmov	r0, s16
 8004734:	4631      	mov	r1, r6
 8004736:	f001 f839 	bl	80057ac <__mcmp>
 800473a:	2800      	cmp	r0, #0
 800473c:	da67      	bge.n	800480e <_dtoa_r+0x90e>
 800473e:	9b00      	ldr	r3, [sp, #0]
 8004740:	3b01      	subs	r3, #1
 8004742:	ee18 1a10 	vmov	r1, s16
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	220a      	movs	r2, #10
 800474a:	2300      	movs	r3, #0
 800474c:	4620      	mov	r0, r4
 800474e:	f000 fdc3 	bl	80052d8 <__multadd>
 8004752:	9b08      	ldr	r3, [sp, #32]
 8004754:	ee08 0a10 	vmov	s16, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 81b1 	beq.w	8004ac0 <_dtoa_r+0xbc0>
 800475e:	2300      	movs	r3, #0
 8004760:	4639      	mov	r1, r7
 8004762:	220a      	movs	r2, #10
 8004764:	4620      	mov	r0, r4
 8004766:	f000 fdb7 	bl	80052d8 <__multadd>
 800476a:	9b02      	ldr	r3, [sp, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	4607      	mov	r7, r0
 8004770:	f300 808e 	bgt.w	8004890 <_dtoa_r+0x990>
 8004774:	9b06      	ldr	r3, [sp, #24]
 8004776:	2b02      	cmp	r3, #2
 8004778:	dc51      	bgt.n	800481e <_dtoa_r+0x91e>
 800477a:	e089      	b.n	8004890 <_dtoa_r+0x990>
 800477c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800477e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004782:	e74b      	b.n	800461c <_dtoa_r+0x71c>
 8004784:	9b03      	ldr	r3, [sp, #12]
 8004786:	1e5e      	subs	r6, r3, #1
 8004788:	9b07      	ldr	r3, [sp, #28]
 800478a:	42b3      	cmp	r3, r6
 800478c:	bfbf      	itttt	lt
 800478e:	9b07      	ldrlt	r3, [sp, #28]
 8004790:	9607      	strlt	r6, [sp, #28]
 8004792:	1af2      	sublt	r2, r6, r3
 8004794:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004796:	bfb6      	itet	lt
 8004798:	189b      	addlt	r3, r3, r2
 800479a:	1b9e      	subge	r6, r3, r6
 800479c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800479e:	9b03      	ldr	r3, [sp, #12]
 80047a0:	bfb8      	it	lt
 80047a2:	2600      	movlt	r6, #0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	bfb7      	itett	lt
 80047a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80047ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80047b0:	1a9d      	sublt	r5, r3, r2
 80047b2:	2300      	movlt	r3, #0
 80047b4:	e734      	b.n	8004620 <_dtoa_r+0x720>
 80047b6:	9e07      	ldr	r6, [sp, #28]
 80047b8:	9d04      	ldr	r5, [sp, #16]
 80047ba:	9f08      	ldr	r7, [sp, #32]
 80047bc:	e73b      	b.n	8004636 <_dtoa_r+0x736>
 80047be:	9a07      	ldr	r2, [sp, #28]
 80047c0:	e767      	b.n	8004692 <_dtoa_r+0x792>
 80047c2:	9b06      	ldr	r3, [sp, #24]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	dc18      	bgt.n	80047fa <_dtoa_r+0x8fa>
 80047c8:	f1ba 0f00 	cmp.w	sl, #0
 80047cc:	d115      	bne.n	80047fa <_dtoa_r+0x8fa>
 80047ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80047d2:	b993      	cbnz	r3, 80047fa <_dtoa_r+0x8fa>
 80047d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80047d8:	0d1b      	lsrs	r3, r3, #20
 80047da:	051b      	lsls	r3, r3, #20
 80047dc:	b183      	cbz	r3, 8004800 <_dtoa_r+0x900>
 80047de:	9b04      	ldr	r3, [sp, #16]
 80047e0:	3301      	adds	r3, #1
 80047e2:	9304      	str	r3, [sp, #16]
 80047e4:	9b05      	ldr	r3, [sp, #20]
 80047e6:	3301      	adds	r3, #1
 80047e8:	9305      	str	r3, [sp, #20]
 80047ea:	f04f 0801 	mov.w	r8, #1
 80047ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f47f af6a 	bne.w	80046ca <_dtoa_r+0x7ca>
 80047f6:	2001      	movs	r0, #1
 80047f8:	e76f      	b.n	80046da <_dtoa_r+0x7da>
 80047fa:	f04f 0800 	mov.w	r8, #0
 80047fe:	e7f6      	b.n	80047ee <_dtoa_r+0x8ee>
 8004800:	4698      	mov	r8, r3
 8004802:	e7f4      	b.n	80047ee <_dtoa_r+0x8ee>
 8004804:	f43f af7d 	beq.w	8004702 <_dtoa_r+0x802>
 8004808:	4618      	mov	r0, r3
 800480a:	301c      	adds	r0, #28
 800480c:	e772      	b.n	80046f4 <_dtoa_r+0x7f4>
 800480e:	9b03      	ldr	r3, [sp, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	dc37      	bgt.n	8004884 <_dtoa_r+0x984>
 8004814:	9b06      	ldr	r3, [sp, #24]
 8004816:	2b02      	cmp	r3, #2
 8004818:	dd34      	ble.n	8004884 <_dtoa_r+0x984>
 800481a:	9b03      	ldr	r3, [sp, #12]
 800481c:	9302      	str	r3, [sp, #8]
 800481e:	9b02      	ldr	r3, [sp, #8]
 8004820:	b96b      	cbnz	r3, 800483e <_dtoa_r+0x93e>
 8004822:	4631      	mov	r1, r6
 8004824:	2205      	movs	r2, #5
 8004826:	4620      	mov	r0, r4
 8004828:	f000 fd56 	bl	80052d8 <__multadd>
 800482c:	4601      	mov	r1, r0
 800482e:	4606      	mov	r6, r0
 8004830:	ee18 0a10 	vmov	r0, s16
 8004834:	f000 ffba 	bl	80057ac <__mcmp>
 8004838:	2800      	cmp	r0, #0
 800483a:	f73f adbb 	bgt.w	80043b4 <_dtoa_r+0x4b4>
 800483e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004840:	9d01      	ldr	r5, [sp, #4]
 8004842:	43db      	mvns	r3, r3
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	f04f 0800 	mov.w	r8, #0
 800484a:	4631      	mov	r1, r6
 800484c:	4620      	mov	r0, r4
 800484e:	f000 fd21 	bl	8005294 <_Bfree>
 8004852:	2f00      	cmp	r7, #0
 8004854:	f43f aea4 	beq.w	80045a0 <_dtoa_r+0x6a0>
 8004858:	f1b8 0f00 	cmp.w	r8, #0
 800485c:	d005      	beq.n	800486a <_dtoa_r+0x96a>
 800485e:	45b8      	cmp	r8, r7
 8004860:	d003      	beq.n	800486a <_dtoa_r+0x96a>
 8004862:	4641      	mov	r1, r8
 8004864:	4620      	mov	r0, r4
 8004866:	f000 fd15 	bl	8005294 <_Bfree>
 800486a:	4639      	mov	r1, r7
 800486c:	4620      	mov	r0, r4
 800486e:	f000 fd11 	bl	8005294 <_Bfree>
 8004872:	e695      	b.n	80045a0 <_dtoa_r+0x6a0>
 8004874:	2600      	movs	r6, #0
 8004876:	4637      	mov	r7, r6
 8004878:	e7e1      	b.n	800483e <_dtoa_r+0x93e>
 800487a:	9700      	str	r7, [sp, #0]
 800487c:	4637      	mov	r7, r6
 800487e:	e599      	b.n	80043b4 <_dtoa_r+0x4b4>
 8004880:	40240000 	.word	0x40240000
 8004884:	9b08      	ldr	r3, [sp, #32]
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 80ca 	beq.w	8004a20 <_dtoa_r+0xb20>
 800488c:	9b03      	ldr	r3, [sp, #12]
 800488e:	9302      	str	r3, [sp, #8]
 8004890:	2d00      	cmp	r5, #0
 8004892:	dd05      	ble.n	80048a0 <_dtoa_r+0x9a0>
 8004894:	4639      	mov	r1, r7
 8004896:	462a      	mov	r2, r5
 8004898:	4620      	mov	r0, r4
 800489a:	f000 ff17 	bl	80056cc <__lshift>
 800489e:	4607      	mov	r7, r0
 80048a0:	f1b8 0f00 	cmp.w	r8, #0
 80048a4:	d05b      	beq.n	800495e <_dtoa_r+0xa5e>
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	4620      	mov	r0, r4
 80048aa:	f000 fcb3 	bl	8005214 <_Balloc>
 80048ae:	4605      	mov	r5, r0
 80048b0:	b928      	cbnz	r0, 80048be <_dtoa_r+0x9be>
 80048b2:	4b87      	ldr	r3, [pc, #540]	; (8004ad0 <_dtoa_r+0xbd0>)
 80048b4:	4602      	mov	r2, r0
 80048b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80048ba:	f7ff bb3b 	b.w	8003f34 <_dtoa_r+0x34>
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	3202      	adds	r2, #2
 80048c2:	0092      	lsls	r2, r2, #2
 80048c4:	f107 010c 	add.w	r1, r7, #12
 80048c8:	300c      	adds	r0, #12
 80048ca:	f000 fc95 	bl	80051f8 <memcpy>
 80048ce:	2201      	movs	r2, #1
 80048d0:	4629      	mov	r1, r5
 80048d2:	4620      	mov	r0, r4
 80048d4:	f000 fefa 	bl	80056cc <__lshift>
 80048d8:	9b01      	ldr	r3, [sp, #4]
 80048da:	f103 0901 	add.w	r9, r3, #1
 80048de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80048e2:	4413      	add	r3, r2
 80048e4:	9305      	str	r3, [sp, #20]
 80048e6:	f00a 0301 	and.w	r3, sl, #1
 80048ea:	46b8      	mov	r8, r7
 80048ec:	9304      	str	r3, [sp, #16]
 80048ee:	4607      	mov	r7, r0
 80048f0:	4631      	mov	r1, r6
 80048f2:	ee18 0a10 	vmov	r0, s16
 80048f6:	f7ff fa77 	bl	8003de8 <quorem>
 80048fa:	4641      	mov	r1, r8
 80048fc:	9002      	str	r0, [sp, #8]
 80048fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004902:	ee18 0a10 	vmov	r0, s16
 8004906:	f000 ff51 	bl	80057ac <__mcmp>
 800490a:	463a      	mov	r2, r7
 800490c:	9003      	str	r0, [sp, #12]
 800490e:	4631      	mov	r1, r6
 8004910:	4620      	mov	r0, r4
 8004912:	f000 ff67 	bl	80057e4 <__mdiff>
 8004916:	68c2      	ldr	r2, [r0, #12]
 8004918:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800491c:	4605      	mov	r5, r0
 800491e:	bb02      	cbnz	r2, 8004962 <_dtoa_r+0xa62>
 8004920:	4601      	mov	r1, r0
 8004922:	ee18 0a10 	vmov	r0, s16
 8004926:	f000 ff41 	bl	80057ac <__mcmp>
 800492a:	4602      	mov	r2, r0
 800492c:	4629      	mov	r1, r5
 800492e:	4620      	mov	r0, r4
 8004930:	9207      	str	r2, [sp, #28]
 8004932:	f000 fcaf 	bl	8005294 <_Bfree>
 8004936:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800493a:	ea43 0102 	orr.w	r1, r3, r2
 800493e:	9b04      	ldr	r3, [sp, #16]
 8004940:	430b      	orrs	r3, r1
 8004942:	464d      	mov	r5, r9
 8004944:	d10f      	bne.n	8004966 <_dtoa_r+0xa66>
 8004946:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800494a:	d02a      	beq.n	80049a2 <_dtoa_r+0xaa2>
 800494c:	9b03      	ldr	r3, [sp, #12]
 800494e:	2b00      	cmp	r3, #0
 8004950:	dd02      	ble.n	8004958 <_dtoa_r+0xa58>
 8004952:	9b02      	ldr	r3, [sp, #8]
 8004954:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004958:	f88b a000 	strb.w	sl, [fp]
 800495c:	e775      	b.n	800484a <_dtoa_r+0x94a>
 800495e:	4638      	mov	r0, r7
 8004960:	e7ba      	b.n	80048d8 <_dtoa_r+0x9d8>
 8004962:	2201      	movs	r2, #1
 8004964:	e7e2      	b.n	800492c <_dtoa_r+0xa2c>
 8004966:	9b03      	ldr	r3, [sp, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	db04      	blt.n	8004976 <_dtoa_r+0xa76>
 800496c:	9906      	ldr	r1, [sp, #24]
 800496e:	430b      	orrs	r3, r1
 8004970:	9904      	ldr	r1, [sp, #16]
 8004972:	430b      	orrs	r3, r1
 8004974:	d122      	bne.n	80049bc <_dtoa_r+0xabc>
 8004976:	2a00      	cmp	r2, #0
 8004978:	ddee      	ble.n	8004958 <_dtoa_r+0xa58>
 800497a:	ee18 1a10 	vmov	r1, s16
 800497e:	2201      	movs	r2, #1
 8004980:	4620      	mov	r0, r4
 8004982:	f000 fea3 	bl	80056cc <__lshift>
 8004986:	4631      	mov	r1, r6
 8004988:	ee08 0a10 	vmov	s16, r0
 800498c:	f000 ff0e 	bl	80057ac <__mcmp>
 8004990:	2800      	cmp	r0, #0
 8004992:	dc03      	bgt.n	800499c <_dtoa_r+0xa9c>
 8004994:	d1e0      	bne.n	8004958 <_dtoa_r+0xa58>
 8004996:	f01a 0f01 	tst.w	sl, #1
 800499a:	d0dd      	beq.n	8004958 <_dtoa_r+0xa58>
 800499c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80049a0:	d1d7      	bne.n	8004952 <_dtoa_r+0xa52>
 80049a2:	2339      	movs	r3, #57	; 0x39
 80049a4:	f88b 3000 	strb.w	r3, [fp]
 80049a8:	462b      	mov	r3, r5
 80049aa:	461d      	mov	r5, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80049b2:	2a39      	cmp	r2, #57	; 0x39
 80049b4:	d071      	beq.n	8004a9a <_dtoa_r+0xb9a>
 80049b6:	3201      	adds	r2, #1
 80049b8:	701a      	strb	r2, [r3, #0]
 80049ba:	e746      	b.n	800484a <_dtoa_r+0x94a>
 80049bc:	2a00      	cmp	r2, #0
 80049be:	dd07      	ble.n	80049d0 <_dtoa_r+0xad0>
 80049c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80049c4:	d0ed      	beq.n	80049a2 <_dtoa_r+0xaa2>
 80049c6:	f10a 0301 	add.w	r3, sl, #1
 80049ca:	f88b 3000 	strb.w	r3, [fp]
 80049ce:	e73c      	b.n	800484a <_dtoa_r+0x94a>
 80049d0:	9b05      	ldr	r3, [sp, #20]
 80049d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80049d6:	4599      	cmp	r9, r3
 80049d8:	d047      	beq.n	8004a6a <_dtoa_r+0xb6a>
 80049da:	ee18 1a10 	vmov	r1, s16
 80049de:	2300      	movs	r3, #0
 80049e0:	220a      	movs	r2, #10
 80049e2:	4620      	mov	r0, r4
 80049e4:	f000 fc78 	bl	80052d8 <__multadd>
 80049e8:	45b8      	cmp	r8, r7
 80049ea:	ee08 0a10 	vmov	s16, r0
 80049ee:	f04f 0300 	mov.w	r3, #0
 80049f2:	f04f 020a 	mov.w	r2, #10
 80049f6:	4641      	mov	r1, r8
 80049f8:	4620      	mov	r0, r4
 80049fa:	d106      	bne.n	8004a0a <_dtoa_r+0xb0a>
 80049fc:	f000 fc6c 	bl	80052d8 <__multadd>
 8004a00:	4680      	mov	r8, r0
 8004a02:	4607      	mov	r7, r0
 8004a04:	f109 0901 	add.w	r9, r9, #1
 8004a08:	e772      	b.n	80048f0 <_dtoa_r+0x9f0>
 8004a0a:	f000 fc65 	bl	80052d8 <__multadd>
 8004a0e:	4639      	mov	r1, r7
 8004a10:	4680      	mov	r8, r0
 8004a12:	2300      	movs	r3, #0
 8004a14:	220a      	movs	r2, #10
 8004a16:	4620      	mov	r0, r4
 8004a18:	f000 fc5e 	bl	80052d8 <__multadd>
 8004a1c:	4607      	mov	r7, r0
 8004a1e:	e7f1      	b.n	8004a04 <_dtoa_r+0xb04>
 8004a20:	9b03      	ldr	r3, [sp, #12]
 8004a22:	9302      	str	r3, [sp, #8]
 8004a24:	9d01      	ldr	r5, [sp, #4]
 8004a26:	ee18 0a10 	vmov	r0, s16
 8004a2a:	4631      	mov	r1, r6
 8004a2c:	f7ff f9dc 	bl	8003de8 <quorem>
 8004a30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004a34:	9b01      	ldr	r3, [sp, #4]
 8004a36:	f805 ab01 	strb.w	sl, [r5], #1
 8004a3a:	1aea      	subs	r2, r5, r3
 8004a3c:	9b02      	ldr	r3, [sp, #8]
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	dd09      	ble.n	8004a56 <_dtoa_r+0xb56>
 8004a42:	ee18 1a10 	vmov	r1, s16
 8004a46:	2300      	movs	r3, #0
 8004a48:	220a      	movs	r2, #10
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	f000 fc44 	bl	80052d8 <__multadd>
 8004a50:	ee08 0a10 	vmov	s16, r0
 8004a54:	e7e7      	b.n	8004a26 <_dtoa_r+0xb26>
 8004a56:	9b02      	ldr	r3, [sp, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	bfc8      	it	gt
 8004a5c:	461d      	movgt	r5, r3
 8004a5e:	9b01      	ldr	r3, [sp, #4]
 8004a60:	bfd8      	it	le
 8004a62:	2501      	movle	r5, #1
 8004a64:	441d      	add	r5, r3
 8004a66:	f04f 0800 	mov.w	r8, #0
 8004a6a:	ee18 1a10 	vmov	r1, s16
 8004a6e:	2201      	movs	r2, #1
 8004a70:	4620      	mov	r0, r4
 8004a72:	f000 fe2b 	bl	80056cc <__lshift>
 8004a76:	4631      	mov	r1, r6
 8004a78:	ee08 0a10 	vmov	s16, r0
 8004a7c:	f000 fe96 	bl	80057ac <__mcmp>
 8004a80:	2800      	cmp	r0, #0
 8004a82:	dc91      	bgt.n	80049a8 <_dtoa_r+0xaa8>
 8004a84:	d102      	bne.n	8004a8c <_dtoa_r+0xb8c>
 8004a86:	f01a 0f01 	tst.w	sl, #1
 8004a8a:	d18d      	bne.n	80049a8 <_dtoa_r+0xaa8>
 8004a8c:	462b      	mov	r3, r5
 8004a8e:	461d      	mov	r5, r3
 8004a90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a94:	2a30      	cmp	r2, #48	; 0x30
 8004a96:	d0fa      	beq.n	8004a8e <_dtoa_r+0xb8e>
 8004a98:	e6d7      	b.n	800484a <_dtoa_r+0x94a>
 8004a9a:	9a01      	ldr	r2, [sp, #4]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d184      	bne.n	80049aa <_dtoa_r+0xaaa>
 8004aa0:	9b00      	ldr	r3, [sp, #0]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	2331      	movs	r3, #49	; 0x31
 8004aa8:	7013      	strb	r3, [r2, #0]
 8004aaa:	e6ce      	b.n	800484a <_dtoa_r+0x94a>
 8004aac:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <_dtoa_r+0xbd4>)
 8004aae:	f7ff ba95 	b.w	8003fdc <_dtoa_r+0xdc>
 8004ab2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f47f aa6e 	bne.w	8003f96 <_dtoa_r+0x96>
 8004aba:	4b07      	ldr	r3, [pc, #28]	; (8004ad8 <_dtoa_r+0xbd8>)
 8004abc:	f7ff ba8e 	b.w	8003fdc <_dtoa_r+0xdc>
 8004ac0:	9b02      	ldr	r3, [sp, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	dcae      	bgt.n	8004a24 <_dtoa_r+0xb24>
 8004ac6:	9b06      	ldr	r3, [sp, #24]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	f73f aea8 	bgt.w	800481e <_dtoa_r+0x91e>
 8004ace:	e7a9      	b.n	8004a24 <_dtoa_r+0xb24>
 8004ad0:	08006e68 	.word	0x08006e68
 8004ad4:	08006c68 	.word	0x08006c68
 8004ad8:	08006de9 	.word	0x08006de9

08004adc <rshift>:
 8004adc:	6903      	ldr	r3, [r0, #16]
 8004ade:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8004ae2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ae6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8004aea:	f100 0414 	add.w	r4, r0, #20
 8004aee:	dd45      	ble.n	8004b7c <rshift+0xa0>
 8004af0:	f011 011f 	ands.w	r1, r1, #31
 8004af4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8004af8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8004afc:	d10c      	bne.n	8004b18 <rshift+0x3c>
 8004afe:	f100 0710 	add.w	r7, r0, #16
 8004b02:	4629      	mov	r1, r5
 8004b04:	42b1      	cmp	r1, r6
 8004b06:	d334      	bcc.n	8004b72 <rshift+0x96>
 8004b08:	1a9b      	subs	r3, r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	1eea      	subs	r2, r5, #3
 8004b0e:	4296      	cmp	r6, r2
 8004b10:	bf38      	it	cc
 8004b12:	2300      	movcc	r3, #0
 8004b14:	4423      	add	r3, r4
 8004b16:	e015      	b.n	8004b44 <rshift+0x68>
 8004b18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8004b1c:	f1c1 0820 	rsb	r8, r1, #32
 8004b20:	40cf      	lsrs	r7, r1
 8004b22:	f105 0e04 	add.w	lr, r5, #4
 8004b26:	46a1      	mov	r9, r4
 8004b28:	4576      	cmp	r6, lr
 8004b2a:	46f4      	mov	ip, lr
 8004b2c:	d815      	bhi.n	8004b5a <rshift+0x7e>
 8004b2e:	1a9a      	subs	r2, r3, r2
 8004b30:	0092      	lsls	r2, r2, #2
 8004b32:	3a04      	subs	r2, #4
 8004b34:	3501      	adds	r5, #1
 8004b36:	42ae      	cmp	r6, r5
 8004b38:	bf38      	it	cc
 8004b3a:	2200      	movcc	r2, #0
 8004b3c:	18a3      	adds	r3, r4, r2
 8004b3e:	50a7      	str	r7, [r4, r2]
 8004b40:	b107      	cbz	r7, 8004b44 <rshift+0x68>
 8004b42:	3304      	adds	r3, #4
 8004b44:	1b1a      	subs	r2, r3, r4
 8004b46:	42a3      	cmp	r3, r4
 8004b48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004b4c:	bf08      	it	eq
 8004b4e:	2300      	moveq	r3, #0
 8004b50:	6102      	str	r2, [r0, #16]
 8004b52:	bf08      	it	eq
 8004b54:	6143      	streq	r3, [r0, #20]
 8004b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b5a:	f8dc c000 	ldr.w	ip, [ip]
 8004b5e:	fa0c fc08 	lsl.w	ip, ip, r8
 8004b62:	ea4c 0707 	orr.w	r7, ip, r7
 8004b66:	f849 7b04 	str.w	r7, [r9], #4
 8004b6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004b6e:	40cf      	lsrs	r7, r1
 8004b70:	e7da      	b.n	8004b28 <rshift+0x4c>
 8004b72:	f851 cb04 	ldr.w	ip, [r1], #4
 8004b76:	f847 cf04 	str.w	ip, [r7, #4]!
 8004b7a:	e7c3      	b.n	8004b04 <rshift+0x28>
 8004b7c:	4623      	mov	r3, r4
 8004b7e:	e7e1      	b.n	8004b44 <rshift+0x68>

08004b80 <__hexdig_fun>:
 8004b80:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004b84:	2b09      	cmp	r3, #9
 8004b86:	d802      	bhi.n	8004b8e <__hexdig_fun+0xe>
 8004b88:	3820      	subs	r0, #32
 8004b8a:	b2c0      	uxtb	r0, r0
 8004b8c:	4770      	bx	lr
 8004b8e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004b92:	2b05      	cmp	r3, #5
 8004b94:	d801      	bhi.n	8004b9a <__hexdig_fun+0x1a>
 8004b96:	3847      	subs	r0, #71	; 0x47
 8004b98:	e7f7      	b.n	8004b8a <__hexdig_fun+0xa>
 8004b9a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8004b9e:	2b05      	cmp	r3, #5
 8004ba0:	d801      	bhi.n	8004ba6 <__hexdig_fun+0x26>
 8004ba2:	3827      	subs	r0, #39	; 0x27
 8004ba4:	e7f1      	b.n	8004b8a <__hexdig_fun+0xa>
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	4770      	bx	lr
	...

08004bac <__gethex>:
 8004bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb0:	ed2d 8b02 	vpush	{d8}
 8004bb4:	b089      	sub	sp, #36	; 0x24
 8004bb6:	ee08 0a10 	vmov	s16, r0
 8004bba:	9304      	str	r3, [sp, #16]
 8004bbc:	4bb4      	ldr	r3, [pc, #720]	; (8004e90 <__gethex+0x2e4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	9301      	str	r3, [sp, #4]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	468b      	mov	fp, r1
 8004bc6:	4690      	mov	r8, r2
 8004bc8:	f7fb fb0a 	bl	80001e0 <strlen>
 8004bcc:	9b01      	ldr	r3, [sp, #4]
 8004bce:	f8db 2000 	ldr.w	r2, [fp]
 8004bd2:	4403      	add	r3, r0
 8004bd4:	4682      	mov	sl, r0
 8004bd6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004bda:	9305      	str	r3, [sp, #20]
 8004bdc:	1c93      	adds	r3, r2, #2
 8004bde:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8004be2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8004be6:	32fe      	adds	r2, #254	; 0xfe
 8004be8:	18d1      	adds	r1, r2, r3
 8004bea:	461f      	mov	r7, r3
 8004bec:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004bf0:	9100      	str	r1, [sp, #0]
 8004bf2:	2830      	cmp	r0, #48	; 0x30
 8004bf4:	d0f8      	beq.n	8004be8 <__gethex+0x3c>
 8004bf6:	f7ff ffc3 	bl	8004b80 <__hexdig_fun>
 8004bfa:	4604      	mov	r4, r0
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	d13a      	bne.n	8004c76 <__gethex+0xca>
 8004c00:	9901      	ldr	r1, [sp, #4]
 8004c02:	4652      	mov	r2, sl
 8004c04:	4638      	mov	r0, r7
 8004c06:	f001 fa33 	bl	8006070 <strncmp>
 8004c0a:	4605      	mov	r5, r0
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	d168      	bne.n	8004ce2 <__gethex+0x136>
 8004c10:	f817 000a 	ldrb.w	r0, [r7, sl]
 8004c14:	eb07 060a 	add.w	r6, r7, sl
 8004c18:	f7ff ffb2 	bl	8004b80 <__hexdig_fun>
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	d062      	beq.n	8004ce6 <__gethex+0x13a>
 8004c20:	4633      	mov	r3, r6
 8004c22:	7818      	ldrb	r0, [r3, #0]
 8004c24:	2830      	cmp	r0, #48	; 0x30
 8004c26:	461f      	mov	r7, r3
 8004c28:	f103 0301 	add.w	r3, r3, #1
 8004c2c:	d0f9      	beq.n	8004c22 <__gethex+0x76>
 8004c2e:	f7ff ffa7 	bl	8004b80 <__hexdig_fun>
 8004c32:	2301      	movs	r3, #1
 8004c34:	fab0 f480 	clz	r4, r0
 8004c38:	0964      	lsrs	r4, r4, #5
 8004c3a:	4635      	mov	r5, r6
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	463a      	mov	r2, r7
 8004c40:	4616      	mov	r6, r2
 8004c42:	3201      	adds	r2, #1
 8004c44:	7830      	ldrb	r0, [r6, #0]
 8004c46:	f7ff ff9b 	bl	8004b80 <__hexdig_fun>
 8004c4a:	2800      	cmp	r0, #0
 8004c4c:	d1f8      	bne.n	8004c40 <__gethex+0x94>
 8004c4e:	9901      	ldr	r1, [sp, #4]
 8004c50:	4652      	mov	r2, sl
 8004c52:	4630      	mov	r0, r6
 8004c54:	f001 fa0c 	bl	8006070 <strncmp>
 8004c58:	b980      	cbnz	r0, 8004c7c <__gethex+0xd0>
 8004c5a:	b94d      	cbnz	r5, 8004c70 <__gethex+0xc4>
 8004c5c:	eb06 050a 	add.w	r5, r6, sl
 8004c60:	462a      	mov	r2, r5
 8004c62:	4616      	mov	r6, r2
 8004c64:	3201      	adds	r2, #1
 8004c66:	7830      	ldrb	r0, [r6, #0]
 8004c68:	f7ff ff8a 	bl	8004b80 <__hexdig_fun>
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	d1f8      	bne.n	8004c62 <__gethex+0xb6>
 8004c70:	1bad      	subs	r5, r5, r6
 8004c72:	00ad      	lsls	r5, r5, #2
 8004c74:	e004      	b.n	8004c80 <__gethex+0xd4>
 8004c76:	2400      	movs	r4, #0
 8004c78:	4625      	mov	r5, r4
 8004c7a:	e7e0      	b.n	8004c3e <__gethex+0x92>
 8004c7c:	2d00      	cmp	r5, #0
 8004c7e:	d1f7      	bne.n	8004c70 <__gethex+0xc4>
 8004c80:	7833      	ldrb	r3, [r6, #0]
 8004c82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004c86:	2b50      	cmp	r3, #80	; 0x50
 8004c88:	d13b      	bne.n	8004d02 <__gethex+0x156>
 8004c8a:	7873      	ldrb	r3, [r6, #1]
 8004c8c:	2b2b      	cmp	r3, #43	; 0x2b
 8004c8e:	d02c      	beq.n	8004cea <__gethex+0x13e>
 8004c90:	2b2d      	cmp	r3, #45	; 0x2d
 8004c92:	d02e      	beq.n	8004cf2 <__gethex+0x146>
 8004c94:	1c71      	adds	r1, r6, #1
 8004c96:	f04f 0900 	mov.w	r9, #0
 8004c9a:	7808      	ldrb	r0, [r1, #0]
 8004c9c:	f7ff ff70 	bl	8004b80 <__hexdig_fun>
 8004ca0:	1e43      	subs	r3, r0, #1
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b18      	cmp	r3, #24
 8004ca6:	d82c      	bhi.n	8004d02 <__gethex+0x156>
 8004ca8:	f1a0 0210 	sub.w	r2, r0, #16
 8004cac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004cb0:	f7ff ff66 	bl	8004b80 <__hexdig_fun>
 8004cb4:	1e43      	subs	r3, r0, #1
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b18      	cmp	r3, #24
 8004cba:	d91d      	bls.n	8004cf8 <__gethex+0x14c>
 8004cbc:	f1b9 0f00 	cmp.w	r9, #0
 8004cc0:	d000      	beq.n	8004cc4 <__gethex+0x118>
 8004cc2:	4252      	negs	r2, r2
 8004cc4:	4415      	add	r5, r2
 8004cc6:	f8cb 1000 	str.w	r1, [fp]
 8004cca:	b1e4      	cbz	r4, 8004d06 <__gethex+0x15a>
 8004ccc:	9b00      	ldr	r3, [sp, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	bf14      	ite	ne
 8004cd2:	2700      	movne	r7, #0
 8004cd4:	2706      	moveq	r7, #6
 8004cd6:	4638      	mov	r0, r7
 8004cd8:	b009      	add	sp, #36	; 0x24
 8004cda:	ecbd 8b02 	vpop	{d8}
 8004cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce2:	463e      	mov	r6, r7
 8004ce4:	4625      	mov	r5, r4
 8004ce6:	2401      	movs	r4, #1
 8004ce8:	e7ca      	b.n	8004c80 <__gethex+0xd4>
 8004cea:	f04f 0900 	mov.w	r9, #0
 8004cee:	1cb1      	adds	r1, r6, #2
 8004cf0:	e7d3      	b.n	8004c9a <__gethex+0xee>
 8004cf2:	f04f 0901 	mov.w	r9, #1
 8004cf6:	e7fa      	b.n	8004cee <__gethex+0x142>
 8004cf8:	230a      	movs	r3, #10
 8004cfa:	fb03 0202 	mla	r2, r3, r2, r0
 8004cfe:	3a10      	subs	r2, #16
 8004d00:	e7d4      	b.n	8004cac <__gethex+0x100>
 8004d02:	4631      	mov	r1, r6
 8004d04:	e7df      	b.n	8004cc6 <__gethex+0x11a>
 8004d06:	1bf3      	subs	r3, r6, r7
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	4621      	mov	r1, r4
 8004d0c:	2b07      	cmp	r3, #7
 8004d0e:	dc0b      	bgt.n	8004d28 <__gethex+0x17c>
 8004d10:	ee18 0a10 	vmov	r0, s16
 8004d14:	f000 fa7e 	bl	8005214 <_Balloc>
 8004d18:	4604      	mov	r4, r0
 8004d1a:	b940      	cbnz	r0, 8004d2e <__gethex+0x182>
 8004d1c:	4b5d      	ldr	r3, [pc, #372]	; (8004e94 <__gethex+0x2e8>)
 8004d1e:	4602      	mov	r2, r0
 8004d20:	21de      	movs	r1, #222	; 0xde
 8004d22:	485d      	ldr	r0, [pc, #372]	; (8004e98 <__gethex+0x2ec>)
 8004d24:	f001 f9c6 	bl	80060b4 <__assert_func>
 8004d28:	3101      	adds	r1, #1
 8004d2a:	105b      	asrs	r3, r3, #1
 8004d2c:	e7ee      	b.n	8004d0c <__gethex+0x160>
 8004d2e:	f100 0914 	add.w	r9, r0, #20
 8004d32:	f04f 0b00 	mov.w	fp, #0
 8004d36:	f1ca 0301 	rsb	r3, sl, #1
 8004d3a:	f8cd 9008 	str.w	r9, [sp, #8]
 8004d3e:	f8cd b000 	str.w	fp, [sp]
 8004d42:	9306      	str	r3, [sp, #24]
 8004d44:	42b7      	cmp	r7, r6
 8004d46:	d340      	bcc.n	8004dca <__gethex+0x21e>
 8004d48:	9802      	ldr	r0, [sp, #8]
 8004d4a:	9b00      	ldr	r3, [sp, #0]
 8004d4c:	f840 3b04 	str.w	r3, [r0], #4
 8004d50:	eba0 0009 	sub.w	r0, r0, r9
 8004d54:	1080      	asrs	r0, r0, #2
 8004d56:	0146      	lsls	r6, r0, #5
 8004d58:	6120      	str	r0, [r4, #16]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 fb4c 	bl	80053f8 <__hi0bits>
 8004d60:	1a30      	subs	r0, r6, r0
 8004d62:	f8d8 6000 	ldr.w	r6, [r8]
 8004d66:	42b0      	cmp	r0, r6
 8004d68:	dd63      	ble.n	8004e32 <__gethex+0x286>
 8004d6a:	1b87      	subs	r7, r0, r6
 8004d6c:	4639      	mov	r1, r7
 8004d6e:	4620      	mov	r0, r4
 8004d70:	f000 fef0 	bl	8005b54 <__any_on>
 8004d74:	4682      	mov	sl, r0
 8004d76:	b1a8      	cbz	r0, 8004da4 <__gethex+0x1f8>
 8004d78:	1e7b      	subs	r3, r7, #1
 8004d7a:	1159      	asrs	r1, r3, #5
 8004d7c:	f003 021f 	and.w	r2, r3, #31
 8004d80:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8004d84:	f04f 0a01 	mov.w	sl, #1
 8004d88:	fa0a f202 	lsl.w	r2, sl, r2
 8004d8c:	420a      	tst	r2, r1
 8004d8e:	d009      	beq.n	8004da4 <__gethex+0x1f8>
 8004d90:	4553      	cmp	r3, sl
 8004d92:	dd05      	ble.n	8004da0 <__gethex+0x1f4>
 8004d94:	1eb9      	subs	r1, r7, #2
 8004d96:	4620      	mov	r0, r4
 8004d98:	f000 fedc 	bl	8005b54 <__any_on>
 8004d9c:	2800      	cmp	r0, #0
 8004d9e:	d145      	bne.n	8004e2c <__gethex+0x280>
 8004da0:	f04f 0a02 	mov.w	sl, #2
 8004da4:	4639      	mov	r1, r7
 8004da6:	4620      	mov	r0, r4
 8004da8:	f7ff fe98 	bl	8004adc <rshift>
 8004dac:	443d      	add	r5, r7
 8004dae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004db2:	42ab      	cmp	r3, r5
 8004db4:	da4c      	bge.n	8004e50 <__gethex+0x2a4>
 8004db6:	ee18 0a10 	vmov	r0, s16
 8004dba:	4621      	mov	r1, r4
 8004dbc:	f000 fa6a 	bl	8005294 <_Bfree>
 8004dc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	27a3      	movs	r7, #163	; 0xa3
 8004dc8:	e785      	b.n	8004cd6 <__gethex+0x12a>
 8004dca:	1e73      	subs	r3, r6, #1
 8004dcc:	9a05      	ldr	r2, [sp, #20]
 8004dce:	9303      	str	r3, [sp, #12]
 8004dd0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d019      	beq.n	8004e0c <__gethex+0x260>
 8004dd8:	f1bb 0f20 	cmp.w	fp, #32
 8004ddc:	d107      	bne.n	8004dee <__gethex+0x242>
 8004dde:	9b02      	ldr	r3, [sp, #8]
 8004de0:	9a00      	ldr	r2, [sp, #0]
 8004de2:	f843 2b04 	str.w	r2, [r3], #4
 8004de6:	9302      	str	r3, [sp, #8]
 8004de8:	2300      	movs	r3, #0
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	469b      	mov	fp, r3
 8004dee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8004df2:	f7ff fec5 	bl	8004b80 <__hexdig_fun>
 8004df6:	9b00      	ldr	r3, [sp, #0]
 8004df8:	f000 000f 	and.w	r0, r0, #15
 8004dfc:	fa00 f00b 	lsl.w	r0, r0, fp
 8004e00:	4303      	orrs	r3, r0
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	f10b 0b04 	add.w	fp, fp, #4
 8004e08:	9b03      	ldr	r3, [sp, #12]
 8004e0a:	e00d      	b.n	8004e28 <__gethex+0x27c>
 8004e0c:	9b03      	ldr	r3, [sp, #12]
 8004e0e:	9a06      	ldr	r2, [sp, #24]
 8004e10:	4413      	add	r3, r2
 8004e12:	42bb      	cmp	r3, r7
 8004e14:	d3e0      	bcc.n	8004dd8 <__gethex+0x22c>
 8004e16:	4618      	mov	r0, r3
 8004e18:	9901      	ldr	r1, [sp, #4]
 8004e1a:	9307      	str	r3, [sp, #28]
 8004e1c:	4652      	mov	r2, sl
 8004e1e:	f001 f927 	bl	8006070 <strncmp>
 8004e22:	9b07      	ldr	r3, [sp, #28]
 8004e24:	2800      	cmp	r0, #0
 8004e26:	d1d7      	bne.n	8004dd8 <__gethex+0x22c>
 8004e28:	461e      	mov	r6, r3
 8004e2a:	e78b      	b.n	8004d44 <__gethex+0x198>
 8004e2c:	f04f 0a03 	mov.w	sl, #3
 8004e30:	e7b8      	b.n	8004da4 <__gethex+0x1f8>
 8004e32:	da0a      	bge.n	8004e4a <__gethex+0x29e>
 8004e34:	1a37      	subs	r7, r6, r0
 8004e36:	4621      	mov	r1, r4
 8004e38:	ee18 0a10 	vmov	r0, s16
 8004e3c:	463a      	mov	r2, r7
 8004e3e:	f000 fc45 	bl	80056cc <__lshift>
 8004e42:	1bed      	subs	r5, r5, r7
 8004e44:	4604      	mov	r4, r0
 8004e46:	f100 0914 	add.w	r9, r0, #20
 8004e4a:	f04f 0a00 	mov.w	sl, #0
 8004e4e:	e7ae      	b.n	8004dae <__gethex+0x202>
 8004e50:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004e54:	42a8      	cmp	r0, r5
 8004e56:	dd72      	ble.n	8004f3e <__gethex+0x392>
 8004e58:	1b45      	subs	r5, r0, r5
 8004e5a:	42ae      	cmp	r6, r5
 8004e5c:	dc36      	bgt.n	8004ecc <__gethex+0x320>
 8004e5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d02a      	beq.n	8004ebc <__gethex+0x310>
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d02c      	beq.n	8004ec4 <__gethex+0x318>
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d11c      	bne.n	8004ea8 <__gethex+0x2fc>
 8004e6e:	42ae      	cmp	r6, r5
 8004e70:	d11a      	bne.n	8004ea8 <__gethex+0x2fc>
 8004e72:	2e01      	cmp	r6, #1
 8004e74:	d112      	bne.n	8004e9c <__gethex+0x2f0>
 8004e76:	9a04      	ldr	r2, [sp, #16]
 8004e78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	2301      	movs	r3, #1
 8004e80:	6123      	str	r3, [r4, #16]
 8004e82:	f8c9 3000 	str.w	r3, [r9]
 8004e86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004e88:	2762      	movs	r7, #98	; 0x62
 8004e8a:	601c      	str	r4, [r3, #0]
 8004e8c:	e723      	b.n	8004cd6 <__gethex+0x12a>
 8004e8e:	bf00      	nop
 8004e90:	08006ee0 	.word	0x08006ee0
 8004e94:	08006e68 	.word	0x08006e68
 8004e98:	08006e79 	.word	0x08006e79
 8004e9c:	1e71      	subs	r1, r6, #1
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	f000 fe58 	bl	8005b54 <__any_on>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	d1e6      	bne.n	8004e76 <__gethex+0x2ca>
 8004ea8:	ee18 0a10 	vmov	r0, s16
 8004eac:	4621      	mov	r1, r4
 8004eae:	f000 f9f1 	bl	8005294 <_Bfree>
 8004eb2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	2750      	movs	r7, #80	; 0x50
 8004eba:	e70c      	b.n	8004cd6 <__gethex+0x12a>
 8004ebc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f2      	bne.n	8004ea8 <__gethex+0x2fc>
 8004ec2:	e7d8      	b.n	8004e76 <__gethex+0x2ca>
 8004ec4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1d5      	bne.n	8004e76 <__gethex+0x2ca>
 8004eca:	e7ed      	b.n	8004ea8 <__gethex+0x2fc>
 8004ecc:	1e6f      	subs	r7, r5, #1
 8004ece:	f1ba 0f00 	cmp.w	sl, #0
 8004ed2:	d131      	bne.n	8004f38 <__gethex+0x38c>
 8004ed4:	b127      	cbz	r7, 8004ee0 <__gethex+0x334>
 8004ed6:	4639      	mov	r1, r7
 8004ed8:	4620      	mov	r0, r4
 8004eda:	f000 fe3b 	bl	8005b54 <__any_on>
 8004ede:	4682      	mov	sl, r0
 8004ee0:	117b      	asrs	r3, r7, #5
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004ee8:	f007 071f 	and.w	r7, r7, #31
 8004eec:	fa01 f707 	lsl.w	r7, r1, r7
 8004ef0:	421f      	tst	r7, r3
 8004ef2:	4629      	mov	r1, r5
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	bf18      	it	ne
 8004ef8:	f04a 0a02 	orrne.w	sl, sl, #2
 8004efc:	1b76      	subs	r6, r6, r5
 8004efe:	f7ff fded 	bl	8004adc <rshift>
 8004f02:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8004f06:	2702      	movs	r7, #2
 8004f08:	f1ba 0f00 	cmp.w	sl, #0
 8004f0c:	d048      	beq.n	8004fa0 <__gethex+0x3f4>
 8004f0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d015      	beq.n	8004f42 <__gethex+0x396>
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	d017      	beq.n	8004f4a <__gethex+0x39e>
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d109      	bne.n	8004f32 <__gethex+0x386>
 8004f1e:	f01a 0f02 	tst.w	sl, #2
 8004f22:	d006      	beq.n	8004f32 <__gethex+0x386>
 8004f24:	f8d9 0000 	ldr.w	r0, [r9]
 8004f28:	ea4a 0a00 	orr.w	sl, sl, r0
 8004f2c:	f01a 0f01 	tst.w	sl, #1
 8004f30:	d10e      	bne.n	8004f50 <__gethex+0x3a4>
 8004f32:	f047 0710 	orr.w	r7, r7, #16
 8004f36:	e033      	b.n	8004fa0 <__gethex+0x3f4>
 8004f38:	f04f 0a01 	mov.w	sl, #1
 8004f3c:	e7d0      	b.n	8004ee0 <__gethex+0x334>
 8004f3e:	2701      	movs	r7, #1
 8004f40:	e7e2      	b.n	8004f08 <__gethex+0x35c>
 8004f42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f44:	f1c3 0301 	rsb	r3, r3, #1
 8004f48:	9315      	str	r3, [sp, #84]	; 0x54
 8004f4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0f0      	beq.n	8004f32 <__gethex+0x386>
 8004f50:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8004f54:	f104 0314 	add.w	r3, r4, #20
 8004f58:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8004f5c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8004f60:	f04f 0c00 	mov.w	ip, #0
 8004f64:	4618      	mov	r0, r3
 8004f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f6a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8004f6e:	d01c      	beq.n	8004faa <__gethex+0x3fe>
 8004f70:	3201      	adds	r2, #1
 8004f72:	6002      	str	r2, [r0, #0]
 8004f74:	2f02      	cmp	r7, #2
 8004f76:	f104 0314 	add.w	r3, r4, #20
 8004f7a:	d13f      	bne.n	8004ffc <__gethex+0x450>
 8004f7c:	f8d8 2000 	ldr.w	r2, [r8]
 8004f80:	3a01      	subs	r2, #1
 8004f82:	42b2      	cmp	r2, r6
 8004f84:	d10a      	bne.n	8004f9c <__gethex+0x3f0>
 8004f86:	1171      	asrs	r1, r6, #5
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004f8e:	f006 061f 	and.w	r6, r6, #31
 8004f92:	fa02 f606 	lsl.w	r6, r2, r6
 8004f96:	421e      	tst	r6, r3
 8004f98:	bf18      	it	ne
 8004f9a:	4617      	movne	r7, r2
 8004f9c:	f047 0720 	orr.w	r7, r7, #32
 8004fa0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004fa2:	601c      	str	r4, [r3, #0]
 8004fa4:	9b04      	ldr	r3, [sp, #16]
 8004fa6:	601d      	str	r5, [r3, #0]
 8004fa8:	e695      	b.n	8004cd6 <__gethex+0x12a>
 8004faa:	4299      	cmp	r1, r3
 8004fac:	f843 cc04 	str.w	ip, [r3, #-4]
 8004fb0:	d8d8      	bhi.n	8004f64 <__gethex+0x3b8>
 8004fb2:	68a3      	ldr	r3, [r4, #8]
 8004fb4:	459b      	cmp	fp, r3
 8004fb6:	db19      	blt.n	8004fec <__gethex+0x440>
 8004fb8:	6861      	ldr	r1, [r4, #4]
 8004fba:	ee18 0a10 	vmov	r0, s16
 8004fbe:	3101      	adds	r1, #1
 8004fc0:	f000 f928 	bl	8005214 <_Balloc>
 8004fc4:	4681      	mov	r9, r0
 8004fc6:	b918      	cbnz	r0, 8004fd0 <__gethex+0x424>
 8004fc8:	4b1a      	ldr	r3, [pc, #104]	; (8005034 <__gethex+0x488>)
 8004fca:	4602      	mov	r2, r0
 8004fcc:	2184      	movs	r1, #132	; 0x84
 8004fce:	e6a8      	b.n	8004d22 <__gethex+0x176>
 8004fd0:	6922      	ldr	r2, [r4, #16]
 8004fd2:	3202      	adds	r2, #2
 8004fd4:	f104 010c 	add.w	r1, r4, #12
 8004fd8:	0092      	lsls	r2, r2, #2
 8004fda:	300c      	adds	r0, #12
 8004fdc:	f000 f90c 	bl	80051f8 <memcpy>
 8004fe0:	4621      	mov	r1, r4
 8004fe2:	ee18 0a10 	vmov	r0, s16
 8004fe6:	f000 f955 	bl	8005294 <_Bfree>
 8004fea:	464c      	mov	r4, r9
 8004fec:	6923      	ldr	r3, [r4, #16]
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004ff4:	6122      	str	r2, [r4, #16]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	615a      	str	r2, [r3, #20]
 8004ffa:	e7bb      	b.n	8004f74 <__gethex+0x3c8>
 8004ffc:	6922      	ldr	r2, [r4, #16]
 8004ffe:	455a      	cmp	r2, fp
 8005000:	dd0b      	ble.n	800501a <__gethex+0x46e>
 8005002:	2101      	movs	r1, #1
 8005004:	4620      	mov	r0, r4
 8005006:	f7ff fd69 	bl	8004adc <rshift>
 800500a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800500e:	3501      	adds	r5, #1
 8005010:	42ab      	cmp	r3, r5
 8005012:	f6ff aed0 	blt.w	8004db6 <__gethex+0x20a>
 8005016:	2701      	movs	r7, #1
 8005018:	e7c0      	b.n	8004f9c <__gethex+0x3f0>
 800501a:	f016 061f 	ands.w	r6, r6, #31
 800501e:	d0fa      	beq.n	8005016 <__gethex+0x46a>
 8005020:	4453      	add	r3, sl
 8005022:	f1c6 0620 	rsb	r6, r6, #32
 8005026:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800502a:	f000 f9e5 	bl	80053f8 <__hi0bits>
 800502e:	42b0      	cmp	r0, r6
 8005030:	dbe7      	blt.n	8005002 <__gethex+0x456>
 8005032:	e7f0      	b.n	8005016 <__gethex+0x46a>
 8005034:	08006e68 	.word	0x08006e68

08005038 <L_shift>:
 8005038:	f1c2 0208 	rsb	r2, r2, #8
 800503c:	0092      	lsls	r2, r2, #2
 800503e:	b570      	push	{r4, r5, r6, lr}
 8005040:	f1c2 0620 	rsb	r6, r2, #32
 8005044:	6843      	ldr	r3, [r0, #4]
 8005046:	6804      	ldr	r4, [r0, #0]
 8005048:	fa03 f506 	lsl.w	r5, r3, r6
 800504c:	432c      	orrs	r4, r5
 800504e:	40d3      	lsrs	r3, r2
 8005050:	6004      	str	r4, [r0, #0]
 8005052:	f840 3f04 	str.w	r3, [r0, #4]!
 8005056:	4288      	cmp	r0, r1
 8005058:	d3f4      	bcc.n	8005044 <L_shift+0xc>
 800505a:	bd70      	pop	{r4, r5, r6, pc}

0800505c <__match>:
 800505c:	b530      	push	{r4, r5, lr}
 800505e:	6803      	ldr	r3, [r0, #0]
 8005060:	3301      	adds	r3, #1
 8005062:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005066:	b914      	cbnz	r4, 800506e <__match+0x12>
 8005068:	6003      	str	r3, [r0, #0]
 800506a:	2001      	movs	r0, #1
 800506c:	bd30      	pop	{r4, r5, pc}
 800506e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005072:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005076:	2d19      	cmp	r5, #25
 8005078:	bf98      	it	ls
 800507a:	3220      	addls	r2, #32
 800507c:	42a2      	cmp	r2, r4
 800507e:	d0f0      	beq.n	8005062 <__match+0x6>
 8005080:	2000      	movs	r0, #0
 8005082:	e7f3      	b.n	800506c <__match+0x10>

08005084 <__hexnan>:
 8005084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005088:	680b      	ldr	r3, [r1, #0]
 800508a:	115e      	asrs	r6, r3, #5
 800508c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005090:	f013 031f 	ands.w	r3, r3, #31
 8005094:	b087      	sub	sp, #28
 8005096:	bf18      	it	ne
 8005098:	3604      	addne	r6, #4
 800509a:	2500      	movs	r5, #0
 800509c:	1f37      	subs	r7, r6, #4
 800509e:	4690      	mov	r8, r2
 80050a0:	6802      	ldr	r2, [r0, #0]
 80050a2:	9301      	str	r3, [sp, #4]
 80050a4:	4682      	mov	sl, r0
 80050a6:	f846 5c04 	str.w	r5, [r6, #-4]
 80050aa:	46b9      	mov	r9, r7
 80050ac:	463c      	mov	r4, r7
 80050ae:	9502      	str	r5, [sp, #8]
 80050b0:	46ab      	mov	fp, r5
 80050b2:	7851      	ldrb	r1, [r2, #1]
 80050b4:	1c53      	adds	r3, r2, #1
 80050b6:	9303      	str	r3, [sp, #12]
 80050b8:	b341      	cbz	r1, 800510c <__hexnan+0x88>
 80050ba:	4608      	mov	r0, r1
 80050bc:	9205      	str	r2, [sp, #20]
 80050be:	9104      	str	r1, [sp, #16]
 80050c0:	f7ff fd5e 	bl	8004b80 <__hexdig_fun>
 80050c4:	2800      	cmp	r0, #0
 80050c6:	d14f      	bne.n	8005168 <__hexnan+0xe4>
 80050c8:	9904      	ldr	r1, [sp, #16]
 80050ca:	9a05      	ldr	r2, [sp, #20]
 80050cc:	2920      	cmp	r1, #32
 80050ce:	d818      	bhi.n	8005102 <__hexnan+0x7e>
 80050d0:	9b02      	ldr	r3, [sp, #8]
 80050d2:	459b      	cmp	fp, r3
 80050d4:	dd13      	ble.n	80050fe <__hexnan+0x7a>
 80050d6:	454c      	cmp	r4, r9
 80050d8:	d206      	bcs.n	80050e8 <__hexnan+0x64>
 80050da:	2d07      	cmp	r5, #7
 80050dc:	dc04      	bgt.n	80050e8 <__hexnan+0x64>
 80050de:	462a      	mov	r2, r5
 80050e0:	4649      	mov	r1, r9
 80050e2:	4620      	mov	r0, r4
 80050e4:	f7ff ffa8 	bl	8005038 <L_shift>
 80050e8:	4544      	cmp	r4, r8
 80050ea:	d950      	bls.n	800518e <__hexnan+0x10a>
 80050ec:	2300      	movs	r3, #0
 80050ee:	f1a4 0904 	sub.w	r9, r4, #4
 80050f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80050f6:	f8cd b008 	str.w	fp, [sp, #8]
 80050fa:	464c      	mov	r4, r9
 80050fc:	461d      	mov	r5, r3
 80050fe:	9a03      	ldr	r2, [sp, #12]
 8005100:	e7d7      	b.n	80050b2 <__hexnan+0x2e>
 8005102:	2929      	cmp	r1, #41	; 0x29
 8005104:	d156      	bne.n	80051b4 <__hexnan+0x130>
 8005106:	3202      	adds	r2, #2
 8005108:	f8ca 2000 	str.w	r2, [sl]
 800510c:	f1bb 0f00 	cmp.w	fp, #0
 8005110:	d050      	beq.n	80051b4 <__hexnan+0x130>
 8005112:	454c      	cmp	r4, r9
 8005114:	d206      	bcs.n	8005124 <__hexnan+0xa0>
 8005116:	2d07      	cmp	r5, #7
 8005118:	dc04      	bgt.n	8005124 <__hexnan+0xa0>
 800511a:	462a      	mov	r2, r5
 800511c:	4649      	mov	r1, r9
 800511e:	4620      	mov	r0, r4
 8005120:	f7ff ff8a 	bl	8005038 <L_shift>
 8005124:	4544      	cmp	r4, r8
 8005126:	d934      	bls.n	8005192 <__hexnan+0x10e>
 8005128:	f1a8 0204 	sub.w	r2, r8, #4
 800512c:	4623      	mov	r3, r4
 800512e:	f853 1b04 	ldr.w	r1, [r3], #4
 8005132:	f842 1f04 	str.w	r1, [r2, #4]!
 8005136:	429f      	cmp	r7, r3
 8005138:	d2f9      	bcs.n	800512e <__hexnan+0xaa>
 800513a:	1b3b      	subs	r3, r7, r4
 800513c:	f023 0303 	bic.w	r3, r3, #3
 8005140:	3304      	adds	r3, #4
 8005142:	3401      	adds	r4, #1
 8005144:	3e03      	subs	r6, #3
 8005146:	42b4      	cmp	r4, r6
 8005148:	bf88      	it	hi
 800514a:	2304      	movhi	r3, #4
 800514c:	4443      	add	r3, r8
 800514e:	2200      	movs	r2, #0
 8005150:	f843 2b04 	str.w	r2, [r3], #4
 8005154:	429f      	cmp	r7, r3
 8005156:	d2fb      	bcs.n	8005150 <__hexnan+0xcc>
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	b91b      	cbnz	r3, 8005164 <__hexnan+0xe0>
 800515c:	4547      	cmp	r7, r8
 800515e:	d127      	bne.n	80051b0 <__hexnan+0x12c>
 8005160:	2301      	movs	r3, #1
 8005162:	603b      	str	r3, [r7, #0]
 8005164:	2005      	movs	r0, #5
 8005166:	e026      	b.n	80051b6 <__hexnan+0x132>
 8005168:	3501      	adds	r5, #1
 800516a:	2d08      	cmp	r5, #8
 800516c:	f10b 0b01 	add.w	fp, fp, #1
 8005170:	dd06      	ble.n	8005180 <__hexnan+0xfc>
 8005172:	4544      	cmp	r4, r8
 8005174:	d9c3      	bls.n	80050fe <__hexnan+0x7a>
 8005176:	2300      	movs	r3, #0
 8005178:	f844 3c04 	str.w	r3, [r4, #-4]
 800517c:	2501      	movs	r5, #1
 800517e:	3c04      	subs	r4, #4
 8005180:	6822      	ldr	r2, [r4, #0]
 8005182:	f000 000f 	and.w	r0, r0, #15
 8005186:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800518a:	6022      	str	r2, [r4, #0]
 800518c:	e7b7      	b.n	80050fe <__hexnan+0x7a>
 800518e:	2508      	movs	r5, #8
 8005190:	e7b5      	b.n	80050fe <__hexnan+0x7a>
 8005192:	9b01      	ldr	r3, [sp, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0df      	beq.n	8005158 <__hexnan+0xd4>
 8005198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800519c:	f1c3 0320 	rsb	r3, r3, #32
 80051a0:	fa22 f303 	lsr.w	r3, r2, r3
 80051a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80051a8:	401a      	ands	r2, r3
 80051aa:	f846 2c04 	str.w	r2, [r6, #-4]
 80051ae:	e7d3      	b.n	8005158 <__hexnan+0xd4>
 80051b0:	3f04      	subs	r7, #4
 80051b2:	e7d1      	b.n	8005158 <__hexnan+0xd4>
 80051b4:	2004      	movs	r0, #4
 80051b6:	b007      	add	sp, #28
 80051b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080051bc <_localeconv_r>:
 80051bc:	4800      	ldr	r0, [pc, #0]	; (80051c0 <_localeconv_r+0x4>)
 80051be:	4770      	bx	lr
 80051c0:	20000158 	.word	0x20000158

080051c4 <malloc>:
 80051c4:	4b02      	ldr	r3, [pc, #8]	; (80051d0 <malloc+0xc>)
 80051c6:	4601      	mov	r1, r0
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	f000 bd67 	b.w	8005c9c <_malloc_r>
 80051ce:	bf00      	nop
 80051d0:	20000000 	.word	0x20000000

080051d4 <__ascii_mbtowc>:
 80051d4:	b082      	sub	sp, #8
 80051d6:	b901      	cbnz	r1, 80051da <__ascii_mbtowc+0x6>
 80051d8:	a901      	add	r1, sp, #4
 80051da:	b142      	cbz	r2, 80051ee <__ascii_mbtowc+0x1a>
 80051dc:	b14b      	cbz	r3, 80051f2 <__ascii_mbtowc+0x1e>
 80051de:	7813      	ldrb	r3, [r2, #0]
 80051e0:	600b      	str	r3, [r1, #0]
 80051e2:	7812      	ldrb	r2, [r2, #0]
 80051e4:	1e10      	subs	r0, r2, #0
 80051e6:	bf18      	it	ne
 80051e8:	2001      	movne	r0, #1
 80051ea:	b002      	add	sp, #8
 80051ec:	4770      	bx	lr
 80051ee:	4610      	mov	r0, r2
 80051f0:	e7fb      	b.n	80051ea <__ascii_mbtowc+0x16>
 80051f2:	f06f 0001 	mvn.w	r0, #1
 80051f6:	e7f8      	b.n	80051ea <__ascii_mbtowc+0x16>

080051f8 <memcpy>:
 80051f8:	440a      	add	r2, r1
 80051fa:	4291      	cmp	r1, r2
 80051fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005200:	d100      	bne.n	8005204 <memcpy+0xc>
 8005202:	4770      	bx	lr
 8005204:	b510      	push	{r4, lr}
 8005206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800520a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800520e:	4291      	cmp	r1, r2
 8005210:	d1f9      	bne.n	8005206 <memcpy+0xe>
 8005212:	bd10      	pop	{r4, pc}

08005214 <_Balloc>:
 8005214:	b570      	push	{r4, r5, r6, lr}
 8005216:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005218:	4604      	mov	r4, r0
 800521a:	460d      	mov	r5, r1
 800521c:	b976      	cbnz	r6, 800523c <_Balloc+0x28>
 800521e:	2010      	movs	r0, #16
 8005220:	f7ff ffd0 	bl	80051c4 <malloc>
 8005224:	4602      	mov	r2, r0
 8005226:	6260      	str	r0, [r4, #36]	; 0x24
 8005228:	b920      	cbnz	r0, 8005234 <_Balloc+0x20>
 800522a:	4b18      	ldr	r3, [pc, #96]	; (800528c <_Balloc+0x78>)
 800522c:	4818      	ldr	r0, [pc, #96]	; (8005290 <_Balloc+0x7c>)
 800522e:	2166      	movs	r1, #102	; 0x66
 8005230:	f000 ff40 	bl	80060b4 <__assert_func>
 8005234:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005238:	6006      	str	r6, [r0, #0]
 800523a:	60c6      	str	r6, [r0, #12]
 800523c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800523e:	68f3      	ldr	r3, [r6, #12]
 8005240:	b183      	cbz	r3, 8005264 <_Balloc+0x50>
 8005242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800524a:	b9b8      	cbnz	r0, 800527c <_Balloc+0x68>
 800524c:	2101      	movs	r1, #1
 800524e:	fa01 f605 	lsl.w	r6, r1, r5
 8005252:	1d72      	adds	r2, r6, #5
 8005254:	0092      	lsls	r2, r2, #2
 8005256:	4620      	mov	r0, r4
 8005258:	f000 fc9d 	bl	8005b96 <_calloc_r>
 800525c:	b160      	cbz	r0, 8005278 <_Balloc+0x64>
 800525e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005262:	e00e      	b.n	8005282 <_Balloc+0x6e>
 8005264:	2221      	movs	r2, #33	; 0x21
 8005266:	2104      	movs	r1, #4
 8005268:	4620      	mov	r0, r4
 800526a:	f000 fc94 	bl	8005b96 <_calloc_r>
 800526e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005270:	60f0      	str	r0, [r6, #12]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1e4      	bne.n	8005242 <_Balloc+0x2e>
 8005278:	2000      	movs	r0, #0
 800527a:	bd70      	pop	{r4, r5, r6, pc}
 800527c:	6802      	ldr	r2, [r0, #0]
 800527e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005282:	2300      	movs	r3, #0
 8005284:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005288:	e7f7      	b.n	800527a <_Balloc+0x66>
 800528a:	bf00      	nop
 800528c:	08006df6 	.word	0x08006df6
 8005290:	08006ef4 	.word	0x08006ef4

08005294 <_Bfree>:
 8005294:	b570      	push	{r4, r5, r6, lr}
 8005296:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005298:	4605      	mov	r5, r0
 800529a:	460c      	mov	r4, r1
 800529c:	b976      	cbnz	r6, 80052bc <_Bfree+0x28>
 800529e:	2010      	movs	r0, #16
 80052a0:	f7ff ff90 	bl	80051c4 <malloc>
 80052a4:	4602      	mov	r2, r0
 80052a6:	6268      	str	r0, [r5, #36]	; 0x24
 80052a8:	b920      	cbnz	r0, 80052b4 <_Bfree+0x20>
 80052aa:	4b09      	ldr	r3, [pc, #36]	; (80052d0 <_Bfree+0x3c>)
 80052ac:	4809      	ldr	r0, [pc, #36]	; (80052d4 <_Bfree+0x40>)
 80052ae:	218a      	movs	r1, #138	; 0x8a
 80052b0:	f000 ff00 	bl	80060b4 <__assert_func>
 80052b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80052b8:	6006      	str	r6, [r0, #0]
 80052ba:	60c6      	str	r6, [r0, #12]
 80052bc:	b13c      	cbz	r4, 80052ce <_Bfree+0x3a>
 80052be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80052c0:	6862      	ldr	r2, [r4, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052c8:	6021      	str	r1, [r4, #0]
 80052ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80052ce:	bd70      	pop	{r4, r5, r6, pc}
 80052d0:	08006df6 	.word	0x08006df6
 80052d4:	08006ef4 	.word	0x08006ef4

080052d8 <__multadd>:
 80052d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052dc:	690d      	ldr	r5, [r1, #16]
 80052de:	4607      	mov	r7, r0
 80052e0:	460c      	mov	r4, r1
 80052e2:	461e      	mov	r6, r3
 80052e4:	f101 0c14 	add.w	ip, r1, #20
 80052e8:	2000      	movs	r0, #0
 80052ea:	f8dc 3000 	ldr.w	r3, [ip]
 80052ee:	b299      	uxth	r1, r3
 80052f0:	fb02 6101 	mla	r1, r2, r1, r6
 80052f4:	0c1e      	lsrs	r6, r3, #16
 80052f6:	0c0b      	lsrs	r3, r1, #16
 80052f8:	fb02 3306 	mla	r3, r2, r6, r3
 80052fc:	b289      	uxth	r1, r1
 80052fe:	3001      	adds	r0, #1
 8005300:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005304:	4285      	cmp	r5, r0
 8005306:	f84c 1b04 	str.w	r1, [ip], #4
 800530a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800530e:	dcec      	bgt.n	80052ea <__multadd+0x12>
 8005310:	b30e      	cbz	r6, 8005356 <__multadd+0x7e>
 8005312:	68a3      	ldr	r3, [r4, #8]
 8005314:	42ab      	cmp	r3, r5
 8005316:	dc19      	bgt.n	800534c <__multadd+0x74>
 8005318:	6861      	ldr	r1, [r4, #4]
 800531a:	4638      	mov	r0, r7
 800531c:	3101      	adds	r1, #1
 800531e:	f7ff ff79 	bl	8005214 <_Balloc>
 8005322:	4680      	mov	r8, r0
 8005324:	b928      	cbnz	r0, 8005332 <__multadd+0x5a>
 8005326:	4602      	mov	r2, r0
 8005328:	4b0c      	ldr	r3, [pc, #48]	; (800535c <__multadd+0x84>)
 800532a:	480d      	ldr	r0, [pc, #52]	; (8005360 <__multadd+0x88>)
 800532c:	21b5      	movs	r1, #181	; 0xb5
 800532e:	f000 fec1 	bl	80060b4 <__assert_func>
 8005332:	6922      	ldr	r2, [r4, #16]
 8005334:	3202      	adds	r2, #2
 8005336:	f104 010c 	add.w	r1, r4, #12
 800533a:	0092      	lsls	r2, r2, #2
 800533c:	300c      	adds	r0, #12
 800533e:	f7ff ff5b 	bl	80051f8 <memcpy>
 8005342:	4621      	mov	r1, r4
 8005344:	4638      	mov	r0, r7
 8005346:	f7ff ffa5 	bl	8005294 <_Bfree>
 800534a:	4644      	mov	r4, r8
 800534c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005350:	3501      	adds	r5, #1
 8005352:	615e      	str	r6, [r3, #20]
 8005354:	6125      	str	r5, [r4, #16]
 8005356:	4620      	mov	r0, r4
 8005358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800535c:	08006e68 	.word	0x08006e68
 8005360:	08006ef4 	.word	0x08006ef4

08005364 <__s2b>:
 8005364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005368:	460c      	mov	r4, r1
 800536a:	4615      	mov	r5, r2
 800536c:	461f      	mov	r7, r3
 800536e:	2209      	movs	r2, #9
 8005370:	3308      	adds	r3, #8
 8005372:	4606      	mov	r6, r0
 8005374:	fb93 f3f2 	sdiv	r3, r3, r2
 8005378:	2100      	movs	r1, #0
 800537a:	2201      	movs	r2, #1
 800537c:	429a      	cmp	r2, r3
 800537e:	db09      	blt.n	8005394 <__s2b+0x30>
 8005380:	4630      	mov	r0, r6
 8005382:	f7ff ff47 	bl	8005214 <_Balloc>
 8005386:	b940      	cbnz	r0, 800539a <__s2b+0x36>
 8005388:	4602      	mov	r2, r0
 800538a:	4b19      	ldr	r3, [pc, #100]	; (80053f0 <__s2b+0x8c>)
 800538c:	4819      	ldr	r0, [pc, #100]	; (80053f4 <__s2b+0x90>)
 800538e:	21ce      	movs	r1, #206	; 0xce
 8005390:	f000 fe90 	bl	80060b4 <__assert_func>
 8005394:	0052      	lsls	r2, r2, #1
 8005396:	3101      	adds	r1, #1
 8005398:	e7f0      	b.n	800537c <__s2b+0x18>
 800539a:	9b08      	ldr	r3, [sp, #32]
 800539c:	6143      	str	r3, [r0, #20]
 800539e:	2d09      	cmp	r5, #9
 80053a0:	f04f 0301 	mov.w	r3, #1
 80053a4:	6103      	str	r3, [r0, #16]
 80053a6:	dd16      	ble.n	80053d6 <__s2b+0x72>
 80053a8:	f104 0909 	add.w	r9, r4, #9
 80053ac:	46c8      	mov	r8, r9
 80053ae:	442c      	add	r4, r5
 80053b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80053b4:	4601      	mov	r1, r0
 80053b6:	3b30      	subs	r3, #48	; 0x30
 80053b8:	220a      	movs	r2, #10
 80053ba:	4630      	mov	r0, r6
 80053bc:	f7ff ff8c 	bl	80052d8 <__multadd>
 80053c0:	45a0      	cmp	r8, r4
 80053c2:	d1f5      	bne.n	80053b0 <__s2b+0x4c>
 80053c4:	f1a5 0408 	sub.w	r4, r5, #8
 80053c8:	444c      	add	r4, r9
 80053ca:	1b2d      	subs	r5, r5, r4
 80053cc:	1963      	adds	r3, r4, r5
 80053ce:	42bb      	cmp	r3, r7
 80053d0:	db04      	blt.n	80053dc <__s2b+0x78>
 80053d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053d6:	340a      	adds	r4, #10
 80053d8:	2509      	movs	r5, #9
 80053da:	e7f6      	b.n	80053ca <__s2b+0x66>
 80053dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80053e0:	4601      	mov	r1, r0
 80053e2:	3b30      	subs	r3, #48	; 0x30
 80053e4:	220a      	movs	r2, #10
 80053e6:	4630      	mov	r0, r6
 80053e8:	f7ff ff76 	bl	80052d8 <__multadd>
 80053ec:	e7ee      	b.n	80053cc <__s2b+0x68>
 80053ee:	bf00      	nop
 80053f0:	08006e68 	.word	0x08006e68
 80053f4:	08006ef4 	.word	0x08006ef4

080053f8 <__hi0bits>:
 80053f8:	0c03      	lsrs	r3, r0, #16
 80053fa:	041b      	lsls	r3, r3, #16
 80053fc:	b9d3      	cbnz	r3, 8005434 <__hi0bits+0x3c>
 80053fe:	0400      	lsls	r0, r0, #16
 8005400:	2310      	movs	r3, #16
 8005402:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005406:	bf04      	itt	eq
 8005408:	0200      	lsleq	r0, r0, #8
 800540a:	3308      	addeq	r3, #8
 800540c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005410:	bf04      	itt	eq
 8005412:	0100      	lsleq	r0, r0, #4
 8005414:	3304      	addeq	r3, #4
 8005416:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800541a:	bf04      	itt	eq
 800541c:	0080      	lsleq	r0, r0, #2
 800541e:	3302      	addeq	r3, #2
 8005420:	2800      	cmp	r0, #0
 8005422:	db05      	blt.n	8005430 <__hi0bits+0x38>
 8005424:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005428:	f103 0301 	add.w	r3, r3, #1
 800542c:	bf08      	it	eq
 800542e:	2320      	moveq	r3, #32
 8005430:	4618      	mov	r0, r3
 8005432:	4770      	bx	lr
 8005434:	2300      	movs	r3, #0
 8005436:	e7e4      	b.n	8005402 <__hi0bits+0xa>

08005438 <__lo0bits>:
 8005438:	6803      	ldr	r3, [r0, #0]
 800543a:	f013 0207 	ands.w	r2, r3, #7
 800543e:	4601      	mov	r1, r0
 8005440:	d00b      	beq.n	800545a <__lo0bits+0x22>
 8005442:	07da      	lsls	r2, r3, #31
 8005444:	d423      	bmi.n	800548e <__lo0bits+0x56>
 8005446:	0798      	lsls	r0, r3, #30
 8005448:	bf49      	itett	mi
 800544a:	085b      	lsrmi	r3, r3, #1
 800544c:	089b      	lsrpl	r3, r3, #2
 800544e:	2001      	movmi	r0, #1
 8005450:	600b      	strmi	r3, [r1, #0]
 8005452:	bf5c      	itt	pl
 8005454:	600b      	strpl	r3, [r1, #0]
 8005456:	2002      	movpl	r0, #2
 8005458:	4770      	bx	lr
 800545a:	b298      	uxth	r0, r3
 800545c:	b9a8      	cbnz	r0, 800548a <__lo0bits+0x52>
 800545e:	0c1b      	lsrs	r3, r3, #16
 8005460:	2010      	movs	r0, #16
 8005462:	b2da      	uxtb	r2, r3
 8005464:	b90a      	cbnz	r2, 800546a <__lo0bits+0x32>
 8005466:	3008      	adds	r0, #8
 8005468:	0a1b      	lsrs	r3, r3, #8
 800546a:	071a      	lsls	r2, r3, #28
 800546c:	bf04      	itt	eq
 800546e:	091b      	lsreq	r3, r3, #4
 8005470:	3004      	addeq	r0, #4
 8005472:	079a      	lsls	r2, r3, #30
 8005474:	bf04      	itt	eq
 8005476:	089b      	lsreq	r3, r3, #2
 8005478:	3002      	addeq	r0, #2
 800547a:	07da      	lsls	r2, r3, #31
 800547c:	d403      	bmi.n	8005486 <__lo0bits+0x4e>
 800547e:	085b      	lsrs	r3, r3, #1
 8005480:	f100 0001 	add.w	r0, r0, #1
 8005484:	d005      	beq.n	8005492 <__lo0bits+0x5a>
 8005486:	600b      	str	r3, [r1, #0]
 8005488:	4770      	bx	lr
 800548a:	4610      	mov	r0, r2
 800548c:	e7e9      	b.n	8005462 <__lo0bits+0x2a>
 800548e:	2000      	movs	r0, #0
 8005490:	4770      	bx	lr
 8005492:	2020      	movs	r0, #32
 8005494:	4770      	bx	lr
	...

08005498 <__i2b>:
 8005498:	b510      	push	{r4, lr}
 800549a:	460c      	mov	r4, r1
 800549c:	2101      	movs	r1, #1
 800549e:	f7ff feb9 	bl	8005214 <_Balloc>
 80054a2:	4602      	mov	r2, r0
 80054a4:	b928      	cbnz	r0, 80054b2 <__i2b+0x1a>
 80054a6:	4b05      	ldr	r3, [pc, #20]	; (80054bc <__i2b+0x24>)
 80054a8:	4805      	ldr	r0, [pc, #20]	; (80054c0 <__i2b+0x28>)
 80054aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80054ae:	f000 fe01 	bl	80060b4 <__assert_func>
 80054b2:	2301      	movs	r3, #1
 80054b4:	6144      	str	r4, [r0, #20]
 80054b6:	6103      	str	r3, [r0, #16]
 80054b8:	bd10      	pop	{r4, pc}
 80054ba:	bf00      	nop
 80054bc:	08006e68 	.word	0x08006e68
 80054c0:	08006ef4 	.word	0x08006ef4

080054c4 <__multiply>:
 80054c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c8:	4691      	mov	r9, r2
 80054ca:	690a      	ldr	r2, [r1, #16]
 80054cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	bfb8      	it	lt
 80054d4:	460b      	movlt	r3, r1
 80054d6:	460c      	mov	r4, r1
 80054d8:	bfbc      	itt	lt
 80054da:	464c      	movlt	r4, r9
 80054dc:	4699      	movlt	r9, r3
 80054de:	6927      	ldr	r7, [r4, #16]
 80054e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80054e4:	68a3      	ldr	r3, [r4, #8]
 80054e6:	6861      	ldr	r1, [r4, #4]
 80054e8:	eb07 060a 	add.w	r6, r7, sl
 80054ec:	42b3      	cmp	r3, r6
 80054ee:	b085      	sub	sp, #20
 80054f0:	bfb8      	it	lt
 80054f2:	3101      	addlt	r1, #1
 80054f4:	f7ff fe8e 	bl	8005214 <_Balloc>
 80054f8:	b930      	cbnz	r0, 8005508 <__multiply+0x44>
 80054fa:	4602      	mov	r2, r0
 80054fc:	4b44      	ldr	r3, [pc, #272]	; (8005610 <__multiply+0x14c>)
 80054fe:	4845      	ldr	r0, [pc, #276]	; (8005614 <__multiply+0x150>)
 8005500:	f240 115d 	movw	r1, #349	; 0x15d
 8005504:	f000 fdd6 	bl	80060b4 <__assert_func>
 8005508:	f100 0514 	add.w	r5, r0, #20
 800550c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005510:	462b      	mov	r3, r5
 8005512:	2200      	movs	r2, #0
 8005514:	4543      	cmp	r3, r8
 8005516:	d321      	bcc.n	800555c <__multiply+0x98>
 8005518:	f104 0314 	add.w	r3, r4, #20
 800551c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005520:	f109 0314 	add.w	r3, r9, #20
 8005524:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005528:	9202      	str	r2, [sp, #8]
 800552a:	1b3a      	subs	r2, r7, r4
 800552c:	3a15      	subs	r2, #21
 800552e:	f022 0203 	bic.w	r2, r2, #3
 8005532:	3204      	adds	r2, #4
 8005534:	f104 0115 	add.w	r1, r4, #21
 8005538:	428f      	cmp	r7, r1
 800553a:	bf38      	it	cc
 800553c:	2204      	movcc	r2, #4
 800553e:	9201      	str	r2, [sp, #4]
 8005540:	9a02      	ldr	r2, [sp, #8]
 8005542:	9303      	str	r3, [sp, #12]
 8005544:	429a      	cmp	r2, r3
 8005546:	d80c      	bhi.n	8005562 <__multiply+0x9e>
 8005548:	2e00      	cmp	r6, #0
 800554a:	dd03      	ble.n	8005554 <__multiply+0x90>
 800554c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005550:	2b00      	cmp	r3, #0
 8005552:	d05a      	beq.n	800560a <__multiply+0x146>
 8005554:	6106      	str	r6, [r0, #16]
 8005556:	b005      	add	sp, #20
 8005558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800555c:	f843 2b04 	str.w	r2, [r3], #4
 8005560:	e7d8      	b.n	8005514 <__multiply+0x50>
 8005562:	f8b3 a000 	ldrh.w	sl, [r3]
 8005566:	f1ba 0f00 	cmp.w	sl, #0
 800556a:	d024      	beq.n	80055b6 <__multiply+0xf2>
 800556c:	f104 0e14 	add.w	lr, r4, #20
 8005570:	46a9      	mov	r9, r5
 8005572:	f04f 0c00 	mov.w	ip, #0
 8005576:	f85e 2b04 	ldr.w	r2, [lr], #4
 800557a:	f8d9 1000 	ldr.w	r1, [r9]
 800557e:	fa1f fb82 	uxth.w	fp, r2
 8005582:	b289      	uxth	r1, r1
 8005584:	fb0a 110b 	mla	r1, sl, fp, r1
 8005588:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800558c:	f8d9 2000 	ldr.w	r2, [r9]
 8005590:	4461      	add	r1, ip
 8005592:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005596:	fb0a c20b 	mla	r2, sl, fp, ip
 800559a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800559e:	b289      	uxth	r1, r1
 80055a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80055a4:	4577      	cmp	r7, lr
 80055a6:	f849 1b04 	str.w	r1, [r9], #4
 80055aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80055ae:	d8e2      	bhi.n	8005576 <__multiply+0xb2>
 80055b0:	9a01      	ldr	r2, [sp, #4]
 80055b2:	f845 c002 	str.w	ip, [r5, r2]
 80055b6:	9a03      	ldr	r2, [sp, #12]
 80055b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80055bc:	3304      	adds	r3, #4
 80055be:	f1b9 0f00 	cmp.w	r9, #0
 80055c2:	d020      	beq.n	8005606 <__multiply+0x142>
 80055c4:	6829      	ldr	r1, [r5, #0]
 80055c6:	f104 0c14 	add.w	ip, r4, #20
 80055ca:	46ae      	mov	lr, r5
 80055cc:	f04f 0a00 	mov.w	sl, #0
 80055d0:	f8bc b000 	ldrh.w	fp, [ip]
 80055d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80055d8:	fb09 220b 	mla	r2, r9, fp, r2
 80055dc:	4492      	add	sl, r2
 80055de:	b289      	uxth	r1, r1
 80055e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80055e4:	f84e 1b04 	str.w	r1, [lr], #4
 80055e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80055ec:	f8be 1000 	ldrh.w	r1, [lr]
 80055f0:	0c12      	lsrs	r2, r2, #16
 80055f2:	fb09 1102 	mla	r1, r9, r2, r1
 80055f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80055fa:	4567      	cmp	r7, ip
 80055fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005600:	d8e6      	bhi.n	80055d0 <__multiply+0x10c>
 8005602:	9a01      	ldr	r2, [sp, #4]
 8005604:	50a9      	str	r1, [r5, r2]
 8005606:	3504      	adds	r5, #4
 8005608:	e79a      	b.n	8005540 <__multiply+0x7c>
 800560a:	3e01      	subs	r6, #1
 800560c:	e79c      	b.n	8005548 <__multiply+0x84>
 800560e:	bf00      	nop
 8005610:	08006e68 	.word	0x08006e68
 8005614:	08006ef4 	.word	0x08006ef4

08005618 <__pow5mult>:
 8005618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800561c:	4615      	mov	r5, r2
 800561e:	f012 0203 	ands.w	r2, r2, #3
 8005622:	4606      	mov	r6, r0
 8005624:	460f      	mov	r7, r1
 8005626:	d007      	beq.n	8005638 <__pow5mult+0x20>
 8005628:	4c25      	ldr	r4, [pc, #148]	; (80056c0 <__pow5mult+0xa8>)
 800562a:	3a01      	subs	r2, #1
 800562c:	2300      	movs	r3, #0
 800562e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005632:	f7ff fe51 	bl	80052d8 <__multadd>
 8005636:	4607      	mov	r7, r0
 8005638:	10ad      	asrs	r5, r5, #2
 800563a:	d03d      	beq.n	80056b8 <__pow5mult+0xa0>
 800563c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800563e:	b97c      	cbnz	r4, 8005660 <__pow5mult+0x48>
 8005640:	2010      	movs	r0, #16
 8005642:	f7ff fdbf 	bl	80051c4 <malloc>
 8005646:	4602      	mov	r2, r0
 8005648:	6270      	str	r0, [r6, #36]	; 0x24
 800564a:	b928      	cbnz	r0, 8005658 <__pow5mult+0x40>
 800564c:	4b1d      	ldr	r3, [pc, #116]	; (80056c4 <__pow5mult+0xac>)
 800564e:	481e      	ldr	r0, [pc, #120]	; (80056c8 <__pow5mult+0xb0>)
 8005650:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005654:	f000 fd2e 	bl	80060b4 <__assert_func>
 8005658:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800565c:	6004      	str	r4, [r0, #0]
 800565e:	60c4      	str	r4, [r0, #12]
 8005660:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005664:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005668:	b94c      	cbnz	r4, 800567e <__pow5mult+0x66>
 800566a:	f240 2171 	movw	r1, #625	; 0x271
 800566e:	4630      	mov	r0, r6
 8005670:	f7ff ff12 	bl	8005498 <__i2b>
 8005674:	2300      	movs	r3, #0
 8005676:	f8c8 0008 	str.w	r0, [r8, #8]
 800567a:	4604      	mov	r4, r0
 800567c:	6003      	str	r3, [r0, #0]
 800567e:	f04f 0900 	mov.w	r9, #0
 8005682:	07eb      	lsls	r3, r5, #31
 8005684:	d50a      	bpl.n	800569c <__pow5mult+0x84>
 8005686:	4639      	mov	r1, r7
 8005688:	4622      	mov	r2, r4
 800568a:	4630      	mov	r0, r6
 800568c:	f7ff ff1a 	bl	80054c4 <__multiply>
 8005690:	4639      	mov	r1, r7
 8005692:	4680      	mov	r8, r0
 8005694:	4630      	mov	r0, r6
 8005696:	f7ff fdfd 	bl	8005294 <_Bfree>
 800569a:	4647      	mov	r7, r8
 800569c:	106d      	asrs	r5, r5, #1
 800569e:	d00b      	beq.n	80056b8 <__pow5mult+0xa0>
 80056a0:	6820      	ldr	r0, [r4, #0]
 80056a2:	b938      	cbnz	r0, 80056b4 <__pow5mult+0x9c>
 80056a4:	4622      	mov	r2, r4
 80056a6:	4621      	mov	r1, r4
 80056a8:	4630      	mov	r0, r6
 80056aa:	f7ff ff0b 	bl	80054c4 <__multiply>
 80056ae:	6020      	str	r0, [r4, #0]
 80056b0:	f8c0 9000 	str.w	r9, [r0]
 80056b4:	4604      	mov	r4, r0
 80056b6:	e7e4      	b.n	8005682 <__pow5mult+0x6a>
 80056b8:	4638      	mov	r0, r7
 80056ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056be:	bf00      	nop
 80056c0:	08007040 	.word	0x08007040
 80056c4:	08006df6 	.word	0x08006df6
 80056c8:	08006ef4 	.word	0x08006ef4

080056cc <__lshift>:
 80056cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056d0:	460c      	mov	r4, r1
 80056d2:	6849      	ldr	r1, [r1, #4]
 80056d4:	6923      	ldr	r3, [r4, #16]
 80056d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80056da:	68a3      	ldr	r3, [r4, #8]
 80056dc:	4607      	mov	r7, r0
 80056de:	4691      	mov	r9, r2
 80056e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80056e4:	f108 0601 	add.w	r6, r8, #1
 80056e8:	42b3      	cmp	r3, r6
 80056ea:	db0b      	blt.n	8005704 <__lshift+0x38>
 80056ec:	4638      	mov	r0, r7
 80056ee:	f7ff fd91 	bl	8005214 <_Balloc>
 80056f2:	4605      	mov	r5, r0
 80056f4:	b948      	cbnz	r0, 800570a <__lshift+0x3e>
 80056f6:	4602      	mov	r2, r0
 80056f8:	4b2a      	ldr	r3, [pc, #168]	; (80057a4 <__lshift+0xd8>)
 80056fa:	482b      	ldr	r0, [pc, #172]	; (80057a8 <__lshift+0xdc>)
 80056fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005700:	f000 fcd8 	bl	80060b4 <__assert_func>
 8005704:	3101      	adds	r1, #1
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	e7ee      	b.n	80056e8 <__lshift+0x1c>
 800570a:	2300      	movs	r3, #0
 800570c:	f100 0114 	add.w	r1, r0, #20
 8005710:	f100 0210 	add.w	r2, r0, #16
 8005714:	4618      	mov	r0, r3
 8005716:	4553      	cmp	r3, sl
 8005718:	db37      	blt.n	800578a <__lshift+0xbe>
 800571a:	6920      	ldr	r0, [r4, #16]
 800571c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005720:	f104 0314 	add.w	r3, r4, #20
 8005724:	f019 091f 	ands.w	r9, r9, #31
 8005728:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800572c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005730:	d02f      	beq.n	8005792 <__lshift+0xc6>
 8005732:	f1c9 0e20 	rsb	lr, r9, #32
 8005736:	468a      	mov	sl, r1
 8005738:	f04f 0c00 	mov.w	ip, #0
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	fa02 f209 	lsl.w	r2, r2, r9
 8005742:	ea42 020c 	orr.w	r2, r2, ip
 8005746:	f84a 2b04 	str.w	r2, [sl], #4
 800574a:	f853 2b04 	ldr.w	r2, [r3], #4
 800574e:	4298      	cmp	r0, r3
 8005750:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005754:	d8f2      	bhi.n	800573c <__lshift+0x70>
 8005756:	1b03      	subs	r3, r0, r4
 8005758:	3b15      	subs	r3, #21
 800575a:	f023 0303 	bic.w	r3, r3, #3
 800575e:	3304      	adds	r3, #4
 8005760:	f104 0215 	add.w	r2, r4, #21
 8005764:	4290      	cmp	r0, r2
 8005766:	bf38      	it	cc
 8005768:	2304      	movcc	r3, #4
 800576a:	f841 c003 	str.w	ip, [r1, r3]
 800576e:	f1bc 0f00 	cmp.w	ip, #0
 8005772:	d001      	beq.n	8005778 <__lshift+0xac>
 8005774:	f108 0602 	add.w	r6, r8, #2
 8005778:	3e01      	subs	r6, #1
 800577a:	4638      	mov	r0, r7
 800577c:	612e      	str	r6, [r5, #16]
 800577e:	4621      	mov	r1, r4
 8005780:	f7ff fd88 	bl	8005294 <_Bfree>
 8005784:	4628      	mov	r0, r5
 8005786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800578a:	f842 0f04 	str.w	r0, [r2, #4]!
 800578e:	3301      	adds	r3, #1
 8005790:	e7c1      	b.n	8005716 <__lshift+0x4a>
 8005792:	3904      	subs	r1, #4
 8005794:	f853 2b04 	ldr.w	r2, [r3], #4
 8005798:	f841 2f04 	str.w	r2, [r1, #4]!
 800579c:	4298      	cmp	r0, r3
 800579e:	d8f9      	bhi.n	8005794 <__lshift+0xc8>
 80057a0:	e7ea      	b.n	8005778 <__lshift+0xac>
 80057a2:	bf00      	nop
 80057a4:	08006e68 	.word	0x08006e68
 80057a8:	08006ef4 	.word	0x08006ef4

080057ac <__mcmp>:
 80057ac:	b530      	push	{r4, r5, lr}
 80057ae:	6902      	ldr	r2, [r0, #16]
 80057b0:	690c      	ldr	r4, [r1, #16]
 80057b2:	1b12      	subs	r2, r2, r4
 80057b4:	d10e      	bne.n	80057d4 <__mcmp+0x28>
 80057b6:	f100 0314 	add.w	r3, r0, #20
 80057ba:	3114      	adds	r1, #20
 80057bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80057c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80057c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80057c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80057cc:	42a5      	cmp	r5, r4
 80057ce:	d003      	beq.n	80057d8 <__mcmp+0x2c>
 80057d0:	d305      	bcc.n	80057de <__mcmp+0x32>
 80057d2:	2201      	movs	r2, #1
 80057d4:	4610      	mov	r0, r2
 80057d6:	bd30      	pop	{r4, r5, pc}
 80057d8:	4283      	cmp	r3, r0
 80057da:	d3f3      	bcc.n	80057c4 <__mcmp+0x18>
 80057dc:	e7fa      	b.n	80057d4 <__mcmp+0x28>
 80057de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057e2:	e7f7      	b.n	80057d4 <__mcmp+0x28>

080057e4 <__mdiff>:
 80057e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e8:	460c      	mov	r4, r1
 80057ea:	4606      	mov	r6, r0
 80057ec:	4611      	mov	r1, r2
 80057ee:	4620      	mov	r0, r4
 80057f0:	4690      	mov	r8, r2
 80057f2:	f7ff ffdb 	bl	80057ac <__mcmp>
 80057f6:	1e05      	subs	r5, r0, #0
 80057f8:	d110      	bne.n	800581c <__mdiff+0x38>
 80057fa:	4629      	mov	r1, r5
 80057fc:	4630      	mov	r0, r6
 80057fe:	f7ff fd09 	bl	8005214 <_Balloc>
 8005802:	b930      	cbnz	r0, 8005812 <__mdiff+0x2e>
 8005804:	4b3a      	ldr	r3, [pc, #232]	; (80058f0 <__mdiff+0x10c>)
 8005806:	4602      	mov	r2, r0
 8005808:	f240 2132 	movw	r1, #562	; 0x232
 800580c:	4839      	ldr	r0, [pc, #228]	; (80058f4 <__mdiff+0x110>)
 800580e:	f000 fc51 	bl	80060b4 <__assert_func>
 8005812:	2301      	movs	r3, #1
 8005814:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005818:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800581c:	bfa4      	itt	ge
 800581e:	4643      	movge	r3, r8
 8005820:	46a0      	movge	r8, r4
 8005822:	4630      	mov	r0, r6
 8005824:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005828:	bfa6      	itte	ge
 800582a:	461c      	movge	r4, r3
 800582c:	2500      	movge	r5, #0
 800582e:	2501      	movlt	r5, #1
 8005830:	f7ff fcf0 	bl	8005214 <_Balloc>
 8005834:	b920      	cbnz	r0, 8005840 <__mdiff+0x5c>
 8005836:	4b2e      	ldr	r3, [pc, #184]	; (80058f0 <__mdiff+0x10c>)
 8005838:	4602      	mov	r2, r0
 800583a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800583e:	e7e5      	b.n	800580c <__mdiff+0x28>
 8005840:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005844:	6926      	ldr	r6, [r4, #16]
 8005846:	60c5      	str	r5, [r0, #12]
 8005848:	f104 0914 	add.w	r9, r4, #20
 800584c:	f108 0514 	add.w	r5, r8, #20
 8005850:	f100 0e14 	add.w	lr, r0, #20
 8005854:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005858:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800585c:	f108 0210 	add.w	r2, r8, #16
 8005860:	46f2      	mov	sl, lr
 8005862:	2100      	movs	r1, #0
 8005864:	f859 3b04 	ldr.w	r3, [r9], #4
 8005868:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800586c:	fa1f f883 	uxth.w	r8, r3
 8005870:	fa11 f18b 	uxtah	r1, r1, fp
 8005874:	0c1b      	lsrs	r3, r3, #16
 8005876:	eba1 0808 	sub.w	r8, r1, r8
 800587a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800587e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005882:	fa1f f888 	uxth.w	r8, r8
 8005886:	1419      	asrs	r1, r3, #16
 8005888:	454e      	cmp	r6, r9
 800588a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800588e:	f84a 3b04 	str.w	r3, [sl], #4
 8005892:	d8e7      	bhi.n	8005864 <__mdiff+0x80>
 8005894:	1b33      	subs	r3, r6, r4
 8005896:	3b15      	subs	r3, #21
 8005898:	f023 0303 	bic.w	r3, r3, #3
 800589c:	3304      	adds	r3, #4
 800589e:	3415      	adds	r4, #21
 80058a0:	42a6      	cmp	r6, r4
 80058a2:	bf38      	it	cc
 80058a4:	2304      	movcc	r3, #4
 80058a6:	441d      	add	r5, r3
 80058a8:	4473      	add	r3, lr
 80058aa:	469e      	mov	lr, r3
 80058ac:	462e      	mov	r6, r5
 80058ae:	4566      	cmp	r6, ip
 80058b0:	d30e      	bcc.n	80058d0 <__mdiff+0xec>
 80058b2:	f10c 0203 	add.w	r2, ip, #3
 80058b6:	1b52      	subs	r2, r2, r5
 80058b8:	f022 0203 	bic.w	r2, r2, #3
 80058bc:	3d03      	subs	r5, #3
 80058be:	45ac      	cmp	ip, r5
 80058c0:	bf38      	it	cc
 80058c2:	2200      	movcc	r2, #0
 80058c4:	441a      	add	r2, r3
 80058c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80058ca:	b17b      	cbz	r3, 80058ec <__mdiff+0x108>
 80058cc:	6107      	str	r7, [r0, #16]
 80058ce:	e7a3      	b.n	8005818 <__mdiff+0x34>
 80058d0:	f856 8b04 	ldr.w	r8, [r6], #4
 80058d4:	fa11 f288 	uxtah	r2, r1, r8
 80058d8:	1414      	asrs	r4, r2, #16
 80058da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80058de:	b292      	uxth	r2, r2
 80058e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80058e4:	f84e 2b04 	str.w	r2, [lr], #4
 80058e8:	1421      	asrs	r1, r4, #16
 80058ea:	e7e0      	b.n	80058ae <__mdiff+0xca>
 80058ec:	3f01      	subs	r7, #1
 80058ee:	e7ea      	b.n	80058c6 <__mdiff+0xe2>
 80058f0:	08006e68 	.word	0x08006e68
 80058f4:	08006ef4 	.word	0x08006ef4

080058f8 <__ulp>:
 80058f8:	b082      	sub	sp, #8
 80058fa:	ed8d 0b00 	vstr	d0, [sp]
 80058fe:	9b01      	ldr	r3, [sp, #4]
 8005900:	4912      	ldr	r1, [pc, #72]	; (800594c <__ulp+0x54>)
 8005902:	4019      	ands	r1, r3
 8005904:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8005908:	2900      	cmp	r1, #0
 800590a:	dd05      	ble.n	8005918 <__ulp+0x20>
 800590c:	2200      	movs	r2, #0
 800590e:	460b      	mov	r3, r1
 8005910:	ec43 2b10 	vmov	d0, r2, r3
 8005914:	b002      	add	sp, #8
 8005916:	4770      	bx	lr
 8005918:	4249      	negs	r1, r1
 800591a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800591e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8005922:	f04f 0200 	mov.w	r2, #0
 8005926:	f04f 0300 	mov.w	r3, #0
 800592a:	da04      	bge.n	8005936 <__ulp+0x3e>
 800592c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8005930:	fa41 f300 	asr.w	r3, r1, r0
 8005934:	e7ec      	b.n	8005910 <__ulp+0x18>
 8005936:	f1a0 0114 	sub.w	r1, r0, #20
 800593a:	291e      	cmp	r1, #30
 800593c:	bfda      	itte	le
 800593e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8005942:	fa20 f101 	lsrle.w	r1, r0, r1
 8005946:	2101      	movgt	r1, #1
 8005948:	460a      	mov	r2, r1
 800594a:	e7e1      	b.n	8005910 <__ulp+0x18>
 800594c:	7ff00000 	.word	0x7ff00000

08005950 <__b2d>:
 8005950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005952:	6905      	ldr	r5, [r0, #16]
 8005954:	f100 0714 	add.w	r7, r0, #20
 8005958:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800595c:	1f2e      	subs	r6, r5, #4
 800595e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8005962:	4620      	mov	r0, r4
 8005964:	f7ff fd48 	bl	80053f8 <__hi0bits>
 8005968:	f1c0 0320 	rsb	r3, r0, #32
 800596c:	280a      	cmp	r0, #10
 800596e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80059ec <__b2d+0x9c>
 8005972:	600b      	str	r3, [r1, #0]
 8005974:	dc14      	bgt.n	80059a0 <__b2d+0x50>
 8005976:	f1c0 0e0b 	rsb	lr, r0, #11
 800597a:	fa24 f10e 	lsr.w	r1, r4, lr
 800597e:	42b7      	cmp	r7, r6
 8005980:	ea41 030c 	orr.w	r3, r1, ip
 8005984:	bf34      	ite	cc
 8005986:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800598a:	2100      	movcs	r1, #0
 800598c:	3015      	adds	r0, #21
 800598e:	fa04 f000 	lsl.w	r0, r4, r0
 8005992:	fa21 f10e 	lsr.w	r1, r1, lr
 8005996:	ea40 0201 	orr.w	r2, r0, r1
 800599a:	ec43 2b10 	vmov	d0, r2, r3
 800599e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059a0:	42b7      	cmp	r7, r6
 80059a2:	bf3a      	itte	cc
 80059a4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80059a8:	f1a5 0608 	subcc.w	r6, r5, #8
 80059ac:	2100      	movcs	r1, #0
 80059ae:	380b      	subs	r0, #11
 80059b0:	d017      	beq.n	80059e2 <__b2d+0x92>
 80059b2:	f1c0 0c20 	rsb	ip, r0, #32
 80059b6:	fa04 f500 	lsl.w	r5, r4, r0
 80059ba:	42be      	cmp	r6, r7
 80059bc:	fa21 f40c 	lsr.w	r4, r1, ip
 80059c0:	ea45 0504 	orr.w	r5, r5, r4
 80059c4:	bf8c      	ite	hi
 80059c6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80059ca:	2400      	movls	r4, #0
 80059cc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80059d0:	fa01 f000 	lsl.w	r0, r1, r0
 80059d4:	fa24 f40c 	lsr.w	r4, r4, ip
 80059d8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80059dc:	ea40 0204 	orr.w	r2, r0, r4
 80059e0:	e7db      	b.n	800599a <__b2d+0x4a>
 80059e2:	ea44 030c 	orr.w	r3, r4, ip
 80059e6:	460a      	mov	r2, r1
 80059e8:	e7d7      	b.n	800599a <__b2d+0x4a>
 80059ea:	bf00      	nop
 80059ec:	3ff00000 	.word	0x3ff00000

080059f0 <__d2b>:
 80059f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80059f4:	4689      	mov	r9, r1
 80059f6:	2101      	movs	r1, #1
 80059f8:	ec57 6b10 	vmov	r6, r7, d0
 80059fc:	4690      	mov	r8, r2
 80059fe:	f7ff fc09 	bl	8005214 <_Balloc>
 8005a02:	4604      	mov	r4, r0
 8005a04:	b930      	cbnz	r0, 8005a14 <__d2b+0x24>
 8005a06:	4602      	mov	r2, r0
 8005a08:	4b25      	ldr	r3, [pc, #148]	; (8005aa0 <__d2b+0xb0>)
 8005a0a:	4826      	ldr	r0, [pc, #152]	; (8005aa4 <__d2b+0xb4>)
 8005a0c:	f240 310a 	movw	r1, #778	; 0x30a
 8005a10:	f000 fb50 	bl	80060b4 <__assert_func>
 8005a14:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005a18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005a1c:	bb35      	cbnz	r5, 8005a6c <__d2b+0x7c>
 8005a1e:	2e00      	cmp	r6, #0
 8005a20:	9301      	str	r3, [sp, #4]
 8005a22:	d028      	beq.n	8005a76 <__d2b+0x86>
 8005a24:	4668      	mov	r0, sp
 8005a26:	9600      	str	r6, [sp, #0]
 8005a28:	f7ff fd06 	bl	8005438 <__lo0bits>
 8005a2c:	9900      	ldr	r1, [sp, #0]
 8005a2e:	b300      	cbz	r0, 8005a72 <__d2b+0x82>
 8005a30:	9a01      	ldr	r2, [sp, #4]
 8005a32:	f1c0 0320 	rsb	r3, r0, #32
 8005a36:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3a:	430b      	orrs	r3, r1
 8005a3c:	40c2      	lsrs	r2, r0
 8005a3e:	6163      	str	r3, [r4, #20]
 8005a40:	9201      	str	r2, [sp, #4]
 8005a42:	9b01      	ldr	r3, [sp, #4]
 8005a44:	61a3      	str	r3, [r4, #24]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	bf14      	ite	ne
 8005a4a:	2202      	movne	r2, #2
 8005a4c:	2201      	moveq	r2, #1
 8005a4e:	6122      	str	r2, [r4, #16]
 8005a50:	b1d5      	cbz	r5, 8005a88 <__d2b+0x98>
 8005a52:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005a56:	4405      	add	r5, r0
 8005a58:	f8c9 5000 	str.w	r5, [r9]
 8005a5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005a60:	f8c8 0000 	str.w	r0, [r8]
 8005a64:	4620      	mov	r0, r4
 8005a66:	b003      	add	sp, #12
 8005a68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a70:	e7d5      	b.n	8005a1e <__d2b+0x2e>
 8005a72:	6161      	str	r1, [r4, #20]
 8005a74:	e7e5      	b.n	8005a42 <__d2b+0x52>
 8005a76:	a801      	add	r0, sp, #4
 8005a78:	f7ff fcde 	bl	8005438 <__lo0bits>
 8005a7c:	9b01      	ldr	r3, [sp, #4]
 8005a7e:	6163      	str	r3, [r4, #20]
 8005a80:	2201      	movs	r2, #1
 8005a82:	6122      	str	r2, [r4, #16]
 8005a84:	3020      	adds	r0, #32
 8005a86:	e7e3      	b.n	8005a50 <__d2b+0x60>
 8005a88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005a8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005a90:	f8c9 0000 	str.w	r0, [r9]
 8005a94:	6918      	ldr	r0, [r3, #16]
 8005a96:	f7ff fcaf 	bl	80053f8 <__hi0bits>
 8005a9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005a9e:	e7df      	b.n	8005a60 <__d2b+0x70>
 8005aa0:	08006e68 	.word	0x08006e68
 8005aa4:	08006ef4 	.word	0x08006ef4

08005aa8 <__ratio>:
 8005aa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aac:	4688      	mov	r8, r1
 8005aae:	4669      	mov	r1, sp
 8005ab0:	4681      	mov	r9, r0
 8005ab2:	f7ff ff4d 	bl	8005950 <__b2d>
 8005ab6:	a901      	add	r1, sp, #4
 8005ab8:	4640      	mov	r0, r8
 8005aba:	ec55 4b10 	vmov	r4, r5, d0
 8005abe:	f7ff ff47 	bl	8005950 <__b2d>
 8005ac2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ac6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005aca:	eba3 0c02 	sub.w	ip, r3, r2
 8005ace:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005ad2:	1a9b      	subs	r3, r3, r2
 8005ad4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8005ad8:	ec51 0b10 	vmov	r0, r1, d0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	bfd6      	itet	le
 8005ae0:	460a      	movle	r2, r1
 8005ae2:	462a      	movgt	r2, r5
 8005ae4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005ae8:	468b      	mov	fp, r1
 8005aea:	462f      	mov	r7, r5
 8005aec:	bfd4      	ite	le
 8005aee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8005af2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005af6:	4620      	mov	r0, r4
 8005af8:	ee10 2a10 	vmov	r2, s0
 8005afc:	465b      	mov	r3, fp
 8005afe:	4639      	mov	r1, r7
 8005b00:	f7fa feac 	bl	800085c <__aeabi_ddiv>
 8005b04:	ec41 0b10 	vmov	d0, r0, r1
 8005b08:	b003      	add	sp, #12
 8005b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005b0e <__copybits>:
 8005b0e:	3901      	subs	r1, #1
 8005b10:	b570      	push	{r4, r5, r6, lr}
 8005b12:	1149      	asrs	r1, r1, #5
 8005b14:	6914      	ldr	r4, [r2, #16]
 8005b16:	3101      	adds	r1, #1
 8005b18:	f102 0314 	add.w	r3, r2, #20
 8005b1c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005b20:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005b24:	1f05      	subs	r5, r0, #4
 8005b26:	42a3      	cmp	r3, r4
 8005b28:	d30c      	bcc.n	8005b44 <__copybits+0x36>
 8005b2a:	1aa3      	subs	r3, r4, r2
 8005b2c:	3b11      	subs	r3, #17
 8005b2e:	f023 0303 	bic.w	r3, r3, #3
 8005b32:	3211      	adds	r2, #17
 8005b34:	42a2      	cmp	r2, r4
 8005b36:	bf88      	it	hi
 8005b38:	2300      	movhi	r3, #0
 8005b3a:	4418      	add	r0, r3
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	4288      	cmp	r0, r1
 8005b40:	d305      	bcc.n	8005b4e <__copybits+0x40>
 8005b42:	bd70      	pop	{r4, r5, r6, pc}
 8005b44:	f853 6b04 	ldr.w	r6, [r3], #4
 8005b48:	f845 6f04 	str.w	r6, [r5, #4]!
 8005b4c:	e7eb      	b.n	8005b26 <__copybits+0x18>
 8005b4e:	f840 3b04 	str.w	r3, [r0], #4
 8005b52:	e7f4      	b.n	8005b3e <__copybits+0x30>

08005b54 <__any_on>:
 8005b54:	f100 0214 	add.w	r2, r0, #20
 8005b58:	6900      	ldr	r0, [r0, #16]
 8005b5a:	114b      	asrs	r3, r1, #5
 8005b5c:	4298      	cmp	r0, r3
 8005b5e:	b510      	push	{r4, lr}
 8005b60:	db11      	blt.n	8005b86 <__any_on+0x32>
 8005b62:	dd0a      	ble.n	8005b7a <__any_on+0x26>
 8005b64:	f011 011f 	ands.w	r1, r1, #31
 8005b68:	d007      	beq.n	8005b7a <__any_on+0x26>
 8005b6a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005b6e:	fa24 f001 	lsr.w	r0, r4, r1
 8005b72:	fa00 f101 	lsl.w	r1, r0, r1
 8005b76:	428c      	cmp	r4, r1
 8005b78:	d10b      	bne.n	8005b92 <__any_on+0x3e>
 8005b7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d803      	bhi.n	8005b8a <__any_on+0x36>
 8005b82:	2000      	movs	r0, #0
 8005b84:	bd10      	pop	{r4, pc}
 8005b86:	4603      	mov	r3, r0
 8005b88:	e7f7      	b.n	8005b7a <__any_on+0x26>
 8005b8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005b8e:	2900      	cmp	r1, #0
 8005b90:	d0f5      	beq.n	8005b7e <__any_on+0x2a>
 8005b92:	2001      	movs	r0, #1
 8005b94:	e7f6      	b.n	8005b84 <__any_on+0x30>

08005b96 <_calloc_r>:
 8005b96:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b98:	fba1 2402 	umull	r2, r4, r1, r2
 8005b9c:	b94c      	cbnz	r4, 8005bb2 <_calloc_r+0x1c>
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	9201      	str	r2, [sp, #4]
 8005ba2:	f000 f87b 	bl	8005c9c <_malloc_r>
 8005ba6:	9a01      	ldr	r2, [sp, #4]
 8005ba8:	4605      	mov	r5, r0
 8005baa:	b930      	cbnz	r0, 8005bba <_calloc_r+0x24>
 8005bac:	4628      	mov	r0, r5
 8005bae:	b003      	add	sp, #12
 8005bb0:	bd30      	pop	{r4, r5, pc}
 8005bb2:	220c      	movs	r2, #12
 8005bb4:	6002      	str	r2, [r0, #0]
 8005bb6:	2500      	movs	r5, #0
 8005bb8:	e7f8      	b.n	8005bac <_calloc_r+0x16>
 8005bba:	4621      	mov	r1, r4
 8005bbc:	f7fc fbbe 	bl	800233c <memset>
 8005bc0:	e7f4      	b.n	8005bac <_calloc_r+0x16>
	...

08005bc4 <_free_r>:
 8005bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bc6:	2900      	cmp	r1, #0
 8005bc8:	d044      	beq.n	8005c54 <_free_r+0x90>
 8005bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bce:	9001      	str	r0, [sp, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f1a1 0404 	sub.w	r4, r1, #4
 8005bd6:	bfb8      	it	lt
 8005bd8:	18e4      	addlt	r4, r4, r3
 8005bda:	f000 fab5 	bl	8006148 <__malloc_lock>
 8005bde:	4a1e      	ldr	r2, [pc, #120]	; (8005c58 <_free_r+0x94>)
 8005be0:	9801      	ldr	r0, [sp, #4]
 8005be2:	6813      	ldr	r3, [r2, #0]
 8005be4:	b933      	cbnz	r3, 8005bf4 <_free_r+0x30>
 8005be6:	6063      	str	r3, [r4, #4]
 8005be8:	6014      	str	r4, [r2, #0]
 8005bea:	b003      	add	sp, #12
 8005bec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bf0:	f000 bab0 	b.w	8006154 <__malloc_unlock>
 8005bf4:	42a3      	cmp	r3, r4
 8005bf6:	d908      	bls.n	8005c0a <_free_r+0x46>
 8005bf8:	6825      	ldr	r5, [r4, #0]
 8005bfa:	1961      	adds	r1, r4, r5
 8005bfc:	428b      	cmp	r3, r1
 8005bfe:	bf01      	itttt	eq
 8005c00:	6819      	ldreq	r1, [r3, #0]
 8005c02:	685b      	ldreq	r3, [r3, #4]
 8005c04:	1949      	addeq	r1, r1, r5
 8005c06:	6021      	streq	r1, [r4, #0]
 8005c08:	e7ed      	b.n	8005be6 <_free_r+0x22>
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	b10b      	cbz	r3, 8005c14 <_free_r+0x50>
 8005c10:	42a3      	cmp	r3, r4
 8005c12:	d9fa      	bls.n	8005c0a <_free_r+0x46>
 8005c14:	6811      	ldr	r1, [r2, #0]
 8005c16:	1855      	adds	r5, r2, r1
 8005c18:	42a5      	cmp	r5, r4
 8005c1a:	d10b      	bne.n	8005c34 <_free_r+0x70>
 8005c1c:	6824      	ldr	r4, [r4, #0]
 8005c1e:	4421      	add	r1, r4
 8005c20:	1854      	adds	r4, r2, r1
 8005c22:	42a3      	cmp	r3, r4
 8005c24:	6011      	str	r1, [r2, #0]
 8005c26:	d1e0      	bne.n	8005bea <_free_r+0x26>
 8005c28:	681c      	ldr	r4, [r3, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	6053      	str	r3, [r2, #4]
 8005c2e:	4421      	add	r1, r4
 8005c30:	6011      	str	r1, [r2, #0]
 8005c32:	e7da      	b.n	8005bea <_free_r+0x26>
 8005c34:	d902      	bls.n	8005c3c <_free_r+0x78>
 8005c36:	230c      	movs	r3, #12
 8005c38:	6003      	str	r3, [r0, #0]
 8005c3a:	e7d6      	b.n	8005bea <_free_r+0x26>
 8005c3c:	6825      	ldr	r5, [r4, #0]
 8005c3e:	1961      	adds	r1, r4, r5
 8005c40:	428b      	cmp	r3, r1
 8005c42:	bf04      	itt	eq
 8005c44:	6819      	ldreq	r1, [r3, #0]
 8005c46:	685b      	ldreq	r3, [r3, #4]
 8005c48:	6063      	str	r3, [r4, #4]
 8005c4a:	bf04      	itt	eq
 8005c4c:	1949      	addeq	r1, r1, r5
 8005c4e:	6021      	streq	r1, [r4, #0]
 8005c50:	6054      	str	r4, [r2, #4]
 8005c52:	e7ca      	b.n	8005bea <_free_r+0x26>
 8005c54:	b003      	add	sp, #12
 8005c56:	bd30      	pop	{r4, r5, pc}
 8005c58:	20000324 	.word	0x20000324

08005c5c <sbrk_aligned>:
 8005c5c:	b570      	push	{r4, r5, r6, lr}
 8005c5e:	4e0e      	ldr	r6, [pc, #56]	; (8005c98 <sbrk_aligned+0x3c>)
 8005c60:	460c      	mov	r4, r1
 8005c62:	6831      	ldr	r1, [r6, #0]
 8005c64:	4605      	mov	r5, r0
 8005c66:	b911      	cbnz	r1, 8005c6e <sbrk_aligned+0x12>
 8005c68:	f000 f9f2 	bl	8006050 <_sbrk_r>
 8005c6c:	6030      	str	r0, [r6, #0]
 8005c6e:	4621      	mov	r1, r4
 8005c70:	4628      	mov	r0, r5
 8005c72:	f000 f9ed 	bl	8006050 <_sbrk_r>
 8005c76:	1c43      	adds	r3, r0, #1
 8005c78:	d00a      	beq.n	8005c90 <sbrk_aligned+0x34>
 8005c7a:	1cc4      	adds	r4, r0, #3
 8005c7c:	f024 0403 	bic.w	r4, r4, #3
 8005c80:	42a0      	cmp	r0, r4
 8005c82:	d007      	beq.n	8005c94 <sbrk_aligned+0x38>
 8005c84:	1a21      	subs	r1, r4, r0
 8005c86:	4628      	mov	r0, r5
 8005c88:	f000 f9e2 	bl	8006050 <_sbrk_r>
 8005c8c:	3001      	adds	r0, #1
 8005c8e:	d101      	bne.n	8005c94 <sbrk_aligned+0x38>
 8005c90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005c94:	4620      	mov	r0, r4
 8005c96:	bd70      	pop	{r4, r5, r6, pc}
 8005c98:	20000328 	.word	0x20000328

08005c9c <_malloc_r>:
 8005c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca0:	1ccd      	adds	r5, r1, #3
 8005ca2:	f025 0503 	bic.w	r5, r5, #3
 8005ca6:	3508      	adds	r5, #8
 8005ca8:	2d0c      	cmp	r5, #12
 8005caa:	bf38      	it	cc
 8005cac:	250c      	movcc	r5, #12
 8005cae:	2d00      	cmp	r5, #0
 8005cb0:	4607      	mov	r7, r0
 8005cb2:	db01      	blt.n	8005cb8 <_malloc_r+0x1c>
 8005cb4:	42a9      	cmp	r1, r5
 8005cb6:	d905      	bls.n	8005cc4 <_malloc_r+0x28>
 8005cb8:	230c      	movs	r3, #12
 8005cba:	603b      	str	r3, [r7, #0]
 8005cbc:	2600      	movs	r6, #0
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cc4:	4e2e      	ldr	r6, [pc, #184]	; (8005d80 <_malloc_r+0xe4>)
 8005cc6:	f000 fa3f 	bl	8006148 <__malloc_lock>
 8005cca:	6833      	ldr	r3, [r6, #0]
 8005ccc:	461c      	mov	r4, r3
 8005cce:	bb34      	cbnz	r4, 8005d1e <_malloc_r+0x82>
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	f7ff ffc2 	bl	8005c5c <sbrk_aligned>
 8005cd8:	1c43      	adds	r3, r0, #1
 8005cda:	4604      	mov	r4, r0
 8005cdc:	d14d      	bne.n	8005d7a <_malloc_r+0xde>
 8005cde:	6834      	ldr	r4, [r6, #0]
 8005ce0:	4626      	mov	r6, r4
 8005ce2:	2e00      	cmp	r6, #0
 8005ce4:	d140      	bne.n	8005d68 <_malloc_r+0xcc>
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	4631      	mov	r1, r6
 8005cea:	4638      	mov	r0, r7
 8005cec:	eb04 0803 	add.w	r8, r4, r3
 8005cf0:	f000 f9ae 	bl	8006050 <_sbrk_r>
 8005cf4:	4580      	cmp	r8, r0
 8005cf6:	d13a      	bne.n	8005d6e <_malloc_r+0xd2>
 8005cf8:	6821      	ldr	r1, [r4, #0]
 8005cfa:	3503      	adds	r5, #3
 8005cfc:	1a6d      	subs	r5, r5, r1
 8005cfe:	f025 0503 	bic.w	r5, r5, #3
 8005d02:	3508      	adds	r5, #8
 8005d04:	2d0c      	cmp	r5, #12
 8005d06:	bf38      	it	cc
 8005d08:	250c      	movcc	r5, #12
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	f7ff ffa5 	bl	8005c5c <sbrk_aligned>
 8005d12:	3001      	adds	r0, #1
 8005d14:	d02b      	beq.n	8005d6e <_malloc_r+0xd2>
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	442b      	add	r3, r5
 8005d1a:	6023      	str	r3, [r4, #0]
 8005d1c:	e00e      	b.n	8005d3c <_malloc_r+0xa0>
 8005d1e:	6822      	ldr	r2, [r4, #0]
 8005d20:	1b52      	subs	r2, r2, r5
 8005d22:	d41e      	bmi.n	8005d62 <_malloc_r+0xc6>
 8005d24:	2a0b      	cmp	r2, #11
 8005d26:	d916      	bls.n	8005d56 <_malloc_r+0xba>
 8005d28:	1961      	adds	r1, r4, r5
 8005d2a:	42a3      	cmp	r3, r4
 8005d2c:	6025      	str	r5, [r4, #0]
 8005d2e:	bf18      	it	ne
 8005d30:	6059      	strne	r1, [r3, #4]
 8005d32:	6863      	ldr	r3, [r4, #4]
 8005d34:	bf08      	it	eq
 8005d36:	6031      	streq	r1, [r6, #0]
 8005d38:	5162      	str	r2, [r4, r5]
 8005d3a:	604b      	str	r3, [r1, #4]
 8005d3c:	4638      	mov	r0, r7
 8005d3e:	f104 060b 	add.w	r6, r4, #11
 8005d42:	f000 fa07 	bl	8006154 <__malloc_unlock>
 8005d46:	f026 0607 	bic.w	r6, r6, #7
 8005d4a:	1d23      	adds	r3, r4, #4
 8005d4c:	1af2      	subs	r2, r6, r3
 8005d4e:	d0b6      	beq.n	8005cbe <_malloc_r+0x22>
 8005d50:	1b9b      	subs	r3, r3, r6
 8005d52:	50a3      	str	r3, [r4, r2]
 8005d54:	e7b3      	b.n	8005cbe <_malloc_r+0x22>
 8005d56:	6862      	ldr	r2, [r4, #4]
 8005d58:	42a3      	cmp	r3, r4
 8005d5a:	bf0c      	ite	eq
 8005d5c:	6032      	streq	r2, [r6, #0]
 8005d5e:	605a      	strne	r2, [r3, #4]
 8005d60:	e7ec      	b.n	8005d3c <_malloc_r+0xa0>
 8005d62:	4623      	mov	r3, r4
 8005d64:	6864      	ldr	r4, [r4, #4]
 8005d66:	e7b2      	b.n	8005cce <_malloc_r+0x32>
 8005d68:	4634      	mov	r4, r6
 8005d6a:	6876      	ldr	r6, [r6, #4]
 8005d6c:	e7b9      	b.n	8005ce2 <_malloc_r+0x46>
 8005d6e:	230c      	movs	r3, #12
 8005d70:	603b      	str	r3, [r7, #0]
 8005d72:	4638      	mov	r0, r7
 8005d74:	f000 f9ee 	bl	8006154 <__malloc_unlock>
 8005d78:	e7a1      	b.n	8005cbe <_malloc_r+0x22>
 8005d7a:	6025      	str	r5, [r4, #0]
 8005d7c:	e7de      	b.n	8005d3c <_malloc_r+0xa0>
 8005d7e:	bf00      	nop
 8005d80:	20000324 	.word	0x20000324

08005d84 <__ssputs_r>:
 8005d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d88:	688e      	ldr	r6, [r1, #8]
 8005d8a:	429e      	cmp	r6, r3
 8005d8c:	4682      	mov	sl, r0
 8005d8e:	460c      	mov	r4, r1
 8005d90:	4690      	mov	r8, r2
 8005d92:	461f      	mov	r7, r3
 8005d94:	d838      	bhi.n	8005e08 <__ssputs_r+0x84>
 8005d96:	898a      	ldrh	r2, [r1, #12]
 8005d98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d9c:	d032      	beq.n	8005e04 <__ssputs_r+0x80>
 8005d9e:	6825      	ldr	r5, [r4, #0]
 8005da0:	6909      	ldr	r1, [r1, #16]
 8005da2:	eba5 0901 	sub.w	r9, r5, r1
 8005da6:	6965      	ldr	r5, [r4, #20]
 8005da8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005db0:	3301      	adds	r3, #1
 8005db2:	444b      	add	r3, r9
 8005db4:	106d      	asrs	r5, r5, #1
 8005db6:	429d      	cmp	r5, r3
 8005db8:	bf38      	it	cc
 8005dba:	461d      	movcc	r5, r3
 8005dbc:	0553      	lsls	r3, r2, #21
 8005dbe:	d531      	bpl.n	8005e24 <__ssputs_r+0xa0>
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	f7ff ff6b 	bl	8005c9c <_malloc_r>
 8005dc6:	4606      	mov	r6, r0
 8005dc8:	b950      	cbnz	r0, 8005de0 <__ssputs_r+0x5c>
 8005dca:	230c      	movs	r3, #12
 8005dcc:	f8ca 3000 	str.w	r3, [sl]
 8005dd0:	89a3      	ldrh	r3, [r4, #12]
 8005dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dd6:	81a3      	strh	r3, [r4, #12]
 8005dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005de0:	6921      	ldr	r1, [r4, #16]
 8005de2:	464a      	mov	r2, r9
 8005de4:	f7ff fa08 	bl	80051f8 <memcpy>
 8005de8:	89a3      	ldrh	r3, [r4, #12]
 8005dea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df2:	81a3      	strh	r3, [r4, #12]
 8005df4:	6126      	str	r6, [r4, #16]
 8005df6:	6165      	str	r5, [r4, #20]
 8005df8:	444e      	add	r6, r9
 8005dfa:	eba5 0509 	sub.w	r5, r5, r9
 8005dfe:	6026      	str	r6, [r4, #0]
 8005e00:	60a5      	str	r5, [r4, #8]
 8005e02:	463e      	mov	r6, r7
 8005e04:	42be      	cmp	r6, r7
 8005e06:	d900      	bls.n	8005e0a <__ssputs_r+0x86>
 8005e08:	463e      	mov	r6, r7
 8005e0a:	6820      	ldr	r0, [r4, #0]
 8005e0c:	4632      	mov	r2, r6
 8005e0e:	4641      	mov	r1, r8
 8005e10:	f000 f980 	bl	8006114 <memmove>
 8005e14:	68a3      	ldr	r3, [r4, #8]
 8005e16:	1b9b      	subs	r3, r3, r6
 8005e18:	60a3      	str	r3, [r4, #8]
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	4433      	add	r3, r6
 8005e1e:	6023      	str	r3, [r4, #0]
 8005e20:	2000      	movs	r0, #0
 8005e22:	e7db      	b.n	8005ddc <__ssputs_r+0x58>
 8005e24:	462a      	mov	r2, r5
 8005e26:	f000 f99b 	bl	8006160 <_realloc_r>
 8005e2a:	4606      	mov	r6, r0
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	d1e1      	bne.n	8005df4 <__ssputs_r+0x70>
 8005e30:	6921      	ldr	r1, [r4, #16]
 8005e32:	4650      	mov	r0, sl
 8005e34:	f7ff fec6 	bl	8005bc4 <_free_r>
 8005e38:	e7c7      	b.n	8005dca <__ssputs_r+0x46>
	...

08005e3c <_svfiprintf_r>:
 8005e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e40:	4698      	mov	r8, r3
 8005e42:	898b      	ldrh	r3, [r1, #12]
 8005e44:	061b      	lsls	r3, r3, #24
 8005e46:	b09d      	sub	sp, #116	; 0x74
 8005e48:	4607      	mov	r7, r0
 8005e4a:	460d      	mov	r5, r1
 8005e4c:	4614      	mov	r4, r2
 8005e4e:	d50e      	bpl.n	8005e6e <_svfiprintf_r+0x32>
 8005e50:	690b      	ldr	r3, [r1, #16]
 8005e52:	b963      	cbnz	r3, 8005e6e <_svfiprintf_r+0x32>
 8005e54:	2140      	movs	r1, #64	; 0x40
 8005e56:	f7ff ff21 	bl	8005c9c <_malloc_r>
 8005e5a:	6028      	str	r0, [r5, #0]
 8005e5c:	6128      	str	r0, [r5, #16]
 8005e5e:	b920      	cbnz	r0, 8005e6a <_svfiprintf_r+0x2e>
 8005e60:	230c      	movs	r3, #12
 8005e62:	603b      	str	r3, [r7, #0]
 8005e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e68:	e0d1      	b.n	800600e <_svfiprintf_r+0x1d2>
 8005e6a:	2340      	movs	r3, #64	; 0x40
 8005e6c:	616b      	str	r3, [r5, #20]
 8005e6e:	2300      	movs	r3, #0
 8005e70:	9309      	str	r3, [sp, #36]	; 0x24
 8005e72:	2320      	movs	r3, #32
 8005e74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e78:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e7c:	2330      	movs	r3, #48	; 0x30
 8005e7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006028 <_svfiprintf_r+0x1ec>
 8005e82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e86:	f04f 0901 	mov.w	r9, #1
 8005e8a:	4623      	mov	r3, r4
 8005e8c:	469a      	mov	sl, r3
 8005e8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e92:	b10a      	cbz	r2, 8005e98 <_svfiprintf_r+0x5c>
 8005e94:	2a25      	cmp	r2, #37	; 0x25
 8005e96:	d1f9      	bne.n	8005e8c <_svfiprintf_r+0x50>
 8005e98:	ebba 0b04 	subs.w	fp, sl, r4
 8005e9c:	d00b      	beq.n	8005eb6 <_svfiprintf_r+0x7a>
 8005e9e:	465b      	mov	r3, fp
 8005ea0:	4622      	mov	r2, r4
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	4638      	mov	r0, r7
 8005ea6:	f7ff ff6d 	bl	8005d84 <__ssputs_r>
 8005eaa:	3001      	adds	r0, #1
 8005eac:	f000 80aa 	beq.w	8006004 <_svfiprintf_r+0x1c8>
 8005eb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eb2:	445a      	add	r2, fp
 8005eb4:	9209      	str	r2, [sp, #36]	; 0x24
 8005eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 80a2 	beq.w	8006004 <_svfiprintf_r+0x1c8>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ec6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005eca:	f10a 0a01 	add.w	sl, sl, #1
 8005ece:	9304      	str	r3, [sp, #16]
 8005ed0:	9307      	str	r3, [sp, #28]
 8005ed2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ed6:	931a      	str	r3, [sp, #104]	; 0x68
 8005ed8:	4654      	mov	r4, sl
 8005eda:	2205      	movs	r2, #5
 8005edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ee0:	4851      	ldr	r0, [pc, #324]	; (8006028 <_svfiprintf_r+0x1ec>)
 8005ee2:	f7fa f985 	bl	80001f0 <memchr>
 8005ee6:	9a04      	ldr	r2, [sp, #16]
 8005ee8:	b9d8      	cbnz	r0, 8005f22 <_svfiprintf_r+0xe6>
 8005eea:	06d0      	lsls	r0, r2, #27
 8005eec:	bf44      	itt	mi
 8005eee:	2320      	movmi	r3, #32
 8005ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ef4:	0711      	lsls	r1, r2, #28
 8005ef6:	bf44      	itt	mi
 8005ef8:	232b      	movmi	r3, #43	; 0x2b
 8005efa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005efe:	f89a 3000 	ldrb.w	r3, [sl]
 8005f02:	2b2a      	cmp	r3, #42	; 0x2a
 8005f04:	d015      	beq.n	8005f32 <_svfiprintf_r+0xf6>
 8005f06:	9a07      	ldr	r2, [sp, #28]
 8005f08:	4654      	mov	r4, sl
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	f04f 0c0a 	mov.w	ip, #10
 8005f10:	4621      	mov	r1, r4
 8005f12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f16:	3b30      	subs	r3, #48	; 0x30
 8005f18:	2b09      	cmp	r3, #9
 8005f1a:	d94e      	bls.n	8005fba <_svfiprintf_r+0x17e>
 8005f1c:	b1b0      	cbz	r0, 8005f4c <_svfiprintf_r+0x110>
 8005f1e:	9207      	str	r2, [sp, #28]
 8005f20:	e014      	b.n	8005f4c <_svfiprintf_r+0x110>
 8005f22:	eba0 0308 	sub.w	r3, r0, r8
 8005f26:	fa09 f303 	lsl.w	r3, r9, r3
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	9304      	str	r3, [sp, #16]
 8005f2e:	46a2      	mov	sl, r4
 8005f30:	e7d2      	b.n	8005ed8 <_svfiprintf_r+0x9c>
 8005f32:	9b03      	ldr	r3, [sp, #12]
 8005f34:	1d19      	adds	r1, r3, #4
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	9103      	str	r1, [sp, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	bfbb      	ittet	lt
 8005f3e:	425b      	neglt	r3, r3
 8005f40:	f042 0202 	orrlt.w	r2, r2, #2
 8005f44:	9307      	strge	r3, [sp, #28]
 8005f46:	9307      	strlt	r3, [sp, #28]
 8005f48:	bfb8      	it	lt
 8005f4a:	9204      	strlt	r2, [sp, #16]
 8005f4c:	7823      	ldrb	r3, [r4, #0]
 8005f4e:	2b2e      	cmp	r3, #46	; 0x2e
 8005f50:	d10c      	bne.n	8005f6c <_svfiprintf_r+0x130>
 8005f52:	7863      	ldrb	r3, [r4, #1]
 8005f54:	2b2a      	cmp	r3, #42	; 0x2a
 8005f56:	d135      	bne.n	8005fc4 <_svfiprintf_r+0x188>
 8005f58:	9b03      	ldr	r3, [sp, #12]
 8005f5a:	1d1a      	adds	r2, r3, #4
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	9203      	str	r2, [sp, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	bfb8      	it	lt
 8005f64:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005f68:	3402      	adds	r4, #2
 8005f6a:	9305      	str	r3, [sp, #20]
 8005f6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006038 <_svfiprintf_r+0x1fc>
 8005f70:	7821      	ldrb	r1, [r4, #0]
 8005f72:	2203      	movs	r2, #3
 8005f74:	4650      	mov	r0, sl
 8005f76:	f7fa f93b 	bl	80001f0 <memchr>
 8005f7a:	b140      	cbz	r0, 8005f8e <_svfiprintf_r+0x152>
 8005f7c:	2340      	movs	r3, #64	; 0x40
 8005f7e:	eba0 000a 	sub.w	r0, r0, sl
 8005f82:	fa03 f000 	lsl.w	r0, r3, r0
 8005f86:	9b04      	ldr	r3, [sp, #16]
 8005f88:	4303      	orrs	r3, r0
 8005f8a:	3401      	adds	r4, #1
 8005f8c:	9304      	str	r3, [sp, #16]
 8005f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f92:	4826      	ldr	r0, [pc, #152]	; (800602c <_svfiprintf_r+0x1f0>)
 8005f94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f98:	2206      	movs	r2, #6
 8005f9a:	f7fa f929 	bl	80001f0 <memchr>
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	d038      	beq.n	8006014 <_svfiprintf_r+0x1d8>
 8005fa2:	4b23      	ldr	r3, [pc, #140]	; (8006030 <_svfiprintf_r+0x1f4>)
 8005fa4:	bb1b      	cbnz	r3, 8005fee <_svfiprintf_r+0x1b2>
 8005fa6:	9b03      	ldr	r3, [sp, #12]
 8005fa8:	3307      	adds	r3, #7
 8005faa:	f023 0307 	bic.w	r3, r3, #7
 8005fae:	3308      	adds	r3, #8
 8005fb0:	9303      	str	r3, [sp, #12]
 8005fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fb4:	4433      	add	r3, r6
 8005fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8005fb8:	e767      	b.n	8005e8a <_svfiprintf_r+0x4e>
 8005fba:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fbe:	460c      	mov	r4, r1
 8005fc0:	2001      	movs	r0, #1
 8005fc2:	e7a5      	b.n	8005f10 <_svfiprintf_r+0xd4>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	3401      	adds	r4, #1
 8005fc8:	9305      	str	r3, [sp, #20]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	f04f 0c0a 	mov.w	ip, #10
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fd6:	3a30      	subs	r2, #48	; 0x30
 8005fd8:	2a09      	cmp	r2, #9
 8005fda:	d903      	bls.n	8005fe4 <_svfiprintf_r+0x1a8>
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d0c5      	beq.n	8005f6c <_svfiprintf_r+0x130>
 8005fe0:	9105      	str	r1, [sp, #20]
 8005fe2:	e7c3      	b.n	8005f6c <_svfiprintf_r+0x130>
 8005fe4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fe8:	4604      	mov	r4, r0
 8005fea:	2301      	movs	r3, #1
 8005fec:	e7f0      	b.n	8005fd0 <_svfiprintf_r+0x194>
 8005fee:	ab03      	add	r3, sp, #12
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	462a      	mov	r2, r5
 8005ff4:	4b0f      	ldr	r3, [pc, #60]	; (8006034 <_svfiprintf_r+0x1f8>)
 8005ff6:	a904      	add	r1, sp, #16
 8005ff8:	4638      	mov	r0, r7
 8005ffa:	f7fc fa47 	bl	800248c <_printf_float>
 8005ffe:	1c42      	adds	r2, r0, #1
 8006000:	4606      	mov	r6, r0
 8006002:	d1d6      	bne.n	8005fb2 <_svfiprintf_r+0x176>
 8006004:	89ab      	ldrh	r3, [r5, #12]
 8006006:	065b      	lsls	r3, r3, #25
 8006008:	f53f af2c 	bmi.w	8005e64 <_svfiprintf_r+0x28>
 800600c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800600e:	b01d      	add	sp, #116	; 0x74
 8006010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006014:	ab03      	add	r3, sp, #12
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	462a      	mov	r2, r5
 800601a:	4b06      	ldr	r3, [pc, #24]	; (8006034 <_svfiprintf_r+0x1f8>)
 800601c:	a904      	add	r1, sp, #16
 800601e:	4638      	mov	r0, r7
 8006020:	f7fc fcd8 	bl	80029d4 <_printf_i>
 8006024:	e7eb      	b.n	8005ffe <_svfiprintf_r+0x1c2>
 8006026:	bf00      	nop
 8006028:	0800704c 	.word	0x0800704c
 800602c:	08007056 	.word	0x08007056
 8006030:	0800248d 	.word	0x0800248d
 8006034:	08005d85 	.word	0x08005d85
 8006038:	08007052 	.word	0x08007052
 800603c:	00000000 	.word	0x00000000

08006040 <nan>:
 8006040:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006048 <nan+0x8>
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	00000000 	.word	0x00000000
 800604c:	7ff80000 	.word	0x7ff80000

08006050 <_sbrk_r>:
 8006050:	b538      	push	{r3, r4, r5, lr}
 8006052:	4d06      	ldr	r5, [pc, #24]	; (800606c <_sbrk_r+0x1c>)
 8006054:	2300      	movs	r3, #0
 8006056:	4604      	mov	r4, r0
 8006058:	4608      	mov	r0, r1
 800605a:	602b      	str	r3, [r5, #0]
 800605c:	f7fb f842 	bl	80010e4 <_sbrk>
 8006060:	1c43      	adds	r3, r0, #1
 8006062:	d102      	bne.n	800606a <_sbrk_r+0x1a>
 8006064:	682b      	ldr	r3, [r5, #0]
 8006066:	b103      	cbz	r3, 800606a <_sbrk_r+0x1a>
 8006068:	6023      	str	r3, [r4, #0]
 800606a:	bd38      	pop	{r3, r4, r5, pc}
 800606c:	2000032c 	.word	0x2000032c

08006070 <strncmp>:
 8006070:	b510      	push	{r4, lr}
 8006072:	b17a      	cbz	r2, 8006094 <strncmp+0x24>
 8006074:	4603      	mov	r3, r0
 8006076:	3901      	subs	r1, #1
 8006078:	1884      	adds	r4, r0, r2
 800607a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800607e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006082:	4290      	cmp	r0, r2
 8006084:	d101      	bne.n	800608a <strncmp+0x1a>
 8006086:	42a3      	cmp	r3, r4
 8006088:	d101      	bne.n	800608e <strncmp+0x1e>
 800608a:	1a80      	subs	r0, r0, r2
 800608c:	bd10      	pop	{r4, pc}
 800608e:	2800      	cmp	r0, #0
 8006090:	d1f3      	bne.n	800607a <strncmp+0xa>
 8006092:	e7fa      	b.n	800608a <strncmp+0x1a>
 8006094:	4610      	mov	r0, r2
 8006096:	e7f9      	b.n	800608c <strncmp+0x1c>

08006098 <__ascii_wctomb>:
 8006098:	b149      	cbz	r1, 80060ae <__ascii_wctomb+0x16>
 800609a:	2aff      	cmp	r2, #255	; 0xff
 800609c:	bf85      	ittet	hi
 800609e:	238a      	movhi	r3, #138	; 0x8a
 80060a0:	6003      	strhi	r3, [r0, #0]
 80060a2:	700a      	strbls	r2, [r1, #0]
 80060a4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80060a8:	bf98      	it	ls
 80060aa:	2001      	movls	r0, #1
 80060ac:	4770      	bx	lr
 80060ae:	4608      	mov	r0, r1
 80060b0:	4770      	bx	lr
	...

080060b4 <__assert_func>:
 80060b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060b6:	4614      	mov	r4, r2
 80060b8:	461a      	mov	r2, r3
 80060ba:	4b09      	ldr	r3, [pc, #36]	; (80060e0 <__assert_func+0x2c>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4605      	mov	r5, r0
 80060c0:	68d8      	ldr	r0, [r3, #12]
 80060c2:	b14c      	cbz	r4, 80060d8 <__assert_func+0x24>
 80060c4:	4b07      	ldr	r3, [pc, #28]	; (80060e4 <__assert_func+0x30>)
 80060c6:	9100      	str	r1, [sp, #0]
 80060c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80060cc:	4906      	ldr	r1, [pc, #24]	; (80060e8 <__assert_func+0x34>)
 80060ce:	462b      	mov	r3, r5
 80060d0:	f000 f80e 	bl	80060f0 <fiprintf>
 80060d4:	f000 fa8c 	bl	80065f0 <abort>
 80060d8:	4b04      	ldr	r3, [pc, #16]	; (80060ec <__assert_func+0x38>)
 80060da:	461c      	mov	r4, r3
 80060dc:	e7f3      	b.n	80060c6 <__assert_func+0x12>
 80060de:	bf00      	nop
 80060e0:	20000000 	.word	0x20000000
 80060e4:	0800705d 	.word	0x0800705d
 80060e8:	0800706a 	.word	0x0800706a
 80060ec:	08007098 	.word	0x08007098

080060f0 <fiprintf>:
 80060f0:	b40e      	push	{r1, r2, r3}
 80060f2:	b503      	push	{r0, r1, lr}
 80060f4:	4601      	mov	r1, r0
 80060f6:	ab03      	add	r3, sp, #12
 80060f8:	4805      	ldr	r0, [pc, #20]	; (8006110 <fiprintf+0x20>)
 80060fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80060fe:	6800      	ldr	r0, [r0, #0]
 8006100:	9301      	str	r3, [sp, #4]
 8006102:	f000 f885 	bl	8006210 <_vfiprintf_r>
 8006106:	b002      	add	sp, #8
 8006108:	f85d eb04 	ldr.w	lr, [sp], #4
 800610c:	b003      	add	sp, #12
 800610e:	4770      	bx	lr
 8006110:	20000000 	.word	0x20000000

08006114 <memmove>:
 8006114:	4288      	cmp	r0, r1
 8006116:	b510      	push	{r4, lr}
 8006118:	eb01 0402 	add.w	r4, r1, r2
 800611c:	d902      	bls.n	8006124 <memmove+0x10>
 800611e:	4284      	cmp	r4, r0
 8006120:	4623      	mov	r3, r4
 8006122:	d807      	bhi.n	8006134 <memmove+0x20>
 8006124:	1e43      	subs	r3, r0, #1
 8006126:	42a1      	cmp	r1, r4
 8006128:	d008      	beq.n	800613c <memmove+0x28>
 800612a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800612e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006132:	e7f8      	b.n	8006126 <memmove+0x12>
 8006134:	4402      	add	r2, r0
 8006136:	4601      	mov	r1, r0
 8006138:	428a      	cmp	r2, r1
 800613a:	d100      	bne.n	800613e <memmove+0x2a>
 800613c:	bd10      	pop	{r4, pc}
 800613e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006142:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006146:	e7f7      	b.n	8006138 <memmove+0x24>

08006148 <__malloc_lock>:
 8006148:	4801      	ldr	r0, [pc, #4]	; (8006150 <__malloc_lock+0x8>)
 800614a:	f000 bc11 	b.w	8006970 <__retarget_lock_acquire_recursive>
 800614e:	bf00      	nop
 8006150:	20000330 	.word	0x20000330

08006154 <__malloc_unlock>:
 8006154:	4801      	ldr	r0, [pc, #4]	; (800615c <__malloc_unlock+0x8>)
 8006156:	f000 bc0c 	b.w	8006972 <__retarget_lock_release_recursive>
 800615a:	bf00      	nop
 800615c:	20000330 	.word	0x20000330

08006160 <_realloc_r>:
 8006160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006164:	4680      	mov	r8, r0
 8006166:	4614      	mov	r4, r2
 8006168:	460e      	mov	r6, r1
 800616a:	b921      	cbnz	r1, 8006176 <_realloc_r+0x16>
 800616c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006170:	4611      	mov	r1, r2
 8006172:	f7ff bd93 	b.w	8005c9c <_malloc_r>
 8006176:	b92a      	cbnz	r2, 8006184 <_realloc_r+0x24>
 8006178:	f7ff fd24 	bl	8005bc4 <_free_r>
 800617c:	4625      	mov	r5, r4
 800617e:	4628      	mov	r0, r5
 8006180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006184:	f000 fc5c 	bl	8006a40 <_malloc_usable_size_r>
 8006188:	4284      	cmp	r4, r0
 800618a:	4607      	mov	r7, r0
 800618c:	d802      	bhi.n	8006194 <_realloc_r+0x34>
 800618e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006192:	d812      	bhi.n	80061ba <_realloc_r+0x5a>
 8006194:	4621      	mov	r1, r4
 8006196:	4640      	mov	r0, r8
 8006198:	f7ff fd80 	bl	8005c9c <_malloc_r>
 800619c:	4605      	mov	r5, r0
 800619e:	2800      	cmp	r0, #0
 80061a0:	d0ed      	beq.n	800617e <_realloc_r+0x1e>
 80061a2:	42bc      	cmp	r4, r7
 80061a4:	4622      	mov	r2, r4
 80061a6:	4631      	mov	r1, r6
 80061a8:	bf28      	it	cs
 80061aa:	463a      	movcs	r2, r7
 80061ac:	f7ff f824 	bl	80051f8 <memcpy>
 80061b0:	4631      	mov	r1, r6
 80061b2:	4640      	mov	r0, r8
 80061b4:	f7ff fd06 	bl	8005bc4 <_free_r>
 80061b8:	e7e1      	b.n	800617e <_realloc_r+0x1e>
 80061ba:	4635      	mov	r5, r6
 80061bc:	e7df      	b.n	800617e <_realloc_r+0x1e>

080061be <__sfputc_r>:
 80061be:	6893      	ldr	r3, [r2, #8]
 80061c0:	3b01      	subs	r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	b410      	push	{r4}
 80061c6:	6093      	str	r3, [r2, #8]
 80061c8:	da08      	bge.n	80061dc <__sfputc_r+0x1e>
 80061ca:	6994      	ldr	r4, [r2, #24]
 80061cc:	42a3      	cmp	r3, r4
 80061ce:	db01      	blt.n	80061d4 <__sfputc_r+0x16>
 80061d0:	290a      	cmp	r1, #10
 80061d2:	d103      	bne.n	80061dc <__sfputc_r+0x1e>
 80061d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061d8:	f000 b94a 	b.w	8006470 <__swbuf_r>
 80061dc:	6813      	ldr	r3, [r2, #0]
 80061de:	1c58      	adds	r0, r3, #1
 80061e0:	6010      	str	r0, [r2, #0]
 80061e2:	7019      	strb	r1, [r3, #0]
 80061e4:	4608      	mov	r0, r1
 80061e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <__sfputs_r>:
 80061ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ee:	4606      	mov	r6, r0
 80061f0:	460f      	mov	r7, r1
 80061f2:	4614      	mov	r4, r2
 80061f4:	18d5      	adds	r5, r2, r3
 80061f6:	42ac      	cmp	r4, r5
 80061f8:	d101      	bne.n	80061fe <__sfputs_r+0x12>
 80061fa:	2000      	movs	r0, #0
 80061fc:	e007      	b.n	800620e <__sfputs_r+0x22>
 80061fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006202:	463a      	mov	r2, r7
 8006204:	4630      	mov	r0, r6
 8006206:	f7ff ffda 	bl	80061be <__sfputc_r>
 800620a:	1c43      	adds	r3, r0, #1
 800620c:	d1f3      	bne.n	80061f6 <__sfputs_r+0xa>
 800620e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006210 <_vfiprintf_r>:
 8006210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006214:	460d      	mov	r5, r1
 8006216:	b09d      	sub	sp, #116	; 0x74
 8006218:	4614      	mov	r4, r2
 800621a:	4698      	mov	r8, r3
 800621c:	4606      	mov	r6, r0
 800621e:	b118      	cbz	r0, 8006228 <_vfiprintf_r+0x18>
 8006220:	6983      	ldr	r3, [r0, #24]
 8006222:	b90b      	cbnz	r3, 8006228 <_vfiprintf_r+0x18>
 8006224:	f000 fb06 	bl	8006834 <__sinit>
 8006228:	4b89      	ldr	r3, [pc, #548]	; (8006450 <_vfiprintf_r+0x240>)
 800622a:	429d      	cmp	r5, r3
 800622c:	d11b      	bne.n	8006266 <_vfiprintf_r+0x56>
 800622e:	6875      	ldr	r5, [r6, #4]
 8006230:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006232:	07d9      	lsls	r1, r3, #31
 8006234:	d405      	bmi.n	8006242 <_vfiprintf_r+0x32>
 8006236:	89ab      	ldrh	r3, [r5, #12]
 8006238:	059a      	lsls	r2, r3, #22
 800623a:	d402      	bmi.n	8006242 <_vfiprintf_r+0x32>
 800623c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800623e:	f000 fb97 	bl	8006970 <__retarget_lock_acquire_recursive>
 8006242:	89ab      	ldrh	r3, [r5, #12]
 8006244:	071b      	lsls	r3, r3, #28
 8006246:	d501      	bpl.n	800624c <_vfiprintf_r+0x3c>
 8006248:	692b      	ldr	r3, [r5, #16]
 800624a:	b9eb      	cbnz	r3, 8006288 <_vfiprintf_r+0x78>
 800624c:	4629      	mov	r1, r5
 800624e:	4630      	mov	r0, r6
 8006250:	f000 f960 	bl	8006514 <__swsetup_r>
 8006254:	b1c0      	cbz	r0, 8006288 <_vfiprintf_r+0x78>
 8006256:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006258:	07dc      	lsls	r4, r3, #31
 800625a:	d50e      	bpl.n	800627a <_vfiprintf_r+0x6a>
 800625c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006260:	b01d      	add	sp, #116	; 0x74
 8006262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006266:	4b7b      	ldr	r3, [pc, #492]	; (8006454 <_vfiprintf_r+0x244>)
 8006268:	429d      	cmp	r5, r3
 800626a:	d101      	bne.n	8006270 <_vfiprintf_r+0x60>
 800626c:	68b5      	ldr	r5, [r6, #8]
 800626e:	e7df      	b.n	8006230 <_vfiprintf_r+0x20>
 8006270:	4b79      	ldr	r3, [pc, #484]	; (8006458 <_vfiprintf_r+0x248>)
 8006272:	429d      	cmp	r5, r3
 8006274:	bf08      	it	eq
 8006276:	68f5      	ldreq	r5, [r6, #12]
 8006278:	e7da      	b.n	8006230 <_vfiprintf_r+0x20>
 800627a:	89ab      	ldrh	r3, [r5, #12]
 800627c:	0598      	lsls	r0, r3, #22
 800627e:	d4ed      	bmi.n	800625c <_vfiprintf_r+0x4c>
 8006280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006282:	f000 fb76 	bl	8006972 <__retarget_lock_release_recursive>
 8006286:	e7e9      	b.n	800625c <_vfiprintf_r+0x4c>
 8006288:	2300      	movs	r3, #0
 800628a:	9309      	str	r3, [sp, #36]	; 0x24
 800628c:	2320      	movs	r3, #32
 800628e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006292:	f8cd 800c 	str.w	r8, [sp, #12]
 8006296:	2330      	movs	r3, #48	; 0x30
 8006298:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800645c <_vfiprintf_r+0x24c>
 800629c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062a0:	f04f 0901 	mov.w	r9, #1
 80062a4:	4623      	mov	r3, r4
 80062a6:	469a      	mov	sl, r3
 80062a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062ac:	b10a      	cbz	r2, 80062b2 <_vfiprintf_r+0xa2>
 80062ae:	2a25      	cmp	r2, #37	; 0x25
 80062b0:	d1f9      	bne.n	80062a6 <_vfiprintf_r+0x96>
 80062b2:	ebba 0b04 	subs.w	fp, sl, r4
 80062b6:	d00b      	beq.n	80062d0 <_vfiprintf_r+0xc0>
 80062b8:	465b      	mov	r3, fp
 80062ba:	4622      	mov	r2, r4
 80062bc:	4629      	mov	r1, r5
 80062be:	4630      	mov	r0, r6
 80062c0:	f7ff ff94 	bl	80061ec <__sfputs_r>
 80062c4:	3001      	adds	r0, #1
 80062c6:	f000 80aa 	beq.w	800641e <_vfiprintf_r+0x20e>
 80062ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062cc:	445a      	add	r2, fp
 80062ce:	9209      	str	r2, [sp, #36]	; 0x24
 80062d0:	f89a 3000 	ldrb.w	r3, [sl]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 80a2 	beq.w	800641e <_vfiprintf_r+0x20e>
 80062da:	2300      	movs	r3, #0
 80062dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062e4:	f10a 0a01 	add.w	sl, sl, #1
 80062e8:	9304      	str	r3, [sp, #16]
 80062ea:	9307      	str	r3, [sp, #28]
 80062ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062f0:	931a      	str	r3, [sp, #104]	; 0x68
 80062f2:	4654      	mov	r4, sl
 80062f4:	2205      	movs	r2, #5
 80062f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062fa:	4858      	ldr	r0, [pc, #352]	; (800645c <_vfiprintf_r+0x24c>)
 80062fc:	f7f9 ff78 	bl	80001f0 <memchr>
 8006300:	9a04      	ldr	r2, [sp, #16]
 8006302:	b9d8      	cbnz	r0, 800633c <_vfiprintf_r+0x12c>
 8006304:	06d1      	lsls	r1, r2, #27
 8006306:	bf44      	itt	mi
 8006308:	2320      	movmi	r3, #32
 800630a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800630e:	0713      	lsls	r3, r2, #28
 8006310:	bf44      	itt	mi
 8006312:	232b      	movmi	r3, #43	; 0x2b
 8006314:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006318:	f89a 3000 	ldrb.w	r3, [sl]
 800631c:	2b2a      	cmp	r3, #42	; 0x2a
 800631e:	d015      	beq.n	800634c <_vfiprintf_r+0x13c>
 8006320:	9a07      	ldr	r2, [sp, #28]
 8006322:	4654      	mov	r4, sl
 8006324:	2000      	movs	r0, #0
 8006326:	f04f 0c0a 	mov.w	ip, #10
 800632a:	4621      	mov	r1, r4
 800632c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006330:	3b30      	subs	r3, #48	; 0x30
 8006332:	2b09      	cmp	r3, #9
 8006334:	d94e      	bls.n	80063d4 <_vfiprintf_r+0x1c4>
 8006336:	b1b0      	cbz	r0, 8006366 <_vfiprintf_r+0x156>
 8006338:	9207      	str	r2, [sp, #28]
 800633a:	e014      	b.n	8006366 <_vfiprintf_r+0x156>
 800633c:	eba0 0308 	sub.w	r3, r0, r8
 8006340:	fa09 f303 	lsl.w	r3, r9, r3
 8006344:	4313      	orrs	r3, r2
 8006346:	9304      	str	r3, [sp, #16]
 8006348:	46a2      	mov	sl, r4
 800634a:	e7d2      	b.n	80062f2 <_vfiprintf_r+0xe2>
 800634c:	9b03      	ldr	r3, [sp, #12]
 800634e:	1d19      	adds	r1, r3, #4
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	9103      	str	r1, [sp, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	bfbb      	ittet	lt
 8006358:	425b      	neglt	r3, r3
 800635a:	f042 0202 	orrlt.w	r2, r2, #2
 800635e:	9307      	strge	r3, [sp, #28]
 8006360:	9307      	strlt	r3, [sp, #28]
 8006362:	bfb8      	it	lt
 8006364:	9204      	strlt	r2, [sp, #16]
 8006366:	7823      	ldrb	r3, [r4, #0]
 8006368:	2b2e      	cmp	r3, #46	; 0x2e
 800636a:	d10c      	bne.n	8006386 <_vfiprintf_r+0x176>
 800636c:	7863      	ldrb	r3, [r4, #1]
 800636e:	2b2a      	cmp	r3, #42	; 0x2a
 8006370:	d135      	bne.n	80063de <_vfiprintf_r+0x1ce>
 8006372:	9b03      	ldr	r3, [sp, #12]
 8006374:	1d1a      	adds	r2, r3, #4
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	9203      	str	r2, [sp, #12]
 800637a:	2b00      	cmp	r3, #0
 800637c:	bfb8      	it	lt
 800637e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006382:	3402      	adds	r4, #2
 8006384:	9305      	str	r3, [sp, #20]
 8006386:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800646c <_vfiprintf_r+0x25c>
 800638a:	7821      	ldrb	r1, [r4, #0]
 800638c:	2203      	movs	r2, #3
 800638e:	4650      	mov	r0, sl
 8006390:	f7f9 ff2e 	bl	80001f0 <memchr>
 8006394:	b140      	cbz	r0, 80063a8 <_vfiprintf_r+0x198>
 8006396:	2340      	movs	r3, #64	; 0x40
 8006398:	eba0 000a 	sub.w	r0, r0, sl
 800639c:	fa03 f000 	lsl.w	r0, r3, r0
 80063a0:	9b04      	ldr	r3, [sp, #16]
 80063a2:	4303      	orrs	r3, r0
 80063a4:	3401      	adds	r4, #1
 80063a6:	9304      	str	r3, [sp, #16]
 80063a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ac:	482c      	ldr	r0, [pc, #176]	; (8006460 <_vfiprintf_r+0x250>)
 80063ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063b2:	2206      	movs	r2, #6
 80063b4:	f7f9 ff1c 	bl	80001f0 <memchr>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	d03f      	beq.n	800643c <_vfiprintf_r+0x22c>
 80063bc:	4b29      	ldr	r3, [pc, #164]	; (8006464 <_vfiprintf_r+0x254>)
 80063be:	bb1b      	cbnz	r3, 8006408 <_vfiprintf_r+0x1f8>
 80063c0:	9b03      	ldr	r3, [sp, #12]
 80063c2:	3307      	adds	r3, #7
 80063c4:	f023 0307 	bic.w	r3, r3, #7
 80063c8:	3308      	adds	r3, #8
 80063ca:	9303      	str	r3, [sp, #12]
 80063cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ce:	443b      	add	r3, r7
 80063d0:	9309      	str	r3, [sp, #36]	; 0x24
 80063d2:	e767      	b.n	80062a4 <_vfiprintf_r+0x94>
 80063d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80063d8:	460c      	mov	r4, r1
 80063da:	2001      	movs	r0, #1
 80063dc:	e7a5      	b.n	800632a <_vfiprintf_r+0x11a>
 80063de:	2300      	movs	r3, #0
 80063e0:	3401      	adds	r4, #1
 80063e2:	9305      	str	r3, [sp, #20]
 80063e4:	4619      	mov	r1, r3
 80063e6:	f04f 0c0a 	mov.w	ip, #10
 80063ea:	4620      	mov	r0, r4
 80063ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063f0:	3a30      	subs	r2, #48	; 0x30
 80063f2:	2a09      	cmp	r2, #9
 80063f4:	d903      	bls.n	80063fe <_vfiprintf_r+0x1ee>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0c5      	beq.n	8006386 <_vfiprintf_r+0x176>
 80063fa:	9105      	str	r1, [sp, #20]
 80063fc:	e7c3      	b.n	8006386 <_vfiprintf_r+0x176>
 80063fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006402:	4604      	mov	r4, r0
 8006404:	2301      	movs	r3, #1
 8006406:	e7f0      	b.n	80063ea <_vfiprintf_r+0x1da>
 8006408:	ab03      	add	r3, sp, #12
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	462a      	mov	r2, r5
 800640e:	4b16      	ldr	r3, [pc, #88]	; (8006468 <_vfiprintf_r+0x258>)
 8006410:	a904      	add	r1, sp, #16
 8006412:	4630      	mov	r0, r6
 8006414:	f7fc f83a 	bl	800248c <_printf_float>
 8006418:	4607      	mov	r7, r0
 800641a:	1c78      	adds	r0, r7, #1
 800641c:	d1d6      	bne.n	80063cc <_vfiprintf_r+0x1bc>
 800641e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006420:	07d9      	lsls	r1, r3, #31
 8006422:	d405      	bmi.n	8006430 <_vfiprintf_r+0x220>
 8006424:	89ab      	ldrh	r3, [r5, #12]
 8006426:	059a      	lsls	r2, r3, #22
 8006428:	d402      	bmi.n	8006430 <_vfiprintf_r+0x220>
 800642a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800642c:	f000 faa1 	bl	8006972 <__retarget_lock_release_recursive>
 8006430:	89ab      	ldrh	r3, [r5, #12]
 8006432:	065b      	lsls	r3, r3, #25
 8006434:	f53f af12 	bmi.w	800625c <_vfiprintf_r+0x4c>
 8006438:	9809      	ldr	r0, [sp, #36]	; 0x24
 800643a:	e711      	b.n	8006260 <_vfiprintf_r+0x50>
 800643c:	ab03      	add	r3, sp, #12
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	462a      	mov	r2, r5
 8006442:	4b09      	ldr	r3, [pc, #36]	; (8006468 <_vfiprintf_r+0x258>)
 8006444:	a904      	add	r1, sp, #16
 8006446:	4630      	mov	r0, r6
 8006448:	f7fc fac4 	bl	80029d4 <_printf_i>
 800644c:	e7e4      	b.n	8006418 <_vfiprintf_r+0x208>
 800644e:	bf00      	nop
 8006450:	080070bc 	.word	0x080070bc
 8006454:	080070dc 	.word	0x080070dc
 8006458:	0800709c 	.word	0x0800709c
 800645c:	0800704c 	.word	0x0800704c
 8006460:	08007056 	.word	0x08007056
 8006464:	0800248d 	.word	0x0800248d
 8006468:	080061ed 	.word	0x080061ed
 800646c:	08007052 	.word	0x08007052

08006470 <__swbuf_r>:
 8006470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006472:	460e      	mov	r6, r1
 8006474:	4614      	mov	r4, r2
 8006476:	4605      	mov	r5, r0
 8006478:	b118      	cbz	r0, 8006482 <__swbuf_r+0x12>
 800647a:	6983      	ldr	r3, [r0, #24]
 800647c:	b90b      	cbnz	r3, 8006482 <__swbuf_r+0x12>
 800647e:	f000 f9d9 	bl	8006834 <__sinit>
 8006482:	4b21      	ldr	r3, [pc, #132]	; (8006508 <__swbuf_r+0x98>)
 8006484:	429c      	cmp	r4, r3
 8006486:	d12b      	bne.n	80064e0 <__swbuf_r+0x70>
 8006488:	686c      	ldr	r4, [r5, #4]
 800648a:	69a3      	ldr	r3, [r4, #24]
 800648c:	60a3      	str	r3, [r4, #8]
 800648e:	89a3      	ldrh	r3, [r4, #12]
 8006490:	071a      	lsls	r2, r3, #28
 8006492:	d52f      	bpl.n	80064f4 <__swbuf_r+0x84>
 8006494:	6923      	ldr	r3, [r4, #16]
 8006496:	b36b      	cbz	r3, 80064f4 <__swbuf_r+0x84>
 8006498:	6923      	ldr	r3, [r4, #16]
 800649a:	6820      	ldr	r0, [r4, #0]
 800649c:	1ac0      	subs	r0, r0, r3
 800649e:	6963      	ldr	r3, [r4, #20]
 80064a0:	b2f6      	uxtb	r6, r6
 80064a2:	4283      	cmp	r3, r0
 80064a4:	4637      	mov	r7, r6
 80064a6:	dc04      	bgt.n	80064b2 <__swbuf_r+0x42>
 80064a8:	4621      	mov	r1, r4
 80064aa:	4628      	mov	r0, r5
 80064ac:	f000 f92e 	bl	800670c <_fflush_r>
 80064b0:	bb30      	cbnz	r0, 8006500 <__swbuf_r+0x90>
 80064b2:	68a3      	ldr	r3, [r4, #8]
 80064b4:	3b01      	subs	r3, #1
 80064b6:	60a3      	str	r3, [r4, #8]
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	6022      	str	r2, [r4, #0]
 80064be:	701e      	strb	r6, [r3, #0]
 80064c0:	6963      	ldr	r3, [r4, #20]
 80064c2:	3001      	adds	r0, #1
 80064c4:	4283      	cmp	r3, r0
 80064c6:	d004      	beq.n	80064d2 <__swbuf_r+0x62>
 80064c8:	89a3      	ldrh	r3, [r4, #12]
 80064ca:	07db      	lsls	r3, r3, #31
 80064cc:	d506      	bpl.n	80064dc <__swbuf_r+0x6c>
 80064ce:	2e0a      	cmp	r6, #10
 80064d0:	d104      	bne.n	80064dc <__swbuf_r+0x6c>
 80064d2:	4621      	mov	r1, r4
 80064d4:	4628      	mov	r0, r5
 80064d6:	f000 f919 	bl	800670c <_fflush_r>
 80064da:	b988      	cbnz	r0, 8006500 <__swbuf_r+0x90>
 80064dc:	4638      	mov	r0, r7
 80064de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064e0:	4b0a      	ldr	r3, [pc, #40]	; (800650c <__swbuf_r+0x9c>)
 80064e2:	429c      	cmp	r4, r3
 80064e4:	d101      	bne.n	80064ea <__swbuf_r+0x7a>
 80064e6:	68ac      	ldr	r4, [r5, #8]
 80064e8:	e7cf      	b.n	800648a <__swbuf_r+0x1a>
 80064ea:	4b09      	ldr	r3, [pc, #36]	; (8006510 <__swbuf_r+0xa0>)
 80064ec:	429c      	cmp	r4, r3
 80064ee:	bf08      	it	eq
 80064f0:	68ec      	ldreq	r4, [r5, #12]
 80064f2:	e7ca      	b.n	800648a <__swbuf_r+0x1a>
 80064f4:	4621      	mov	r1, r4
 80064f6:	4628      	mov	r0, r5
 80064f8:	f000 f80c 	bl	8006514 <__swsetup_r>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	d0cb      	beq.n	8006498 <__swbuf_r+0x28>
 8006500:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006504:	e7ea      	b.n	80064dc <__swbuf_r+0x6c>
 8006506:	bf00      	nop
 8006508:	080070bc 	.word	0x080070bc
 800650c:	080070dc 	.word	0x080070dc
 8006510:	0800709c 	.word	0x0800709c

08006514 <__swsetup_r>:
 8006514:	4b32      	ldr	r3, [pc, #200]	; (80065e0 <__swsetup_r+0xcc>)
 8006516:	b570      	push	{r4, r5, r6, lr}
 8006518:	681d      	ldr	r5, [r3, #0]
 800651a:	4606      	mov	r6, r0
 800651c:	460c      	mov	r4, r1
 800651e:	b125      	cbz	r5, 800652a <__swsetup_r+0x16>
 8006520:	69ab      	ldr	r3, [r5, #24]
 8006522:	b913      	cbnz	r3, 800652a <__swsetup_r+0x16>
 8006524:	4628      	mov	r0, r5
 8006526:	f000 f985 	bl	8006834 <__sinit>
 800652a:	4b2e      	ldr	r3, [pc, #184]	; (80065e4 <__swsetup_r+0xd0>)
 800652c:	429c      	cmp	r4, r3
 800652e:	d10f      	bne.n	8006550 <__swsetup_r+0x3c>
 8006530:	686c      	ldr	r4, [r5, #4]
 8006532:	89a3      	ldrh	r3, [r4, #12]
 8006534:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006538:	0719      	lsls	r1, r3, #28
 800653a:	d42c      	bmi.n	8006596 <__swsetup_r+0x82>
 800653c:	06dd      	lsls	r5, r3, #27
 800653e:	d411      	bmi.n	8006564 <__swsetup_r+0x50>
 8006540:	2309      	movs	r3, #9
 8006542:	6033      	str	r3, [r6, #0]
 8006544:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006548:	81a3      	strh	r3, [r4, #12]
 800654a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800654e:	e03e      	b.n	80065ce <__swsetup_r+0xba>
 8006550:	4b25      	ldr	r3, [pc, #148]	; (80065e8 <__swsetup_r+0xd4>)
 8006552:	429c      	cmp	r4, r3
 8006554:	d101      	bne.n	800655a <__swsetup_r+0x46>
 8006556:	68ac      	ldr	r4, [r5, #8]
 8006558:	e7eb      	b.n	8006532 <__swsetup_r+0x1e>
 800655a:	4b24      	ldr	r3, [pc, #144]	; (80065ec <__swsetup_r+0xd8>)
 800655c:	429c      	cmp	r4, r3
 800655e:	bf08      	it	eq
 8006560:	68ec      	ldreq	r4, [r5, #12]
 8006562:	e7e6      	b.n	8006532 <__swsetup_r+0x1e>
 8006564:	0758      	lsls	r0, r3, #29
 8006566:	d512      	bpl.n	800658e <__swsetup_r+0x7a>
 8006568:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800656a:	b141      	cbz	r1, 800657e <__swsetup_r+0x6a>
 800656c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006570:	4299      	cmp	r1, r3
 8006572:	d002      	beq.n	800657a <__swsetup_r+0x66>
 8006574:	4630      	mov	r0, r6
 8006576:	f7ff fb25 	bl	8005bc4 <_free_r>
 800657a:	2300      	movs	r3, #0
 800657c:	6363      	str	r3, [r4, #52]	; 0x34
 800657e:	89a3      	ldrh	r3, [r4, #12]
 8006580:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006584:	81a3      	strh	r3, [r4, #12]
 8006586:	2300      	movs	r3, #0
 8006588:	6063      	str	r3, [r4, #4]
 800658a:	6923      	ldr	r3, [r4, #16]
 800658c:	6023      	str	r3, [r4, #0]
 800658e:	89a3      	ldrh	r3, [r4, #12]
 8006590:	f043 0308 	orr.w	r3, r3, #8
 8006594:	81a3      	strh	r3, [r4, #12]
 8006596:	6923      	ldr	r3, [r4, #16]
 8006598:	b94b      	cbnz	r3, 80065ae <__swsetup_r+0x9a>
 800659a:	89a3      	ldrh	r3, [r4, #12]
 800659c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80065a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065a4:	d003      	beq.n	80065ae <__swsetup_r+0x9a>
 80065a6:	4621      	mov	r1, r4
 80065a8:	4630      	mov	r0, r6
 80065aa:	f000 fa09 	bl	80069c0 <__smakebuf_r>
 80065ae:	89a0      	ldrh	r0, [r4, #12]
 80065b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065b4:	f010 0301 	ands.w	r3, r0, #1
 80065b8:	d00a      	beq.n	80065d0 <__swsetup_r+0xbc>
 80065ba:	2300      	movs	r3, #0
 80065bc:	60a3      	str	r3, [r4, #8]
 80065be:	6963      	ldr	r3, [r4, #20]
 80065c0:	425b      	negs	r3, r3
 80065c2:	61a3      	str	r3, [r4, #24]
 80065c4:	6923      	ldr	r3, [r4, #16]
 80065c6:	b943      	cbnz	r3, 80065da <__swsetup_r+0xc6>
 80065c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80065cc:	d1ba      	bne.n	8006544 <__swsetup_r+0x30>
 80065ce:	bd70      	pop	{r4, r5, r6, pc}
 80065d0:	0781      	lsls	r1, r0, #30
 80065d2:	bf58      	it	pl
 80065d4:	6963      	ldrpl	r3, [r4, #20]
 80065d6:	60a3      	str	r3, [r4, #8]
 80065d8:	e7f4      	b.n	80065c4 <__swsetup_r+0xb0>
 80065da:	2000      	movs	r0, #0
 80065dc:	e7f7      	b.n	80065ce <__swsetup_r+0xba>
 80065de:	bf00      	nop
 80065e0:	20000000 	.word	0x20000000
 80065e4:	080070bc 	.word	0x080070bc
 80065e8:	080070dc 	.word	0x080070dc
 80065ec:	0800709c 	.word	0x0800709c

080065f0 <abort>:
 80065f0:	b508      	push	{r3, lr}
 80065f2:	2006      	movs	r0, #6
 80065f4:	f000 fa54 	bl	8006aa0 <raise>
 80065f8:	2001      	movs	r0, #1
 80065fa:	f7fa fcfb 	bl	8000ff4 <_exit>
	...

08006600 <__sflush_r>:
 8006600:	898a      	ldrh	r2, [r1, #12]
 8006602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006606:	4605      	mov	r5, r0
 8006608:	0710      	lsls	r0, r2, #28
 800660a:	460c      	mov	r4, r1
 800660c:	d458      	bmi.n	80066c0 <__sflush_r+0xc0>
 800660e:	684b      	ldr	r3, [r1, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	dc05      	bgt.n	8006620 <__sflush_r+0x20>
 8006614:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006616:	2b00      	cmp	r3, #0
 8006618:	dc02      	bgt.n	8006620 <__sflush_r+0x20>
 800661a:	2000      	movs	r0, #0
 800661c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006620:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006622:	2e00      	cmp	r6, #0
 8006624:	d0f9      	beq.n	800661a <__sflush_r+0x1a>
 8006626:	2300      	movs	r3, #0
 8006628:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800662c:	682f      	ldr	r7, [r5, #0]
 800662e:	602b      	str	r3, [r5, #0]
 8006630:	d032      	beq.n	8006698 <__sflush_r+0x98>
 8006632:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	075a      	lsls	r2, r3, #29
 8006638:	d505      	bpl.n	8006646 <__sflush_r+0x46>
 800663a:	6863      	ldr	r3, [r4, #4]
 800663c:	1ac0      	subs	r0, r0, r3
 800663e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006640:	b10b      	cbz	r3, 8006646 <__sflush_r+0x46>
 8006642:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006644:	1ac0      	subs	r0, r0, r3
 8006646:	2300      	movs	r3, #0
 8006648:	4602      	mov	r2, r0
 800664a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800664c:	6a21      	ldr	r1, [r4, #32]
 800664e:	4628      	mov	r0, r5
 8006650:	47b0      	blx	r6
 8006652:	1c43      	adds	r3, r0, #1
 8006654:	89a3      	ldrh	r3, [r4, #12]
 8006656:	d106      	bne.n	8006666 <__sflush_r+0x66>
 8006658:	6829      	ldr	r1, [r5, #0]
 800665a:	291d      	cmp	r1, #29
 800665c:	d82c      	bhi.n	80066b8 <__sflush_r+0xb8>
 800665e:	4a2a      	ldr	r2, [pc, #168]	; (8006708 <__sflush_r+0x108>)
 8006660:	40ca      	lsrs	r2, r1
 8006662:	07d6      	lsls	r6, r2, #31
 8006664:	d528      	bpl.n	80066b8 <__sflush_r+0xb8>
 8006666:	2200      	movs	r2, #0
 8006668:	6062      	str	r2, [r4, #4]
 800666a:	04d9      	lsls	r1, r3, #19
 800666c:	6922      	ldr	r2, [r4, #16]
 800666e:	6022      	str	r2, [r4, #0]
 8006670:	d504      	bpl.n	800667c <__sflush_r+0x7c>
 8006672:	1c42      	adds	r2, r0, #1
 8006674:	d101      	bne.n	800667a <__sflush_r+0x7a>
 8006676:	682b      	ldr	r3, [r5, #0]
 8006678:	b903      	cbnz	r3, 800667c <__sflush_r+0x7c>
 800667a:	6560      	str	r0, [r4, #84]	; 0x54
 800667c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800667e:	602f      	str	r7, [r5, #0]
 8006680:	2900      	cmp	r1, #0
 8006682:	d0ca      	beq.n	800661a <__sflush_r+0x1a>
 8006684:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006688:	4299      	cmp	r1, r3
 800668a:	d002      	beq.n	8006692 <__sflush_r+0x92>
 800668c:	4628      	mov	r0, r5
 800668e:	f7ff fa99 	bl	8005bc4 <_free_r>
 8006692:	2000      	movs	r0, #0
 8006694:	6360      	str	r0, [r4, #52]	; 0x34
 8006696:	e7c1      	b.n	800661c <__sflush_r+0x1c>
 8006698:	6a21      	ldr	r1, [r4, #32]
 800669a:	2301      	movs	r3, #1
 800669c:	4628      	mov	r0, r5
 800669e:	47b0      	blx	r6
 80066a0:	1c41      	adds	r1, r0, #1
 80066a2:	d1c7      	bne.n	8006634 <__sflush_r+0x34>
 80066a4:	682b      	ldr	r3, [r5, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d0c4      	beq.n	8006634 <__sflush_r+0x34>
 80066aa:	2b1d      	cmp	r3, #29
 80066ac:	d001      	beq.n	80066b2 <__sflush_r+0xb2>
 80066ae:	2b16      	cmp	r3, #22
 80066b0:	d101      	bne.n	80066b6 <__sflush_r+0xb6>
 80066b2:	602f      	str	r7, [r5, #0]
 80066b4:	e7b1      	b.n	800661a <__sflush_r+0x1a>
 80066b6:	89a3      	ldrh	r3, [r4, #12]
 80066b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066bc:	81a3      	strh	r3, [r4, #12]
 80066be:	e7ad      	b.n	800661c <__sflush_r+0x1c>
 80066c0:	690f      	ldr	r7, [r1, #16]
 80066c2:	2f00      	cmp	r7, #0
 80066c4:	d0a9      	beq.n	800661a <__sflush_r+0x1a>
 80066c6:	0793      	lsls	r3, r2, #30
 80066c8:	680e      	ldr	r6, [r1, #0]
 80066ca:	bf08      	it	eq
 80066cc:	694b      	ldreq	r3, [r1, #20]
 80066ce:	600f      	str	r7, [r1, #0]
 80066d0:	bf18      	it	ne
 80066d2:	2300      	movne	r3, #0
 80066d4:	eba6 0807 	sub.w	r8, r6, r7
 80066d8:	608b      	str	r3, [r1, #8]
 80066da:	f1b8 0f00 	cmp.w	r8, #0
 80066de:	dd9c      	ble.n	800661a <__sflush_r+0x1a>
 80066e0:	6a21      	ldr	r1, [r4, #32]
 80066e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80066e4:	4643      	mov	r3, r8
 80066e6:	463a      	mov	r2, r7
 80066e8:	4628      	mov	r0, r5
 80066ea:	47b0      	blx	r6
 80066ec:	2800      	cmp	r0, #0
 80066ee:	dc06      	bgt.n	80066fe <__sflush_r+0xfe>
 80066f0:	89a3      	ldrh	r3, [r4, #12]
 80066f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066f6:	81a3      	strh	r3, [r4, #12]
 80066f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066fc:	e78e      	b.n	800661c <__sflush_r+0x1c>
 80066fe:	4407      	add	r7, r0
 8006700:	eba8 0800 	sub.w	r8, r8, r0
 8006704:	e7e9      	b.n	80066da <__sflush_r+0xda>
 8006706:	bf00      	nop
 8006708:	20400001 	.word	0x20400001

0800670c <_fflush_r>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	690b      	ldr	r3, [r1, #16]
 8006710:	4605      	mov	r5, r0
 8006712:	460c      	mov	r4, r1
 8006714:	b913      	cbnz	r3, 800671c <_fflush_r+0x10>
 8006716:	2500      	movs	r5, #0
 8006718:	4628      	mov	r0, r5
 800671a:	bd38      	pop	{r3, r4, r5, pc}
 800671c:	b118      	cbz	r0, 8006726 <_fflush_r+0x1a>
 800671e:	6983      	ldr	r3, [r0, #24]
 8006720:	b90b      	cbnz	r3, 8006726 <_fflush_r+0x1a>
 8006722:	f000 f887 	bl	8006834 <__sinit>
 8006726:	4b14      	ldr	r3, [pc, #80]	; (8006778 <_fflush_r+0x6c>)
 8006728:	429c      	cmp	r4, r3
 800672a:	d11b      	bne.n	8006764 <_fflush_r+0x58>
 800672c:	686c      	ldr	r4, [r5, #4]
 800672e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0ef      	beq.n	8006716 <_fflush_r+0xa>
 8006736:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006738:	07d0      	lsls	r0, r2, #31
 800673a:	d404      	bmi.n	8006746 <_fflush_r+0x3a>
 800673c:	0599      	lsls	r1, r3, #22
 800673e:	d402      	bmi.n	8006746 <_fflush_r+0x3a>
 8006740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006742:	f000 f915 	bl	8006970 <__retarget_lock_acquire_recursive>
 8006746:	4628      	mov	r0, r5
 8006748:	4621      	mov	r1, r4
 800674a:	f7ff ff59 	bl	8006600 <__sflush_r>
 800674e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006750:	07da      	lsls	r2, r3, #31
 8006752:	4605      	mov	r5, r0
 8006754:	d4e0      	bmi.n	8006718 <_fflush_r+0xc>
 8006756:	89a3      	ldrh	r3, [r4, #12]
 8006758:	059b      	lsls	r3, r3, #22
 800675a:	d4dd      	bmi.n	8006718 <_fflush_r+0xc>
 800675c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800675e:	f000 f908 	bl	8006972 <__retarget_lock_release_recursive>
 8006762:	e7d9      	b.n	8006718 <_fflush_r+0xc>
 8006764:	4b05      	ldr	r3, [pc, #20]	; (800677c <_fflush_r+0x70>)
 8006766:	429c      	cmp	r4, r3
 8006768:	d101      	bne.n	800676e <_fflush_r+0x62>
 800676a:	68ac      	ldr	r4, [r5, #8]
 800676c:	e7df      	b.n	800672e <_fflush_r+0x22>
 800676e:	4b04      	ldr	r3, [pc, #16]	; (8006780 <_fflush_r+0x74>)
 8006770:	429c      	cmp	r4, r3
 8006772:	bf08      	it	eq
 8006774:	68ec      	ldreq	r4, [r5, #12]
 8006776:	e7da      	b.n	800672e <_fflush_r+0x22>
 8006778:	080070bc 	.word	0x080070bc
 800677c:	080070dc 	.word	0x080070dc
 8006780:	0800709c 	.word	0x0800709c

08006784 <std>:
 8006784:	2300      	movs	r3, #0
 8006786:	b510      	push	{r4, lr}
 8006788:	4604      	mov	r4, r0
 800678a:	e9c0 3300 	strd	r3, r3, [r0]
 800678e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006792:	6083      	str	r3, [r0, #8]
 8006794:	8181      	strh	r1, [r0, #12]
 8006796:	6643      	str	r3, [r0, #100]	; 0x64
 8006798:	81c2      	strh	r2, [r0, #14]
 800679a:	6183      	str	r3, [r0, #24]
 800679c:	4619      	mov	r1, r3
 800679e:	2208      	movs	r2, #8
 80067a0:	305c      	adds	r0, #92	; 0x5c
 80067a2:	f7fb fdcb 	bl	800233c <memset>
 80067a6:	4b05      	ldr	r3, [pc, #20]	; (80067bc <std+0x38>)
 80067a8:	6263      	str	r3, [r4, #36]	; 0x24
 80067aa:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <std+0x3c>)
 80067ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80067ae:	4b05      	ldr	r3, [pc, #20]	; (80067c4 <std+0x40>)
 80067b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80067b2:	4b05      	ldr	r3, [pc, #20]	; (80067c8 <std+0x44>)
 80067b4:	6224      	str	r4, [r4, #32]
 80067b6:	6323      	str	r3, [r4, #48]	; 0x30
 80067b8:	bd10      	pop	{r4, pc}
 80067ba:	bf00      	nop
 80067bc:	08006ad9 	.word	0x08006ad9
 80067c0:	08006afb 	.word	0x08006afb
 80067c4:	08006b33 	.word	0x08006b33
 80067c8:	08006b57 	.word	0x08006b57

080067cc <_cleanup_r>:
 80067cc:	4901      	ldr	r1, [pc, #4]	; (80067d4 <_cleanup_r+0x8>)
 80067ce:	f000 b8af 	b.w	8006930 <_fwalk_reent>
 80067d2:	bf00      	nop
 80067d4:	0800670d 	.word	0x0800670d

080067d8 <__sfmoreglue>:
 80067d8:	b570      	push	{r4, r5, r6, lr}
 80067da:	2268      	movs	r2, #104	; 0x68
 80067dc:	1e4d      	subs	r5, r1, #1
 80067de:	4355      	muls	r5, r2
 80067e0:	460e      	mov	r6, r1
 80067e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80067e6:	f7ff fa59 	bl	8005c9c <_malloc_r>
 80067ea:	4604      	mov	r4, r0
 80067ec:	b140      	cbz	r0, 8006800 <__sfmoreglue+0x28>
 80067ee:	2100      	movs	r1, #0
 80067f0:	e9c0 1600 	strd	r1, r6, [r0]
 80067f4:	300c      	adds	r0, #12
 80067f6:	60a0      	str	r0, [r4, #8]
 80067f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80067fc:	f7fb fd9e 	bl	800233c <memset>
 8006800:	4620      	mov	r0, r4
 8006802:	bd70      	pop	{r4, r5, r6, pc}

08006804 <__sfp_lock_acquire>:
 8006804:	4801      	ldr	r0, [pc, #4]	; (800680c <__sfp_lock_acquire+0x8>)
 8006806:	f000 b8b3 	b.w	8006970 <__retarget_lock_acquire_recursive>
 800680a:	bf00      	nop
 800680c:	20000331 	.word	0x20000331

08006810 <__sfp_lock_release>:
 8006810:	4801      	ldr	r0, [pc, #4]	; (8006818 <__sfp_lock_release+0x8>)
 8006812:	f000 b8ae 	b.w	8006972 <__retarget_lock_release_recursive>
 8006816:	bf00      	nop
 8006818:	20000331 	.word	0x20000331

0800681c <__sinit_lock_acquire>:
 800681c:	4801      	ldr	r0, [pc, #4]	; (8006824 <__sinit_lock_acquire+0x8>)
 800681e:	f000 b8a7 	b.w	8006970 <__retarget_lock_acquire_recursive>
 8006822:	bf00      	nop
 8006824:	20000332 	.word	0x20000332

08006828 <__sinit_lock_release>:
 8006828:	4801      	ldr	r0, [pc, #4]	; (8006830 <__sinit_lock_release+0x8>)
 800682a:	f000 b8a2 	b.w	8006972 <__retarget_lock_release_recursive>
 800682e:	bf00      	nop
 8006830:	20000332 	.word	0x20000332

08006834 <__sinit>:
 8006834:	b510      	push	{r4, lr}
 8006836:	4604      	mov	r4, r0
 8006838:	f7ff fff0 	bl	800681c <__sinit_lock_acquire>
 800683c:	69a3      	ldr	r3, [r4, #24]
 800683e:	b11b      	cbz	r3, 8006848 <__sinit+0x14>
 8006840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006844:	f7ff bff0 	b.w	8006828 <__sinit_lock_release>
 8006848:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800684c:	6523      	str	r3, [r4, #80]	; 0x50
 800684e:	4b13      	ldr	r3, [pc, #76]	; (800689c <__sinit+0x68>)
 8006850:	4a13      	ldr	r2, [pc, #76]	; (80068a0 <__sinit+0x6c>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	62a2      	str	r2, [r4, #40]	; 0x28
 8006856:	42a3      	cmp	r3, r4
 8006858:	bf04      	itt	eq
 800685a:	2301      	moveq	r3, #1
 800685c:	61a3      	streq	r3, [r4, #24]
 800685e:	4620      	mov	r0, r4
 8006860:	f000 f820 	bl	80068a4 <__sfp>
 8006864:	6060      	str	r0, [r4, #4]
 8006866:	4620      	mov	r0, r4
 8006868:	f000 f81c 	bl	80068a4 <__sfp>
 800686c:	60a0      	str	r0, [r4, #8]
 800686e:	4620      	mov	r0, r4
 8006870:	f000 f818 	bl	80068a4 <__sfp>
 8006874:	2200      	movs	r2, #0
 8006876:	60e0      	str	r0, [r4, #12]
 8006878:	2104      	movs	r1, #4
 800687a:	6860      	ldr	r0, [r4, #4]
 800687c:	f7ff ff82 	bl	8006784 <std>
 8006880:	68a0      	ldr	r0, [r4, #8]
 8006882:	2201      	movs	r2, #1
 8006884:	2109      	movs	r1, #9
 8006886:	f7ff ff7d 	bl	8006784 <std>
 800688a:	68e0      	ldr	r0, [r4, #12]
 800688c:	2202      	movs	r2, #2
 800688e:	2112      	movs	r1, #18
 8006890:	f7ff ff78 	bl	8006784 <std>
 8006894:	2301      	movs	r3, #1
 8006896:	61a3      	str	r3, [r4, #24]
 8006898:	e7d2      	b.n	8006840 <__sinit+0xc>
 800689a:	bf00      	nop
 800689c:	08006c54 	.word	0x08006c54
 80068a0:	080067cd 	.word	0x080067cd

080068a4 <__sfp>:
 80068a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a6:	4607      	mov	r7, r0
 80068a8:	f7ff ffac 	bl	8006804 <__sfp_lock_acquire>
 80068ac:	4b1e      	ldr	r3, [pc, #120]	; (8006928 <__sfp+0x84>)
 80068ae:	681e      	ldr	r6, [r3, #0]
 80068b0:	69b3      	ldr	r3, [r6, #24]
 80068b2:	b913      	cbnz	r3, 80068ba <__sfp+0x16>
 80068b4:	4630      	mov	r0, r6
 80068b6:	f7ff ffbd 	bl	8006834 <__sinit>
 80068ba:	3648      	adds	r6, #72	; 0x48
 80068bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80068c0:	3b01      	subs	r3, #1
 80068c2:	d503      	bpl.n	80068cc <__sfp+0x28>
 80068c4:	6833      	ldr	r3, [r6, #0]
 80068c6:	b30b      	cbz	r3, 800690c <__sfp+0x68>
 80068c8:	6836      	ldr	r6, [r6, #0]
 80068ca:	e7f7      	b.n	80068bc <__sfp+0x18>
 80068cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80068d0:	b9d5      	cbnz	r5, 8006908 <__sfp+0x64>
 80068d2:	4b16      	ldr	r3, [pc, #88]	; (800692c <__sfp+0x88>)
 80068d4:	60e3      	str	r3, [r4, #12]
 80068d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80068da:	6665      	str	r5, [r4, #100]	; 0x64
 80068dc:	f000 f847 	bl	800696e <__retarget_lock_init_recursive>
 80068e0:	f7ff ff96 	bl	8006810 <__sfp_lock_release>
 80068e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80068e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80068ec:	6025      	str	r5, [r4, #0]
 80068ee:	61a5      	str	r5, [r4, #24]
 80068f0:	2208      	movs	r2, #8
 80068f2:	4629      	mov	r1, r5
 80068f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80068f8:	f7fb fd20 	bl	800233c <memset>
 80068fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006900:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006904:	4620      	mov	r0, r4
 8006906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006908:	3468      	adds	r4, #104	; 0x68
 800690a:	e7d9      	b.n	80068c0 <__sfp+0x1c>
 800690c:	2104      	movs	r1, #4
 800690e:	4638      	mov	r0, r7
 8006910:	f7ff ff62 	bl	80067d8 <__sfmoreglue>
 8006914:	4604      	mov	r4, r0
 8006916:	6030      	str	r0, [r6, #0]
 8006918:	2800      	cmp	r0, #0
 800691a:	d1d5      	bne.n	80068c8 <__sfp+0x24>
 800691c:	f7ff ff78 	bl	8006810 <__sfp_lock_release>
 8006920:	230c      	movs	r3, #12
 8006922:	603b      	str	r3, [r7, #0]
 8006924:	e7ee      	b.n	8006904 <__sfp+0x60>
 8006926:	bf00      	nop
 8006928:	08006c54 	.word	0x08006c54
 800692c:	ffff0001 	.word	0xffff0001

08006930 <_fwalk_reent>:
 8006930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006934:	4606      	mov	r6, r0
 8006936:	4688      	mov	r8, r1
 8006938:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800693c:	2700      	movs	r7, #0
 800693e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006942:	f1b9 0901 	subs.w	r9, r9, #1
 8006946:	d505      	bpl.n	8006954 <_fwalk_reent+0x24>
 8006948:	6824      	ldr	r4, [r4, #0]
 800694a:	2c00      	cmp	r4, #0
 800694c:	d1f7      	bne.n	800693e <_fwalk_reent+0xe>
 800694e:	4638      	mov	r0, r7
 8006950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006954:	89ab      	ldrh	r3, [r5, #12]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d907      	bls.n	800696a <_fwalk_reent+0x3a>
 800695a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800695e:	3301      	adds	r3, #1
 8006960:	d003      	beq.n	800696a <_fwalk_reent+0x3a>
 8006962:	4629      	mov	r1, r5
 8006964:	4630      	mov	r0, r6
 8006966:	47c0      	blx	r8
 8006968:	4307      	orrs	r7, r0
 800696a:	3568      	adds	r5, #104	; 0x68
 800696c:	e7e9      	b.n	8006942 <_fwalk_reent+0x12>

0800696e <__retarget_lock_init_recursive>:
 800696e:	4770      	bx	lr

08006970 <__retarget_lock_acquire_recursive>:
 8006970:	4770      	bx	lr

08006972 <__retarget_lock_release_recursive>:
 8006972:	4770      	bx	lr

08006974 <__swhatbuf_r>:
 8006974:	b570      	push	{r4, r5, r6, lr}
 8006976:	460e      	mov	r6, r1
 8006978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800697c:	2900      	cmp	r1, #0
 800697e:	b096      	sub	sp, #88	; 0x58
 8006980:	4614      	mov	r4, r2
 8006982:	461d      	mov	r5, r3
 8006984:	da08      	bge.n	8006998 <__swhatbuf_r+0x24>
 8006986:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	602a      	str	r2, [r5, #0]
 800698e:	061a      	lsls	r2, r3, #24
 8006990:	d410      	bmi.n	80069b4 <__swhatbuf_r+0x40>
 8006992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006996:	e00e      	b.n	80069b6 <__swhatbuf_r+0x42>
 8006998:	466a      	mov	r2, sp
 800699a:	f000 f903 	bl	8006ba4 <_fstat_r>
 800699e:	2800      	cmp	r0, #0
 80069a0:	dbf1      	blt.n	8006986 <__swhatbuf_r+0x12>
 80069a2:	9a01      	ldr	r2, [sp, #4]
 80069a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80069a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80069ac:	425a      	negs	r2, r3
 80069ae:	415a      	adcs	r2, r3
 80069b0:	602a      	str	r2, [r5, #0]
 80069b2:	e7ee      	b.n	8006992 <__swhatbuf_r+0x1e>
 80069b4:	2340      	movs	r3, #64	; 0x40
 80069b6:	2000      	movs	r0, #0
 80069b8:	6023      	str	r3, [r4, #0]
 80069ba:	b016      	add	sp, #88	; 0x58
 80069bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080069c0 <__smakebuf_r>:
 80069c0:	898b      	ldrh	r3, [r1, #12]
 80069c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069c4:	079d      	lsls	r5, r3, #30
 80069c6:	4606      	mov	r6, r0
 80069c8:	460c      	mov	r4, r1
 80069ca:	d507      	bpl.n	80069dc <__smakebuf_r+0x1c>
 80069cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80069d0:	6023      	str	r3, [r4, #0]
 80069d2:	6123      	str	r3, [r4, #16]
 80069d4:	2301      	movs	r3, #1
 80069d6:	6163      	str	r3, [r4, #20]
 80069d8:	b002      	add	sp, #8
 80069da:	bd70      	pop	{r4, r5, r6, pc}
 80069dc:	ab01      	add	r3, sp, #4
 80069de:	466a      	mov	r2, sp
 80069e0:	f7ff ffc8 	bl	8006974 <__swhatbuf_r>
 80069e4:	9900      	ldr	r1, [sp, #0]
 80069e6:	4605      	mov	r5, r0
 80069e8:	4630      	mov	r0, r6
 80069ea:	f7ff f957 	bl	8005c9c <_malloc_r>
 80069ee:	b948      	cbnz	r0, 8006a04 <__smakebuf_r+0x44>
 80069f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069f4:	059a      	lsls	r2, r3, #22
 80069f6:	d4ef      	bmi.n	80069d8 <__smakebuf_r+0x18>
 80069f8:	f023 0303 	bic.w	r3, r3, #3
 80069fc:	f043 0302 	orr.w	r3, r3, #2
 8006a00:	81a3      	strh	r3, [r4, #12]
 8006a02:	e7e3      	b.n	80069cc <__smakebuf_r+0xc>
 8006a04:	4b0d      	ldr	r3, [pc, #52]	; (8006a3c <__smakebuf_r+0x7c>)
 8006a06:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a08:	89a3      	ldrh	r3, [r4, #12]
 8006a0a:	6020      	str	r0, [r4, #0]
 8006a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a10:	81a3      	strh	r3, [r4, #12]
 8006a12:	9b00      	ldr	r3, [sp, #0]
 8006a14:	6163      	str	r3, [r4, #20]
 8006a16:	9b01      	ldr	r3, [sp, #4]
 8006a18:	6120      	str	r0, [r4, #16]
 8006a1a:	b15b      	cbz	r3, 8006a34 <__smakebuf_r+0x74>
 8006a1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a20:	4630      	mov	r0, r6
 8006a22:	f000 f8d1 	bl	8006bc8 <_isatty_r>
 8006a26:	b128      	cbz	r0, 8006a34 <__smakebuf_r+0x74>
 8006a28:	89a3      	ldrh	r3, [r4, #12]
 8006a2a:	f023 0303 	bic.w	r3, r3, #3
 8006a2e:	f043 0301 	orr.w	r3, r3, #1
 8006a32:	81a3      	strh	r3, [r4, #12]
 8006a34:	89a0      	ldrh	r0, [r4, #12]
 8006a36:	4305      	orrs	r5, r0
 8006a38:	81a5      	strh	r5, [r4, #12]
 8006a3a:	e7cd      	b.n	80069d8 <__smakebuf_r+0x18>
 8006a3c:	080067cd 	.word	0x080067cd

08006a40 <_malloc_usable_size_r>:
 8006a40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a44:	1f18      	subs	r0, r3, #4
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	bfbc      	itt	lt
 8006a4a:	580b      	ldrlt	r3, [r1, r0]
 8006a4c:	18c0      	addlt	r0, r0, r3
 8006a4e:	4770      	bx	lr

08006a50 <_raise_r>:
 8006a50:	291f      	cmp	r1, #31
 8006a52:	b538      	push	{r3, r4, r5, lr}
 8006a54:	4604      	mov	r4, r0
 8006a56:	460d      	mov	r5, r1
 8006a58:	d904      	bls.n	8006a64 <_raise_r+0x14>
 8006a5a:	2316      	movs	r3, #22
 8006a5c:	6003      	str	r3, [r0, #0]
 8006a5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a62:	bd38      	pop	{r3, r4, r5, pc}
 8006a64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006a66:	b112      	cbz	r2, 8006a6e <_raise_r+0x1e>
 8006a68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a6c:	b94b      	cbnz	r3, 8006a82 <_raise_r+0x32>
 8006a6e:	4620      	mov	r0, r4
 8006a70:	f000 f830 	bl	8006ad4 <_getpid_r>
 8006a74:	462a      	mov	r2, r5
 8006a76:	4601      	mov	r1, r0
 8006a78:	4620      	mov	r0, r4
 8006a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a7e:	f000 b817 	b.w	8006ab0 <_kill_r>
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d00a      	beq.n	8006a9c <_raise_r+0x4c>
 8006a86:	1c59      	adds	r1, r3, #1
 8006a88:	d103      	bne.n	8006a92 <_raise_r+0x42>
 8006a8a:	2316      	movs	r3, #22
 8006a8c:	6003      	str	r3, [r0, #0]
 8006a8e:	2001      	movs	r0, #1
 8006a90:	e7e7      	b.n	8006a62 <_raise_r+0x12>
 8006a92:	2400      	movs	r4, #0
 8006a94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006a98:	4628      	mov	r0, r5
 8006a9a:	4798      	blx	r3
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	e7e0      	b.n	8006a62 <_raise_r+0x12>

08006aa0 <raise>:
 8006aa0:	4b02      	ldr	r3, [pc, #8]	; (8006aac <raise+0xc>)
 8006aa2:	4601      	mov	r1, r0
 8006aa4:	6818      	ldr	r0, [r3, #0]
 8006aa6:	f7ff bfd3 	b.w	8006a50 <_raise_r>
 8006aaa:	bf00      	nop
 8006aac:	20000000 	.word	0x20000000

08006ab0 <_kill_r>:
 8006ab0:	b538      	push	{r3, r4, r5, lr}
 8006ab2:	4d07      	ldr	r5, [pc, #28]	; (8006ad0 <_kill_r+0x20>)
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	4608      	mov	r0, r1
 8006aba:	4611      	mov	r1, r2
 8006abc:	602b      	str	r3, [r5, #0]
 8006abe:	f7fa fa89 	bl	8000fd4 <_kill>
 8006ac2:	1c43      	adds	r3, r0, #1
 8006ac4:	d102      	bne.n	8006acc <_kill_r+0x1c>
 8006ac6:	682b      	ldr	r3, [r5, #0]
 8006ac8:	b103      	cbz	r3, 8006acc <_kill_r+0x1c>
 8006aca:	6023      	str	r3, [r4, #0]
 8006acc:	bd38      	pop	{r3, r4, r5, pc}
 8006ace:	bf00      	nop
 8006ad0:	2000032c 	.word	0x2000032c

08006ad4 <_getpid_r>:
 8006ad4:	f7fa ba76 	b.w	8000fc4 <_getpid>

08006ad8 <__sread>:
 8006ad8:	b510      	push	{r4, lr}
 8006ada:	460c      	mov	r4, r1
 8006adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ae0:	f000 f894 	bl	8006c0c <_read_r>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	bfab      	itete	ge
 8006ae8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006aea:	89a3      	ldrhlt	r3, [r4, #12]
 8006aec:	181b      	addge	r3, r3, r0
 8006aee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006af2:	bfac      	ite	ge
 8006af4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006af6:	81a3      	strhlt	r3, [r4, #12]
 8006af8:	bd10      	pop	{r4, pc}

08006afa <__swrite>:
 8006afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006afe:	461f      	mov	r7, r3
 8006b00:	898b      	ldrh	r3, [r1, #12]
 8006b02:	05db      	lsls	r3, r3, #23
 8006b04:	4605      	mov	r5, r0
 8006b06:	460c      	mov	r4, r1
 8006b08:	4616      	mov	r6, r2
 8006b0a:	d505      	bpl.n	8006b18 <__swrite+0x1e>
 8006b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b10:	2302      	movs	r3, #2
 8006b12:	2200      	movs	r2, #0
 8006b14:	f000 f868 	bl	8006be8 <_lseek_r>
 8006b18:	89a3      	ldrh	r3, [r4, #12]
 8006b1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b22:	81a3      	strh	r3, [r4, #12]
 8006b24:	4632      	mov	r2, r6
 8006b26:	463b      	mov	r3, r7
 8006b28:	4628      	mov	r0, r5
 8006b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b2e:	f000 b817 	b.w	8006b60 <_write_r>

08006b32 <__sseek>:
 8006b32:	b510      	push	{r4, lr}
 8006b34:	460c      	mov	r4, r1
 8006b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b3a:	f000 f855 	bl	8006be8 <_lseek_r>
 8006b3e:	1c43      	adds	r3, r0, #1
 8006b40:	89a3      	ldrh	r3, [r4, #12]
 8006b42:	bf15      	itete	ne
 8006b44:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b4e:	81a3      	strheq	r3, [r4, #12]
 8006b50:	bf18      	it	ne
 8006b52:	81a3      	strhne	r3, [r4, #12]
 8006b54:	bd10      	pop	{r4, pc}

08006b56 <__sclose>:
 8006b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b5a:	f000 b813 	b.w	8006b84 <_close_r>
	...

08006b60 <_write_r>:
 8006b60:	b538      	push	{r3, r4, r5, lr}
 8006b62:	4d07      	ldr	r5, [pc, #28]	; (8006b80 <_write_r+0x20>)
 8006b64:	4604      	mov	r4, r0
 8006b66:	4608      	mov	r0, r1
 8006b68:	4611      	mov	r1, r2
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	602a      	str	r2, [r5, #0]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	f7fa fa67 	bl	8001042 <_write>
 8006b74:	1c43      	adds	r3, r0, #1
 8006b76:	d102      	bne.n	8006b7e <_write_r+0x1e>
 8006b78:	682b      	ldr	r3, [r5, #0]
 8006b7a:	b103      	cbz	r3, 8006b7e <_write_r+0x1e>
 8006b7c:	6023      	str	r3, [r4, #0]
 8006b7e:	bd38      	pop	{r3, r4, r5, pc}
 8006b80:	2000032c 	.word	0x2000032c

08006b84 <_close_r>:
 8006b84:	b538      	push	{r3, r4, r5, lr}
 8006b86:	4d06      	ldr	r5, [pc, #24]	; (8006ba0 <_close_r+0x1c>)
 8006b88:	2300      	movs	r3, #0
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	4608      	mov	r0, r1
 8006b8e:	602b      	str	r3, [r5, #0]
 8006b90:	f7fa fa73 	bl	800107a <_close>
 8006b94:	1c43      	adds	r3, r0, #1
 8006b96:	d102      	bne.n	8006b9e <_close_r+0x1a>
 8006b98:	682b      	ldr	r3, [r5, #0]
 8006b9a:	b103      	cbz	r3, 8006b9e <_close_r+0x1a>
 8006b9c:	6023      	str	r3, [r4, #0]
 8006b9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ba0:	2000032c 	.word	0x2000032c

08006ba4 <_fstat_r>:
 8006ba4:	b538      	push	{r3, r4, r5, lr}
 8006ba6:	4d07      	ldr	r5, [pc, #28]	; (8006bc4 <_fstat_r+0x20>)
 8006ba8:	2300      	movs	r3, #0
 8006baa:	4604      	mov	r4, r0
 8006bac:	4608      	mov	r0, r1
 8006bae:	4611      	mov	r1, r2
 8006bb0:	602b      	str	r3, [r5, #0]
 8006bb2:	f7fa fa6e 	bl	8001092 <_fstat>
 8006bb6:	1c43      	adds	r3, r0, #1
 8006bb8:	d102      	bne.n	8006bc0 <_fstat_r+0x1c>
 8006bba:	682b      	ldr	r3, [r5, #0]
 8006bbc:	b103      	cbz	r3, 8006bc0 <_fstat_r+0x1c>
 8006bbe:	6023      	str	r3, [r4, #0]
 8006bc0:	bd38      	pop	{r3, r4, r5, pc}
 8006bc2:	bf00      	nop
 8006bc4:	2000032c 	.word	0x2000032c

08006bc8 <_isatty_r>:
 8006bc8:	b538      	push	{r3, r4, r5, lr}
 8006bca:	4d06      	ldr	r5, [pc, #24]	; (8006be4 <_isatty_r+0x1c>)
 8006bcc:	2300      	movs	r3, #0
 8006bce:	4604      	mov	r4, r0
 8006bd0:	4608      	mov	r0, r1
 8006bd2:	602b      	str	r3, [r5, #0]
 8006bd4:	f7fa fa6d 	bl	80010b2 <_isatty>
 8006bd8:	1c43      	adds	r3, r0, #1
 8006bda:	d102      	bne.n	8006be2 <_isatty_r+0x1a>
 8006bdc:	682b      	ldr	r3, [r5, #0]
 8006bde:	b103      	cbz	r3, 8006be2 <_isatty_r+0x1a>
 8006be0:	6023      	str	r3, [r4, #0]
 8006be2:	bd38      	pop	{r3, r4, r5, pc}
 8006be4:	2000032c 	.word	0x2000032c

08006be8 <_lseek_r>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	4d07      	ldr	r5, [pc, #28]	; (8006c08 <_lseek_r+0x20>)
 8006bec:	4604      	mov	r4, r0
 8006bee:	4608      	mov	r0, r1
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	602a      	str	r2, [r5, #0]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	f7fa fa66 	bl	80010c8 <_lseek>
 8006bfc:	1c43      	adds	r3, r0, #1
 8006bfe:	d102      	bne.n	8006c06 <_lseek_r+0x1e>
 8006c00:	682b      	ldr	r3, [r5, #0]
 8006c02:	b103      	cbz	r3, 8006c06 <_lseek_r+0x1e>
 8006c04:	6023      	str	r3, [r4, #0]
 8006c06:	bd38      	pop	{r3, r4, r5, pc}
 8006c08:	2000032c 	.word	0x2000032c

08006c0c <_read_r>:
 8006c0c:	b538      	push	{r3, r4, r5, lr}
 8006c0e:	4d07      	ldr	r5, [pc, #28]	; (8006c2c <_read_r+0x20>)
 8006c10:	4604      	mov	r4, r0
 8006c12:	4608      	mov	r0, r1
 8006c14:	4611      	mov	r1, r2
 8006c16:	2200      	movs	r2, #0
 8006c18:	602a      	str	r2, [r5, #0]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	f7fa f9f4 	bl	8001008 <_read>
 8006c20:	1c43      	adds	r3, r0, #1
 8006c22:	d102      	bne.n	8006c2a <_read_r+0x1e>
 8006c24:	682b      	ldr	r3, [r5, #0]
 8006c26:	b103      	cbz	r3, 8006c2a <_read_r+0x1e>
 8006c28:	6023      	str	r3, [r4, #0]
 8006c2a:	bd38      	pop	{r3, r4, r5, pc}
 8006c2c:	2000032c 	.word	0x2000032c

08006c30 <_init>:
 8006c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c32:	bf00      	nop
 8006c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c36:	bc08      	pop	{r3}
 8006c38:	469e      	mov	lr, r3
 8006c3a:	4770      	bx	lr

08006c3c <_fini>:
 8006c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3e:	bf00      	nop
 8006c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c42:	bc08      	pop	{r3}
 8006c44:	469e      	mov	lr, r3
 8006c46:	4770      	bx	lr
