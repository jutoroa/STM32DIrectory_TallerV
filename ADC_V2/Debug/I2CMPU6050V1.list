
I2CMPU6050V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c94  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08001e34  08001e34  00011e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e9c  08001e9c  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08001e9c  08001e9c  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e9c  08001e9c  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e9c  08001e9c  00011e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ea0  08001ea0  00011ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08001ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200000a8  08001f48  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08001f48  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002d83  00000000  00000000  000200ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b50  00000000  00000000  00022e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000220  00000000  00000000  000239a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a8  00000000  00000000  00023bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fa49  00000000  00000000  00023d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000325b  00000000  00000000  000337b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055505  00000000  00000000  00036a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008bf19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a4c  00000000  00000000  0008bf6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a8 	.word	0x200000a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001e1c 	.word	0x08001e1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ac 	.word	0x200000ac
 80001dc:	08001e1c 	.word	0x08001e1c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:

void initSystem(void);

// *************** // MAIN // *************** //
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	// Inicializamos el sistema
	initSystem();
 8000286:	f000 f8ad 	bl	80003e4 <initSystem>

	/* Main Loop */
	while(1){

		// Hacemos un "eco" con el valor que nos llega por el serial
		if(rxData != '\0'){
 800028a:	4b4e      	ldr	r3, [pc, #312]	; (80003c4 <main+0x144>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d0fb      	beq.n	800028a <main+0xa>
			writeChar(&handlerCommTerminal, rxData);
 8000292:	4b4c      	ldr	r3, [pc, #304]	; (80003c4 <main+0x144>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	4619      	mov	r1, r3
 8000298:	484b      	ldr	r0, [pc, #300]	; (80003c8 <main+0x148>)
 800029a:	f001 f8f9 	bl	8001490 <writeChar>

			if(rxData == 'd'){
 800029e:	4b49      	ldr	r3, [pc, #292]	; (80003c4 <main+0x144>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b64      	cmp	r3, #100	; 0x64
 80002a4:	d116      	bne.n	80002d4 <main+0x54>
				i2cBuffer = I2C_readByte(&handlerAccelerometer, WHO_AM_I);
 80002a6:	2175      	movs	r1, #117	; 0x75
 80002a8:	4848      	ldr	r0, [pc, #288]	; (80003cc <main+0x14c>)
 80002aa:	f000 fbcf 	bl	8000a4c <I2C_readByte>
 80002ae:	4603      	mov	r3, r0
 80002b0:	461a      	mov	r2, r3
 80002b2:	4b47      	ldr	r3, [pc, #284]	; (80003d0 <main+0x150>)
 80002b4:	701a      	strb	r2, [r3, #0]
				sprintf(bufferData, "dataRead = 0x%2x \n", (unsigned int) i2cBuffer);
 80002b6:	4b46      	ldr	r3, [pc, #280]	; (80003d0 <main+0x150>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	461a      	mov	r2, r3
 80002bc:	4945      	ldr	r1, [pc, #276]	; (80003d4 <main+0x154>)
 80002be:	4846      	ldr	r0, [pc, #280]	; (80003d8 <main+0x158>)
 80002c0:	f001 f940 	bl	8001544 <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 80002c4:	4944      	ldr	r1, [pc, #272]	; (80003d8 <main+0x158>)
 80002c6:	4840      	ldr	r0, [pc, #256]	; (80003c8 <main+0x148>)
 80002c8:	f001 f8fa 	bl	80014c0 <writeMsg>
				rxData = '\0';
 80002cc:	4b3d      	ldr	r3, [pc, #244]	; (80003c4 <main+0x144>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	701a      	strb	r2, [r3, #0]
 80002d2:	e7da      	b.n	800028a <main+0xa>
			}
			else if(rxData == 'p'){
 80002d4:	4b3b      	ldr	r3, [pc, #236]	; (80003c4 <main+0x144>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	2b70      	cmp	r3, #112	; 0x70
 80002da:	d116      	bne.n	800030a <main+0x8a>
				i2cBuffer = I2C_readByte(&handlerAccelerometer, PWR_MGMT_1);
 80002dc:	216b      	movs	r1, #107	; 0x6b
 80002de:	483b      	ldr	r0, [pc, #236]	; (80003cc <main+0x14c>)
 80002e0:	f000 fbb4 	bl	8000a4c <I2C_readByte>
 80002e4:	4603      	mov	r3, r0
 80002e6:	461a      	mov	r2, r3
 80002e8:	4b39      	ldr	r3, [pc, #228]	; (80003d0 <main+0x150>)
 80002ea:	701a      	strb	r2, [r3, #0]
				sprintf(bufferData, "dataRead = 0x%2x \n", (unsigned int) i2cBuffer);
 80002ec:	4b38      	ldr	r3, [pc, #224]	; (80003d0 <main+0x150>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	461a      	mov	r2, r3
 80002f2:	4938      	ldr	r1, [pc, #224]	; (80003d4 <main+0x154>)
 80002f4:	4838      	ldr	r0, [pc, #224]	; (80003d8 <main+0x158>)
 80002f6:	f001 f925 	bl	8001544 <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 80002fa:	4937      	ldr	r1, [pc, #220]	; (80003d8 <main+0x158>)
 80002fc:	4832      	ldr	r0, [pc, #200]	; (80003c8 <main+0x148>)
 80002fe:	f001 f8df 	bl	80014c0 <writeMsg>
				rxData = '\0';
 8000302:	4b30      	ldr	r3, [pc, #192]	; (80003c4 <main+0x144>)
 8000304:	2200      	movs	r2, #0
 8000306:	701a      	strb	r2, [r3, #0]
 8000308:	e7bf      	b.n	800028a <main+0xa>
			}
			else if(rxData == 'r'){
 800030a:	4b2e      	ldr	r3, [pc, #184]	; (80003c4 <main+0x144>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b72      	cmp	r3, #114	; 0x72
 8000310:	d108      	bne.n	8000324 <main+0xa4>
				I2C_writeByte(&handlerAccelerometer, PWR_MGMT_1, 0x00);
 8000312:	2200      	movs	r2, #0
 8000314:	216b      	movs	r1, #107	; 0x6b
 8000316:	482d      	ldr	r0, [pc, #180]	; (80003cc <main+0x14c>)
 8000318:	f000 fc2e 	bl	8000b78 <I2C_writeByte>
				rxData = '\0';
 800031c:	4b29      	ldr	r3, [pc, #164]	; (80003c4 <main+0x144>)
 800031e:	2200      	movs	r2, #0
 8000320:	701a      	strb	r2, [r3, #0]
 8000322:	e7b2      	b.n	800028a <main+0xa>
			}
			else if(rxData == 'x'){
 8000324:	4b27      	ldr	r3, [pc, #156]	; (80003c4 <main+0x144>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b78      	cmp	r3, #120	; 0x78
 800032a:	d121      	bne.n	8000370 <main+0xf0>
				uint8_t AccelX_low = I2C_readByte(&handlerAccelerometer, ACCEL_XOUT_L);
 800032c:	213c      	movs	r1, #60	; 0x3c
 800032e:	4827      	ldr	r0, [pc, #156]	; (80003cc <main+0x14c>)
 8000330:	f000 fb8c 	bl	8000a4c <I2C_readByte>
 8000334:	4603      	mov	r3, r0
 8000336:	70fb      	strb	r3, [r7, #3]
				uint8_t AccelX_high = I2C_readByte(&handlerAccelerometer, ACCEL_XOUT_H);
 8000338:	213b      	movs	r1, #59	; 0x3b
 800033a:	4824      	ldr	r0, [pc, #144]	; (80003cc <main+0x14c>)
 800033c:	f000 fb86 	bl	8000a4c <I2C_readByte>
 8000340:	4603      	mov	r3, r0
 8000342:	70bb      	strb	r3, [r7, #2]
				uint16_t AccelX = (AccelX_high << 8) | AccelX_low;
 8000344:	78bb      	ldrb	r3, [r7, #2]
 8000346:	021b      	lsls	r3, r3, #8
 8000348:	b21a      	sxth	r2, r3
 800034a:	78fb      	ldrb	r3, [r7, #3]
 800034c:	b21b      	sxth	r3, r3
 800034e:	4313      	orrs	r3, r2
 8000350:	b21b      	sxth	r3, r3
 8000352:	803b      	strh	r3, [r7, #0]
				sprintf(bufferData, "AccelX = %d \n",(int) AccelX);
 8000354:	883b      	ldrh	r3, [r7, #0]
 8000356:	461a      	mov	r2, r3
 8000358:	4920      	ldr	r1, [pc, #128]	; (80003dc <main+0x15c>)
 800035a:	481f      	ldr	r0, [pc, #124]	; (80003d8 <main+0x158>)
 800035c:	f001 f8f2 	bl	8001544 <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 8000360:	491d      	ldr	r1, [pc, #116]	; (80003d8 <main+0x158>)
 8000362:	4819      	ldr	r0, [pc, #100]	; (80003c8 <main+0x148>)
 8000364:	f001 f8ac 	bl	80014c0 <writeMsg>
				rxData = '\0';
 8000368:	4b16      	ldr	r3, [pc, #88]	; (80003c4 <main+0x144>)
 800036a:	2200      	movs	r2, #0
 800036c:	701a      	strb	r2, [r3, #0]
 800036e:	e78c      	b.n	800028a <main+0xa>
			}
			else if(rxData == 'y'){
 8000370:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <main+0x144>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b79      	cmp	r3, #121	; 0x79
 8000376:	d121      	bne.n	80003bc <main+0x13c>
				uint8_t AccelY_low = I2C_readByte(&handlerAccelerometer, ACCEL_YOUT_L);
 8000378:	213e      	movs	r1, #62	; 0x3e
 800037a:	4814      	ldr	r0, [pc, #80]	; (80003cc <main+0x14c>)
 800037c:	f000 fb66 	bl	8000a4c <I2C_readByte>
 8000380:	4603      	mov	r3, r0
 8000382:	71fb      	strb	r3, [r7, #7]
				uint8_t AccelY_high = I2C_readByte(&handlerAccelerometer, ACCEL_YOUT_H);
 8000384:	213d      	movs	r1, #61	; 0x3d
 8000386:	4811      	ldr	r0, [pc, #68]	; (80003cc <main+0x14c>)
 8000388:	f000 fb60 	bl	8000a4c <I2C_readByte>
 800038c:	4603      	mov	r3, r0
 800038e:	71bb      	strb	r3, [r7, #6]
				uint16_t AccelY = AccelY_high << 8 | AccelY_low;
 8000390:	79bb      	ldrb	r3, [r7, #6]
 8000392:	021b      	lsls	r3, r3, #8
 8000394:	b21a      	sxth	r2, r3
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	b21b      	sxth	r3, r3
 800039a:	4313      	orrs	r3, r2
 800039c:	b21b      	sxth	r3, r3
 800039e:	80bb      	strh	r3, [r7, #4]
				sprintf(bufferData, "AccelY = %d \n",(int) AccelY);
 80003a0:	88bb      	ldrh	r3, [r7, #4]
 80003a2:	461a      	mov	r2, r3
 80003a4:	490e      	ldr	r1, [pc, #56]	; (80003e0 <main+0x160>)
 80003a6:	480c      	ldr	r0, [pc, #48]	; (80003d8 <main+0x158>)
 80003a8:	f001 f8cc 	bl	8001544 <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 80003ac:	490a      	ldr	r1, [pc, #40]	; (80003d8 <main+0x158>)
 80003ae:	4806      	ldr	r0, [pc, #24]	; (80003c8 <main+0x148>)
 80003b0:	f001 f886 	bl	80014c0 <writeMsg>
				rxData = '\0';
 80003b4:	4b03      	ldr	r3, [pc, #12]	; (80003c4 <main+0x144>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	701a      	strb	r2, [r3, #0]
 80003ba:	e766      	b.n	800028a <main+0xa>
			}
			else{
				rxData = '\0';
 80003bc:	4b01      	ldr	r3, [pc, #4]	; (80003c4 <main+0x144>)
 80003be:	2200      	movs	r2, #0
 80003c0:	701a      	strb	r2, [r3, #0]
		if(rxData != '\0'){
 80003c2:	e762      	b.n	800028a <main+0xa>
 80003c4:	200001a0 	.word	0x200001a0
 80003c8:	200000f4 	.word	0x200000f4
 80003cc:	20000198 	.word	0x20000198
 80003d0:	200001a1 	.word	0x200001a1
 80003d4:	08001e34 	.word	0x08001e34
 80003d8:	20000000 	.word	0x20000000
 80003dc:	08001e48 	.word	0x08001e48
 80003e0:	08001e58 	.word	0x08001e58

080003e4 <initSystem>:

//***********// InitSystem //***********//

// Función que define la configuración de todos los pines y periféricos

void initSystem(void){
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0

	// Configuración el State LED
	handlerStateLED.pGPIOx								= GPIOA;
 80003e8:	4b58      	ldr	r3, [pc, #352]	; (800054c <initSystem+0x168>)
 80003ea:	4a59      	ldr	r2, [pc, #356]	; (8000550 <initSystem+0x16c>)
 80003ec:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 80003ee:	4b57      	ldr	r3, [pc, #348]	; (800054c <initSystem+0x168>)
 80003f0:	2205      	movs	r2, #5
 80003f2:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 80003f4:	4b55      	ldr	r3, [pc, #340]	; (800054c <initSystem+0x168>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 80003fa:	4b54      	ldr	r3, [pc, #336]	; (800054c <initSystem+0x168>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000400:	4b52      	ldr	r3, [pc, #328]	; (800054c <initSystem+0x168>)
 8000402:	2200      	movs	r2, #0
 8000404:	71da      	strb	r2, [r3, #7]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_FAST;
 8000406:	4b51      	ldr	r3, [pc, #324]	; (800054c <initSystem+0x168>)
 8000408:	2202      	movs	r2, #2
 800040a:	719a      	strb	r2, [r3, #6]

	//Cargamos la configuración
	GPIO_Config(&handlerStateLED);
 800040c:	484f      	ldr	r0, [pc, #316]	; (800054c <initSystem+0x168>)
 800040e:	f000 f931 	bl	8000674 <GPIO_Config>

	// Prendemos el LED
	GPIO_WritePin(&handlerStateLED, SET);
 8000412:	2101      	movs	r1, #1
 8000414:	484d      	ldr	r0, [pc, #308]	; (800054c <initSystem+0x168>)
 8000416:	f000 fa55 	bl	80008c4 <GPIO_WritePin>

	/* Configurando los pines sobre los que funciona el USART */
	handlerPinTX.pGPIOx									= GPIOA;
 800041a:	4b4e      	ldr	r3, [pc, #312]	; (8000554 <initSystem+0x170>)
 800041c:	4a4c      	ldr	r2, [pc, #304]	; (8000550 <initSystem+0x16c>)
 800041e:	601a      	str	r2, [r3, #0]
	handlerPinTX.GPIO_PinConfig.GPIO_PinNumber			= PIN_2;
 8000420:	4b4c      	ldr	r3, [pc, #304]	; (8000554 <initSystem+0x170>)
 8000422:	2202      	movs	r2, #2
 8000424:	711a      	strb	r2, [r3, #4]
	handlerPinTX.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 8000426:	4b4b      	ldr	r3, [pc, #300]	; (8000554 <initSystem+0x170>)
 8000428:	2202      	movs	r2, #2
 800042a:	715a      	strb	r2, [r3, #5]
	handlerPinTX.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 800042c:	4b49      	ldr	r3, [pc, #292]	; (8000554 <initSystem+0x170>)
 800042e:	2200      	movs	r2, #0
 8000430:	721a      	strb	r2, [r3, #8]
	handlerPinTX.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 8000432:	4b48      	ldr	r3, [pc, #288]	; (8000554 <initSystem+0x170>)
 8000434:	2200      	movs	r2, #0
 8000436:	71da      	strb	r2, [r3, #7]
	handlerPinTX.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_FAST;
 8000438:	4b46      	ldr	r3, [pc, #280]	; (8000554 <initSystem+0x170>)
 800043a:	2202      	movs	r2, #2
 800043c:	719a      	strb	r2, [r3, #6]
	handlerPinTX.GPIO_PinConfig.GPIO_PinAltFunMode		= AF7;
 800043e:	4b45      	ldr	r3, [pc, #276]	; (8000554 <initSystem+0x170>)
 8000440:	2207      	movs	r2, #7
 8000442:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&handlerPinTX);
 8000444:	4843      	ldr	r0, [pc, #268]	; (8000554 <initSystem+0x170>)
 8000446:	f000 f915 	bl	8000674 <GPIO_Config>

	handlerPinRX.pGPIOx									= GPIOA;
 800044a:	4b43      	ldr	r3, [pc, #268]	; (8000558 <initSystem+0x174>)
 800044c:	4a40      	ldr	r2, [pc, #256]	; (8000550 <initSystem+0x16c>)
 800044e:	601a      	str	r2, [r3, #0]
	handlerPinRX.GPIO_PinConfig.GPIO_PinNumber			= PIN_3;
 8000450:	4b41      	ldr	r3, [pc, #260]	; (8000558 <initSystem+0x174>)
 8000452:	2203      	movs	r2, #3
 8000454:	711a      	strb	r2, [r3, #4]
	handlerPinRX.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 8000456:	4b40      	ldr	r3, [pc, #256]	; (8000558 <initSystem+0x174>)
 8000458:	2202      	movs	r2, #2
 800045a:	715a      	strb	r2, [r3, #5]
	handlerPinRX.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 800045c:	4b3e      	ldr	r3, [pc, #248]	; (8000558 <initSystem+0x174>)
 800045e:	2200      	movs	r2, #0
 8000460:	721a      	strb	r2, [r3, #8]
	handlerPinRX.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 8000462:	4b3d      	ldr	r3, [pc, #244]	; (8000558 <initSystem+0x174>)
 8000464:	2200      	movs	r2, #0
 8000466:	71da      	strb	r2, [r3, #7]
	handlerPinRX.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_FAST;
 8000468:	4b3b      	ldr	r3, [pc, #236]	; (8000558 <initSystem+0x174>)
 800046a:	2202      	movs	r2, #2
 800046c:	719a      	strb	r2, [r3, #6]
	handlerPinRX.GPIO_PinConfig.GPIO_PinAltFunMode		= AF7;
 800046e:	4b3a      	ldr	r3, [pc, #232]	; (8000558 <initSystem+0x174>)
 8000470:	2207      	movs	r2, #7
 8000472:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&handlerPinRX);
 8000474:	4838      	ldr	r0, [pc, #224]	; (8000558 <initSystem+0x174>)
 8000476:	f000 f8fd 	bl	8000674 <GPIO_Config>

	// Configuración del USART del USB para RX
	handlerCommTerminal.ptrUSARTx							= USART2;
 800047a:	4b38      	ldr	r3, [pc, #224]	; (800055c <initSystem+0x178>)
 800047c:	4a38      	ldr	r2, [pc, #224]	; (8000560 <initSystem+0x17c>)
 800047e:	601a      	str	r2, [r3, #0]
	handlerCommTerminal.USART_Config.USART_mode				= USART_MODE_RXTX;
 8000480:	4b36      	ldr	r3, [pc, #216]	; (800055c <initSystem+0x178>)
 8000482:	2202      	movs	r2, #2
 8000484:	711a      	strb	r2, [r3, #4]
	handlerCommTerminal.USART_Config.USART_baudrate			= USART_BAUDRATE_19200;
 8000486:	4b35      	ldr	r3, [pc, #212]	; (800055c <initSystem+0x178>)
 8000488:	2201      	movs	r2, #1
 800048a:	715a      	strb	r2, [r3, #5]
	handlerCommTerminal.USART_Config.USART_datasize			= USART_DATASIZE_8BIT;
 800048c:	4b33      	ldr	r3, [pc, #204]	; (800055c <initSystem+0x178>)
 800048e:	2200      	movs	r2, #0
 8000490:	719a      	strb	r2, [r3, #6]
	handlerCommTerminal.USART_Config.USART_parity			= USART_PARITY_ODD;
 8000492:	4b32      	ldr	r3, [pc, #200]	; (800055c <initSystem+0x178>)
 8000494:	2201      	movs	r2, #1
 8000496:	71da      	strb	r2, [r3, #7]
	handlerCommTerminal.USART_Config.USART_stopbits			= USART_STOPBIT_1;
 8000498:	4b30      	ldr	r3, [pc, #192]	; (800055c <initSystem+0x178>)
 800049a:	2200      	movs	r2, #0
 800049c:	721a      	strb	r2, [r3, #8]
	handlerCommTerminal.USART_Config.USART_interrupt		= USART_INTERRUPT_RX_ENABLE;
 800049e:	4b2f      	ldr	r3, [pc, #188]	; (800055c <initSystem+0x178>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	725a      	strb	r2, [r3, #9]

	USART_Config(&handlerCommTerminal);
 80004a4:	482d      	ldr	r0, [pc, #180]	; (800055c <initSystem+0x178>)
 80004a6:	f000 fdb3 	bl	8001010 <USART_Config>

	// Configuración del timer2
	handlerTimer2.ptrTIMx								= TIM2;
 80004aa:	4b2e      	ldr	r3, [pc, #184]	; (8000564 <initSystem+0x180>)
 80004ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004b0:	601a      	str	r2, [r3, #0]
	handlerTimer2.timerConfig.Timer_mode				= TIMER_MODE_UP;
 80004b2:	4b2c      	ldr	r3, [pc, #176]	; (8000564 <initSystem+0x180>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	711a      	strb	r2, [r3, #4]
	handlerTimer2.timerConfig.Timer_speed				= TIMER_INCR_SPEED_1ms;
 80004b8:	4b2a      	ldr	r3, [pc, #168]	; (8000564 <initSystem+0x180>)
 80004ba:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80004be:	80da      	strh	r2, [r3, #6]
	handlerTimer2.timerConfig.Timer_period				= 250;
 80004c0:	4b28      	ldr	r3, [pc, #160]	; (8000564 <initSystem+0x180>)
 80004c2:	22fa      	movs	r2, #250	; 0xfa
 80004c4:	609a      	str	r2, [r3, #8]

	Timer_Config(&handlerTimer2);
 80004c6:	4827      	ldr	r0, [pc, #156]	; (8000564 <initSystem+0x180>)
 80004c8:	f000 fc8e 	bl	8000de8 <Timer_Config>

	// Llamamos la función para configurar y activar el SysTick

	config_SysTickMs();
 80004cc:	f000 fbd2 	bl	8000c74 <config_SysTickMs>

	// Configuramos los pines para el I2C SCL
	handlerI2CSCL.pGPIOx								= GPIOB;
 80004d0:	4b25      	ldr	r3, [pc, #148]	; (8000568 <initSystem+0x184>)
 80004d2:	4a26      	ldr	r2, [pc, #152]	; (800056c <initSystem+0x188>)
 80004d4:	601a      	str	r2, [r3, #0]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinNumber			= PIN_6;
 80004d6:	4b24      	ldr	r3, [pc, #144]	; (8000568 <initSystem+0x184>)
 80004d8:	2206      	movs	r2, #6
 80004da:	711a      	strb	r2, [r3, #4]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 80004dc:	4b22      	ldr	r3, [pc, #136]	; (8000568 <initSystem+0x184>)
 80004de:	2202      	movs	r2, #2
 80004e0:	715a      	strb	r2, [r3, #5]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_OPENDRAIN;
 80004e2:	4b21      	ldr	r3, [pc, #132]	; (8000568 <initSystem+0x184>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	721a      	strb	r2, [r3, #8]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_PULLUP;
 80004e8:	4b1f      	ldr	r3, [pc, #124]	; (8000568 <initSystem+0x184>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	71da      	strb	r2, [r3, #7]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_FAST;
 80004ee:	4b1e      	ldr	r3, [pc, #120]	; (8000568 <initSystem+0x184>)
 80004f0:	2202      	movs	r2, #2
 80004f2:	719a      	strb	r2, [r3, #6]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinAltFunMode		= AF4;
 80004f4:	4b1c      	ldr	r3, [pc, #112]	; (8000568 <initSystem+0x184>)
 80004f6:	2204      	movs	r2, #4
 80004f8:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&handlerI2CSCL);
 80004fa:	481b      	ldr	r0, [pc, #108]	; (8000568 <initSystem+0x184>)
 80004fc:	f000 f8ba 	bl	8000674 <GPIO_Config>

	// Configuramos los pines para el I2C SDA
	handlerI2CSDA.pGPIOx								= GPIOB;
 8000500:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <initSystem+0x18c>)
 8000502:	4a1a      	ldr	r2, [pc, #104]	; (800056c <initSystem+0x188>)
 8000504:	601a      	str	r2, [r3, #0]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinNumber			= PIN_7;
 8000506:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <initSystem+0x18c>)
 8000508:	2207      	movs	r2, #7
 800050a:	711a      	strb	r2, [r3, #4]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 800050c:	4b18      	ldr	r3, [pc, #96]	; (8000570 <initSystem+0x18c>)
 800050e:	2202      	movs	r2, #2
 8000510:	715a      	strb	r2, [r3, #5]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_OPENDRAIN;
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <initSystem+0x18c>)
 8000514:	2201      	movs	r2, #1
 8000516:	721a      	strb	r2, [r3, #8]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_PULLUP;
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <initSystem+0x18c>)
 800051a:	2201      	movs	r2, #1
 800051c:	71da      	strb	r2, [r3, #7]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_FAST;
 800051e:	4b14      	ldr	r3, [pc, #80]	; (8000570 <initSystem+0x18c>)
 8000520:	2202      	movs	r2, #2
 8000522:	719a      	strb	r2, [r3, #6]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinAltFunMode		= AF4;
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <initSystem+0x18c>)
 8000526:	2204      	movs	r2, #4
 8000528:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&handlerI2CSDA);
 800052a:	4811      	ldr	r0, [pc, #68]	; (8000570 <initSystem+0x18c>)
 800052c:	f000 f8a2 	bl	8000674 <GPIO_Config>

	handlerAccelerometer.ptrI2Cx		= I2C1;
 8000530:	4b10      	ldr	r3, [pc, #64]	; (8000574 <initSystem+0x190>)
 8000532:	4a11      	ldr	r2, [pc, #68]	; (8000578 <initSystem+0x194>)
 8000534:	601a      	str	r2, [r3, #0]
	handlerAccelerometer.modeI2C		= I2C_MODE_FM;
 8000536:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <initSystem+0x190>)
 8000538:	2201      	movs	r2, #1
 800053a:	715a      	strb	r2, [r3, #5]
	handlerAccelerometer.slaveAddress	= 0b1101000;		// Dirección del Accel con Logic 0 (0x68)
 800053c:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <initSystem+0x190>)
 800053e:	2268      	movs	r2, #104	; 0x68
 8000540:	711a      	strb	r2, [r3, #4]

	I2C_Config(&handlerAccelerometer);
 8000542:	480c      	ldr	r0, [pc, #48]	; (8000574 <initSystem+0x190>)
 8000544:	f000 f9e8 	bl	8000918 <I2C_Config>

}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	200000c4 	.word	0x200000c4
 8000550:	40020000 	.word	0x40020000
 8000554:	200000d0 	.word	0x200000d0
 8000558:	200000dc 	.word	0x200000dc
 800055c:	200000f4 	.word	0x200000f4
 8000560:	40004400 	.word	0x40004400
 8000564:	200000e8 	.word	0x200000e8
 8000568:	2000018c 	.word	0x2000018c
 800056c:	40020400 	.word	0x40020400
 8000570:	20000180 	.word	0x20000180
 8000574:	20000198 	.word	0x20000198
 8000578:	40005400 	.word	0x40005400

0800057c <USART2_Callback>:

//***********// CallBacks //***********//

void USART2_Callback(void){
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	// Lectura de los datos recibidos
	rxData = returnData();
 8000580:	f000 ff7c 	bl	800147c <returnData>
 8000584:	4603      	mov	r3, r0
 8000586:	461a      	mov	r2, r3
 8000588:	4b01      	ldr	r3, [pc, #4]	; (8000590 <USART2_Callback+0x14>)
 800058a:	701a      	strb	r2, [r3, #0]
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200001a0 	.word	0x200001a0

08000594 <Timer2_Callback>:
// Timer encargado del StateLED
void Timer2_Callback(void){
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	handlerStateLED.pGPIOx -> ODR ^= GPIO_ODR_OD5;		// Encendido y apagado StateLED
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <Timer2_Callback+0x1c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	695a      	ldr	r2, [r3, #20]
 800059e:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <Timer2_Callback+0x1c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f082 0220 	eor.w	r2, r2, #32
 80005a6:	615a      	str	r2, [r3, #20]
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	200000c4 	.word	0x200000c4

080005b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005bc:	4a14      	ldr	r2, [pc, #80]	; (8000610 <_sbrk+0x5c>)
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <_sbrk+0x60>)
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <_sbrk+0x64>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d102      	bne.n	80005d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <_sbrk+0x64>)
 80005d2:	4a12      	ldr	r2, [pc, #72]	; (800061c <_sbrk+0x68>)
 80005d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <_sbrk+0x64>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	693a      	ldr	r2, [r7, #16]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d207      	bcs.n	80005f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005e4:	f000 ff84 	bl	80014f0 <__errno>
 80005e8:	4603      	mov	r3, r0
 80005ea:	220c      	movs	r2, #12
 80005ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005f2:	e009      	b.n	8000608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <_sbrk+0x64>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005fa:	4b07      	ldr	r3, [pc, #28]	; (8000618 <_sbrk+0x64>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4413      	add	r3, r2
 8000602:	4a05      	ldr	r2, [pc, #20]	; (8000618 <_sbrk+0x64>)
 8000604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000606:	68fb      	ldr	r3, [r7, #12]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3718      	adds	r7, #24
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20020000 	.word	0x20020000
 8000614:	00000400 	.word	0x00000400
 8000618:	200001a4 	.word	0x200001a4
 800061c:	200001c8 	.word	0x200001c8

08000620 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000622:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000624:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <LoopForever+0x6>)
  ldr r1, =_edata
 800062a:	490d      	ldr	r1, [pc, #52]	; (8000660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800062c:	4a0d      	ldr	r2, [pc, #52]	; (8000664 <LoopForever+0xe>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000630:	e002      	b.n	8000638 <LoopCopyDataInit>

08000632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000636:	3304      	adds	r3, #4

08000638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800063c:	d3f9      	bcc.n	8000632 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063e:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000640:	4c0a      	ldr	r4, [pc, #40]	; (800066c <LoopForever+0x16>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000644:	e001      	b.n	800064a <LoopFillZerobss>

08000646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000648:	3204      	adds	r2, #4

0800064a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800064c:	d3fb      	bcc.n	8000646 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800064e:	f000 ff55 	bl	80014fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000652:	f7ff fe15 	bl	8000280 <main>

08000656 <LoopForever>:

LoopForever:
    b LoopForever
 8000656:	e7fe      	b.n	8000656 <LoopForever>
  ldr   r0, =_estack
 8000658:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800065c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000660:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8000664:	08001ea4 	.word	0x08001ea4
  ldr r2, =_sbss
 8000668:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 800066c:	200001c4 	.word	0x200001c4

08000670 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000670:	e7fe      	b.n	8000670 <ADC_IRQHandler>
	...

08000674 <GPIO_Config>:
orden estricto para poder que el sistema permita configurar el periférico X.
Lo primero y más importante es activar la señal del reloj principal hacia ese
elemento específico (relacionado con el periférico RCC), a esto llamaremos
simplemente "activar el periférico o activar la señal de reloj del periférico".
*/
void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periférico
	// Verificamos para GPIOA
	if (pGPIOHandler -> pGPIOx == GPIOA){
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a87      	ldr	r2, [pc, #540]	; (80008a8 <GPIO_Config+0x234>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d106      	bne.n	800069c <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOA
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 800068e:	4b87      	ldr	r3, [pc, #540]	; (80008ac <GPIO_Config+0x238>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a86      	ldr	r2, [pc, #536]	; (80008ac <GPIO_Config+0x238>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	e03a      	b.n	8000712 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if (pGPIOHandler -> pGPIOx == GPIOB){
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a83      	ldr	r2, [pc, #524]	; (80008b0 <GPIO_Config+0x23c>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d106      	bne.n	80006b4 <GPIO_Config+0x40>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOB
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 80006a6:	4b81      	ldr	r3, [pc, #516]	; (80008ac <GPIO_Config+0x238>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a80      	ldr	r2, [pc, #512]	; (80008ac <GPIO_Config+0x238>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	e02e      	b.n	8000712 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOC
	else if (pGPIOHandler -> pGPIOx == GPIOC){
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a7e      	ldr	r2, [pc, #504]	; (80008b4 <GPIO_Config+0x240>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d106      	bne.n	80006cc <GPIO_Config+0x58>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOC
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 80006be:	4b7b      	ldr	r3, [pc, #492]	; (80008ac <GPIO_Config+0x238>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a7a      	ldr	r2, [pc, #488]	; (80008ac <GPIO_Config+0x238>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	e022      	b.n	8000712 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOD
	else if (pGPIOHandler -> pGPIOx == GPIOD){
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a79      	ldr	r2, [pc, #484]	; (80008b8 <GPIO_Config+0x244>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d106      	bne.n	80006e4 <GPIO_Config+0x70>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOD
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 80006d6:	4b75      	ldr	r3, [pc, #468]	; (80008ac <GPIO_Config+0x238>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a74      	ldr	r2, [pc, #464]	; (80008ac <GPIO_Config+0x238>)
 80006dc:	f043 0308 	orr.w	r3, r3, #8
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	e016      	b.n	8000712 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOE
	else if (pGPIOHandler -> pGPIOx == GPIOE){
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a74      	ldr	r2, [pc, #464]	; (80008bc <GPIO_Config+0x248>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d106      	bne.n	80006fc <GPIO_Config+0x88>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOE
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 80006ee:	4b6f      	ldr	r3, [pc, #444]	; (80008ac <GPIO_Config+0x238>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a6e      	ldr	r2, [pc, #440]	; (80008ac <GPIO_Config+0x238>)
 80006f4:	f043 0310 	orr.w	r3, r3, #16
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	e00a      	b.n	8000712 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOH
	else if (pGPIOHandler -> pGPIOx == GPIOH){
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a6f      	ldr	r2, [pc, #444]	; (80008c0 <GPIO_Config+0x24c>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d105      	bne.n	8000712 <GPIO_Config+0x9e>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOH
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 8000706:	4b69      	ldr	r3, [pc, #420]	; (80008ac <GPIO_Config+0x238>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a68      	ldr	r2, [pc, #416]	; (80008ac <GPIO_Config+0x238>)
 800070c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
	// Después de activado, podemos comenzar a configurar.

	// 2) Configurando el registro GPIOx_MODER
	// Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y todo eso lo cargamos en la variable aux_Config
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	795b      	ldrb	r3, [r3, #5]
 8000716:	461a      	mov	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	791b      	ldrb	r3, [r3, #4]
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	60fb      	str	r3, [r7, #12]

	// Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (debemos escribir 0b00)
	// para lo cual aplicamos una máscara y una operación bitwise AND
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	791b      	ldrb	r3, [r3, #4]
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	2103      	movs	r1, #3
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43db      	mvns	r3, r3
 8000738:	4619      	mov	r1, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	400a      	ands	r2, r1
 8000740:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler -> pGPIOx -> MODER |= auxConfig;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	6819      	ldr	r1, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	68fa      	ldr	r2, [r7, #12]
 800074e:	430a      	orrs	r2, r1
 8000750:	601a      	str	r2, [r3, #0]

	// 3) Configurando el registro GPIOx_OTYPER
	// De nuevo, leemos y movemos el valor un número "PinNumber" de veces
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	7a1b      	ldrb	r3, [r3, #8]
 8000756:	461a      	mov	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	fa02 f303 	lsl.w	r3, r2, r3
 8000760:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler -> pGPIOx -> OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	685a      	ldr	r2, [r3, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	4619      	mov	r1, r3
 800076e:	2301      	movs	r3, #1
 8000770:	408b      	lsls	r3, r1
 8000772:	43db      	mvns	r3, r3
 8000774:	4619      	mov	r1, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	400a      	ands	r2, r1
 800077c:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OTYPER |= auxConfig;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	6859      	ldr	r1, [r3, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	430a      	orrs	r2, r1
 800078c:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	799b      	ldrb	r3, [r3, #6]
 8000792:	461a      	mov	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	791b      	ldrb	r3, [r3, #4]
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	fa02 f303 	lsl.w	r3, r2, r3
 800079e:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler -> pGPIOx -> OSPEEDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	689a      	ldr	r2, [r3, #8]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	791b      	ldrb	r3, [r3, #4]
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	2103      	movs	r1, #3
 80007ae:	fa01 f303 	lsl.w	r3, r1, r3
 80007b2:	43db      	mvns	r3, r3
 80007b4:	4619      	mov	r1, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	400a      	ands	r2, r1
 80007bc:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OSPEEDR |= auxConfig;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	6899      	ldr	r1, [r3, #8]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	68fa      	ldr	r2, [r7, #12]
 80007ca:	430a      	orrs	r2, r1
 80007cc:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante.
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	79db      	ldrb	r3, [r3, #7]
 80007d2:	461a      	mov	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	791b      	ldrb	r3, [r3, #4]
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler -> pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	68da      	ldr	r2, [r3, #12]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	791b      	ldrb	r3, [r3, #4]
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	2103      	movs	r1, #3
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	43db      	mvns	r3, r3
 80007f4:	4619      	mov	r1, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	400a      	ands	r2, r1
 80007fc:	60da      	str	r2, [r3, #12]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> PUPDR |= auxConfig;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	68d9      	ldr	r1, [r3, #12]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	68fa      	ldr	r2, [r7, #12]
 800080a:	430a      	orrs	r2, r1
 800080c:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuración de las funciones alternativas... Se verá luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	795b      	ldrb	r3, [r3, #5]
 8000812:	2b02      	cmp	r3, #2
 8000814:	d143      	bne.n	800089e <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	791b      	ldrb	r3, [r3, #4]
 800081a:	2b07      	cmp	r3, #7
 800081c:	d81f      	bhi.n	800085e <GPIO_Config+0x1ea>
			// Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	791b      	ldrb	r3, [r3, #4]
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	60bb      	str	r3, [r7, #8]

			// Limpiamos primero la posición del registro que deseamos escribir a continuación
			pGPIOHandler -> pGPIOx -> AFR[0] &= ~(0b1111 << auxPosition);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	6a1a      	ldr	r2, [r3, #32]
 800082c:	210f      	movs	r1, #15
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	fa01 f303 	lsl.w	r3, r1, r3
 8000834:	43db      	mvns	r3, r3
 8000836:	4619      	mov	r1, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	400a      	ands	r2, r1
 800083e:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posición seleccionada
			pGPIOHandler -> pGPIOx -> AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	6a1a      	ldr	r2, [r3, #32]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	7a5b      	ldrb	r3, [r3, #9]
 800084a:	4619      	mov	r1, r3
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	fa01 f303 	lsl.w	r3, r1, r3
 8000852:	4619      	mov	r1, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	430a      	orrs	r2, r1
 800085a:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurando en la posición seleccionada
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} // Fin del GPIO_Config
 800085c:	e01f      	b.n	800089e <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber -8);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	791b      	ldrb	r3, [r3, #4]
 8000862:	3b08      	subs	r3, #8
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx -> AFR[1] &= ~(0b1111 << auxPosition);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800086e:	210f      	movs	r1, #15
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	fa01 f303 	lsl.w	r3, r1, r3
 8000876:	43db      	mvns	r3, r3
 8000878:	4619      	mov	r1, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	400a      	ands	r2, r1
 8000880:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	7a5b      	ldrb	r3, [r3, #9]
 800088c:	4619      	mov	r1, r3
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	fa01 f303 	lsl.w	r3, r1, r3
 8000894:	4619      	mov	r1, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	430a      	orrs	r2, r1
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_Config
 800089e:	bf00      	nop
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	40020000 	.word	0x40020000
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020400 	.word	0x40020400
 80008b4:	40020800 	.word	0x40020800
 80008b8:	40020c00 	.word	0x40020c00
 80008bc:	40021000 	.word	0x40021000
 80008c0:	40021c00 	.word	0x40021c00

080008c4 <GPIO_WritePin>:
 *
 *
Función utilizada para cambiar de estado el pin entregado en el handler, asignando
el valor entregado en la variable newState
*/
void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	70fb      	strb	r3, [r7, #3]
	// Limpiamos la posición que deseamos
	// pPinHandler -> pGPIOx -> ODR &= ~(SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
	if(newState == SET){
 80008d0:	78fb      	ldrb	r3, [r7, #3]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d10d      	bne.n	80008f2 <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler -> pGPIOx -> BSRR |= (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	699a      	ldr	r2, [r3, #24]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	791b      	ldrb	r3, [r3, #4]
 80008e0:	4619      	mov	r1, r3
 80008e2:	2301      	movs	r3, #1
 80008e4:	408b      	lsls	r3, r1
 80008e6:	4619      	mov	r1, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	430a      	orrs	r2, r1
 80008ee:	619a      	str	r2, [r3, #24]
	}
	else{
		// Trabajando con la parte alta del registro
		pPinHandler -> pGPIOx -> BSRR |= (SET << (pPinHandler -> GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 80008f0:	e00d      	b.n	800090e <GPIO_WritePin+0x4a>
		pPinHandler -> pGPIOx -> BSRR |= (SET << (pPinHandler -> GPIO_PinConfig.GPIO_PinNumber + 16));
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	699a      	ldr	r2, [r3, #24]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	791b      	ldrb	r3, [r3, #4]
 80008fc:	3310      	adds	r3, #16
 80008fe:	2101      	movs	r1, #1
 8000900:	fa01 f303 	lsl.w	r3, r1, r3
 8000904:	4619      	mov	r1, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	430a      	orrs	r2, r1
 800090c:	619a      	str	r2, [r3, #24]
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <I2C_Config>:
 * y con la resistencia en modo pull - up.
 * */

// Función de configuración para el I2C

void I2C_Config(I2C_Handler_t *ptrHandlerI2C){
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj para el I2C y los PGIOs */

	if(ptrHandlerI2C -> ptrI2Cx == I2C1){
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a45      	ldr	r2, [pc, #276]	; (8000a3c <I2C_Config+0x124>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d106      	bne.n	8000938 <I2C_Config+0x20>
		// Activación RCC para el I2C1
		RCC -> APB1RSTR |= RCC_APB1ENR_I2C1EN;
 800092a:	4b45      	ldr	r3, [pc, #276]	; (8000a40 <I2C_Config+0x128>)
 800092c:	6a1b      	ldr	r3, [r3, #32]
 800092e:	4a44      	ldr	r2, [pc, #272]	; (8000a40 <I2C_Config+0x128>)
 8000930:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000934:	6213      	str	r3, [r2, #32]
 8000936:	e016      	b.n	8000966 <I2C_Config+0x4e>
	}
	else if(ptrHandlerI2C -> ptrI2Cx == I2C2){
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a41      	ldr	r2, [pc, #260]	; (8000a44 <I2C_Config+0x12c>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d106      	bne.n	8000950 <I2C_Config+0x38>
		// Activación RCC para el I2C2
		RCC -> APB1RSTR |= RCC_APB1ENR_I2C2EN ;
 8000942:	4b3f      	ldr	r3, [pc, #252]	; (8000a40 <I2C_Config+0x128>)
 8000944:	6a1b      	ldr	r3, [r3, #32]
 8000946:	4a3e      	ldr	r2, [pc, #248]	; (8000a40 <I2C_Config+0x128>)
 8000948:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800094c:	6213      	str	r3, [r2, #32]
 800094e:	e00a      	b.n	8000966 <I2C_Config+0x4e>
	}
	else if(ptrHandlerI2C -> ptrI2Cx == I2C3){
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a3c      	ldr	r2, [pc, #240]	; (8000a48 <I2C_Config+0x130>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d105      	bne.n	8000966 <I2C_Config+0x4e>
		// Activación RCC para el I2C3
		RCC -> APB1RSTR |= RCC_APB1ENR_I2C3EN;
 800095a:	4b39      	ldr	r3, [pc, #228]	; (8000a40 <I2C_Config+0x128>)
 800095c:	6a1b      	ldr	r3, [r3, #32]
 800095e:	4a38      	ldr	r2, [pc, #224]	; (8000a40 <I2C_Config+0x128>)
 8000960:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000964:	6213      	str	r3, [r2, #32]
	}

	/* 2. Limpiamos los registros del I2C. Reiniciamos el periferico
	 *  de forma que inicia en un estado conocido */

	ptrHandlerI2C -> ptrI2Cx -> CR1 |= I2C_CR1_SWRST;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000974:	601a      	str	r2, [r3, #0]
	__NOP();
 8000976:	bf00      	nop
	ptrHandlerI2C -> ptrI2Cx -> CR1 &= ~I2C_CR1_SWRST;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000986:	601a      	str	r2, [r3, #0]
	 * Indicamos cual es la velocidad del reloj principal, que es la señal utilizada por el periférico
	 * para generar la señal de reloj para el bus I2C
	 * */
	// PLCK1 FRECUENCY in MHz

	ptrHandlerI2C -> ptrI2Cx -> CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuración actual
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	685a      	ldr	r2, [r3, #4]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8000996:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C -> ptrI2Cx -> CR2 |= (MAIN_CLOCK_16_MHz_I2C << I2C_CR2_FREQ_Pos);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	685a      	ldr	r2, [r3, #4]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f042 0210 	orr.w	r2, r2, #16
 80009a6:	605a      	str	r2, [r3, #4]
	 * En esta configuración también se incluye la velocidad del reloj
	 * y el tiempo máximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los dos registros en 0
	 * */

	ptrHandlerI2C -> ptrI2Cx -> CCR = 0;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2200      	movs	r2, #0
 80009ae:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C -> ptrI2Cx -> TRISE = 0;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C -> modeI2C == I2C_MODE_SM){
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	795b      	ldrb	r3, [r3, #5]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d118      	bne.n	80009f2 <I2C_Config+0xda>

		// Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C -> ptrI2Cx -> CCR &= ~I2C_CCR_FS;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	69da      	ldr	r2, [r3, #28]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80009ce:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que se encarga de generar la señal del reloj
		ptrHandlerI2C -> ptrI2Cx -> CCR |= (I2C_MODE_SM_SPEED_100KHz << I2C_CCR_CCR_Pos);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	69da      	ldr	r2, [r3, #28]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80009de:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T - Rise máximo
		ptrHandlerI2C -> ptrI2Cx -> TRISE |= I2C_MAX_RISE_TIME_SM;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	6a1a      	ldr	r2, [r3, #32]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f042 0211 	orr.w	r2, r2, #17
 80009ee:	621a      	str	r2, [r3, #32]
 80009f0:	e017      	b.n	8000a22 <I2C_Config+0x10a>
	}
	else{
		// Estamos en modo "Fast" (FM Mode)
		// Seleccionamos el modo Fast
		ptrHandlerI2C -> ptrI2Cx -> CCR |= I2C_CCR_FS;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	69da      	ldr	r2, [r3, #28]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a00:	61da      	str	r2, [r3, #28]

		// COnfiguramos el registro que se encarga de generar la señal del reloj
		ptrHandlerI2C -> ptrI2Cx -> CCR |= (I2C_MODE_FM_SPEED_400Khz << I2C_CCR_CCR_Pos);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	69da      	ldr	r2, [r3, #28]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f042 020e 	orr.w	r2, r2, #14
 8000a10:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T - Rise máximo
		ptrHandlerI2C -> ptrI2Cx -> TRISE |= I2C_MAX_RISE_TIME_FM;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	6a1a      	ldr	r2, [r3, #32]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f042 0206 	orr.w	r2, r2, #6
 8000a20:	621a      	str	r2, [r3, #32]
	}

	/* 5. Activamos el I2C Peripheral (Módulo I2C).*/

	ptrHandlerI2C -> ptrI2Cx -> CR1 |= I2C_CR1_PE;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f042 0201 	orr.w	r2, r2, #1
 8000a30:	601a      	str	r2, [r3, #0]
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	40005400 	.word	0x40005400
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40005800 	.word	0x40005800
 8000a48:	40005c00 	.word	0x40005c00

08000a4c <I2C_readByte>:

uint8_t I2C_readByte(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	460b      	mov	r3, r1
 8000a56:	70fb      	strb	r3, [r7, #3]

	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;	// Para no generar warning

	/* 1. Verificamos que la línea no está ocupada - bit "busy" en I2C_CR2 */
	while(ptrHandlerI2C -> ptrI2Cx -> SR2 & I2C_SR2_BUSY){
 8000a5c:	e000      	b.n	8000a60 <I2C_readByte+0x14>
		__NOP();
 8000a5e:	bf00      	nop
	while(ptrHandlerI2C -> ptrI2Cx -> SR2 & I2C_SR2_BUSY){
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d1f7      	bne.n	8000a5e <I2C_readByte+0x12>
	}

	/* 2. Generamos la señal "start" */
	ptrHandlerI2C -> ptrI2Cx -> CR1 |= I2C_CR1_START;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a7c:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "Start" se levante */
	/* Mientras esperamos, el valor de SB es 0, entonces la negación (!) es 1 */
	while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_SB)){
 8000a7e:	e000      	b.n	8000a82 <I2C_readByte+0x36>
		__NOP();
 8000a80:	bf00      	nop
	while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_SB)){
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d0f7      	beq.n	8000a80 <I2C_readByte+0x34>
	}

	/* 3. Enviamos la dirección del Slave y el bit que indica que deseamos escribir (0)
	 * (en el siguiente paso se envía la dirección de memoria que se desea leer */

	ptrHandlerI2C -> ptrI2Cx -> DR = (ptrHandlerI2C -> slaveAddress << 1)	| I2C_WRITE_DATA;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	791b      	ldrb	r3, [r3, #4]
 8000a94:	005a      	lsls	r2, r3, #1
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	611a      	str	r2, [r3, #16]

	 /* 3.1 Esperemos hasta que la bandera del evento "addr" se levante
	  * (esto nos indica que la dirección fue enviada satisfactoriamente */
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_ADDR)){
 8000a9c:	e000      	b.n	8000aa0 <I2C_readByte+0x54>
		__NOP();
 8000a9e:	bf00      	nop
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_ADDR)){
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d0f7      	beq.n	8000a9e <I2C_readByte+0x52>
	 }

	 /* 3.2 Debemos limpiar la bandera de la recepción de ACK de la "addr", para lo cual
	  * debemos leer en secuencia primero el I2C_SR1 y luego I2C_SR2 */
	 auxByte = ptrHandlerI2C -> ptrI2Cx -> SR1;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	73fb      	strb	r3, [r7, #15]
	 auxByte = ptrHandlerI2C -> ptrI2Cx -> SR2;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	73fb      	strb	r3, [r7, #15]

	 /* 4. Enviamos la dirección de memoria que deseamos leer */
	 ptrHandlerI2C -> ptrI2Cx -> DR = memAddr;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	78fa      	ldrb	r2, [r7, #3]
 8000ac4:	611a      	str	r2, [r3, #16]

	 /* 4.1 Esperamos hasta que el byte sea transmitido */
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_TXE)){
 8000ac6:	e000      	b.n	8000aca <I2C_readByte+0x7e>
		 __NOP();
 8000ac8:	bf00      	nop
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_TXE)){
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	695b      	ldr	r3, [r3, #20]
 8000ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d0f7      	beq.n	8000ac8 <I2C_readByte+0x7c>
	 }

	 /* 5. Debemos generar una señal de RESTART, o sea, enviar un nuevo START */
	 ptrHandlerI2C -> ptrI2Cx -> CR1 |= I2C_CR1_START;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ae6:	601a      	str	r2, [r3, #0]

	 /* 5.1 Esperamos a que la bandera del evento "start" se levante */
	 /* Mientras esperamos, el valor de SB es 0, entonces la negación (!) es 1*/
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_SB)){
 8000ae8:	e000      	b.n	8000aec <I2C_readByte+0xa0>
		 __NOP();
 8000aea:	bf00      	nop
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_SB)){
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d0f7      	beq.n	8000aea <I2C_readByte+0x9e>
	 }

	 /* 6. Enviamos la dirección del Slave, pero ahora con la indicación de leer */
	 ptrHandlerI2C -> ptrI2Cx -> DR = (ptrHandlerI2C -> slaveAddress << 1) | I2C_READ_DATA;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	791b      	ldrb	r3, [r3, #4]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	f043 0201 	orr.w	r2, r3, #1
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	611a      	str	r2, [r3, #16]

	 /* 6.1 Esperamos hasat que la bandera del evento "addr" se levante
	  * (esto nos indica que la dirección fue enviada satisfactoriamente
	  */
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_ADDR)){
 8000b0a:	e000      	b.n	8000b0e <I2C_readByte+0xc2>
		 __NOP();
 8000b0c:	bf00      	nop
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_ADDR)){
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	f003 0302 	and.w	r3, r3, #2
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d0f7      	beq.n	8000b0c <I2C_readByte+0xc0>
	 }

	 /* 6.2 Debemos limpiar la bandera de la recepción de ACK de la "addr", para lo cual
	  * debemos leer en secuencia primero el I2C_SR1 y luego I2C_SR2 */

	 auxByte = ptrHandlerI2C -> ptrI2Cx -> SR1;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	73fb      	strb	r3, [r7, #15]
	 auxByte = ptrHandlerI2C -> ptrI2Cx -> SR2;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	73fb      	strb	r3, [r7, #15]

	 /* 7. Activamos la indicación para no ACK (indicación para el Slave de terminar)
	  * (Debemos escribir cero en la posición ACK del registro de control 1)
	  */
	 ptrHandlerI2C -> ptrI2Cx -> CR1 &= ~I2C_CR1_ACK;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b3a:	601a      	str	r2, [r3, #0]

	 /* 8. Genereamos la condición de stop */
	 ptrHandlerI2C -> ptrI2Cx -> CR1 |= I2C_CR1_STOP;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b4a:	601a      	str	r2, [r3, #0]

	 /* 9. Esperamos hasta que el byte entrante sea recibido */
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_RXNE)){
 8000b4c:	e000      	b.n	8000b50 <I2C_readByte+0x104>
		 __NOP();
 8000b4e:	bf00      	nop
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_RXNE)){
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0f7      	beq.n	8000b4e <I2C_readByte+0x102>
	 }

	 ptrHandlerI2C -> dataI2C = ptrHandlerI2C -> ptrI2Cx -> DR;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	691b      	ldr	r3, [r3, #16]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	719a      	strb	r2, [r3, #6]

	 return ptrHandlerI2C -> dataI2C;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	799b      	ldrb	r3, [r3, #6]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <I2C_writeByte>:

void I2C_writeByte(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr, uint8_t dataToWrite){
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	70fb      	strb	r3, [r7, #3]
 8000b84:	4613      	mov	r3, r2
 8000b86:	70bb      	strb	r3, [r7, #2]

	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

/* 1. Verificamos que la línea no está ocupada - bit "busy" en I2C_CR2 */
	while(ptrHandlerI2C -> ptrI2Cx -> SR2 & I2C_SR2_BUSY){
 8000b8c:	e000      	b.n	8000b90 <I2C_writeByte+0x18>
		__NOP();
 8000b8e:	bf00      	nop
	while(ptrHandlerI2C -> ptrI2Cx -> SR2 & I2C_SR2_BUSY){
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1f7      	bne.n	8000b8e <I2C_writeByte+0x16>
	}

	/* 2. Generamos la señal "start" */
	ptrHandlerI2C -> ptrI2Cx -> CR1 |= I2C_CR1_START;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bac:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "Start" se levante */
	/* Mientras esperamos, el valor de SB es 0, entonces la negación (!) es 1 */
	while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_SB)){
 8000bae:	e000      	b.n	8000bb2 <I2C_writeByte+0x3a>
		__NOP();
 8000bb0:	bf00      	nop
	while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_SB)){
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d0f7      	beq.n	8000bb0 <I2C_writeByte+0x38>
	}

	/* 3. Enviamos la dirección del Slave y el bit que indica que deseamos escribir (0)
	 * (en el siguiente paso se envía la dirección de memoria que se desea leer */
	ptrHandlerI2C -> ptrI2Cx -> DR = (ptrHandlerI2C -> slaveAddress << 1)	| I2C_WRITE_DATA;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	791b      	ldrb	r3, [r3, #4]
 8000bc4:	005a      	lsls	r2, r3, #1
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	611a      	str	r2, [r3, #16]

	 /* 3.1 Esperemos hasta que la bandera del evento "addr" se levante
	  * (esto nos indica que la dirección fue enviada satisfactoriamente */
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_ADDR)){
 8000bcc:	e000      	b.n	8000bd0 <I2C_writeByte+0x58>
		__NOP();
 8000bce:	bf00      	nop
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_ADDR)){
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d0f7      	beq.n	8000bce <I2C_writeByte+0x56>
	 }

	 /* 3.2 Debemos limpiar la bandera de la recepción de ACK de la "addr", para lo cual
	  * debemos leer en secuencia primero el I2C_SR1 y luego I2C_SR2 */
	 auxByte = ptrHandlerI2C -> ptrI2Cx -> SR1;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	73fb      	strb	r3, [r7, #15]
	 auxByte = ptrHandlerI2C -> ptrI2Cx -> SR2;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	73fb      	strb	r3, [r7, #15]

	 /* 4. Enviamos la dirección de memoria que deseamos leer */
	 ptrHandlerI2C -> ptrI2Cx -> DR = memAddr;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	78fa      	ldrb	r2, [r7, #3]
 8000bf4:	611a      	str	r2, [r3, #16]

	 /* 4.1 Esperamos hasta que el byte sea transmitido */
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_TXE)){
 8000bf6:	e000      	b.n	8000bfa <I2C_writeByte+0x82>
		 __NOP();
 8000bf8:	bf00      	nop
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_TXE)){
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d0f7      	beq.n	8000bf8 <I2C_writeByte+0x80>
	 }

	 /* 5. Crgamos el valor que deseamos escribir */

	 ptrHandlerI2C -> ptrI2Cx -> DR = dataToWrite;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	78ba      	ldrb	r2, [r7, #2]
 8000c0e:	611a      	str	r2, [r3, #16]

	 /* 6. Esperamos hasta que el bit sea transmitido */

	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_BTF)){
 8000c10:	e000      	b.n	8000c14 <I2C_writeByte+0x9c>
	 		 __NOP();
 8000c12:	bf00      	nop
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_BTF)){
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	f003 0304 	and.w	r3, r3, #4
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d0f7      	beq.n	8000c12 <I2C_writeByte+0x9a>
	 	 }

	 /* 7. Generamos la condición de stop */
	 ptrHandlerI2C -> ptrI2Cx -> CR1 |= I2C_CR1_STOP;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c30:	601a      	str	r2, [r3, #0]
}
 8000c32:	bf00      	nop
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db0b      	blt.n	8000c66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	f003 021f 	and.w	r2, r3, #31
 8000c54:	4906      	ldr	r1, [pc, #24]	; (8000c70 <__NVIC_EnableIRQ+0x34>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	095b      	lsrs	r3, r3, #5
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <config_SysTickMs>:

uint64_t ticks;

/**/

void config_SysTickMs(void){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	// Reiniciamos el valor de la variable que cuenta tiempo
	ticks = 0;
 8000c78:	4914      	ldr	r1, [pc, #80]	; (8000ccc <config_SysTickMs+0x58>)
 8000c7a:	f04f 0200 	mov.w	r2, #0
 8000c7e:	f04f 0300 	mov.w	r3, #0
 8000c82:	e9c1 2300 	strd	r2, r3, [r1]

	//Cargando el valor del limite de incrementos que representan 1ms.
	SysTick -> LOAD = SYSTICK_LOAD_VALUE;
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <config_SysTickMs+0x5c>)
 8000c88:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000c8c:	605a      	str	r2, [r3, #4]

	// Limpiamos el valor actual del SysTick
	SysTick -> VAL = 0;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <config_SysTickMs+0x5c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]

	// Configuramos el reloj interno como el reloj para el Timer
	SysTick -> CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <config_SysTickMs+0x5c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <config_SysTickMs+0x5c>)
 8000c9a:	f043 0304 	orr.w	r3, r3, #4
 8000c9e:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop

	// Desactivamos las interrupciones globales
	__disable_irq();

	// Activamos la interrupción debida al conteo a ceo del SysTick
	SysTick -> CTRL |= SysTick_CTRL_TICKINT_Msk;
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <config_SysTickMs+0x5c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a09      	ldr	r2, [pc, #36]	; (8000cd0 <config_SysTickMs+0x5c>)
 8000caa:	f043 0302 	orr.w	r3, r3, #2
 8000cae:	6013      	str	r3, [r2, #0]

	//Matriculamos la interrupción en el NVIC
	__NVIC_EnableIRQ(SysTick_IRQn);
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cb4:	f7ff ffc2 	bl	8000c3c <__NVIC_EnableIRQ>

	// Activamos el Timer
	SysTick -> CTRL |= SysTick_CTRL_ENABLE_Msk;
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <config_SysTickMs+0x5c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <config_SysTickMs+0x5c>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000cc4:	b662      	cpsie	i
}
 8000cc6:	bf00      	nop

	// Activamos de nuevo las interrupciones globales
	__enable_irq();
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	200001a8 	.word	0x200001a8
 8000cd0:	e000e010 	.word	0xe000e010

08000cd4 <SysTick_Handler>:
	return ticks;
}

/**/

void SysTick_Handler(void){
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

	// Verificamos que la interrupción se lanza
	if(SysTick -> CTRL & SysTick_CTRL_COUNTFLAG_Msk){
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <SysTick_Handler+0x38>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d00e      	beq.n	8000d02 <SysTick_Handler+0x2e>

		// Limpiamos la bandera
		SysTick -> CTRL &= ~SysTick_CTRL_COUNTFLAG_Msk;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <SysTick_Handler+0x38>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <SysTick_Handler+0x38>)
 8000cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cee:	6013      	str	r3, [r2, #0]

		// Incrementamos en 1 el contador.
		ticks++;
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <SysTick_Handler+0x3c>)
 8000cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf6:	1c50      	adds	r0, r2, #1
 8000cf8:	f143 0100 	adc.w	r1, r3, #0
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <SysTick_Handler+0x3c>)
 8000cfe:	e9c3 0100 	strd	r0, r1, [r3]
	}
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e010 	.word	0xe000e010
 8000d10:	200001a8 	.word	0x200001a8

08000d14 <__NVIC_EnableIRQ>:
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	db0b      	blt.n	8000d3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	f003 021f 	and.w	r2, r3, #31
 8000d2c:	4906      	ldr	r1, [pc, #24]	; (8000d48 <__NVIC_EnableIRQ+0x34>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	095b      	lsrs	r3, r3, #5
 8000d34:	2001      	movs	r0, #1
 8000d36:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	e000e100 	.word	0xe000e100

08000d4c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db12      	blt.n	8000d84 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 021f 	and.w	r2, r3, #31
 8000d64:	490a      	ldr	r1, [pc, #40]	; (8000d90 <__NVIC_DisableIRQ+0x44>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d72:	3320      	adds	r3, #32
 8000d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d78:	f3bf 8f4f 	dsb	sy
}
 8000d7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d7e:	f3bf 8f6f 	isb	sy
}
 8000d82:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000e100 	.word	0xe000e100

08000d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	6039      	str	r1, [r7, #0]
 8000d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	db0a      	blt.n	8000dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	490c      	ldr	r1, [pc, #48]	; (8000de0 <__NVIC_SetPriority+0x4c>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	0112      	lsls	r2, r2, #4
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	440b      	add	r3, r1
 8000db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dbc:	e00a      	b.n	8000dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4908      	ldr	r1, [pc, #32]	; (8000de4 <__NVIC_SetPriority+0x50>)
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	f003 030f 	and.w	r3, r3, #15
 8000dca:	3b04      	subs	r3, #4
 8000dcc:	0112      	lsls	r2, r2, #4
 8000dce:	b2d2      	uxtb	r2, r2
 8000dd0:	440b      	add	r3, r1
 8000dd2:	761a      	strb	r2, [r3, #24]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000e100 	.word	0xe000e100
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <Timer_Config>:
 *
 * */

//NOTA: Hay que desactivar las interrupciones globales y luego volver a activarlas

void Timer_Config(TIMER_Handler_t *ptrTimerConfig){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000df0:	b672      	cpsid	i
}
 8000df2:	bf00      	nop
	/* 0. Desactivamos las interrupciones globales */

	__disable_irq();

	/* 1. Activamos la señal de reloj para el periférico específico */
	if(ptrTimerConfig -> ptrTIMx == TIM2){
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dfc:	d106      	bne.n	8000e0c <Timer_Config+0x24>
		// Activamos la señal de reloj del TIM2
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000dfe:	4b4b      	ldr	r3, [pc, #300]	; (8000f2c <Timer_Config+0x144>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	4a4a      	ldr	r2, [pc, #296]	; (8000f2c <Timer_Config+0x144>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0a:	e022      	b.n	8000e52 <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM3){
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a47      	ldr	r2, [pc, #284]	; (8000f30 <Timer_Config+0x148>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d106      	bne.n	8000e24 <Timer_Config+0x3c>
		// Activamos la señal de reloj del TIM3
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000e16:	4b45      	ldr	r3, [pc, #276]	; (8000f2c <Timer_Config+0x144>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	4a44      	ldr	r2, [pc, #272]	; (8000f2c <Timer_Config+0x144>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	6413      	str	r3, [r2, #64]	; 0x40
 8000e22:	e016      	b.n	8000e52 <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM4){
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a42      	ldr	r2, [pc, #264]	; (8000f34 <Timer_Config+0x14c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d106      	bne.n	8000e3c <Timer_Config+0x54>
		// Activamos la señal de reloj del TIM4
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000e2e:	4b3f      	ldr	r3, [pc, #252]	; (8000f2c <Timer_Config+0x144>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	4a3e      	ldr	r2, [pc, #248]	; (8000f2c <Timer_Config+0x144>)
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3a:	e00a      	b.n	8000e52 <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM5){
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a3d      	ldr	r2, [pc, #244]	; (8000f38 <Timer_Config+0x150>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d105      	bne.n	8000e52 <Timer_Config+0x6a>
		// Activamos la señal de reloj del TIM5
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8000e46:	4b39      	ldr	r3, [pc, #228]	; (8000f2c <Timer_Config+0x144>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	4a38      	ldr	r2, [pc, #224]	; (8000f2c <Timer_Config+0x144>)
 8000e4c:	f043 0308 	orr.w	r3, r3, #8
 8000e50:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuración del modo del timer (UP or DOWN) */

	if(ptrTimerConfig -> timerConfig.Timer_mode == TIMER_MODE_UP){
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	791b      	ldrb	r3, [r3, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d10c      	bne.n	8000e74 <Timer_Config+0x8c>
		// Configuramos el timer en modo UP
		ptrTimerConfig -> ptrTIMx -> CR1 &= ~(TIM_CR1_DIR);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f022 0210 	bic.w	r2, r2, #16
 8000e68:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) en cero.
		ptrTimerConfig -> ptrTIMx -> CNT = 0;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24
 8000e72:	e00d      	b.n	8000e90 <Timer_Config+0xa8>

	}
	else{
		// Configuramos el timer en modo DOWN
		ptrTimerConfig -> ptrTIMx -> CR1 |= ~(TIM_CR1_DIR);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f062 0210 	orn	r2, r2, #16
 8000e82:	601a      	str	r2, [r3, #0]

		// Ponemos en el contador (CNT) el valor del periodo
		ptrTimerConfig -> ptrTIMx -> CNT = ptrTimerConfig -> timerConfig.Timer_period -1;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	3a01      	subs	r2, #1
 8000e8e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuración del Prescaler */
	ptrTimerConfig -> ptrTIMx -> PSC = ptrTimerConfig -> timerConfig.Timer_speed -1;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	88db      	ldrh	r3, [r3, #6]
 8000e94:	1e5a      	subs	r2, r3, #1
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo de las interrupciones */
	ptrTimerConfig -> ptrTIMx -> ARR = ptrTimerConfig -> timerConfig.Timer_period -1;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3a01      	subs	r2, #1
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse  */
	ptrTimerConfig -> ptrTIMx -> CR1 |= TIM_CR1_CEN;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f042 0201 	orr.w	r2, r2, #1
 8000eb6:	601a      	str	r2, [r3, #0]

	/* 6. Activamos la interrupción debida a un "update event" */
	if(ptrTimerConfig -> ptrTIMx != TIM3){
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a1c      	ldr	r2, [pc, #112]	; (8000f30 <Timer_Config+0x148>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d007      	beq.n	8000ed2 <Timer_Config+0xea>
		ptrTimerConfig -> ptrTIMx -> DIER |= TIM_DIER_UIE;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	68da      	ldr	r2, [r3, #12]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f042 0201 	orr.w	r2, r2, #1
 8000ed0:	60da      	str	r2, [r3, #12]
	}

	/* 7. Activamos la señal de la interrupcuón en el NVIC */

	if(ptrTimerConfig -> ptrTIMx == TIM2){
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eda:	d107      	bne.n	8000eec <Timer_Config+0x104>
		// Activamos la IRQ del TIM2
		__NVIC_EnableIRQ(TIM2_IRQn);
 8000edc:	201c      	movs	r0, #28
 8000ede:	f7ff ff19 	bl	8000d14 <__NVIC_EnableIRQ>

		// Establecemos la prioridad del timer
		__NVIC_SetPriority(TIM2_IRQn,3);
 8000ee2:	2103      	movs	r1, #3
 8000ee4:	201c      	movs	r0, #28
 8000ee6:	f7ff ff55 	bl	8000d94 <__NVIC_SetPriority>
 8000eea:	e019      	b.n	8000f20 <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM3){
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <Timer_Config+0x148>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d103      	bne.n	8000efe <Timer_Config+0x116>
		// Activamos la IRQ del TIM3
		__NVIC_DisableIRQ(TIM3_IRQn);
 8000ef6:	201d      	movs	r0, #29
 8000ef8:	f7ff ff28 	bl	8000d4c <__NVIC_DisableIRQ>
 8000efc:	e010      	b.n	8000f20 <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM4){
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a0c      	ldr	r2, [pc, #48]	; (8000f34 <Timer_Config+0x14c>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d103      	bne.n	8000f10 <Timer_Config+0x128>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM4_IRQn);
 8000f08:	201e      	movs	r0, #30
 8000f0a:	f7ff ff03 	bl	8000d14 <__NVIC_EnableIRQ>
 8000f0e:	e007      	b.n	8000f20 <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM5){
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a08      	ldr	r2, [pc, #32]	; (8000f38 <Timer_Config+0x150>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d102      	bne.n	8000f20 <Timer_Config+0x138>
		// Activamos la IRQ del TIM5
		__NVIC_EnableIRQ(TIM5_IRQn);
 8000f1a:	2032      	movs	r0, #50	; 0x32
 8000f1c:	f7ff fefa 	bl	8000d14 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f20:	b662      	cpsie	i
}
 8000f22:	bf00      	nop
	}


	/* 8. Activamos de nuevo todas las interrupciones. */
	__enable_irq();
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40000400 	.word	0x40000400
 8000f34:	40000800 	.word	0x40000800
 8000f38:	40000c00 	.word	0x40000c00

08000f3c <Timer3_Callback>:
__attribute__((weak)) void Timer2_Callback(void){
	__NOP();
}

// Callback Timer3
__attribute__((weak)) void Timer3_Callback(void){
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
	__NOP();
 8000f40:	bf00      	nop
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr

08000f4a <Timer4_Callback>:

// Callback Timer4
__attribute__((weak)) void Timer4_Callback(void){
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
	__NOP();
 8000f4e:	bf00      	nop
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <Timer5_Callback>:

// Callback Timer5
__attribute__((weak)) void Timer5_Callback(void){
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
	__NOP();
 8000f5c:	bf00      	nop
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr

08000f66 <TIM2_IRQHandler>:

// Hay que hacer dos cosas: 1) Atender la interrupción. 2) Llamamos al Callback
/* Rutina de atención a la interrupción del TIM2 */

void TIM2_IRQHandler(void){
 8000f66:	b580      	push	{r7, lr}
 8000f68:	af00      	add	r7, sp, #0
	TIM2 -> SR &= ~(TIM_SR_UIF);
 8000f6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f6e:	691b      	ldr	r3, [r3, #16]
 8000f70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f74:	f023 0301 	bic.w	r3, r3, #1
 8000f78:	6113      	str	r3, [r2, #16]
	Timer2_Callback();
 8000f7a:	f7ff fb0b 	bl	8000594 <Timer2_Callback>
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	TIM3 -> SR &= ~(TIM_SR_UIF);
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <TIM3_IRQHandler+0x18>)
 8000f8a:	691b      	ldr	r3, [r3, #16]
 8000f8c:	4a03      	ldr	r2, [pc, #12]	; (8000f9c <TIM3_IRQHandler+0x18>)
 8000f8e:	f023 0301 	bic.w	r3, r3, #1
 8000f92:	6113      	str	r3, [r2, #16]
	Timer3_Callback();
 8000f94:	f7ff ffd2 	bl	8000f3c <Timer3_Callback>
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40000400 	.word	0x40000400

08000fa0 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	TIM4 -> SR &= ~(TIM_SR_UIF);
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <TIM4_IRQHandler+0x18>)
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	4a03      	ldr	r2, [pc, #12]	; (8000fb8 <TIM4_IRQHandler+0x18>)
 8000faa:	f023 0301 	bic.w	r3, r3, #1
 8000fae:	6113      	str	r3, [r2, #16]
	Timer4_Callback();
 8000fb0:	f7ff ffcb 	bl	8000f4a <Timer4_Callback>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40000800 	.word	0x40000800

08000fbc <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	TIM5 -> SR &= ~(TIM_SR_UIF);
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <TIM5_IRQHandler+0x18>)
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	4a03      	ldr	r2, [pc, #12]	; (8000fd4 <TIM5_IRQHandler+0x18>)
 8000fc6:	f023 0301 	bic.w	r3, r3, #1
 8000fca:	6113      	str	r3, [r2, #16]
	Timer5_Callback();
 8000fcc:	f7ff ffc4 	bl	8000f58 <Timer5_Callback>
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40000c00 	.word	0x40000c00

08000fd8 <__NVIC_EnableIRQ>:
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	db0b      	blt.n	8001002 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	4906      	ldr	r1, [pc, #24]	; (800100c <__NVIC_EnableIRQ+0x34>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100

08001010 <USART_Config>:
 * del periférico que se está utilizando.
 */

uint8_t data;

void USART_Config(USART_Handler_t *ptrUsartHandler){
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001018:	b672      	cpsid	i
}
 800101a:	bf00      	nop

	/* 1. Activamos la señal de reloj que viene desde el bus al que pertenece el periférico.
	 * Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6)
	 */
	/*1.1 Configuramos el USART1*/
	if(ptrUsartHandler -> ptrUSARTx == USART1){
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a8c      	ldr	r2, [pc, #560]	; (8001254 <USART_Config+0x244>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d106      	bne.n	8001034 <USART_Config+0x24>
		// Escribimos 1 (SET) en la posición correspondiente al USART1
		RCC -> APB2ENR |= (RCC_APB2ENR_USART1EN);
 8001026:	4b8c      	ldr	r3, [pc, #560]	; (8001258 <USART_Config+0x248>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a8b      	ldr	r2, [pc, #556]	; (8001258 <USART_Config+0x248>)
 800102c:	f043 0310 	orr.w	r3, r3, #16
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	e016      	b.n	8001062 <USART_Config+0x52>
	}
	/*1.2 Configuramos el USART2*/
	else if(ptrUsartHandler -> ptrUSARTx == USART2){
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a88      	ldr	r2, [pc, #544]	; (800125c <USART_Config+0x24c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d106      	bne.n	800104c <USART_Config+0x3c>
		// Escribimos 1 (SET) en la posición correspondiente al USART1
		RCC -> APB1ENR |= (RCC_APB1ENR_USART2EN);
 800103e:	4b86      	ldr	r3, [pc, #536]	; (8001258 <USART_Config+0x248>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	4a85      	ldr	r2, [pc, #532]	; (8001258 <USART_Config+0x248>)
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	6413      	str	r3, [r2, #64]	; 0x40
 800104a:	e00a      	b.n	8001062 <USART_Config+0x52>
	}
	/*1.3 Configuramos el USART6*/
	else if(ptrUsartHandler -> ptrUSARTx == USART6){
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a83      	ldr	r2, [pc, #524]	; (8001260 <USART_Config+0x250>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d105      	bne.n	8001062 <USART_Config+0x52>
		// Escribimos 1 (SET) en la posición correspondiente al USART1
		RCC -> APB2ENR |= (RCC_APB2ENR_USART6EN);
 8001056:	4b80      	ldr	r3, [pc, #512]	; (8001258 <USART_Config+0x248>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	4a7f      	ldr	r2, [pc, #508]	; (8001258 <USART_Config+0x248>)
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	6453      	str	r3, [r2, #68]	; 0x44
	 * Configuramos el modo: only TX, only RX, o RXTX
	 * Por último activamos el modulo USART cuando todo está correctamente configurado
	 * */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero.
	ptrUsartHandler -> ptrUSARTx -> CR1 = 0;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
	ptrUsartHandler -> ptrUSARTx -> CR2 = 0;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]

	// 2.2 Configuración del Parity:
	// Verificamos si el parity está activado o no
	if(ptrUsartHandler -> USART_Config.USART_parity != USART_PARITY_NONE){
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	79db      	ldrb	r3, [r3, #7]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d02b      	beq.n	80010d2 <USART_Config+0xc2>

		// Verificamos si se ha seleccionado ODD or EVEN

		//Se selecciona EVEN
		if(ptrUsartHandler -> USART_Config.USART_parity == USART_PARITY_EVEN){
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	79db      	ldrb	r3, [r3, #7]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d113      	bne.n	80010aa <USART_Config+0x9a>
			//Ponemos 0b0 en la posicion 9 del registo CR1 para escoger Even
			ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_PS);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68da      	ldr	r2, [r3, #12]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001090:	60da      	str	r2, [r3, #12]

			// Además, se seleccionan 9 bits.
			ptrUsartHandler -> USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2201      	movs	r2, #1
 8001096:	719a      	strb	r2, [r3, #6]
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	e01b      	b.n	80010e2 <USART_Config+0xd2>
		}
		//Se selecciona ODD
		else{
			//Ponemos 0b1 en la posicion 9 del registo CR1 para escoger Even
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_PS);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010b8:	60da      	str	r2, [r3, #12]

			// Además, se seleccionan 9 bits.
			ptrUsartHandler -> USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	719a      	strb	r2, [r3, #6]
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	68da      	ldr	r2, [r3, #12]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	e007      	b.n	80010e2 <USART_Config+0xd2>
		}
	}
	//No deseamos activar el parity-check
	else{
		//Ponemos 0b0 en la posicion 10 del registro CR1 para desactivar el Parity
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_PCE);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010e0:	60da      	str	r2, [r3, #12]

	// 2.3 Configuramos el tamaño del dato:

	//Verificamos si va a ser de 8 o 9 bits

	if(ptrUsartHandler -> USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	799b      	ldrb	r3, [r3, #6]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d108      	bne.n	80010fc <USART_Config+0xec>
		//Ponemos 0b0 en la posicion 12 del registro CR1 para escoger 8 bits
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_M);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68da      	ldr	r2, [r3, #12]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	e007      	b.n	800110c <USART_Config+0xfc>
	}else{
		//Ponemos 0b1 en la posicion 12 del registro CR1 para escoger 9 bits
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	68da      	ldr	r2, [r3, #12]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800110a:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)

	switch(ptrUsartHandler -> USART_Config.USART_stopbits){
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7a1b      	ldrb	r3, [r3, #8]
 8001110:	2b03      	cmp	r3, #3
 8001112:	d847      	bhi.n	80011a4 <USART_Config+0x194>
 8001114:	a201      	add	r2, pc, #4	; (adr r2, 800111c <USART_Config+0x10c>)
 8001116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111a:	bf00      	nop
 800111c:	0800112d 	.word	0x0800112d
 8001120:	0800113f 	.word	0x0800113f
 8001124:	08001161 	.word	0x08001161
 8001128:	08001183 	.word	0x08001183
	case USART_STOPBIT_1: {
		//Cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	691a      	ldr	r2, [r3, #16]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800113a:	611a      	str	r2, [r3, #16]
		break;
 800113c:	e03b      	b.n	80011b6 <USART_Config+0x1a6>
	}
	case USART_STOPBIT_0_5:{
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	691a      	ldr	r2, [r3, #16]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800114c:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b01 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP_0);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	691a      	ldr	r2, [r3, #16]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800115c:	611a      	str	r2, [r3, #16]
		break;
 800115e:	e02a      	b.n	80011b6 <USART_Config+0x1a6>
	}
	case USART_STOPBIT_2:{
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	691a      	ldr	r2, [r3, #16]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800116e:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b10 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP_1);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	691a      	ldr	r2, [r3, #16]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800117e:	611a      	str	r2, [r3, #16]
		break;
 8001180:	e019      	b.n	80011b6 <USART_Config+0x1a6>
	}
	case USART_STOPBIT_1_5: {
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	691a      	ldr	r2, [r3, #16]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001190:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b11 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	691a      	ldr	r2, [r3, #16]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80011a0:	611a      	str	r2, [r3, #16]
		break;
 80011a2:	e008      	b.n	80011b6 <USART_Config+0x1a6>
	}
	default:{
		//Cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	691a      	ldr	r2, [r3, #16]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80011b2:	611a      	str	r2, [r3, #16]
		break;
 80011b4:	bf00      	nop
	}
	}

	// 2.4 Configuración del Baudrate (SFR USART_BRR)
	// Ver tabla de valores (Tabla 75), Frec = 16MHz, overr = 0;
	if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	795b      	ldrb	r3, [r3, #5]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d105      	bne.n	80011ca <USART_Config+0x1ba>
		// El valor a cargar es 104.1875 -> Mantiza = 104, fraction = 0.1875
		// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
		// Valor a cargar 0x683
		// Configurando el Baudrate generator para una velocidad de 9600bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0683;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f240 6283 	movw	r2, #1667	; 0x683
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	e011      	b.n	80011ee <USART_Config+0x1de>
	}

	else if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_19200){
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	795b      	ldrb	r3, [r3, #5]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d105      	bne.n	80011de <USART_Config+0x1ce>
		// El valor a cargar es 52.0625 -> Mantiza = 52, fraction = 0.0625
		// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
		// Valor a cargar 0x0341
		// Configurando el Baudrate generator para una velocidad de 19200bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0341;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f240 3241 	movw	r2, #833	; 0x341
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	e007      	b.n	80011ee <USART_Config+0x1de>
	}

	else if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_115200){	//**************************************DUDAAAAAA
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	795b      	ldrb	r3, [r3, #5]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d103      	bne.n	80011ee <USART_Config+0x1de>
		// El valor a cargar es 8.6875 -> Mantiza = 8, fraction = 0.6875
		// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11
		// Valor a cargar 0x0081
		// Configurando el Baudrate generator para una velocidad de 115200bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0081;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2281      	movs	r2, #129	; 0x81
 80011ec:	609a      	str	r2, [r3, #8]
	}

	// 2.5 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler -> USART_Config.USART_mode){
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	791b      	ldrb	r3, [r3, #4]
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d847      	bhi.n	8001286 <USART_Config+0x276>
 80011f6:	a201      	add	r2, pc, #4	; (adr r2, 80011fc <USART_Config+0x1ec>)
 80011f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fc:	0800120d 	.word	0x0800120d
 8001200:	0800121f 	.word	0x0800121f
 8001204:	08001231 	.word	0x08001231
 8001208:	08001265 	.word	0x08001265
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		//Cargamos el valor 0b1 en el bit TE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TE);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68da      	ldr	r2, [r3, #12]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f042 0208 	orr.w	r2, r2, #8
 800121a:	60da      	str	r2, [r3, #12]
		break;
 800121c:	e044      	b.n	80012a8 <USART_Config+0x298>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		//Cargamos el valor 0b1 en el bit RE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RE);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f042 0204 	orr.w	r2, r2, #4
 800122c:	60da      	str	r2, [r3, #12]
		break;
 800122e:	e03b      	b.n	80012a8 <USART_Config+0x298>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmisión como recepción
		//Cargamos el valor 0b1 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TE);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	68da      	ldr	r2, [r3, #12]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 0208 	orr.w	r2, r2, #8
 800123e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RE);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 0204 	orr.w	r2, r2, #4
 800124e:	60da      	str	r2, [r3, #12]
		break;
 8001250:	e02a      	b.n	80012a8 <USART_Config+0x298>
 8001252:	bf00      	nop
 8001254:	40011000 	.word	0x40011000
 8001258:	40023800 	.word	0x40023800
 800125c:	40004400 	.word	0x40004400
 8001260:	40011400 	.word	0x40011400
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		//Cargamos el valor 0b0 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TE);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68da      	ldr	r2, [r3, #12]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 0208 	bic.w	r2, r2, #8
 8001272:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RE);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0204 	bic.w	r2, r2, #4
 8001282:	60da      	str	r2, [r3, #12]
		break;
 8001284:	e010      	b.n	80012a8 <USART_Config+0x298>
	}
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		//Cargamos el valor 0b0 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TE);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 0208 	bic.w	r2, r2, #8
 8001294:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RE);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 0204 	bic.w	r2, r2, #4
 80012a4:	60da      	str	r2, [r3, #12]
		break;
 80012a6:	bf00      	nop
	}
	}

	// 2.6 Activamos el modulo serial.

	if(ptrUsartHandler -> USART_Config.USART_mode != USART_MODE_DISABLE){
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	791b      	ldrb	r3, [r3, #4]
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d007      	beq.n	80012c0 <USART_Config+0x2b0>
		//Cargamos el valor de 0b1 en el bit UE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_UE);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68da      	ldr	r2, [r3, #12]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012be:	60da      	str	r2, [r3, #12]
	}

	// 3. Activamos la interrupción para el USART

	switch(ptrUsartHandler -> USART_Config.USART_interrupt){
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	7a5b      	ldrb	r3, [r3, #9]
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d84f      	bhi.n	8001368 <USART_Config+0x358>
 80012c8:	a201      	add	r2, pc, #4	; (adr r2, 80012d0 <USART_Config+0x2c0>)
 80012ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ce:	bf00      	nop
 80012d0:	080012e1 	.word	0x080012e1
 80012d4:	08001303 	.word	0x08001303
 80012d8:	08001325 	.word	0x08001325
 80012dc:	08001347 	.word	0x08001347
	// Analizamos los
	case USART_INTERRUPT_RX_ENABLE:
	{
		// Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RXNEIE);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f042 0220 	orr.w	r2, r2, #32
 80012ee:	60da      	str	r2, [r3, #12]
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012fe:	60da      	str	r2, [r3, #12]
		break;
 8001300:	e043      	b.n	800138a <USART_Config+0x37a>
	}
	case USART_INTERRUPT_TX_ENABLE:
	{
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001310:	60da      	str	r2, [r3, #12]
		// NO Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RXNEIE);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68da      	ldr	r2, [r3, #12]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0220 	bic.w	r2, r2, #32
 8001320:	60da      	str	r2, [r3, #12]
		break;
 8001322:	e032      	b.n	800138a <USART_Config+0x37a>

	}
	case USART_INTERRUPT_RXTX_ENABLE:
	{
		// Activamos las dos interrupciones tanto del RX como del TX
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TXEIE);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001332:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001342:	60da      	str	r2, [r3, #12]
		break;
 8001344:	e021      	b.n	800138a <USART_Config+0x37a>
	}
	case USART_INTERRUPT_RXTX_DISABLE:
	{
		// Activamos las dos interrupciones tanto del RX como del TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001354:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68da      	ldr	r2, [r3, #12]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001364:	60da      	str	r2, [r3, #12]
		break;
 8001366:	e010      	b.n	800138a <USART_Config+0x37a>
	}

	default:
	{
		// NO Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RXNEIE);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68da      	ldr	r2, [r3, #12]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0220 	bic.w	r2, r2, #32
 8001376:	60da      	str	r2, [r3, #12]
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	68da      	ldr	r2, [r3, #12]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001386:	60da      	str	r2, [r3, #12]
		break;
 8001388:	bf00      	nop
	}
	}

	// 4. Activamos la señal de la interrupción en el NVIC

	if((ptrUsartHandler -> USART_Config.USART_interrupt == USART_INTERRUPT_RX_ENABLE) | (ptrUsartHandler -> USART_Config.USART_interrupt == USART_INTERRUPT_TX_ENABLE))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7a5b      	ldrb	r3, [r3, #9]
 800138e:	2b00      	cmp	r3, #0
 8001390:	bf0c      	ite	eq
 8001392:	2301      	moveq	r3, #1
 8001394:	2300      	movne	r3, #0
 8001396:	b2da      	uxtb	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7a5b      	ldrb	r3, [r3, #9]
 800139c:	2b01      	cmp	r3, #1
 800139e:	bf0c      	ite	eq
 80013a0:	2301      	moveq	r3, #1
 80013a2:	2300      	movne	r3, #0
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	4313      	orrs	r3, r2
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d019      	beq.n	80013e2 <USART_Config+0x3d2>
	{

		if(ptrUsartHandler -> ptrUSARTx == USART1){
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a0f      	ldr	r2, [pc, #60]	; (80013f0 <USART_Config+0x3e0>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d103      	bne.n	80013c0 <USART_Config+0x3b0>
			// Activamos la IRQ del USART1
			__NVIC_EnableIRQ(USART1_IRQn);
 80013b8:	2025      	movs	r0, #37	; 0x25
 80013ba:	f7ff fe0d 	bl	8000fd8 <__NVIC_EnableIRQ>
 80013be:	e010      	b.n	80013e2 <USART_Config+0x3d2>

		}else if(ptrUsartHandler -> ptrUSARTx == USART2){
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <USART_Config+0x3e4>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d103      	bne.n	80013d2 <USART_Config+0x3c2>
			// Activamos la IRQ del USART2
			__NVIC_EnableIRQ(USART2_IRQn);
 80013ca:	2026      	movs	r0, #38	; 0x26
 80013cc:	f7ff fe04 	bl	8000fd8 <__NVIC_EnableIRQ>
 80013d0:	e007      	b.n	80013e2 <USART_Config+0x3d2>

		}else if(ptrUsartHandler -> ptrUSARTx == USART6){
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <USART_Config+0x3e8>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d102      	bne.n	80013e2 <USART_Config+0x3d2>
			// Activamos la IRQ del USART6
			__NVIC_EnableIRQ(USART6_IRQn);
 80013dc:	2047      	movs	r0, #71	; 0x47
 80013de:	f7ff fdfb 	bl	8000fd8 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80013e2:	b662      	cpsie	i
}
 80013e4:	bf00      	nop
		}

	// 5. Activamos de nuevo todas las interrupciones

	__enable_irq();
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40011000 	.word	0x40011000
 80013f4:	40004400 	.word	0x40004400
 80013f8:	40011400 	.word	0x40011400

080013fc <USART1_Callback>:

//**********//  CallBacks //**********//

// Callback USART1
__attribute__((weak)) void USART1_Callback(void){
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
	__NOP();
 8001400:	bf00      	nop
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr

0800140a <USART6_Callback>:
__attribute__((weak)) void USART2_Callback(void){
	__NOP();
}

// Callback USART6
__attribute__((weak)) void USART6_Callback(void){
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
	__NOP();
 800140e:	bf00      	nop
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <USART1_IRQHandler>:

// Hay que hacer dos cosas: 1) Atender la interrupción. 2) Llamamos al Callback
/* Rutina de atención a la interrupción del USART */

void USART1_IRQHandler(void){
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0

	USART1 -> SR &= ~(USART_SR_RXNE);		// Bajamos la bandera manualmente
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <USART1_IRQHandler+0x18>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a03      	ldr	r2, [pc, #12]	; (8001430 <USART1_IRQHandler+0x18>)
 8001422:	f023 0320 	bic.w	r3, r3, #32
 8001426:	6013      	str	r3, [r2, #0]

	USART1_Callback();
 8001428:	f7ff ffe8 	bl	80013fc <USART1_Callback>
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40011000 	.word	0x40011000

08001434 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	USART2 -> SR &= ~(USART_SR_RXNE);		// Desactivamos la bandera manualmente para el RX
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <USART2_IRQHandler+0x24>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a06      	ldr	r2, [pc, #24]	; (8001458 <USART2_IRQHandler+0x24>)
 800143e:	f023 0320 	bic.w	r3, r3, #32
 8001442:	6013      	str	r3, [r2, #0]

	data = (USART2 -> DR);
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <USART2_IRQHandler+0x24>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4b04      	ldr	r3, [pc, #16]	; (800145c <USART2_IRQHandler+0x28>)
 800144c:	701a      	strb	r2, [r3, #0]

	USART2_Callback();
 800144e:	f7ff f895 	bl	800057c <USART2_Callback>

	//USART2 -> SR &= ~(USART_SR_TXE);		// Desactivamos la bandera para el TX
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40004400 	.word	0x40004400
 800145c:	200001b0 	.word	0x200001b0

08001460 <USART6_IRQHandler>:

void USART6_IRQHandler(void){
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	USART6 -> SR &= ~(USART_SR_RXNE);
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <USART6_IRQHandler+0x18>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a03      	ldr	r2, [pc, #12]	; (8001478 <USART6_IRQHandler+0x18>)
 800146a:	f023 0320 	bic.w	r3, r3, #32
 800146e:	6013      	str	r3, [r2, #0]
	USART6_Callback();
 8001470:	f7ff ffcb 	bl	800140a <USART6_Callback>
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40011400 	.word	0x40011400

0800147c <returnData>:
	dataToRead = ((char) (ptrUsartHandler -> ptrUSARTx -> DR));
	return dataToRead;

}

uint8_t returnData(void){
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
	return data;				// Devolvemos el valor
 8001480:	4b02      	ldr	r3, [pc, #8]	; (800148c <returnData+0x10>)
 8001482:	781b      	ldrb	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	200001b0 	.word	0x200001b0

08001490 <writeChar>:

//**********// Función para escribir un solo char //**********//

int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend){
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
	while(!(ptrUsartHandler -> ptrUSARTx -> SR & USART_SR_TXE)){
 800149a:	e000      	b.n	800149e <writeChar+0xe>
		__NOP();
 800149c:	bf00      	nop
	while(!(ptrUsartHandler -> ptrUSARTx -> SR & USART_SR_TXE)){
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f7      	beq.n	800149c <writeChar+0xc>
	// Permitimos la bandera del TX para el USART2
	//ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TXEIE);
	//USART2 -> SR |= (USART_SR_TXE);

	//Cargamos el valor de dataToSend en el USER DATA Register
	ptrUsartHandler -> ptrUSARTx -> DR = (dataToSend);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	605a      	str	r2, [r3, #4]

	//ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
	//USART2 -> SR &= ~(USART_SR_TXE);		// Desactivamos la bandera para el TX
	return dataToSend;
 80014b4:	683b      	ldr	r3, [r7, #0]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <writeMsg>:

/* Función para escribir un mensaje */

void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
	while(*msgToSend != '\0'){
 80014ca:	e008      	b.n	80014de <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ffdc 	bl	8001490 <writeChar>
		msgToSend++;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	3301      	adds	r3, #1
 80014dc:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f2      	bne.n	80014cc <writeMsg+0xc>
	}
}
 80014e6:	bf00      	nop
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <__errno>:
 80014f0:	4b01      	ldr	r3, [pc, #4]	; (80014f8 <__errno+0x8>)
 80014f2:	6818      	ldr	r0, [r3, #0]
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000040 	.word	0x20000040

080014fc <__libc_init_array>:
 80014fc:	b570      	push	{r4, r5, r6, lr}
 80014fe:	4d0d      	ldr	r5, [pc, #52]	; (8001534 <__libc_init_array+0x38>)
 8001500:	4c0d      	ldr	r4, [pc, #52]	; (8001538 <__libc_init_array+0x3c>)
 8001502:	1b64      	subs	r4, r4, r5
 8001504:	10a4      	asrs	r4, r4, #2
 8001506:	2600      	movs	r6, #0
 8001508:	42a6      	cmp	r6, r4
 800150a:	d109      	bne.n	8001520 <__libc_init_array+0x24>
 800150c:	4d0b      	ldr	r5, [pc, #44]	; (800153c <__libc_init_array+0x40>)
 800150e:	4c0c      	ldr	r4, [pc, #48]	; (8001540 <__libc_init_array+0x44>)
 8001510:	f000 fc84 	bl	8001e1c <_init>
 8001514:	1b64      	subs	r4, r4, r5
 8001516:	10a4      	asrs	r4, r4, #2
 8001518:	2600      	movs	r6, #0
 800151a:	42a6      	cmp	r6, r4
 800151c:	d105      	bne.n	800152a <__libc_init_array+0x2e>
 800151e:	bd70      	pop	{r4, r5, r6, pc}
 8001520:	f855 3b04 	ldr.w	r3, [r5], #4
 8001524:	4798      	blx	r3
 8001526:	3601      	adds	r6, #1
 8001528:	e7ee      	b.n	8001508 <__libc_init_array+0xc>
 800152a:	f855 3b04 	ldr.w	r3, [r5], #4
 800152e:	4798      	blx	r3
 8001530:	3601      	adds	r6, #1
 8001532:	e7f2      	b.n	800151a <__libc_init_array+0x1e>
 8001534:	08001e9c 	.word	0x08001e9c
 8001538:	08001e9c 	.word	0x08001e9c
 800153c:	08001e9c 	.word	0x08001e9c
 8001540:	08001ea0 	.word	0x08001ea0

08001544 <siprintf>:
 8001544:	b40e      	push	{r1, r2, r3}
 8001546:	b500      	push	{lr}
 8001548:	b09c      	sub	sp, #112	; 0x70
 800154a:	ab1d      	add	r3, sp, #116	; 0x74
 800154c:	9002      	str	r0, [sp, #8]
 800154e:	9006      	str	r0, [sp, #24]
 8001550:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001554:	4809      	ldr	r0, [pc, #36]	; (800157c <siprintf+0x38>)
 8001556:	9107      	str	r1, [sp, #28]
 8001558:	9104      	str	r1, [sp, #16]
 800155a:	4909      	ldr	r1, [pc, #36]	; (8001580 <siprintf+0x3c>)
 800155c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001560:	9105      	str	r1, [sp, #20]
 8001562:	6800      	ldr	r0, [r0, #0]
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	a902      	add	r1, sp, #8
 8001568:	f000 f868 	bl	800163c <_svfiprintf_r>
 800156c:	9b02      	ldr	r3, [sp, #8]
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
 8001572:	b01c      	add	sp, #112	; 0x70
 8001574:	f85d eb04 	ldr.w	lr, [sp], #4
 8001578:	b003      	add	sp, #12
 800157a:	4770      	bx	lr
 800157c:	20000040 	.word	0x20000040
 8001580:	ffff0208 	.word	0xffff0208

08001584 <__ssputs_r>:
 8001584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001588:	688e      	ldr	r6, [r1, #8]
 800158a:	429e      	cmp	r6, r3
 800158c:	4682      	mov	sl, r0
 800158e:	460c      	mov	r4, r1
 8001590:	4690      	mov	r8, r2
 8001592:	461f      	mov	r7, r3
 8001594:	d838      	bhi.n	8001608 <__ssputs_r+0x84>
 8001596:	898a      	ldrh	r2, [r1, #12]
 8001598:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800159c:	d032      	beq.n	8001604 <__ssputs_r+0x80>
 800159e:	6825      	ldr	r5, [r4, #0]
 80015a0:	6909      	ldr	r1, [r1, #16]
 80015a2:	eba5 0901 	sub.w	r9, r5, r1
 80015a6:	6965      	ldr	r5, [r4, #20]
 80015a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80015ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80015b0:	3301      	adds	r3, #1
 80015b2:	444b      	add	r3, r9
 80015b4:	106d      	asrs	r5, r5, #1
 80015b6:	429d      	cmp	r5, r3
 80015b8:	bf38      	it	cc
 80015ba:	461d      	movcc	r5, r3
 80015bc:	0553      	lsls	r3, r2, #21
 80015be:	d531      	bpl.n	8001624 <__ssputs_r+0xa0>
 80015c0:	4629      	mov	r1, r5
 80015c2:	f000 fb61 	bl	8001c88 <_malloc_r>
 80015c6:	4606      	mov	r6, r0
 80015c8:	b950      	cbnz	r0, 80015e0 <__ssputs_r+0x5c>
 80015ca:	230c      	movs	r3, #12
 80015cc:	f8ca 3000 	str.w	r3, [sl]
 80015d0:	89a3      	ldrh	r3, [r4, #12]
 80015d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015d6:	81a3      	strh	r3, [r4, #12]
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015e0:	6921      	ldr	r1, [r4, #16]
 80015e2:	464a      	mov	r2, r9
 80015e4:	f000 fabe 	bl	8001b64 <memcpy>
 80015e8:	89a3      	ldrh	r3, [r4, #12]
 80015ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80015ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f2:	81a3      	strh	r3, [r4, #12]
 80015f4:	6126      	str	r6, [r4, #16]
 80015f6:	6165      	str	r5, [r4, #20]
 80015f8:	444e      	add	r6, r9
 80015fa:	eba5 0509 	sub.w	r5, r5, r9
 80015fe:	6026      	str	r6, [r4, #0]
 8001600:	60a5      	str	r5, [r4, #8]
 8001602:	463e      	mov	r6, r7
 8001604:	42be      	cmp	r6, r7
 8001606:	d900      	bls.n	800160a <__ssputs_r+0x86>
 8001608:	463e      	mov	r6, r7
 800160a:	6820      	ldr	r0, [r4, #0]
 800160c:	4632      	mov	r2, r6
 800160e:	4641      	mov	r1, r8
 8001610:	f000 fab6 	bl	8001b80 <memmove>
 8001614:	68a3      	ldr	r3, [r4, #8]
 8001616:	1b9b      	subs	r3, r3, r6
 8001618:	60a3      	str	r3, [r4, #8]
 800161a:	6823      	ldr	r3, [r4, #0]
 800161c:	4433      	add	r3, r6
 800161e:	6023      	str	r3, [r4, #0]
 8001620:	2000      	movs	r0, #0
 8001622:	e7db      	b.n	80015dc <__ssputs_r+0x58>
 8001624:	462a      	mov	r2, r5
 8001626:	f000 fba3 	bl	8001d70 <_realloc_r>
 800162a:	4606      	mov	r6, r0
 800162c:	2800      	cmp	r0, #0
 800162e:	d1e1      	bne.n	80015f4 <__ssputs_r+0x70>
 8001630:	6921      	ldr	r1, [r4, #16]
 8001632:	4650      	mov	r0, sl
 8001634:	f000 fabe 	bl	8001bb4 <_free_r>
 8001638:	e7c7      	b.n	80015ca <__ssputs_r+0x46>
	...

0800163c <_svfiprintf_r>:
 800163c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001640:	4698      	mov	r8, r3
 8001642:	898b      	ldrh	r3, [r1, #12]
 8001644:	061b      	lsls	r3, r3, #24
 8001646:	b09d      	sub	sp, #116	; 0x74
 8001648:	4607      	mov	r7, r0
 800164a:	460d      	mov	r5, r1
 800164c:	4614      	mov	r4, r2
 800164e:	d50e      	bpl.n	800166e <_svfiprintf_r+0x32>
 8001650:	690b      	ldr	r3, [r1, #16]
 8001652:	b963      	cbnz	r3, 800166e <_svfiprintf_r+0x32>
 8001654:	2140      	movs	r1, #64	; 0x40
 8001656:	f000 fb17 	bl	8001c88 <_malloc_r>
 800165a:	6028      	str	r0, [r5, #0]
 800165c:	6128      	str	r0, [r5, #16]
 800165e:	b920      	cbnz	r0, 800166a <_svfiprintf_r+0x2e>
 8001660:	230c      	movs	r3, #12
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001668:	e0d1      	b.n	800180e <_svfiprintf_r+0x1d2>
 800166a:	2340      	movs	r3, #64	; 0x40
 800166c:	616b      	str	r3, [r5, #20]
 800166e:	2300      	movs	r3, #0
 8001670:	9309      	str	r3, [sp, #36]	; 0x24
 8001672:	2320      	movs	r3, #32
 8001674:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001678:	f8cd 800c 	str.w	r8, [sp, #12]
 800167c:	2330      	movs	r3, #48	; 0x30
 800167e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001828 <_svfiprintf_r+0x1ec>
 8001682:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001686:	f04f 0901 	mov.w	r9, #1
 800168a:	4623      	mov	r3, r4
 800168c:	469a      	mov	sl, r3
 800168e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001692:	b10a      	cbz	r2, 8001698 <_svfiprintf_r+0x5c>
 8001694:	2a25      	cmp	r2, #37	; 0x25
 8001696:	d1f9      	bne.n	800168c <_svfiprintf_r+0x50>
 8001698:	ebba 0b04 	subs.w	fp, sl, r4
 800169c:	d00b      	beq.n	80016b6 <_svfiprintf_r+0x7a>
 800169e:	465b      	mov	r3, fp
 80016a0:	4622      	mov	r2, r4
 80016a2:	4629      	mov	r1, r5
 80016a4:	4638      	mov	r0, r7
 80016a6:	f7ff ff6d 	bl	8001584 <__ssputs_r>
 80016aa:	3001      	adds	r0, #1
 80016ac:	f000 80aa 	beq.w	8001804 <_svfiprintf_r+0x1c8>
 80016b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80016b2:	445a      	add	r2, fp
 80016b4:	9209      	str	r2, [sp, #36]	; 0x24
 80016b6:	f89a 3000 	ldrb.w	r3, [sl]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 80a2 	beq.w	8001804 <_svfiprintf_r+0x1c8>
 80016c0:	2300      	movs	r3, #0
 80016c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80016ca:	f10a 0a01 	add.w	sl, sl, #1
 80016ce:	9304      	str	r3, [sp, #16]
 80016d0:	9307      	str	r3, [sp, #28]
 80016d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80016d6:	931a      	str	r3, [sp, #104]	; 0x68
 80016d8:	4654      	mov	r4, sl
 80016da:	2205      	movs	r2, #5
 80016dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016e0:	4851      	ldr	r0, [pc, #324]	; (8001828 <_svfiprintf_r+0x1ec>)
 80016e2:	f7fe fd7d 	bl	80001e0 <memchr>
 80016e6:	9a04      	ldr	r2, [sp, #16]
 80016e8:	b9d8      	cbnz	r0, 8001722 <_svfiprintf_r+0xe6>
 80016ea:	06d0      	lsls	r0, r2, #27
 80016ec:	bf44      	itt	mi
 80016ee:	2320      	movmi	r3, #32
 80016f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80016f4:	0711      	lsls	r1, r2, #28
 80016f6:	bf44      	itt	mi
 80016f8:	232b      	movmi	r3, #43	; 0x2b
 80016fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80016fe:	f89a 3000 	ldrb.w	r3, [sl]
 8001702:	2b2a      	cmp	r3, #42	; 0x2a
 8001704:	d015      	beq.n	8001732 <_svfiprintf_r+0xf6>
 8001706:	9a07      	ldr	r2, [sp, #28]
 8001708:	4654      	mov	r4, sl
 800170a:	2000      	movs	r0, #0
 800170c:	f04f 0c0a 	mov.w	ip, #10
 8001710:	4621      	mov	r1, r4
 8001712:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001716:	3b30      	subs	r3, #48	; 0x30
 8001718:	2b09      	cmp	r3, #9
 800171a:	d94e      	bls.n	80017ba <_svfiprintf_r+0x17e>
 800171c:	b1b0      	cbz	r0, 800174c <_svfiprintf_r+0x110>
 800171e:	9207      	str	r2, [sp, #28]
 8001720:	e014      	b.n	800174c <_svfiprintf_r+0x110>
 8001722:	eba0 0308 	sub.w	r3, r0, r8
 8001726:	fa09 f303 	lsl.w	r3, r9, r3
 800172a:	4313      	orrs	r3, r2
 800172c:	9304      	str	r3, [sp, #16]
 800172e:	46a2      	mov	sl, r4
 8001730:	e7d2      	b.n	80016d8 <_svfiprintf_r+0x9c>
 8001732:	9b03      	ldr	r3, [sp, #12]
 8001734:	1d19      	adds	r1, r3, #4
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	9103      	str	r1, [sp, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	bfbb      	ittet	lt
 800173e:	425b      	neglt	r3, r3
 8001740:	f042 0202 	orrlt.w	r2, r2, #2
 8001744:	9307      	strge	r3, [sp, #28]
 8001746:	9307      	strlt	r3, [sp, #28]
 8001748:	bfb8      	it	lt
 800174a:	9204      	strlt	r2, [sp, #16]
 800174c:	7823      	ldrb	r3, [r4, #0]
 800174e:	2b2e      	cmp	r3, #46	; 0x2e
 8001750:	d10c      	bne.n	800176c <_svfiprintf_r+0x130>
 8001752:	7863      	ldrb	r3, [r4, #1]
 8001754:	2b2a      	cmp	r3, #42	; 0x2a
 8001756:	d135      	bne.n	80017c4 <_svfiprintf_r+0x188>
 8001758:	9b03      	ldr	r3, [sp, #12]
 800175a:	1d1a      	adds	r2, r3, #4
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	9203      	str	r2, [sp, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	bfb8      	it	lt
 8001764:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001768:	3402      	adds	r4, #2
 800176a:	9305      	str	r3, [sp, #20]
 800176c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800182c <_svfiprintf_r+0x1f0>
 8001770:	7821      	ldrb	r1, [r4, #0]
 8001772:	2203      	movs	r2, #3
 8001774:	4650      	mov	r0, sl
 8001776:	f7fe fd33 	bl	80001e0 <memchr>
 800177a:	b140      	cbz	r0, 800178e <_svfiprintf_r+0x152>
 800177c:	2340      	movs	r3, #64	; 0x40
 800177e:	eba0 000a 	sub.w	r0, r0, sl
 8001782:	fa03 f000 	lsl.w	r0, r3, r0
 8001786:	9b04      	ldr	r3, [sp, #16]
 8001788:	4303      	orrs	r3, r0
 800178a:	3401      	adds	r4, #1
 800178c:	9304      	str	r3, [sp, #16]
 800178e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001792:	4827      	ldr	r0, [pc, #156]	; (8001830 <_svfiprintf_r+0x1f4>)
 8001794:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001798:	2206      	movs	r2, #6
 800179a:	f7fe fd21 	bl	80001e0 <memchr>
 800179e:	2800      	cmp	r0, #0
 80017a0:	d038      	beq.n	8001814 <_svfiprintf_r+0x1d8>
 80017a2:	4b24      	ldr	r3, [pc, #144]	; (8001834 <_svfiprintf_r+0x1f8>)
 80017a4:	bb1b      	cbnz	r3, 80017ee <_svfiprintf_r+0x1b2>
 80017a6:	9b03      	ldr	r3, [sp, #12]
 80017a8:	3307      	adds	r3, #7
 80017aa:	f023 0307 	bic.w	r3, r3, #7
 80017ae:	3308      	adds	r3, #8
 80017b0:	9303      	str	r3, [sp, #12]
 80017b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017b4:	4433      	add	r3, r6
 80017b6:	9309      	str	r3, [sp, #36]	; 0x24
 80017b8:	e767      	b.n	800168a <_svfiprintf_r+0x4e>
 80017ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80017be:	460c      	mov	r4, r1
 80017c0:	2001      	movs	r0, #1
 80017c2:	e7a5      	b.n	8001710 <_svfiprintf_r+0xd4>
 80017c4:	2300      	movs	r3, #0
 80017c6:	3401      	adds	r4, #1
 80017c8:	9305      	str	r3, [sp, #20]
 80017ca:	4619      	mov	r1, r3
 80017cc:	f04f 0c0a 	mov.w	ip, #10
 80017d0:	4620      	mov	r0, r4
 80017d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80017d6:	3a30      	subs	r2, #48	; 0x30
 80017d8:	2a09      	cmp	r2, #9
 80017da:	d903      	bls.n	80017e4 <_svfiprintf_r+0x1a8>
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0c5      	beq.n	800176c <_svfiprintf_r+0x130>
 80017e0:	9105      	str	r1, [sp, #20]
 80017e2:	e7c3      	b.n	800176c <_svfiprintf_r+0x130>
 80017e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80017e8:	4604      	mov	r4, r0
 80017ea:	2301      	movs	r3, #1
 80017ec:	e7f0      	b.n	80017d0 <_svfiprintf_r+0x194>
 80017ee:	ab03      	add	r3, sp, #12
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	462a      	mov	r2, r5
 80017f4:	4b10      	ldr	r3, [pc, #64]	; (8001838 <_svfiprintf_r+0x1fc>)
 80017f6:	a904      	add	r1, sp, #16
 80017f8:	4638      	mov	r0, r7
 80017fa:	f3af 8000 	nop.w
 80017fe:	1c42      	adds	r2, r0, #1
 8001800:	4606      	mov	r6, r0
 8001802:	d1d6      	bne.n	80017b2 <_svfiprintf_r+0x176>
 8001804:	89ab      	ldrh	r3, [r5, #12]
 8001806:	065b      	lsls	r3, r3, #25
 8001808:	f53f af2c 	bmi.w	8001664 <_svfiprintf_r+0x28>
 800180c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800180e:	b01d      	add	sp, #116	; 0x74
 8001810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001814:	ab03      	add	r3, sp, #12
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	462a      	mov	r2, r5
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <_svfiprintf_r+0x1fc>)
 800181c:	a904      	add	r1, sp, #16
 800181e:	4638      	mov	r0, r7
 8001820:	f000 f87a 	bl	8001918 <_printf_i>
 8001824:	e7eb      	b.n	80017fe <_svfiprintf_r+0x1c2>
 8001826:	bf00      	nop
 8001828:	08001e66 	.word	0x08001e66
 800182c:	08001e6c 	.word	0x08001e6c
 8001830:	08001e70 	.word	0x08001e70
 8001834:	00000000 	.word	0x00000000
 8001838:	08001585 	.word	0x08001585

0800183c <_printf_common>:
 800183c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001840:	4616      	mov	r6, r2
 8001842:	4699      	mov	r9, r3
 8001844:	688a      	ldr	r2, [r1, #8]
 8001846:	690b      	ldr	r3, [r1, #16]
 8001848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800184c:	4293      	cmp	r3, r2
 800184e:	bfb8      	it	lt
 8001850:	4613      	movlt	r3, r2
 8001852:	6033      	str	r3, [r6, #0]
 8001854:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001858:	4607      	mov	r7, r0
 800185a:	460c      	mov	r4, r1
 800185c:	b10a      	cbz	r2, 8001862 <_printf_common+0x26>
 800185e:	3301      	adds	r3, #1
 8001860:	6033      	str	r3, [r6, #0]
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	0699      	lsls	r1, r3, #26
 8001866:	bf42      	ittt	mi
 8001868:	6833      	ldrmi	r3, [r6, #0]
 800186a:	3302      	addmi	r3, #2
 800186c:	6033      	strmi	r3, [r6, #0]
 800186e:	6825      	ldr	r5, [r4, #0]
 8001870:	f015 0506 	ands.w	r5, r5, #6
 8001874:	d106      	bne.n	8001884 <_printf_common+0x48>
 8001876:	f104 0a19 	add.w	sl, r4, #25
 800187a:	68e3      	ldr	r3, [r4, #12]
 800187c:	6832      	ldr	r2, [r6, #0]
 800187e:	1a9b      	subs	r3, r3, r2
 8001880:	42ab      	cmp	r3, r5
 8001882:	dc26      	bgt.n	80018d2 <_printf_common+0x96>
 8001884:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001888:	1e13      	subs	r3, r2, #0
 800188a:	6822      	ldr	r2, [r4, #0]
 800188c:	bf18      	it	ne
 800188e:	2301      	movne	r3, #1
 8001890:	0692      	lsls	r2, r2, #26
 8001892:	d42b      	bmi.n	80018ec <_printf_common+0xb0>
 8001894:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001898:	4649      	mov	r1, r9
 800189a:	4638      	mov	r0, r7
 800189c:	47c0      	blx	r8
 800189e:	3001      	adds	r0, #1
 80018a0:	d01e      	beq.n	80018e0 <_printf_common+0xa4>
 80018a2:	6823      	ldr	r3, [r4, #0]
 80018a4:	68e5      	ldr	r5, [r4, #12]
 80018a6:	6832      	ldr	r2, [r6, #0]
 80018a8:	f003 0306 	and.w	r3, r3, #6
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	bf08      	it	eq
 80018b0:	1aad      	subeq	r5, r5, r2
 80018b2:	68a3      	ldr	r3, [r4, #8]
 80018b4:	6922      	ldr	r2, [r4, #16]
 80018b6:	bf0c      	ite	eq
 80018b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80018bc:	2500      	movne	r5, #0
 80018be:	4293      	cmp	r3, r2
 80018c0:	bfc4      	itt	gt
 80018c2:	1a9b      	subgt	r3, r3, r2
 80018c4:	18ed      	addgt	r5, r5, r3
 80018c6:	2600      	movs	r6, #0
 80018c8:	341a      	adds	r4, #26
 80018ca:	42b5      	cmp	r5, r6
 80018cc:	d11a      	bne.n	8001904 <_printf_common+0xc8>
 80018ce:	2000      	movs	r0, #0
 80018d0:	e008      	b.n	80018e4 <_printf_common+0xa8>
 80018d2:	2301      	movs	r3, #1
 80018d4:	4652      	mov	r2, sl
 80018d6:	4649      	mov	r1, r9
 80018d8:	4638      	mov	r0, r7
 80018da:	47c0      	blx	r8
 80018dc:	3001      	adds	r0, #1
 80018de:	d103      	bne.n	80018e8 <_printf_common+0xac>
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018e8:	3501      	adds	r5, #1
 80018ea:	e7c6      	b.n	800187a <_printf_common+0x3e>
 80018ec:	18e1      	adds	r1, r4, r3
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	2030      	movs	r0, #48	; 0x30
 80018f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80018f6:	4422      	add	r2, r4
 80018f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80018fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001900:	3302      	adds	r3, #2
 8001902:	e7c7      	b.n	8001894 <_printf_common+0x58>
 8001904:	2301      	movs	r3, #1
 8001906:	4622      	mov	r2, r4
 8001908:	4649      	mov	r1, r9
 800190a:	4638      	mov	r0, r7
 800190c:	47c0      	blx	r8
 800190e:	3001      	adds	r0, #1
 8001910:	d0e6      	beq.n	80018e0 <_printf_common+0xa4>
 8001912:	3601      	adds	r6, #1
 8001914:	e7d9      	b.n	80018ca <_printf_common+0x8e>
	...

08001918 <_printf_i>:
 8001918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800191c:	7e0f      	ldrb	r7, [r1, #24]
 800191e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001920:	2f78      	cmp	r7, #120	; 0x78
 8001922:	4691      	mov	r9, r2
 8001924:	4680      	mov	r8, r0
 8001926:	460c      	mov	r4, r1
 8001928:	469a      	mov	sl, r3
 800192a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800192e:	d807      	bhi.n	8001940 <_printf_i+0x28>
 8001930:	2f62      	cmp	r7, #98	; 0x62
 8001932:	d80a      	bhi.n	800194a <_printf_i+0x32>
 8001934:	2f00      	cmp	r7, #0
 8001936:	f000 80d8 	beq.w	8001aea <_printf_i+0x1d2>
 800193a:	2f58      	cmp	r7, #88	; 0x58
 800193c:	f000 80a3 	beq.w	8001a86 <_printf_i+0x16e>
 8001940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001944:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001948:	e03a      	b.n	80019c0 <_printf_i+0xa8>
 800194a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800194e:	2b15      	cmp	r3, #21
 8001950:	d8f6      	bhi.n	8001940 <_printf_i+0x28>
 8001952:	a101      	add	r1, pc, #4	; (adr r1, 8001958 <_printf_i+0x40>)
 8001954:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001958:	080019b1 	.word	0x080019b1
 800195c:	080019c5 	.word	0x080019c5
 8001960:	08001941 	.word	0x08001941
 8001964:	08001941 	.word	0x08001941
 8001968:	08001941 	.word	0x08001941
 800196c:	08001941 	.word	0x08001941
 8001970:	080019c5 	.word	0x080019c5
 8001974:	08001941 	.word	0x08001941
 8001978:	08001941 	.word	0x08001941
 800197c:	08001941 	.word	0x08001941
 8001980:	08001941 	.word	0x08001941
 8001984:	08001ad1 	.word	0x08001ad1
 8001988:	080019f5 	.word	0x080019f5
 800198c:	08001ab3 	.word	0x08001ab3
 8001990:	08001941 	.word	0x08001941
 8001994:	08001941 	.word	0x08001941
 8001998:	08001af3 	.word	0x08001af3
 800199c:	08001941 	.word	0x08001941
 80019a0:	080019f5 	.word	0x080019f5
 80019a4:	08001941 	.word	0x08001941
 80019a8:	08001941 	.word	0x08001941
 80019ac:	08001abb 	.word	0x08001abb
 80019b0:	682b      	ldr	r3, [r5, #0]
 80019b2:	1d1a      	adds	r2, r3, #4
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	602a      	str	r2, [r5, #0]
 80019b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80019bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0a3      	b.n	8001b0c <_printf_i+0x1f4>
 80019c4:	6820      	ldr	r0, [r4, #0]
 80019c6:	6829      	ldr	r1, [r5, #0]
 80019c8:	0606      	lsls	r6, r0, #24
 80019ca:	f101 0304 	add.w	r3, r1, #4
 80019ce:	d50a      	bpl.n	80019e6 <_printf_i+0xce>
 80019d0:	680e      	ldr	r6, [r1, #0]
 80019d2:	602b      	str	r3, [r5, #0]
 80019d4:	2e00      	cmp	r6, #0
 80019d6:	da03      	bge.n	80019e0 <_printf_i+0xc8>
 80019d8:	232d      	movs	r3, #45	; 0x2d
 80019da:	4276      	negs	r6, r6
 80019dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80019e0:	485e      	ldr	r0, [pc, #376]	; (8001b5c <_printf_i+0x244>)
 80019e2:	230a      	movs	r3, #10
 80019e4:	e019      	b.n	8001a1a <_printf_i+0x102>
 80019e6:	680e      	ldr	r6, [r1, #0]
 80019e8:	602b      	str	r3, [r5, #0]
 80019ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80019ee:	bf18      	it	ne
 80019f0:	b236      	sxthne	r6, r6
 80019f2:	e7ef      	b.n	80019d4 <_printf_i+0xbc>
 80019f4:	682b      	ldr	r3, [r5, #0]
 80019f6:	6820      	ldr	r0, [r4, #0]
 80019f8:	1d19      	adds	r1, r3, #4
 80019fa:	6029      	str	r1, [r5, #0]
 80019fc:	0601      	lsls	r1, r0, #24
 80019fe:	d501      	bpl.n	8001a04 <_printf_i+0xec>
 8001a00:	681e      	ldr	r6, [r3, #0]
 8001a02:	e002      	b.n	8001a0a <_printf_i+0xf2>
 8001a04:	0646      	lsls	r6, r0, #25
 8001a06:	d5fb      	bpl.n	8001a00 <_printf_i+0xe8>
 8001a08:	881e      	ldrh	r6, [r3, #0]
 8001a0a:	4854      	ldr	r0, [pc, #336]	; (8001b5c <_printf_i+0x244>)
 8001a0c:	2f6f      	cmp	r7, #111	; 0x6f
 8001a0e:	bf0c      	ite	eq
 8001a10:	2308      	moveq	r3, #8
 8001a12:	230a      	movne	r3, #10
 8001a14:	2100      	movs	r1, #0
 8001a16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001a1a:	6865      	ldr	r5, [r4, #4]
 8001a1c:	60a5      	str	r5, [r4, #8]
 8001a1e:	2d00      	cmp	r5, #0
 8001a20:	bfa2      	ittt	ge
 8001a22:	6821      	ldrge	r1, [r4, #0]
 8001a24:	f021 0104 	bicge.w	r1, r1, #4
 8001a28:	6021      	strge	r1, [r4, #0]
 8001a2a:	b90e      	cbnz	r6, 8001a30 <_printf_i+0x118>
 8001a2c:	2d00      	cmp	r5, #0
 8001a2e:	d04d      	beq.n	8001acc <_printf_i+0x1b4>
 8001a30:	4615      	mov	r5, r2
 8001a32:	fbb6 f1f3 	udiv	r1, r6, r3
 8001a36:	fb03 6711 	mls	r7, r3, r1, r6
 8001a3a:	5dc7      	ldrb	r7, [r0, r7]
 8001a3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001a40:	4637      	mov	r7, r6
 8001a42:	42bb      	cmp	r3, r7
 8001a44:	460e      	mov	r6, r1
 8001a46:	d9f4      	bls.n	8001a32 <_printf_i+0x11a>
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	d10b      	bne.n	8001a64 <_printf_i+0x14c>
 8001a4c:	6823      	ldr	r3, [r4, #0]
 8001a4e:	07de      	lsls	r6, r3, #31
 8001a50:	d508      	bpl.n	8001a64 <_printf_i+0x14c>
 8001a52:	6923      	ldr	r3, [r4, #16]
 8001a54:	6861      	ldr	r1, [r4, #4]
 8001a56:	4299      	cmp	r1, r3
 8001a58:	bfde      	ittt	le
 8001a5a:	2330      	movle	r3, #48	; 0x30
 8001a5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001a60:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001a64:	1b52      	subs	r2, r2, r5
 8001a66:	6122      	str	r2, [r4, #16]
 8001a68:	f8cd a000 	str.w	sl, [sp]
 8001a6c:	464b      	mov	r3, r9
 8001a6e:	aa03      	add	r2, sp, #12
 8001a70:	4621      	mov	r1, r4
 8001a72:	4640      	mov	r0, r8
 8001a74:	f7ff fee2 	bl	800183c <_printf_common>
 8001a78:	3001      	adds	r0, #1
 8001a7a:	d14c      	bne.n	8001b16 <_printf_i+0x1fe>
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a80:	b004      	add	sp, #16
 8001a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a86:	4835      	ldr	r0, [pc, #212]	; (8001b5c <_printf_i+0x244>)
 8001a88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001a8c:	6829      	ldr	r1, [r5, #0]
 8001a8e:	6823      	ldr	r3, [r4, #0]
 8001a90:	f851 6b04 	ldr.w	r6, [r1], #4
 8001a94:	6029      	str	r1, [r5, #0]
 8001a96:	061d      	lsls	r5, r3, #24
 8001a98:	d514      	bpl.n	8001ac4 <_printf_i+0x1ac>
 8001a9a:	07df      	lsls	r7, r3, #31
 8001a9c:	bf44      	itt	mi
 8001a9e:	f043 0320 	orrmi.w	r3, r3, #32
 8001aa2:	6023      	strmi	r3, [r4, #0]
 8001aa4:	b91e      	cbnz	r6, 8001aae <_printf_i+0x196>
 8001aa6:	6823      	ldr	r3, [r4, #0]
 8001aa8:	f023 0320 	bic.w	r3, r3, #32
 8001aac:	6023      	str	r3, [r4, #0]
 8001aae:	2310      	movs	r3, #16
 8001ab0:	e7b0      	b.n	8001a14 <_printf_i+0xfc>
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	f043 0320 	orr.w	r3, r3, #32
 8001ab8:	6023      	str	r3, [r4, #0]
 8001aba:	2378      	movs	r3, #120	; 0x78
 8001abc:	4828      	ldr	r0, [pc, #160]	; (8001b60 <_printf_i+0x248>)
 8001abe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001ac2:	e7e3      	b.n	8001a8c <_printf_i+0x174>
 8001ac4:	0659      	lsls	r1, r3, #25
 8001ac6:	bf48      	it	mi
 8001ac8:	b2b6      	uxthmi	r6, r6
 8001aca:	e7e6      	b.n	8001a9a <_printf_i+0x182>
 8001acc:	4615      	mov	r5, r2
 8001ace:	e7bb      	b.n	8001a48 <_printf_i+0x130>
 8001ad0:	682b      	ldr	r3, [r5, #0]
 8001ad2:	6826      	ldr	r6, [r4, #0]
 8001ad4:	6961      	ldr	r1, [r4, #20]
 8001ad6:	1d18      	adds	r0, r3, #4
 8001ad8:	6028      	str	r0, [r5, #0]
 8001ada:	0635      	lsls	r5, r6, #24
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	d501      	bpl.n	8001ae4 <_printf_i+0x1cc>
 8001ae0:	6019      	str	r1, [r3, #0]
 8001ae2:	e002      	b.n	8001aea <_printf_i+0x1d2>
 8001ae4:	0670      	lsls	r0, r6, #25
 8001ae6:	d5fb      	bpl.n	8001ae0 <_printf_i+0x1c8>
 8001ae8:	8019      	strh	r1, [r3, #0]
 8001aea:	2300      	movs	r3, #0
 8001aec:	6123      	str	r3, [r4, #16]
 8001aee:	4615      	mov	r5, r2
 8001af0:	e7ba      	b.n	8001a68 <_printf_i+0x150>
 8001af2:	682b      	ldr	r3, [r5, #0]
 8001af4:	1d1a      	adds	r2, r3, #4
 8001af6:	602a      	str	r2, [r5, #0]
 8001af8:	681d      	ldr	r5, [r3, #0]
 8001afa:	6862      	ldr	r2, [r4, #4]
 8001afc:	2100      	movs	r1, #0
 8001afe:	4628      	mov	r0, r5
 8001b00:	f7fe fb6e 	bl	80001e0 <memchr>
 8001b04:	b108      	cbz	r0, 8001b0a <_printf_i+0x1f2>
 8001b06:	1b40      	subs	r0, r0, r5
 8001b08:	6060      	str	r0, [r4, #4]
 8001b0a:	6863      	ldr	r3, [r4, #4]
 8001b0c:	6123      	str	r3, [r4, #16]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b14:	e7a8      	b.n	8001a68 <_printf_i+0x150>
 8001b16:	6923      	ldr	r3, [r4, #16]
 8001b18:	462a      	mov	r2, r5
 8001b1a:	4649      	mov	r1, r9
 8001b1c:	4640      	mov	r0, r8
 8001b1e:	47d0      	blx	sl
 8001b20:	3001      	adds	r0, #1
 8001b22:	d0ab      	beq.n	8001a7c <_printf_i+0x164>
 8001b24:	6823      	ldr	r3, [r4, #0]
 8001b26:	079b      	lsls	r3, r3, #30
 8001b28:	d413      	bmi.n	8001b52 <_printf_i+0x23a>
 8001b2a:	68e0      	ldr	r0, [r4, #12]
 8001b2c:	9b03      	ldr	r3, [sp, #12]
 8001b2e:	4298      	cmp	r0, r3
 8001b30:	bfb8      	it	lt
 8001b32:	4618      	movlt	r0, r3
 8001b34:	e7a4      	b.n	8001a80 <_printf_i+0x168>
 8001b36:	2301      	movs	r3, #1
 8001b38:	4632      	mov	r2, r6
 8001b3a:	4649      	mov	r1, r9
 8001b3c:	4640      	mov	r0, r8
 8001b3e:	47d0      	blx	sl
 8001b40:	3001      	adds	r0, #1
 8001b42:	d09b      	beq.n	8001a7c <_printf_i+0x164>
 8001b44:	3501      	adds	r5, #1
 8001b46:	68e3      	ldr	r3, [r4, #12]
 8001b48:	9903      	ldr	r1, [sp, #12]
 8001b4a:	1a5b      	subs	r3, r3, r1
 8001b4c:	42ab      	cmp	r3, r5
 8001b4e:	dcf2      	bgt.n	8001b36 <_printf_i+0x21e>
 8001b50:	e7eb      	b.n	8001b2a <_printf_i+0x212>
 8001b52:	2500      	movs	r5, #0
 8001b54:	f104 0619 	add.w	r6, r4, #25
 8001b58:	e7f5      	b.n	8001b46 <_printf_i+0x22e>
 8001b5a:	bf00      	nop
 8001b5c:	08001e77 	.word	0x08001e77
 8001b60:	08001e88 	.word	0x08001e88

08001b64 <memcpy>:
 8001b64:	440a      	add	r2, r1
 8001b66:	4291      	cmp	r1, r2
 8001b68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001b6c:	d100      	bne.n	8001b70 <memcpy+0xc>
 8001b6e:	4770      	bx	lr
 8001b70:	b510      	push	{r4, lr}
 8001b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001b76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001b7a:	4291      	cmp	r1, r2
 8001b7c:	d1f9      	bne.n	8001b72 <memcpy+0xe>
 8001b7e:	bd10      	pop	{r4, pc}

08001b80 <memmove>:
 8001b80:	4288      	cmp	r0, r1
 8001b82:	b510      	push	{r4, lr}
 8001b84:	eb01 0402 	add.w	r4, r1, r2
 8001b88:	d902      	bls.n	8001b90 <memmove+0x10>
 8001b8a:	4284      	cmp	r4, r0
 8001b8c:	4623      	mov	r3, r4
 8001b8e:	d807      	bhi.n	8001ba0 <memmove+0x20>
 8001b90:	1e43      	subs	r3, r0, #1
 8001b92:	42a1      	cmp	r1, r4
 8001b94:	d008      	beq.n	8001ba8 <memmove+0x28>
 8001b96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001b9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001b9e:	e7f8      	b.n	8001b92 <memmove+0x12>
 8001ba0:	4402      	add	r2, r0
 8001ba2:	4601      	mov	r1, r0
 8001ba4:	428a      	cmp	r2, r1
 8001ba6:	d100      	bne.n	8001baa <memmove+0x2a>
 8001ba8:	bd10      	pop	{r4, pc}
 8001baa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001bae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001bb2:	e7f7      	b.n	8001ba4 <memmove+0x24>

08001bb4 <_free_r>:
 8001bb4:	b538      	push	{r3, r4, r5, lr}
 8001bb6:	4605      	mov	r5, r0
 8001bb8:	2900      	cmp	r1, #0
 8001bba:	d041      	beq.n	8001c40 <_free_r+0x8c>
 8001bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001bc0:	1f0c      	subs	r4, r1, #4
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	bfb8      	it	lt
 8001bc6:	18e4      	addlt	r4, r4, r3
 8001bc8:	f000 f912 	bl	8001df0 <__malloc_lock>
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <_free_r+0x90>)
 8001bce:	6813      	ldr	r3, [r2, #0]
 8001bd0:	b933      	cbnz	r3, 8001be0 <_free_r+0x2c>
 8001bd2:	6063      	str	r3, [r4, #4]
 8001bd4:	6014      	str	r4, [r2, #0]
 8001bd6:	4628      	mov	r0, r5
 8001bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001bdc:	f000 b90e 	b.w	8001dfc <__malloc_unlock>
 8001be0:	42a3      	cmp	r3, r4
 8001be2:	d908      	bls.n	8001bf6 <_free_r+0x42>
 8001be4:	6820      	ldr	r0, [r4, #0]
 8001be6:	1821      	adds	r1, r4, r0
 8001be8:	428b      	cmp	r3, r1
 8001bea:	bf01      	itttt	eq
 8001bec:	6819      	ldreq	r1, [r3, #0]
 8001bee:	685b      	ldreq	r3, [r3, #4]
 8001bf0:	1809      	addeq	r1, r1, r0
 8001bf2:	6021      	streq	r1, [r4, #0]
 8001bf4:	e7ed      	b.n	8001bd2 <_free_r+0x1e>
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	b10b      	cbz	r3, 8001c00 <_free_r+0x4c>
 8001bfc:	42a3      	cmp	r3, r4
 8001bfe:	d9fa      	bls.n	8001bf6 <_free_r+0x42>
 8001c00:	6811      	ldr	r1, [r2, #0]
 8001c02:	1850      	adds	r0, r2, r1
 8001c04:	42a0      	cmp	r0, r4
 8001c06:	d10b      	bne.n	8001c20 <_free_r+0x6c>
 8001c08:	6820      	ldr	r0, [r4, #0]
 8001c0a:	4401      	add	r1, r0
 8001c0c:	1850      	adds	r0, r2, r1
 8001c0e:	4283      	cmp	r3, r0
 8001c10:	6011      	str	r1, [r2, #0]
 8001c12:	d1e0      	bne.n	8001bd6 <_free_r+0x22>
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	6053      	str	r3, [r2, #4]
 8001c1a:	4401      	add	r1, r0
 8001c1c:	6011      	str	r1, [r2, #0]
 8001c1e:	e7da      	b.n	8001bd6 <_free_r+0x22>
 8001c20:	d902      	bls.n	8001c28 <_free_r+0x74>
 8001c22:	230c      	movs	r3, #12
 8001c24:	602b      	str	r3, [r5, #0]
 8001c26:	e7d6      	b.n	8001bd6 <_free_r+0x22>
 8001c28:	6820      	ldr	r0, [r4, #0]
 8001c2a:	1821      	adds	r1, r4, r0
 8001c2c:	428b      	cmp	r3, r1
 8001c2e:	bf04      	itt	eq
 8001c30:	6819      	ldreq	r1, [r3, #0]
 8001c32:	685b      	ldreq	r3, [r3, #4]
 8001c34:	6063      	str	r3, [r4, #4]
 8001c36:	bf04      	itt	eq
 8001c38:	1809      	addeq	r1, r1, r0
 8001c3a:	6021      	streq	r1, [r4, #0]
 8001c3c:	6054      	str	r4, [r2, #4]
 8001c3e:	e7ca      	b.n	8001bd6 <_free_r+0x22>
 8001c40:	bd38      	pop	{r3, r4, r5, pc}
 8001c42:	bf00      	nop
 8001c44:	200001b4 	.word	0x200001b4

08001c48 <sbrk_aligned>:
 8001c48:	b570      	push	{r4, r5, r6, lr}
 8001c4a:	4e0e      	ldr	r6, [pc, #56]	; (8001c84 <sbrk_aligned+0x3c>)
 8001c4c:	460c      	mov	r4, r1
 8001c4e:	6831      	ldr	r1, [r6, #0]
 8001c50:	4605      	mov	r5, r0
 8001c52:	b911      	cbnz	r1, 8001c5a <sbrk_aligned+0x12>
 8001c54:	f000 f8bc 	bl	8001dd0 <_sbrk_r>
 8001c58:	6030      	str	r0, [r6, #0]
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	4628      	mov	r0, r5
 8001c5e:	f000 f8b7 	bl	8001dd0 <_sbrk_r>
 8001c62:	1c43      	adds	r3, r0, #1
 8001c64:	d00a      	beq.n	8001c7c <sbrk_aligned+0x34>
 8001c66:	1cc4      	adds	r4, r0, #3
 8001c68:	f024 0403 	bic.w	r4, r4, #3
 8001c6c:	42a0      	cmp	r0, r4
 8001c6e:	d007      	beq.n	8001c80 <sbrk_aligned+0x38>
 8001c70:	1a21      	subs	r1, r4, r0
 8001c72:	4628      	mov	r0, r5
 8001c74:	f000 f8ac 	bl	8001dd0 <_sbrk_r>
 8001c78:	3001      	adds	r0, #1
 8001c7a:	d101      	bne.n	8001c80 <sbrk_aligned+0x38>
 8001c7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001c80:	4620      	mov	r0, r4
 8001c82:	bd70      	pop	{r4, r5, r6, pc}
 8001c84:	200001b8 	.word	0x200001b8

08001c88 <_malloc_r>:
 8001c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c8c:	1ccd      	adds	r5, r1, #3
 8001c8e:	f025 0503 	bic.w	r5, r5, #3
 8001c92:	3508      	adds	r5, #8
 8001c94:	2d0c      	cmp	r5, #12
 8001c96:	bf38      	it	cc
 8001c98:	250c      	movcc	r5, #12
 8001c9a:	2d00      	cmp	r5, #0
 8001c9c:	4607      	mov	r7, r0
 8001c9e:	db01      	blt.n	8001ca4 <_malloc_r+0x1c>
 8001ca0:	42a9      	cmp	r1, r5
 8001ca2:	d905      	bls.n	8001cb0 <_malloc_r+0x28>
 8001ca4:	230c      	movs	r3, #12
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	2600      	movs	r6, #0
 8001caa:	4630      	mov	r0, r6
 8001cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cb0:	4e2e      	ldr	r6, [pc, #184]	; (8001d6c <_malloc_r+0xe4>)
 8001cb2:	f000 f89d 	bl	8001df0 <__malloc_lock>
 8001cb6:	6833      	ldr	r3, [r6, #0]
 8001cb8:	461c      	mov	r4, r3
 8001cba:	bb34      	cbnz	r4, 8001d0a <_malloc_r+0x82>
 8001cbc:	4629      	mov	r1, r5
 8001cbe:	4638      	mov	r0, r7
 8001cc0:	f7ff ffc2 	bl	8001c48 <sbrk_aligned>
 8001cc4:	1c43      	adds	r3, r0, #1
 8001cc6:	4604      	mov	r4, r0
 8001cc8:	d14d      	bne.n	8001d66 <_malloc_r+0xde>
 8001cca:	6834      	ldr	r4, [r6, #0]
 8001ccc:	4626      	mov	r6, r4
 8001cce:	2e00      	cmp	r6, #0
 8001cd0:	d140      	bne.n	8001d54 <_malloc_r+0xcc>
 8001cd2:	6823      	ldr	r3, [r4, #0]
 8001cd4:	4631      	mov	r1, r6
 8001cd6:	4638      	mov	r0, r7
 8001cd8:	eb04 0803 	add.w	r8, r4, r3
 8001cdc:	f000 f878 	bl	8001dd0 <_sbrk_r>
 8001ce0:	4580      	cmp	r8, r0
 8001ce2:	d13a      	bne.n	8001d5a <_malloc_r+0xd2>
 8001ce4:	6821      	ldr	r1, [r4, #0]
 8001ce6:	3503      	adds	r5, #3
 8001ce8:	1a6d      	subs	r5, r5, r1
 8001cea:	f025 0503 	bic.w	r5, r5, #3
 8001cee:	3508      	adds	r5, #8
 8001cf0:	2d0c      	cmp	r5, #12
 8001cf2:	bf38      	it	cc
 8001cf4:	250c      	movcc	r5, #12
 8001cf6:	4629      	mov	r1, r5
 8001cf8:	4638      	mov	r0, r7
 8001cfa:	f7ff ffa5 	bl	8001c48 <sbrk_aligned>
 8001cfe:	3001      	adds	r0, #1
 8001d00:	d02b      	beq.n	8001d5a <_malloc_r+0xd2>
 8001d02:	6823      	ldr	r3, [r4, #0]
 8001d04:	442b      	add	r3, r5
 8001d06:	6023      	str	r3, [r4, #0]
 8001d08:	e00e      	b.n	8001d28 <_malloc_r+0xa0>
 8001d0a:	6822      	ldr	r2, [r4, #0]
 8001d0c:	1b52      	subs	r2, r2, r5
 8001d0e:	d41e      	bmi.n	8001d4e <_malloc_r+0xc6>
 8001d10:	2a0b      	cmp	r2, #11
 8001d12:	d916      	bls.n	8001d42 <_malloc_r+0xba>
 8001d14:	1961      	adds	r1, r4, r5
 8001d16:	42a3      	cmp	r3, r4
 8001d18:	6025      	str	r5, [r4, #0]
 8001d1a:	bf18      	it	ne
 8001d1c:	6059      	strne	r1, [r3, #4]
 8001d1e:	6863      	ldr	r3, [r4, #4]
 8001d20:	bf08      	it	eq
 8001d22:	6031      	streq	r1, [r6, #0]
 8001d24:	5162      	str	r2, [r4, r5]
 8001d26:	604b      	str	r3, [r1, #4]
 8001d28:	4638      	mov	r0, r7
 8001d2a:	f104 060b 	add.w	r6, r4, #11
 8001d2e:	f000 f865 	bl	8001dfc <__malloc_unlock>
 8001d32:	f026 0607 	bic.w	r6, r6, #7
 8001d36:	1d23      	adds	r3, r4, #4
 8001d38:	1af2      	subs	r2, r6, r3
 8001d3a:	d0b6      	beq.n	8001caa <_malloc_r+0x22>
 8001d3c:	1b9b      	subs	r3, r3, r6
 8001d3e:	50a3      	str	r3, [r4, r2]
 8001d40:	e7b3      	b.n	8001caa <_malloc_r+0x22>
 8001d42:	6862      	ldr	r2, [r4, #4]
 8001d44:	42a3      	cmp	r3, r4
 8001d46:	bf0c      	ite	eq
 8001d48:	6032      	streq	r2, [r6, #0]
 8001d4a:	605a      	strne	r2, [r3, #4]
 8001d4c:	e7ec      	b.n	8001d28 <_malloc_r+0xa0>
 8001d4e:	4623      	mov	r3, r4
 8001d50:	6864      	ldr	r4, [r4, #4]
 8001d52:	e7b2      	b.n	8001cba <_malloc_r+0x32>
 8001d54:	4634      	mov	r4, r6
 8001d56:	6876      	ldr	r6, [r6, #4]
 8001d58:	e7b9      	b.n	8001cce <_malloc_r+0x46>
 8001d5a:	230c      	movs	r3, #12
 8001d5c:	603b      	str	r3, [r7, #0]
 8001d5e:	4638      	mov	r0, r7
 8001d60:	f000 f84c 	bl	8001dfc <__malloc_unlock>
 8001d64:	e7a1      	b.n	8001caa <_malloc_r+0x22>
 8001d66:	6025      	str	r5, [r4, #0]
 8001d68:	e7de      	b.n	8001d28 <_malloc_r+0xa0>
 8001d6a:	bf00      	nop
 8001d6c:	200001b4 	.word	0x200001b4

08001d70 <_realloc_r>:
 8001d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d74:	4680      	mov	r8, r0
 8001d76:	4614      	mov	r4, r2
 8001d78:	460e      	mov	r6, r1
 8001d7a:	b921      	cbnz	r1, 8001d86 <_realloc_r+0x16>
 8001d7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d80:	4611      	mov	r1, r2
 8001d82:	f7ff bf81 	b.w	8001c88 <_malloc_r>
 8001d86:	b92a      	cbnz	r2, 8001d94 <_realloc_r+0x24>
 8001d88:	f7ff ff14 	bl	8001bb4 <_free_r>
 8001d8c:	4625      	mov	r5, r4
 8001d8e:	4628      	mov	r0, r5
 8001d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d94:	f000 f838 	bl	8001e08 <_malloc_usable_size_r>
 8001d98:	4284      	cmp	r4, r0
 8001d9a:	4607      	mov	r7, r0
 8001d9c:	d802      	bhi.n	8001da4 <_realloc_r+0x34>
 8001d9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001da2:	d812      	bhi.n	8001dca <_realloc_r+0x5a>
 8001da4:	4621      	mov	r1, r4
 8001da6:	4640      	mov	r0, r8
 8001da8:	f7ff ff6e 	bl	8001c88 <_malloc_r>
 8001dac:	4605      	mov	r5, r0
 8001dae:	2800      	cmp	r0, #0
 8001db0:	d0ed      	beq.n	8001d8e <_realloc_r+0x1e>
 8001db2:	42bc      	cmp	r4, r7
 8001db4:	4622      	mov	r2, r4
 8001db6:	4631      	mov	r1, r6
 8001db8:	bf28      	it	cs
 8001dba:	463a      	movcs	r2, r7
 8001dbc:	f7ff fed2 	bl	8001b64 <memcpy>
 8001dc0:	4631      	mov	r1, r6
 8001dc2:	4640      	mov	r0, r8
 8001dc4:	f7ff fef6 	bl	8001bb4 <_free_r>
 8001dc8:	e7e1      	b.n	8001d8e <_realloc_r+0x1e>
 8001dca:	4635      	mov	r5, r6
 8001dcc:	e7df      	b.n	8001d8e <_realloc_r+0x1e>
	...

08001dd0 <_sbrk_r>:
 8001dd0:	b538      	push	{r3, r4, r5, lr}
 8001dd2:	4d06      	ldr	r5, [pc, #24]	; (8001dec <_sbrk_r+0x1c>)
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	4604      	mov	r4, r0
 8001dd8:	4608      	mov	r0, r1
 8001dda:	602b      	str	r3, [r5, #0]
 8001ddc:	f7fe fbea 	bl	80005b4 <_sbrk>
 8001de0:	1c43      	adds	r3, r0, #1
 8001de2:	d102      	bne.n	8001dea <_sbrk_r+0x1a>
 8001de4:	682b      	ldr	r3, [r5, #0]
 8001de6:	b103      	cbz	r3, 8001dea <_sbrk_r+0x1a>
 8001de8:	6023      	str	r3, [r4, #0]
 8001dea:	bd38      	pop	{r3, r4, r5, pc}
 8001dec:	200001bc 	.word	0x200001bc

08001df0 <__malloc_lock>:
 8001df0:	4801      	ldr	r0, [pc, #4]	; (8001df8 <__malloc_lock+0x8>)
 8001df2:	f000 b811 	b.w	8001e18 <__retarget_lock_acquire_recursive>
 8001df6:	bf00      	nop
 8001df8:	200001c0 	.word	0x200001c0

08001dfc <__malloc_unlock>:
 8001dfc:	4801      	ldr	r0, [pc, #4]	; (8001e04 <__malloc_unlock+0x8>)
 8001dfe:	f000 b80c 	b.w	8001e1a <__retarget_lock_release_recursive>
 8001e02:	bf00      	nop
 8001e04:	200001c0 	.word	0x200001c0

08001e08 <_malloc_usable_size_r>:
 8001e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e0c:	1f18      	subs	r0, r3, #4
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	bfbc      	itt	lt
 8001e12:	580b      	ldrlt	r3, [r1, r0]
 8001e14:	18c0      	addlt	r0, r0, r3
 8001e16:	4770      	bx	lr

08001e18 <__retarget_lock_acquire_recursive>:
 8001e18:	4770      	bx	lr

08001e1a <__retarget_lock_release_recursive>:
 8001e1a:	4770      	bx	lr

08001e1c <_init>:
 8001e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e1e:	bf00      	nop
 8001e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e22:	bc08      	pop	{r3}
 8001e24:	469e      	mov	lr, r3
 8001e26:	4770      	bx	lr

08001e28 <_fini>:
 8001e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e2a:	bf00      	nop
 8001e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e2e:	bc08      	pop	{r3}
 8001e30:	469e      	mov	lr, r3
 8001e32:	4770      	bx	lr
