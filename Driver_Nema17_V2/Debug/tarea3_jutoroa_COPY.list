
tarea3_jutoroa_COPY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bc8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d60  08000d60  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d60  08000d60  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000d60  08000d60  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d60  08000d60  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d60  08000d60  00010d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d64  08000d64  00010d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000d68  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000004  08000d6c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08000d6c  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001f74  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000777  00000000  00000000  00021fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000178  00000000  00000000  00022720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000130  00000000  00000000  00022898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f060  00000000  00000000  000229c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000020fc  00000000  00000000  00031a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000546e9  00000000  00000000  00033b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008820d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000464  00000000  00000000  00088260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000d48 	.word	0x08000d48

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000d48 	.word	0x08000d48

080001d8 <GPIO_Config>:
orden estricto para poder que el sistema permita configurar el periférico X.
Lo primero y más importante es activar la señal del reloj principal hacia ese
elemento específico (relacionado con el periférico RCC), a esto llamaremos
simplemente "activar el periférico o activar la señal de reloj del periférico".
*/
void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 80001e0:	2300      	movs	r3, #0
 80001e2:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80001e4:	2300      	movs	r3, #0
 80001e6:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periférico
	// Verificamos para GPIOA
	if (pGPIOHandler -> pGPIOx == GPIOA){
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a88      	ldr	r2, [pc, #544]	; (8000410 <GPIO_Config+0x238>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d106      	bne.n	8000200 <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOA
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 80001f2:	4b88      	ldr	r3, [pc, #544]	; (8000414 <GPIO_Config+0x23c>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f6:	4a87      	ldr	r2, [pc, #540]	; (8000414 <GPIO_Config+0x23c>)
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6313      	str	r3, [r2, #48]	; 0x30
 80001fe:	e03a      	b.n	8000276 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if (pGPIOHandler -> pGPIOx == GPIOB){
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a84      	ldr	r2, [pc, #528]	; (8000418 <GPIO_Config+0x240>)
 8000206:	4293      	cmp	r3, r2
 8000208:	d106      	bne.n	8000218 <GPIO_Config+0x40>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOB
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 800020a:	4b82      	ldr	r3, [pc, #520]	; (8000414 <GPIO_Config+0x23c>)
 800020c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020e:	4a81      	ldr	r2, [pc, #516]	; (8000414 <GPIO_Config+0x23c>)
 8000210:	f043 0302 	orr.w	r3, r3, #2
 8000214:	6313      	str	r3, [r2, #48]	; 0x30
 8000216:	e02e      	b.n	8000276 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOC
	else if (pGPIOHandler -> pGPIOx == GPIOC){
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a7f      	ldr	r2, [pc, #508]	; (800041c <GPIO_Config+0x244>)
 800021e:	4293      	cmp	r3, r2
 8000220:	d106      	bne.n	8000230 <GPIO_Config+0x58>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOC
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8000222:	4b7c      	ldr	r3, [pc, #496]	; (8000414 <GPIO_Config+0x23c>)
 8000224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000226:	4a7b      	ldr	r2, [pc, #492]	; (8000414 <GPIO_Config+0x23c>)
 8000228:	f043 0304 	orr.w	r3, r3, #4
 800022c:	6313      	str	r3, [r2, #48]	; 0x30
 800022e:	e022      	b.n	8000276 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOD
	else if (pGPIOHandler -> pGPIOx == GPIOD){
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a7a      	ldr	r2, [pc, #488]	; (8000420 <GPIO_Config+0x248>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d106      	bne.n	8000248 <GPIO_Config+0x70>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOD
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 800023a:	4b76      	ldr	r3, [pc, #472]	; (8000414 <GPIO_Config+0x23c>)
 800023c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800023e:	4a75      	ldr	r2, [pc, #468]	; (8000414 <GPIO_Config+0x23c>)
 8000240:	f043 0308 	orr.w	r3, r3, #8
 8000244:	6313      	str	r3, [r2, #48]	; 0x30
 8000246:	e016      	b.n	8000276 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOE
	else if (pGPIOHandler -> pGPIOx == GPIOE){
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a75      	ldr	r2, [pc, #468]	; (8000424 <GPIO_Config+0x24c>)
 800024e:	4293      	cmp	r3, r2
 8000250:	d106      	bne.n	8000260 <GPIO_Config+0x88>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOE
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8000252:	4b70      	ldr	r3, [pc, #448]	; (8000414 <GPIO_Config+0x23c>)
 8000254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000256:	4a6f      	ldr	r2, [pc, #444]	; (8000414 <GPIO_Config+0x23c>)
 8000258:	f043 0310 	orr.w	r3, r3, #16
 800025c:	6313      	str	r3, [r2, #48]	; 0x30
 800025e:	e00a      	b.n	8000276 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOH
	else if (pGPIOHandler -> pGPIOx == GPIOH){
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a70      	ldr	r2, [pc, #448]	; (8000428 <GPIO_Config+0x250>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d105      	bne.n	8000276 <GPIO_Config+0x9e>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOH
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 800026a:	4b6a      	ldr	r3, [pc, #424]	; (8000414 <GPIO_Config+0x23c>)
 800026c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800026e:	4a69      	ldr	r2, [pc, #420]	; (8000414 <GPIO_Config+0x23c>)
 8000270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000274:	6313      	str	r3, [r2, #48]	; 0x30
	// Después de activado, podemos comenzar a configurar.

	// 2) Configurando el registro GPIOx_MODER
	// Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y todo eso lo cargamos en la variable aux_Config
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	795b      	ldrb	r3, [r3, #5]
 800027a:	461a      	mov	r2, r3
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	791b      	ldrb	r3, [r3, #4]
 8000280:	005b      	lsls	r3, r3, #1
 8000282:	fa02 f303 	lsl.w	r3, r2, r3
 8000286:	60fb      	str	r3, [r7, #12]

	// Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (debemos escribir 0b00)
	// para lo cual aplicamos una máscara y una operación bitwise AND
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	791b      	ldrb	r3, [r3, #4]
 8000292:	005b      	lsls	r3, r3, #1
 8000294:	2103      	movs	r1, #3
 8000296:	fa01 f303 	lsl.w	r3, r1, r3
 800029a:	43db      	mvns	r3, r3
 800029c:	4619      	mov	r1, r3
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	400a      	ands	r2, r1
 80002a4:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler -> pGPIOx -> MODER |= auxConfig;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	6819      	ldr	r1, [r3, #0]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	68fa      	ldr	r2, [r7, #12]
 80002b2:	430a      	orrs	r2, r1
 80002b4:	601a      	str	r2, [r3, #0]

	// 3) Configurando el registro GPIOx_OTYPER
	// De nuevo, leemos y movemos el valor un número "PinNumber" de veces
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	7a1b      	ldrb	r3, [r3, #8]
 80002ba:	461a      	mov	r2, r3
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	791b      	ldrb	r3, [r3, #4]
 80002c0:	fa02 f303 	lsl.w	r3, r2, r3
 80002c4:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler -> pGPIOx -> OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	685a      	ldr	r2, [r3, #4]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	791b      	ldrb	r3, [r3, #4]
 80002d0:	4619      	mov	r1, r3
 80002d2:	2301      	movs	r3, #1
 80002d4:	408b      	lsls	r3, r1
 80002d6:	43db      	mvns	r3, r3
 80002d8:	4619      	mov	r1, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	400a      	ands	r2, r1
 80002e0:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OTYPER |= auxConfig;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	6859      	ldr	r1, [r3, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	68fa      	ldr	r2, [r7, #12]
 80002ee:	430a      	orrs	r2, r1
 80002f0:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	799b      	ldrb	r3, [r3, #6]
 80002f6:	461a      	mov	r2, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	791b      	ldrb	r3, [r3, #4]
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000302:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler -> pGPIOx -> OSPEEDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	689a      	ldr	r2, [r3, #8]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	791b      	ldrb	r3, [r3, #4]
 800030e:	005b      	lsls	r3, r3, #1
 8000310:	2103      	movs	r1, #3
 8000312:	fa01 f303 	lsl.w	r3, r1, r3
 8000316:	43db      	mvns	r3, r3
 8000318:	4619      	mov	r1, r3
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	400a      	ands	r2, r1
 8000320:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OSPEEDR |= auxConfig;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	6899      	ldr	r1, [r3, #8]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	68fa      	ldr	r2, [r7, #12]
 800032e:	430a      	orrs	r2, r1
 8000330:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante.
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	79db      	ldrb	r3, [r3, #7]
 8000336:	461a      	mov	r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	791b      	ldrb	r3, [r3, #4]
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	fa02 f303 	lsl.w	r3, r2, r3
 8000342:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler -> pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	68da      	ldr	r2, [r3, #12]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	791b      	ldrb	r3, [r3, #4]
 800034e:	005b      	lsls	r3, r3, #1
 8000350:	2103      	movs	r1, #3
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
 8000356:	43db      	mvns	r3, r3
 8000358:	4619      	mov	r1, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	400a      	ands	r2, r1
 8000360:	60da      	str	r2, [r3, #12]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> PUPDR |= auxConfig;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	68d9      	ldr	r1, [r3, #12]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	68fa      	ldr	r2, [r7, #12]
 800036e:	430a      	orrs	r2, r1
 8000370:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuración de las funciones alternativas... Se verá luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	795b      	ldrb	r3, [r3, #5]
 8000376:	2b02      	cmp	r3, #2
 8000378:	d143      	bne.n	8000402 <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	791b      	ldrb	r3, [r3, #4]
 800037e:	2b07      	cmp	r3, #7
 8000380:	d81f      	bhi.n	80003c2 <GPIO_Config+0x1ea>
			// Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	791b      	ldrb	r3, [r3, #4]
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	60bb      	str	r3, [r7, #8]

			// Limpiamos primero la posición del registro que deseamos escribir a continuación
			pGPIOHandler -> pGPIOx -> AFR[0] &= ~(0b1111 << auxPosition);
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	6a1a      	ldr	r2, [r3, #32]
 8000390:	210f      	movs	r1, #15
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	fa01 f303 	lsl.w	r3, r1, r3
 8000398:	43db      	mvns	r3, r3
 800039a:	4619      	mov	r1, r3
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	400a      	ands	r2, r1
 80003a2:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posición seleccionada
			pGPIOHandler -> pGPIOx -> AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	6a1a      	ldr	r2, [r3, #32]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	7a5b      	ldrb	r3, [r3, #9]
 80003ae:	4619      	mov	r1, r3
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	fa01 f303 	lsl.w	r3, r1, r3
 80003b6:	4619      	mov	r1, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	430a      	orrs	r2, r1
 80003be:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurando en la posición seleccionada
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} // Fin del GPIO_Config
 80003c0:	e01f      	b.n	8000402 <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber -8);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	791b      	ldrb	r3, [r3, #4]
 80003c6:	3b08      	subs	r3, #8
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx -> AFR[1] &= ~(0b1111 << auxPosition);
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003d2:	210f      	movs	r1, #15
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	fa01 f303 	lsl.w	r3, r1, r3
 80003da:	43db      	mvns	r3, r3
 80003dc:	4619      	mov	r1, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	400a      	ands	r2, r1
 80003e4:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	7a5b      	ldrb	r3, [r3, #9]
 80003f0:	4619      	mov	r1, r3
 80003f2:	68bb      	ldr	r3, [r7, #8]
 80003f4:	fa01 f303 	lsl.w	r3, r1, r3
 80003f8:	4619      	mov	r1, r3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	430a      	orrs	r2, r1
 8000400:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_Config
 8000402:	bf00      	nop
 8000404:	3714      	adds	r7, #20
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40020000 	.word	0x40020000
 8000414:	40023800 	.word	0x40023800
 8000418:	40020400 	.word	0x40020400
 800041c:	40020800 	.word	0x40020800
 8000420:	40020c00 	.word	0x40020c00
 8000424:	40021000 	.word	0x40021000
 8000428:	40021c00 	.word	0x40021c00

0800042c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800043a:	2b00      	cmp	r3, #0
 800043c:	db0b      	blt.n	8000456 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	f003 021f 	and.w	r2, r3, #31
 8000444:	4907      	ldr	r1, [pc, #28]	; (8000464 <__NVIC_EnableIRQ+0x38>)
 8000446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800044a:	095b      	lsrs	r3, r3, #5
 800044c:	2001      	movs	r0, #1
 800044e:	fa00 f202 	lsl.w	r2, r0, r2
 8000452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	e000e100 	.word	0xe000e100

08000468 <Timer_Config>:
 *
 * */

//NOTA: Hay que desactivar las interrupciones globales y luego volver a activarlas

void Timer_Config(TIMER_Handler_t *ptrTimerConfig){
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000470:	b672      	cpsid	i
}
 8000472:	bf00      	nop
	/* 0. Desactivamos las interrupciones globales */

	__disable_irq();

	/* 1. Activamos la señal de reloj para el periférico específico */
	if(ptrTimerConfig -> ptrTIMx == TIM2){
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800047c:	d106      	bne.n	800048c <Timer_Config+0x24>
		// Activamos la señal de reloj del TIM2
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 800047e:	4b47      	ldr	r3, [pc, #284]	; (800059c <Timer_Config+0x134>)
 8000480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000482:	4a46      	ldr	r2, [pc, #280]	; (800059c <Timer_Config+0x134>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	6413      	str	r3, [r2, #64]	; 0x40
 800048a:	e022      	b.n	80004d2 <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM3){
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a43      	ldr	r2, [pc, #268]	; (80005a0 <Timer_Config+0x138>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d106      	bne.n	80004a4 <Timer_Config+0x3c>
		// Activamos la señal de reloj del TIM3
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000496:	4b41      	ldr	r3, [pc, #260]	; (800059c <Timer_Config+0x134>)
 8000498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800049a:	4a40      	ldr	r2, [pc, #256]	; (800059c <Timer_Config+0x134>)
 800049c:	f043 0302 	orr.w	r3, r3, #2
 80004a0:	6413      	str	r3, [r2, #64]	; 0x40
 80004a2:	e016      	b.n	80004d2 <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM4){
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a3e      	ldr	r2, [pc, #248]	; (80005a4 <Timer_Config+0x13c>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d106      	bne.n	80004bc <Timer_Config+0x54>
		// Activamos la señal de reloj del TIM4
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 80004ae:	4b3b      	ldr	r3, [pc, #236]	; (800059c <Timer_Config+0x134>)
 80004b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004b2:	4a3a      	ldr	r2, [pc, #232]	; (800059c <Timer_Config+0x134>)
 80004b4:	f043 0304 	orr.w	r3, r3, #4
 80004b8:	6413      	str	r3, [r2, #64]	; 0x40
 80004ba:	e00a      	b.n	80004d2 <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM5){
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a39      	ldr	r2, [pc, #228]	; (80005a8 <Timer_Config+0x140>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d105      	bne.n	80004d2 <Timer_Config+0x6a>
		// Activamos la señal de reloj del TIM5
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 80004c6:	4b35      	ldr	r3, [pc, #212]	; (800059c <Timer_Config+0x134>)
 80004c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004ca:	4a34      	ldr	r2, [pc, #208]	; (800059c <Timer_Config+0x134>)
 80004cc:	f043 0308 	orr.w	r3, r3, #8
 80004d0:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuración del modo del timer (UP or DOWN) */

	if(ptrTimerConfig -> timerConfig.Timer_mode == TIMER_MODE_UP){
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	791b      	ldrb	r3, [r3, #4]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d10c      	bne.n	80004f4 <Timer_Config+0x8c>
		// Configuramos el timer en modo UP
		ptrTimerConfig -> ptrTIMx -> CR1 &= ~(TIM_CR1_DIR);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f022 0210 	bic.w	r2, r2, #16
 80004e8:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) en cero.
		ptrTimerConfig -> ptrTIMx -> CNT = 0;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2200      	movs	r2, #0
 80004f0:	625a      	str	r2, [r3, #36]	; 0x24
 80004f2:	e00d      	b.n	8000510 <Timer_Config+0xa8>

	}
	else{
		// Configuramos el timer en modo DOWN
		ptrTimerConfig -> ptrTIMx -> CR1 |= ~(TIM_CR1_DIR);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f062 0210 	orn	r2, r2, #16
 8000502:	601a      	str	r2, [r3, #0]

		// Ponemos en el contador (CNT) el valor del periodo
		ptrTimerConfig -> ptrTIMx -> CNT = ptrTimerConfig -> timerConfig.Timer_period -1;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	689a      	ldr	r2, [r3, #8]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	3a01      	subs	r2, #1
 800050e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuración del Prescaler */
	ptrTimerConfig -> ptrTIMx -> PSC = ptrTimerConfig -> timerConfig.Timer_speed -1;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	88db      	ldrh	r3, [r3, #6]
 8000514:	1e5a      	subs	r2, r3, #1
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo de las interrupciones */
	ptrTimerConfig -> ptrTIMx -> ARR = ptrTimerConfig -> timerConfig.Timer_period -1;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	689a      	ldr	r2, [r3, #8]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	3a01      	subs	r2, #1
 8000526:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse  */
	ptrTimerConfig -> ptrTIMx -> CR1 |= TIM_CR1_CEN;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f042 0201 	orr.w	r2, r2, #1
 8000536:	601a      	str	r2, [r3, #0]

	/* 6. Activamos la interrupción debida a un "update event" */
	ptrTimerConfig -> ptrTIMx -> DIER |= TIM_DIER_UIE;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	68da      	ldr	r2, [r3, #12]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f042 0201 	orr.w	r2, r2, #1
 8000546:	60da      	str	r2, [r3, #12]

	/* 7. Activamos la señal de la interrupcuón en el NVIC */

	if(ptrTimerConfig -> ptrTIMx == TIM2){
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000550:	d103      	bne.n	800055a <Timer_Config+0xf2>
		// Activamos la IRQ del TIM2
		__NVIC_EnableIRQ(TIM2_IRQn);
 8000552:	201c      	movs	r0, #28
 8000554:	f7ff ff6a 	bl	800042c <__NVIC_EnableIRQ>
 8000558:	e019      	b.n	800058e <Timer_Config+0x126>

	}else if(ptrTimerConfig -> ptrTIMx == TIM3){
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a10      	ldr	r2, [pc, #64]	; (80005a0 <Timer_Config+0x138>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d103      	bne.n	800056c <Timer_Config+0x104>
		// Activamos la IRQ del TIM3
		__NVIC_EnableIRQ(TIM3_IRQn);
 8000564:	201d      	movs	r0, #29
 8000566:	f7ff ff61 	bl	800042c <__NVIC_EnableIRQ>
 800056a:	e010      	b.n	800058e <Timer_Config+0x126>

	}else if(ptrTimerConfig -> ptrTIMx == TIM4){
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a0c      	ldr	r2, [pc, #48]	; (80005a4 <Timer_Config+0x13c>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d103      	bne.n	800057e <Timer_Config+0x116>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM4_IRQn);
 8000576:	201e      	movs	r0, #30
 8000578:	f7ff ff58 	bl	800042c <__NVIC_EnableIRQ>
 800057c:	e007      	b.n	800058e <Timer_Config+0x126>

	}else if(ptrTimerConfig -> ptrTIMx == TIM5){
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a09      	ldr	r2, [pc, #36]	; (80005a8 <Timer_Config+0x140>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d102      	bne.n	800058e <Timer_Config+0x126>
		// Activamos la IRQ del TIM5
		__NVIC_EnableIRQ(TIM5_IRQn);
 8000588:	2032      	movs	r0, #50	; 0x32
 800058a:	f7ff ff4f 	bl	800042c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800058e:	b662      	cpsie	i
}
 8000590:	bf00      	nop
	}


	/* 8. Activamos de nuevo todas las interrupciones. */
	__enable_irq();
}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40023800 	.word	0x40023800
 80005a0:	40000400 	.word	0x40000400
 80005a4:	40000800 	.word	0x40000800
 80005a8:	40000c00 	.word	0x40000c00

080005ac <Timer3_Callback>:
__attribute__((weak)) void Timer2_Callback(void){
	__NOP();
}

// Callback Timer3
__attribute__((weak)) void Timer3_Callback(void){
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
	__NOP();
 80005b0:	bf00      	nop
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <Timer4_Callback>:

// Callback Timer4
__attribute__((weak)) void Timer4_Callback(void){
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
	__NOP();
 80005c0:	bf00      	nop
}
 80005c2:	bf00      	nop
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <Timer5_Callback>:

// Callback Timer5
__attribute__((weak)) void Timer5_Callback(void){
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
	__NOP();
 80005d0:	bf00      	nop
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <TIM2_IRQHandler>:

// Hay que hacer dos cosas: 1) Atender la interrupción. 2) Llamamos al Callback
/* Rutina de atención a la interrupción del TIM2 */

void TIM2_IRQHandler(void){
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	TIM2 -> SR &= ~(TIM_SR_UIF);
 80005e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005e4:	691b      	ldr	r3, [r3, #16]
 80005e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005ea:	f023 0301 	bic.w	r3, r3, #1
 80005ee:	6113      	str	r3, [r2, #16]
	Timer2_Callback();
 80005f0:	f000 fb2c 	bl	8000c4c <Timer2_Callback>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	TIM3 -> SR &= ~(TIM_SR_UIF);
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <TIM3_IRQHandler+0x18>)
 80005fe:	691b      	ldr	r3, [r3, #16]
 8000600:	4a03      	ldr	r2, [pc, #12]	; (8000610 <TIM3_IRQHandler+0x18>)
 8000602:	f023 0301 	bic.w	r3, r3, #1
 8000606:	6113      	str	r3, [r2, #16]
	Timer3_Callback();
 8000608:	f7ff ffd0 	bl	80005ac <Timer3_Callback>
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40000400 	.word	0x40000400

08000614 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	TIM4 -> SR &= ~(TIM_SR_UIF);
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <TIM4_IRQHandler+0x18>)
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <TIM4_IRQHandler+0x18>)
 800061e:	f023 0301 	bic.w	r3, r3, #1
 8000622:	6113      	str	r3, [r2, #16]
	Timer4_Callback();
 8000624:	f7ff ffca 	bl	80005bc <Timer4_Callback>
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40000800 	.word	0x40000800

08000630 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	TIM5 -> SR &= ~(TIM_SR_UIF);
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <TIM5_IRQHandler+0x18>)
 8000636:	691b      	ldr	r3, [r3, #16]
 8000638:	4a03      	ldr	r2, [pc, #12]	; (8000648 <TIM5_IRQHandler+0x18>)
 800063a:	f023 0301 	bic.w	r3, r3, #1
 800063e:	6113      	str	r3, [r2, #16]
	Timer5_Callback();
 8000640:	f7ff ffc4 	bl	80005cc <Timer5_Callback>
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40000c00 	.word	0x40000c00

0800064c <__NVIC_EnableIRQ>:
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065a:	2b00      	cmp	r3, #0
 800065c:	db0b      	blt.n	8000676 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	f003 021f 	and.w	r2, r3, #31
 8000664:	4907      	ldr	r1, [pc, #28]	; (8000684 <__NVIC_EnableIRQ+0x38>)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	095b      	lsrs	r3, r3, #5
 800066c:	2001      	movs	r0, #1
 800066e:	fa00 f202 	lsl.w	r2, r0, r2
 8000672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000e100 	.word	0xe000e100

08000688 <USART_Config>:
 * Configurando el puerto serial
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periférico que se está utilizando.
 */

void USART_Config(USART_Handler_t *ptrUsartHandler){
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
}
 8000692:	bf00      	nop

	/* 1. Activamos la señal de reloj que viene desde el bus al que pertenece el periférico.
	 * Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6)
	 */
	/*1.1 Configuramos el USART1*/
	if(ptrUsartHandler -> ptrUSARTx == USART1){
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a8c      	ldr	r2, [pc, #560]	; (80008cc <USART_Config+0x244>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d106      	bne.n	80006ac <USART_Config+0x24>
		// Escribimos 1 (SET) en la posición correspondiente al USART1
		RCC -> APB2ENR |= (RCC_APB2ENR_USART1EN);
 800069e:	4b8c      	ldr	r3, [pc, #560]	; (80008d0 <USART_Config+0x248>)
 80006a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a2:	4a8b      	ldr	r2, [pc, #556]	; (80008d0 <USART_Config+0x248>)
 80006a4:	f043 0310 	orr.w	r3, r3, #16
 80006a8:	6453      	str	r3, [r2, #68]	; 0x44
 80006aa:	e016      	b.n	80006da <USART_Config+0x52>
	}
	/*1.2 Configuramos el USART2*/
	else if(ptrUsartHandler -> ptrUSARTx == USART2){
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a88      	ldr	r2, [pc, #544]	; (80008d4 <USART_Config+0x24c>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d106      	bne.n	80006c4 <USART_Config+0x3c>
		// Escribimos 1 (SET) en la posición correspondiente al USART1
		RCC -> APB1ENR |= (RCC_APB1ENR_USART2EN);
 80006b6:	4b86      	ldr	r3, [pc, #536]	; (80008d0 <USART_Config+0x248>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ba:	4a85      	ldr	r2, [pc, #532]	; (80008d0 <USART_Config+0x248>)
 80006bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c0:	6413      	str	r3, [r2, #64]	; 0x40
 80006c2:	e00a      	b.n	80006da <USART_Config+0x52>
	}
	/*1.3 Configuramos el USART6*/
	else if(ptrUsartHandler -> ptrUSARTx == USART6){
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a83      	ldr	r2, [pc, #524]	; (80008d8 <USART_Config+0x250>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d105      	bne.n	80006da <USART_Config+0x52>
		// Escribimos 1 (SET) en la posición correspondiente al USART1
		RCC -> APB2ENR |= (RCC_APB2ENR_USART6EN);
 80006ce:	4b80      	ldr	r3, [pc, #512]	; (80008d0 <USART_Config+0x248>)
 80006d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d2:	4a7f      	ldr	r2, [pc, #508]	; (80008d0 <USART_Config+0x248>)
 80006d4:	f043 0320 	orr.w	r3, r3, #32
 80006d8:	6453      	str	r3, [r2, #68]	; 0x44
	 * Configuramos el modo: only TX, only RX, o RXTX
	 * Por último activamos el modulo USART cuando todo está correctamente configurado
	 * */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero.
	ptrUsartHandler -> ptrUSARTx -> CR1 = 0;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
	ptrUsartHandler -> ptrUSARTx -> CR2 = 0;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]

	// 2.2 Configuración del Parity:
	// Verificamos si el parity está activado o no
	if(ptrUsartHandler -> USART_Config.USART_parity != USART_PARITY_NONE){
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	79db      	ldrb	r3, [r3, #7]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d02b      	beq.n	800074a <USART_Config+0xc2>

		// Verificamos si se ha seleccionado ODD or EVEN

		//Se selecciona EVEN
		if(ptrUsartHandler -> USART_Config.USART_parity == USART_PARITY_EVEN){
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	79db      	ldrb	r3, [r3, #7]
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d113      	bne.n	8000722 <USART_Config+0x9a>
			//Ponemos 0b0 en la posicion 9 del registo CR1 para escoger Even
			ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_PS);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	68da      	ldr	r2, [r3, #12]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000708:	60da      	str	r2, [r3, #12]

			// Además, se seleccionan 9 bits.
			ptrUsartHandler -> USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2201      	movs	r2, #1
 800070e:	719a      	strb	r2, [r3, #6]
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	68da      	ldr	r2, [r3, #12]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	e01b      	b.n	800075a <USART_Config+0xd2>
		}
		//Se selecciona ODD
		else{
			//Ponemos 0b1 en la posicion 9 del registo CR1 para escoger Even
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_PS);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	68da      	ldr	r2, [r3, #12]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000730:	60da      	str	r2, [r3, #12]

			// Además, se seleccionan 9 bits.
			ptrUsartHandler -> USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2201      	movs	r2, #1
 8000736:	719a      	strb	r2, [r3, #6]
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	68da      	ldr	r2, [r3, #12]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	e007      	b.n	800075a <USART_Config+0xd2>
		}
	}
	//No deseamos activar el parity-check
	else{
		//Ponemos 0b0 en la posicion 10 del registro CR1 para desactivar el Parity
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_PCE);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	68da      	ldr	r2, [r3, #12]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000758:	60da      	str	r2, [r3, #12]

	// 2.3 Configuramos el tamaño del dato:

	//Verificamos si va a ser de 8 o 9 bits

	if(ptrUsartHandler -> USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	799b      	ldrb	r3, [r3, #6]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d108      	bne.n	8000774 <USART_Config+0xec>
		//Ponemos 0b0 en la posicion 12 del registro CR1 para escoger 8 bits
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_M);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	68da      	ldr	r2, [r3, #12]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	e007      	b.n	8000784 <USART_Config+0xfc>
	}else{
		//Ponemos 0b1 en la posicion 12 del registro CR1 para escoger 9 bits
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	68da      	ldr	r2, [r3, #12]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000782:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)


	switch(ptrUsartHandler -> USART_Config.USART_stopbits){
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	7a1b      	ldrb	r3, [r3, #8]
 8000788:	2b03      	cmp	r3, #3
 800078a:	d847      	bhi.n	800081c <USART_Config+0x194>
 800078c:	a201      	add	r2, pc, #4	; (adr r2, 8000794 <USART_Config+0x10c>)
 800078e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000792:	bf00      	nop
 8000794:	080007a5 	.word	0x080007a5
 8000798:	080007b7 	.word	0x080007b7
 800079c:	080007d9 	.word	0x080007d9
 80007a0:	080007fb 	.word	0x080007fb
	case USART_STOPBIT_1: {
		//Cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	691a      	ldr	r2, [r3, #16]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80007b2:	611a      	str	r2, [r3, #16]
		break;
 80007b4:	e03b      	b.n	800082e <USART_Config+0x1a6>
	}
	case USART_STOPBIT_0_5:{
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	691a      	ldr	r2, [r3, #16]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80007c4:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b01 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP_0);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	691a      	ldr	r2, [r3, #16]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80007d4:	611a      	str	r2, [r3, #16]
		break;
 80007d6:	e02a      	b.n	800082e <USART_Config+0x1a6>
	}
	case USART_STOPBIT_2:{
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	691a      	ldr	r2, [r3, #16]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80007e6:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b10 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP_1);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	691a      	ldr	r2, [r3, #16]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80007f6:	611a      	str	r2, [r3, #16]
		break;
 80007f8:	e019      	b.n	800082e <USART_Config+0x1a6>
	}
	case USART_STOPBIT_1_5: {
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	691a      	ldr	r2, [r3, #16]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000808:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b11 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	691a      	ldr	r2, [r3, #16]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000818:	611a      	str	r2, [r3, #16]
		break;
 800081a:	e008      	b.n	800082e <USART_Config+0x1a6>
	}
	default:{
		//Cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	691a      	ldr	r2, [r3, #16]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800082a:	611a      	str	r2, [r3, #16]
		break;
 800082c:	bf00      	nop
	}
	}

	// 2.4 Configuración del Baudrate (SFR USART_BRR)
	// Ver tabla de valores (Tabla 75), Frec = 16MHz, overr = 0;
	if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	795b      	ldrb	r3, [r3, #5]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d105      	bne.n	8000842 <USART_Config+0x1ba>
		// El valor a cargar es 104.1875 -> Mantiza = 104, fraction = 0.1875
		// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
		// Valor a cargar 0x683
		// Configurando el Baudrate generator para una velocidad de 9600bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0683;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f240 6283 	movw	r2, #1667	; 0x683
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	e011      	b.n	8000866 <USART_Config+0x1de>
	}

	else if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_19200){
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	795b      	ldrb	r3, [r3, #5]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d105      	bne.n	8000856 <USART_Config+0x1ce>
		// El valor a cargar es 52.0625 -> Mantiza = 52, fraction = 0.0625
		// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
		// Valor a cargar 0x0341
		// Configurando el Baudrate generator para una velocidad de 19200bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0341;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f240 3241 	movw	r2, #833	; 0x341
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	e007      	b.n	8000866 <USART_Config+0x1de>
	}

	else if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_115200){	//**************************************DUDAAAAAA
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	795b      	ldrb	r3, [r3, #5]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d103      	bne.n	8000866 <USART_Config+0x1de>
		// El valor a cargar es 8.6875 -> Mantiza = 8, fraction = 0.6875
		// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11
		// Valor a cargar 0x0081
		// Configurando el Baudrate generator para una velocidad de 115200bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0081;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2281      	movs	r2, #129	; 0x81
 8000864:	609a      	str	r2, [r3, #8]
	}

	// 2.5 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler -> USART_Config.USART_mode){
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	791b      	ldrb	r3, [r3, #4]
 800086a:	2b03      	cmp	r3, #3
 800086c:	d847      	bhi.n	80008fe <USART_Config+0x276>
 800086e:	a201      	add	r2, pc, #4	; (adr r2, 8000874 <USART_Config+0x1ec>)
 8000870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000874:	08000885 	.word	0x08000885
 8000878:	08000897 	.word	0x08000897
 800087c:	080008a9 	.word	0x080008a9
 8000880:	080008dd 	.word	0x080008dd
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		//Cargamos el valor 0b1 en el bit TE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TE);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	68da      	ldr	r2, [r3, #12]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f042 0208 	orr.w	r2, r2, #8
 8000892:	60da      	str	r2, [r3, #12]
		break;
 8000894:	e044      	b.n	8000920 <USART_Config+0x298>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		//Cargamos el valor 0b1 en el bit RE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RE);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	68da      	ldr	r2, [r3, #12]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f042 0204 	orr.w	r2, r2, #4
 80008a4:	60da      	str	r2, [r3, #12]
		break;
 80008a6:	e03b      	b.n	8000920 <USART_Config+0x298>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmisión como recepción
		//Cargamos el valor 0b1 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TE);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	68da      	ldr	r2, [r3, #12]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f042 0208 	orr.w	r2, r2, #8
 80008b6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RE);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	68da      	ldr	r2, [r3, #12]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f042 0204 	orr.w	r2, r2, #4
 80008c6:	60da      	str	r2, [r3, #12]
		break;
 80008c8:	e02a      	b.n	8000920 <USART_Config+0x298>
 80008ca:	bf00      	nop
 80008cc:	40011000 	.word	0x40011000
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40004400 	.word	0x40004400
 80008d8:	40011400 	.word	0x40011400
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		//Cargamos el valor 0b0 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TE);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	68da      	ldr	r2, [r3, #12]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f022 0208 	bic.w	r2, r2, #8
 80008ea:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RE);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	68da      	ldr	r2, [r3, #12]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f022 0204 	bic.w	r2, r2, #4
 80008fa:	60da      	str	r2, [r3, #12]
		break;
 80008fc:	e010      	b.n	8000920 <USART_Config+0x298>
	}
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		//Cargamos el valor 0b0 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TE);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	68da      	ldr	r2, [r3, #12]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f022 0208 	bic.w	r2, r2, #8
 800090c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RE);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	68da      	ldr	r2, [r3, #12]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f022 0204 	bic.w	r2, r2, #4
 800091c:	60da      	str	r2, [r3, #12]
		break;
 800091e:	bf00      	nop
	}
	}

	// 2.6 Activamos el modulo serial.

	if(ptrUsartHandler -> USART_Config.USART_mode != USART_MODE_DISABLE){
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	791b      	ldrb	r3, [r3, #4]
 8000924:	2b03      	cmp	r3, #3
 8000926:	d007      	beq.n	8000938 <USART_Config+0x2b0>
		//Cargamos el valor de 0b1 en el bit UE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_UE);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	68da      	ldr	r2, [r3, #12]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000936:	60da      	str	r2, [r3, #12]
	}

	// 3. Activamos la interrupción para el USART

	// Permitimos que se levante la bandera RX
	ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RXNEIE);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	68da      	ldr	r2, [r3, #12]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f042 0220 	orr.w	r2, r2, #32
 8000946:	60da      	str	r2, [r3, #12]
	// NO permitimos que se levante la bandera TX
	ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
*/
	// 4. Activamos la señal de la interrupción en el NVIC

	if(ptrUsartHandler -> ptrUSARTx == USART1){
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <USART_Config+0x300>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d103      	bne.n	800095a <USART_Config+0x2d2>
		// Activamos la IRQ del USART1
		__NVIC_EnableIRQ(USART1_IRQn);
 8000952:	2025      	movs	r0, #37	; 0x25
 8000954:	f7ff fe7a 	bl	800064c <__NVIC_EnableIRQ>
 8000958:	e010      	b.n	800097c <USART_Config+0x2f4>

	}else if(ptrUsartHandler -> ptrUSARTx == USART2){
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a0b      	ldr	r2, [pc, #44]	; (800098c <USART_Config+0x304>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d103      	bne.n	800096c <USART_Config+0x2e4>
		// Activamos la IRQ del USART2
		__NVIC_EnableIRQ(USART2_IRQn);
 8000964:	2026      	movs	r0, #38	; 0x26
 8000966:	f7ff fe71 	bl	800064c <__NVIC_EnableIRQ>
 800096a:	e007      	b.n	800097c <USART_Config+0x2f4>

	}else if(ptrUsartHandler -> ptrUSARTx == USART6){
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a07      	ldr	r2, [pc, #28]	; (8000990 <USART_Config+0x308>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d102      	bne.n	800097c <USART_Config+0x2f4>
		// Activamos la IRQ del USART6
		__NVIC_EnableIRQ(USART6_IRQn);
 8000976:	2047      	movs	r0, #71	; 0x47
 8000978:	f7ff fe68 	bl	800064c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800097c:	b662      	cpsie	i
}
 800097e:	bf00      	nop
	}

	// 5. Activamos de nuevo todas las interrupciones

	__enable_irq();
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40011000 	.word	0x40011000
 800098c:	40004400 	.word	0x40004400
 8000990:	40011400 	.word	0x40011400

08000994 <USART1_Callback>:

//**********//  CallBacks //**********//

// Callback USART1
__attribute__((weak)) void USART1_Callback(void){
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
	__NOP();
 8000998:	bf00      	nop
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <USART6_Callback>:
__attribute__((weak)) void USART2_Callback(void){
	__NOP();
}

// Callback USART6
__attribute__((weak)) void USART6_Callback(void){
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
	__NOP();
 80009a8:	bf00      	nop
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <USART1_IRQHandler>:

// Hay que hacer dos cosas: 1) Atender la interrupción. 2) Llamamos al Callback
/* Rutina de atención a la interrupción del USART */

void USART1_IRQHandler(void){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	USART1 -> SR &= ~(USART_SR_RXNE);
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <USART1_IRQHandler+0x18>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a03      	ldr	r2, [pc, #12]	; (80009cc <USART1_IRQHandler+0x18>)
 80009be:	f023 0320 	bic.w	r3, r3, #32
 80009c2:	6013      	str	r3, [r2, #0]
	USART1_Callback();
 80009c4:	f7ff ffe6 	bl	8000994 <USART1_Callback>
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40011000 	.word	0x40011000

080009d0 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	USART2 -> SR &= ~(USART_SR_RXNE);		// Desactivamos la bandera para el RX
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <USART2_IRQHandler+0x24>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a06      	ldr	r2, [pc, #24]	; (80009f4 <USART2_IRQHandler+0x24>)
 80009da:	f023 0320 	bic.w	r3, r3, #32
 80009de:	6013      	str	r3, [r2, #0]
		USART2 -> CR1 &= ~(USART_CR1_TXEIE);
		USART2 -> SR &= ~(USART_SR_TXE);
		USART2 -> DR |= (dataToSend);
	}*/

	USART2_Callback();
 80009e0:	f000 f946 	bl	8000c70 <USART2_Callback>
	USART2 -> SR &= ~(USART_SR_TXE);		// Desactivamos la bandera para el TX
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <USART2_IRQHandler+0x24>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a02      	ldr	r2, [pc, #8]	; (80009f4 <USART2_IRQHandler+0x24>)
 80009ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80009ee:	6013      	str	r3, [r2, #0]
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40004400 	.word	0x40004400

080009f8 <USART6_IRQHandler>:

void USART6_IRQHandler(void){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	USART6 -> SR &= ~(USART_SR_RXNE);
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <USART6_IRQHandler+0x18>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a03      	ldr	r2, [pc, #12]	; (8000a10 <USART6_IRQHandler+0x18>)
 8000a02:	f023 0320 	bic.w	r3, r3, #32
 8000a06:	6013      	str	r3, [r2, #0]
	USART6_Callback();
 8000a08:	f7ff ffcc 	bl	80009a4 <USART6_Callback>
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40011400 	.word	0x40011400

08000a14 <readChar>:

//**********// Funcion para leer un solo char //**********//

char readChar(USART_Handler_t *ptrUsartHandler){
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
		__NOP();
	}*/

	// Leemos el valor recibido en el data register
	char dataToRead;
	dataToRead = ((char) (ptrUsartHandler -> ptrUSARTx -> DR));
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	73fb      	strb	r3, [r7, #15]

	return dataToRead;
 8000a24:	7bfb      	ldrb	r3, [r7, #15]

}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
	...

08000a34 <__NVIC_EnableIRQ>:
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	db0b      	blt.n	8000a5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	f003 021f 	and.w	r2, r3, #31
 8000a4c:	4907      	ldr	r1, [pc, #28]	; (8000a6c <__NVIC_EnableIRQ+0x38>)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	095b      	lsrs	r3, r3, #5
 8000a54:	2001      	movs	r0, #1
 8000a56:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000e100 	.word	0xe000e100

08000a70 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	db12      	blt.n	8000aa8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	f003 021f 	and.w	r2, r3, #31
 8000a88:	490a      	ldr	r1, [pc, #40]	; (8000ab4 <__NVIC_DisableIRQ+0x44>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	095b      	lsrs	r3, r3, #5
 8000a90:	2001      	movs	r0, #1
 8000a92:	fa00 f202 	lsl.w	r2, r0, r2
 8000a96:	3320      	adds	r3, #32
 8000a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a9c:	f3bf 8f4f 	dsb	sy
}
 8000aa0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000aa2:	f3bf 8f6f 	isb	sy
}
 8000aa6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000e100 	.word	0xe000e100

08000ab8 <main>:
void delay(int time);
void initSystem(void);

// *************** // MAIN // *************** //
int main(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	// Inicializamos el sistema
	initSystem();
 8000abc:	f000 f86c 	bl	8000b98 <initSystem>

	//Cargamos la configuración
	GPIO_Config(&handlerStateLED);
 8000ac0:	482e      	ldr	r0, [pc, #184]	; (8000b7c <main+0xc4>)
 8000ac2:	f7ff fb89 	bl	80001d8 <GPIO_Config>
	//GPIO_Config(&handlerLEDPB9);
	GPIO_Config(&handlerUSB);
 8000ac6:	482e      	ldr	r0, [pc, #184]	; (8000b80 <main+0xc8>)
 8000ac8:	f7ff fb86 	bl	80001d8 <GPIO_Config>
	//GPIO_Config(&handlerUSBTX);
	Timer_Config(&handlerTimer2);
 8000acc:	482d      	ldr	r0, [pc, #180]	; (8000b84 <main+0xcc>)
 8000ace:	f7ff fccb 	bl	8000468 <Timer_Config>
	//Timer_Config(&handlerTimer3);
	USART_Config(&handlerUsartRX);
 8000ad2:	482d      	ldr	r0, [pc, #180]	; (8000b88 <main+0xd0>)
 8000ad4:	f7ff fdd8 	bl	8000688 <USART_Config>
	//USART_Config(&handlerUsartTX);

	// Variable auxiliar para evaluar los casos de 'O'
	ptr_interruptor = &interruptor;
 8000ad8:	4b2c      	ldr	r3, [pc, #176]	; (8000b8c <main+0xd4>)
 8000ada:	4a2d      	ldr	r2, [pc, #180]	; (8000b90 <main+0xd8>)
 8000adc:	601a      	str	r2, [r3, #0]
	*ptr_interruptor = 0;
 8000ade:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <main+0xd4>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
	dataValue = '0';
 8000ae6:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <main+0xdc>)
 8000ae8:	2230      	movs	r2, #48	; 0x30
 8000aea:	701a      	strb	r2, [r3, #0]

    /* Ciclo principal */
	while(1){

		if(*ptr_interruptor == 1)				// Se oprimió una vez 'O'
 8000aec:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <main+0xd4>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d10b      	bne.n	8000b0e <main+0x56>
		{
			__NVIC_DisableIRQ(TIM2_IRQn);		// Apagamos la interrupción del timer
 8000af6:	201c      	movs	r0, #28
 8000af8:	f7ff ffba 	bl	8000a70 <__NVIC_DisableIRQ>
			handlerStateLED.pGPIOx -> ODR &= ~(GPIO_ODR_OD5);		// Forzamos a que el LED quede apagado
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <main+0xc4>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	695a      	ldr	r2, [r3, #20]
 8000b02:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <main+0xc4>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f022 0220 	bic.w	r2, r2, #32
 8000b0a:	615a      	str	r2, [r3, #20]
 8000b0c:	e7ee      	b.n	8000aec <main+0x34>

		}else if(*ptr_interruptor == 0){							// Se oprimió dos veces 'O'
 8000b0e:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <main+0xd4>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1e9      	bne.n	8000aec <main+0x34>

			__NVIC_EnableIRQ(TIM2_IRQn);							// Activamos la interrupción del timer
 8000b18:	201c      	movs	r0, #28
 8000b1a:	f7ff ff8b 	bl	8000a34 <__NVIC_EnableIRQ>

			if(dataValue == 'n'){
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <main+0xdc>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b6e      	cmp	r3, #110	; 0x6e
 8000b24:	d10a      	bne.n	8000b3c <main+0x84>
				handlerTimer2.timerConfig.Timer_period				= 300;
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <main+0xcc>)
 8000b28:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000b2c:	609a      	str	r2, [r3, #8]
				Timer_Config(&handlerTimer2);
 8000b2e:	4815      	ldr	r0, [pc, #84]	; (8000b84 <main+0xcc>)
 8000b30:	f7ff fc9a 	bl	8000468 <Timer_Config>
				dataValue = '0';			// Borramos el valor de dataValue hasta que haya otra interrupción
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <main+0xdc>)
 8000b36:	2230      	movs	r2, #48	; 0x30
 8000b38:	701a      	strb	r2, [r3, #0]
 8000b3a:	e7d7      	b.n	8000aec <main+0x34>

			}else if(dataValue == 'f'){
 8000b3c:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <main+0xdc>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b66      	cmp	r3, #102	; 0x66
 8000b42:	d109      	bne.n	8000b58 <main+0xa0>
				handlerTimer2.timerConfig.Timer_period				= 200;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <main+0xcc>)
 8000b46:	22c8      	movs	r2, #200	; 0xc8
 8000b48:	609a      	str	r2, [r3, #8]
				Timer_Config(&handlerTimer2);
 8000b4a:	480e      	ldr	r0, [pc, #56]	; (8000b84 <main+0xcc>)
 8000b4c:	f7ff fc8c 	bl	8000468 <Timer_Config>
				dataValue = '0';			// Borramos el valor de dataValue hasta que haya otra interrupción
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <main+0xdc>)
 8000b52:	2230      	movs	r2, #48	; 0x30
 8000b54:	701a      	strb	r2, [r3, #0]
 8000b56:	e7c9      	b.n	8000aec <main+0x34>

			}else if(dataValue == 'u'){
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <main+0xdc>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b75      	cmp	r3, #117	; 0x75
 8000b5e:	d109      	bne.n	8000b74 <main+0xbc>
				handlerTimer2.timerConfig.Timer_period				= 100;
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <main+0xcc>)
 8000b62:	2264      	movs	r2, #100	; 0x64
 8000b64:	609a      	str	r2, [r3, #8]
				Timer_Config(&handlerTimer2);
 8000b66:	4807      	ldr	r0, [pc, #28]	; (8000b84 <main+0xcc>)
 8000b68:	f7ff fc7e 	bl	8000468 <Timer_Config>
				dataValue = '0';			// Borramos el valor de dataValue hasta que haya otra interrupción
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <main+0xdc>)
 8000b6e:	2230      	movs	r2, #48	; 0x30
 8000b70:	701a      	strb	r2, [r3, #0]
 8000b72:	e7bb      	b.n	8000aec <main+0x34>

			}else{
				dataValue = '0';			// Borramos el valor de dataValue hasta que haya otra interrupción
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <main+0xdc>)
 8000b76:	2230      	movs	r2, #48	; 0x30
 8000b78:	701a      	strb	r2, [r3, #0]
		if(*ptr_interruptor == 1)				// Se oprimió una vez 'O'
 8000b7a:	e7b7      	b.n	8000aec <main+0x34>
 8000b7c:	20000020 	.word	0x20000020
 8000b80:	2000002c 	.word	0x2000002c
 8000b84:	20000038 	.word	0x20000038
 8000b88:	20000044 	.word	0x20000044
 8000b8c:	200000d4 	.word	0x200000d4
 8000b90:	200000d0 	.word	0x200000d0
 8000b94:	20000000 	.word	0x20000000

08000b98 <initSystem>:
	}
}

//***********// InitSystem //***********//

void initSystem(void){
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

	// Configuración el State LED
	handlerStateLED.pGPIOx								= GPIOA;
 8000b9c:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <initSystem+0x9c>)
 8000b9e:	4a26      	ldr	r2, [pc, #152]	; (8000c38 <initSystem+0xa0>)
 8000ba0:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 8000ba2:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <initSystem+0x9c>)
 8000ba4:	2205      	movs	r2, #5
 8000ba6:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 8000ba8:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <initSystem+0x9c>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 8000bae:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <initSystem+0x9c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <initSystem+0x9c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	71da      	strb	r2, [r3, #7]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <initSystem+0x9c>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	719a      	strb	r2, [r3, #6]
	handlerLEDPB9.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
	handlerLEDPB9.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_MEDIUM;
*/

	// Configuración del pin PA3 USB
	handlerUSB.pGPIOx									= GPIOA;
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <initSystem+0xa4>)
 8000bc2:	4a1d      	ldr	r2, [pc, #116]	; (8000c38 <initSystem+0xa0>)
 8000bc4:	601a      	str	r2, [r3, #0]
	handlerUSB.GPIO_PinConfig.GPIO_PinNumber			= PIN_3;
 8000bc6:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <initSystem+0xa4>)
 8000bc8:	2203      	movs	r2, #3
 8000bca:	711a      	strb	r2, [r3, #4]
	handlerUSB.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_ALTFN;
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <initSystem+0xa4>)
 8000bce:	2202      	movs	r2, #2
 8000bd0:	715a      	strb	r2, [r3, #5]
	handlerUSB.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <initSystem+0xa4>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	721a      	strb	r2, [r3, #8]
	handlerUSB.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 8000bd8:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <initSystem+0xa4>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	71da      	strb	r2, [r3, #7]
	handlerUSB.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_MEDIUM;
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <initSystem+0xa4>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	719a      	strb	r2, [r3, #6]
	handlerUSB.GPIO_PinConfig.GPIO_PinAltFunMode 		= AF7;
 8000be4:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <initSystem+0xa4>)
 8000be6:	2207      	movs	r2, #7
 8000be8:	725a      	strb	r2, [r3, #9]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_MEDIUM;
	handlerUSBTX.GPIO_PinConfig.GPIO_PinAltFunMode 		= AF7;
*/

	// Configuración del USART del USB para RX
	handlerUsartRX.ptrUSARTx							= USART2;
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <initSystem+0xa8>)
 8000bec:	4a15      	ldr	r2, [pc, #84]	; (8000c44 <initSystem+0xac>)
 8000bee:	601a      	str	r2, [r3, #0]
	handlerUsartRX.USART_Config.USART_mode				= USART_MODE_RX;
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <initSystem+0xa8>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	711a      	strb	r2, [r3, #4]
	handlerUsartRX.USART_Config.USART_baudrate			= USART_BAUDRATE_19200;
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <initSystem+0xa8>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	715a      	strb	r2, [r3, #5]
	handlerUsartRX.USART_Config.USART_datasize			= USART_DATASIZE_8BIT;
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <initSystem+0xa8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	719a      	strb	r2, [r3, #6]
	handlerUsartRX.USART_Config.USART_parity			= USART_PARITY_EVEN;
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <initSystem+0xa8>)
 8000c04:	2202      	movs	r2, #2
 8000c06:	71da      	strb	r2, [r3, #7]
	handlerUsartRX.USART_Config.USART_stopbits			= USART_STOPBIT_1;
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <initSystem+0xa8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	721a      	strb	r2, [r3, #8]
	handlerUsartTX.USART_Config.USART_parity			= USART_PARITY_NONE;
	handlerUsartTX.USART_Config.USART_stopbits			= USART_STOPBIT_1;
*/

	// Configuración del timer2
	handlerTimer2.ptrTIMx								= TIM2;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <initSystem+0xb0>)
 8000c10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c14:	601a      	str	r2, [r3, #0]
	handlerTimer2.timerConfig.Timer_mode				= TIMER_MODE_UP;
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <initSystem+0xb0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	711a      	strb	r2, [r3, #4]
	handlerTimer2.timerConfig.Timer_speed				= TIMER_INCR_SPEED_1ms;
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <initSystem+0xb0>)
 8000c1e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000c22:	80da      	strh	r2, [r3, #6]
	handlerTimer2.timerConfig.Timer_period				= 10;
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <initSystem+0xb0>)
 8000c26:	220a      	movs	r2, #10
 8000c28:	609a      	str	r2, [r3, #8]
	handlerTimer3.ptrTIMx								= TIM3;
	handlerTimer3.timerConfig.Timer_mode				= TIMER_MODE_UP;
	handlerTimer3.timerConfig.Timer_speed				= TIMER_INCR_SPEED_1ms;
	handlerTimer3.timerConfig.Timer_period				= 300;
*/
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	20000020 	.word	0x20000020
 8000c38:	40020000 	.word	0x40020000
 8000c3c:	2000002c 	.word	0x2000002c
 8000c40:	20000044 	.word	0x20000044
 8000c44:	40004400 	.word	0x40004400
 8000c48:	20000038 	.word	0x20000038

08000c4c <Timer2_Callback>:
//***********// CallBacks //***********//

void Timer2_Callback(void){
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
	handlerStateLED.pGPIOx -> ODR ^= GPIO_ODR_OD5;		// Encendido y apagado StateLED
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <Timer2_Callback+0x20>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	695a      	ldr	r2, [r3, #20]
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <Timer2_Callback+0x20>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f082 0220 	eor.w	r2, r2, #32
 8000c5e:	615a      	str	r2, [r3, #20]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000020 	.word	0x20000020

08000c70 <USART2_Callback>:
/*
void Timer3_Callback(void){
	handlerLEDPB9.pGPIOx -> ODR ^= GPIO_ODR_OD9;		// Encendido y apagado LED PB9
}
*/
void USART2_Callback(void){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	// Lectura de los datos recibidos
	dataValue = readChar(&handlerUsartRX);
 8000c74:	480a      	ldr	r0, [pc, #40]	; (8000ca0 <USART2_Callback+0x30>)
 8000c76:	f7ff fecd 	bl	8000a14 <readChar>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <USART2_Callback+0x34>)
 8000c80:	701a      	strb	r2, [r3, #0]

	// Comparación de los valores recibidos.
	if(dataValue == 'O'){
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <USART2_Callback+0x34>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b4f      	cmp	r3, #79	; 0x4f
 8000c88:	d108      	bne.n	8000c9c <USART2_Callback+0x2c>
		*ptr_interruptor ^= 1;				// Acción cada vez que se oprima el interruptor
 8000c8a:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <USART2_Callback+0x38>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	781a      	ldrb	r2, [r3, #0]
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <USART2_Callback+0x38>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f082 0201 	eor.w	r2, r2, #1
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	701a      	strb	r2, [r3, #0]
	}

	//writeChar(&handlerUsartTX, dataValue);
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000044 	.word	0x20000044
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	200000d4 	.word	0x200000d4

08000cac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cb0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb4:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cb6:	490d      	ldr	r1, [pc, #52]	; (8000cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <LoopForever+0xe>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ccc:	4c0a      	ldr	r4, [pc, #40]	; (8000cf8 <LoopForever+0x16>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cda:	f000 f811 	bl	8000d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cde:	f7ff feeb 	bl	8000ab8 <main>

08000ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ce2:	e7fe      	b.n	8000ce2 <LoopForever>
  ldr   r0, =_estack
 8000ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000cf0:	08000d68 	.word	0x08000d68
  ldr r2, =_sbss
 8000cf4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000cf8:	200000d8 	.word	0x200000d8

08000cfc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC_IRQHandler>
	...

08000d00 <__libc_init_array>:
 8000d00:	b570      	push	{r4, r5, r6, lr}
 8000d02:	4d0d      	ldr	r5, [pc, #52]	; (8000d38 <__libc_init_array+0x38>)
 8000d04:	4c0d      	ldr	r4, [pc, #52]	; (8000d3c <__libc_init_array+0x3c>)
 8000d06:	1b64      	subs	r4, r4, r5
 8000d08:	10a4      	asrs	r4, r4, #2
 8000d0a:	2600      	movs	r6, #0
 8000d0c:	42a6      	cmp	r6, r4
 8000d0e:	d109      	bne.n	8000d24 <__libc_init_array+0x24>
 8000d10:	4d0b      	ldr	r5, [pc, #44]	; (8000d40 <__libc_init_array+0x40>)
 8000d12:	4c0c      	ldr	r4, [pc, #48]	; (8000d44 <__libc_init_array+0x44>)
 8000d14:	f000 f818 	bl	8000d48 <_init>
 8000d18:	1b64      	subs	r4, r4, r5
 8000d1a:	10a4      	asrs	r4, r4, #2
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	42a6      	cmp	r6, r4
 8000d20:	d105      	bne.n	8000d2e <__libc_init_array+0x2e>
 8000d22:	bd70      	pop	{r4, r5, r6, pc}
 8000d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d28:	4798      	blx	r3
 8000d2a:	3601      	adds	r6, #1
 8000d2c:	e7ee      	b.n	8000d0c <__libc_init_array+0xc>
 8000d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d32:	4798      	blx	r3
 8000d34:	3601      	adds	r6, #1
 8000d36:	e7f2      	b.n	8000d1e <__libc_init_array+0x1e>
 8000d38:	08000d60 	.word	0x08000d60
 8000d3c:	08000d60 	.word	0x08000d60
 8000d40:	08000d60 	.word	0x08000d60
 8000d44:	08000d64 	.word	0x08000d64

08000d48 <_init>:
 8000d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d4a:	bf00      	nop
 8000d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d4e:	bc08      	pop	{r3}
 8000d50:	469e      	mov	lr, r3
 8000d52:	4770      	bx	lr

08000d54 <_fini>:
 8000d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d56:	bf00      	nop
 8000d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d5a:	bc08      	pop	{r3}
 8000d5c:	469e      	mov	lr, r3
 8000d5e:	4770      	bx	lr
