
Driver_Nema17_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010f0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001288  08001288  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001288  08001288  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08001288  08001288  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001288  08001288  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001288  08001288  00011288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800128c  0800128c  0001128c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08001290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000008  08001298  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08001298  00020138  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   000020c8  00000000  00000000  00020032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007dc  00000000  00000000  000220fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a8  00000000  00000000  000228d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000160  00000000  00000000  00022a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f4e7  00000000  00000000  00022be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002366  00000000  00000000  000320c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054ec3  00000000  00000000  0003442d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000892f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000052c  00000000  00000000  00089340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000008 	.word	0x20000008
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001270 	.word	0x08001270

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000000c 	.word	0x2000000c
 80001d4:	08001270 	.word	0x08001270

080001d8 <main>:
void motorConfig(void);
void ledControl(void);

// *************** // MAIN // *************** //
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	// Inicializamos el sistema
	initSystem();
 80001dc:	f000 f832 	bl	8000244 <initSystem>
	writeChar(&handlerUsart2,dataValue);
 80001e0:	4b0b      	ldr	r3, [pc, #44]	; (8000210 <main+0x38>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	4619      	mov	r1, r3
 80001e6:	480b      	ldr	r0, [pc, #44]	; (8000214 <main+0x3c>)
 80001e8:	f001 f806 	bl	80011f8 <writeChar>
    /* Ciclo principal */
	while(1){

		if(dataValue != '\0'){
 80001ec:	4b08      	ldr	r3, [pc, #32]	; (8000210 <main+0x38>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d0fb      	beq.n	80001ec <main+0x14>
			writeChar(&handlerUsart2,dataValue);
 80001f4:	4b06      	ldr	r3, [pc, #24]	; (8000210 <main+0x38>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	4619      	mov	r1, r3
 80001fa:	4806      	ldr	r0, [pc, #24]	; (8000214 <main+0x3c>)
 80001fc:	f000 fffc 	bl	80011f8 <writeChar>
			ledControl();
 8000200:	f000 fa46 	bl	8000690 <ledControl>
			motorConfig();
 8000204:	f000 f93c 	bl	8000480 <motorConfig>
			dataValue = '\0';
 8000208:	4b01      	ldr	r3, [pc, #4]	; (8000210 <main+0x38>)
 800020a:	2200      	movs	r2, #0
 800020c:	701a      	strb	r2, [r3, #0]
		if(dataValue != '\0'){
 800020e:	e7ed      	b.n	80001ec <main+0x14>
 8000210:	2000012c 	.word	0x2000012c
 8000214:	20000054 	.word	0x20000054

08000218 <delay>:

//***********// *********** // Definición de Funciones // *********** //***********//

//***********// Delay //***********//

void delay(int time){
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	// Con este ciclo se genera un intervalo de tiempo en el programa (no tiene otro objetivo)
	for (int i = 0; i <= time; i++){
 8000220:	2300      	movs	r3, #0
 8000222:	60fb      	str	r3, [r7, #12]
 8000224:	e003      	b.n	800022e <delay+0x16>
		__NOP();
 8000226:	bf00      	nop
	for (int i = 0; i <= time; i++){
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	3301      	adds	r3, #1
 800022c:	60fb      	str	r3, [r7, #12]
 800022e:	68fa      	ldr	r2, [r7, #12]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	429a      	cmp	r2, r3
 8000234:	ddf7      	ble.n	8000226 <delay+0xe>
	}
}
 8000236:	bf00      	nop
 8000238:	bf00      	nop
 800023a:	3714      	adds	r7, #20
 800023c:	46bd      	mov	sp, r7
 800023e:	bc80      	pop	{r7}
 8000240:	4770      	bx	lr
	...

08000244 <initSystem>:

//***********// InitSystem //***********//

void initSystem(void){
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0

	// Configuración el State LED
	handlerStateLED.pGPIOx								= GPIOA;
 8000248:	4b7f      	ldr	r3, [pc, #508]	; (8000448 <initSystem+0x204>)
 800024a:	4a80      	ldr	r2, [pc, #512]	; (800044c <initSystem+0x208>)
 800024c:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 800024e:	4b7e      	ldr	r3, [pc, #504]	; (8000448 <initSystem+0x204>)
 8000250:	2205      	movs	r2, #5
 8000252:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 8000254:	4b7c      	ldr	r3, [pc, #496]	; (8000448 <initSystem+0x204>)
 8000256:	2201      	movs	r2, #1
 8000258:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 800025a:	4b7b      	ldr	r3, [pc, #492]	; (8000448 <initSystem+0x204>)
 800025c:	2200      	movs	r2, #0
 800025e:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000260:	4b79      	ldr	r3, [pc, #484]	; (8000448 <initSystem+0x204>)
 8000262:	2200      	movs	r2, #0
 8000264:	71da      	strb	r2, [r3, #7]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 8000266:	4b78      	ldr	r3, [pc, #480]	; (8000448 <initSystem+0x204>)
 8000268:	2201      	movs	r2, #1
 800026a:	719a      	strb	r2, [r3, #6]

	GPIO_Config(&handlerStateLED);
 800026c:	4876      	ldr	r0, [pc, #472]	; (8000448 <initSystem+0x204>)
 800026e:	f000 fab3 	bl	80007d8 <GPIO_Config>

	// Definimos el handler para la configuración del STEP del motor1

	handlerStep1Config.pGPIOx 									= GPIOA;					// Puerto a emplear: GPIOC
 8000272:	4b77      	ldr	r3, [pc, #476]	; (8000450 <initSystem+0x20c>)
 8000274:	4a75      	ldr	r2, [pc, #468]	; (800044c <initSystem+0x208>)
 8000276:	601a      	str	r2, [r3, #0]
	handlerStep1Config.GPIO_PinConfig.GPIO_PinNumber			= PIN_6;					// Pin a emplear: PC9
 8000278:	4b75      	ldr	r3, [pc, #468]	; (8000450 <initSystem+0x20c>)
 800027a:	2206      	movs	r2, #6
 800027c:	711a      	strb	r2, [r3, #4]
	handlerStep1Config.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;			// Señal de salida
 800027e:	4b74      	ldr	r3, [pc, #464]	; (8000450 <initSystem+0x20c>)
 8000280:	2201      	movs	r2, #1
 8000282:	715a      	strb	r2, [r3, #5]
	handlerStep1Config.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 8000284:	4b72      	ldr	r3, [pc, #456]	; (8000450 <initSystem+0x20c>)
 8000286:	2200      	movs	r2, #0
 8000288:	721a      	strb	r2, [r3, #8]
	handlerStep1Config.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_PULLUP;
 800028a:	4b71      	ldr	r3, [pc, #452]	; (8000450 <initSystem+0x20c>)
 800028c:	2201      	movs	r2, #1
 800028e:	71da      	strb	r2, [r3, #7]
	handlerStep1Config.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_MEDIUM;
 8000290:	4b6f      	ldr	r3, [pc, #444]	; (8000450 <initSystem+0x20c>)
 8000292:	2201      	movs	r2, #1
 8000294:	719a      	strb	r2, [r3, #6]
	handlerStep1Config.GPIO_PinConfig.GPIO_PinAltFunMode		= AF0;						// Ninguna función
 8000296:	4b6e      	ldr	r3, [pc, #440]	; (8000450 <initSystem+0x20c>)
 8000298:	2200      	movs	r2, #0
 800029a:	725a      	strb	r2, [r3, #9]

	// Cargamos la configuración del PIN_B9 (Step1)
	GPIO_Config(&handlerStep1Config);
 800029c:	486c      	ldr	r0, [pc, #432]	; (8000450 <initSystem+0x20c>)
 800029e:	f000 fa9b 	bl	80007d8 <GPIO_Config>

	// Definimos el handler para la dirección (DIR) del motor1

	handlerDir1Config.pGPIOx 									= GPIOA;					// Puerto a emplear: GPIOC
 80002a2:	4b6c      	ldr	r3, [pc, #432]	; (8000454 <initSystem+0x210>)
 80002a4:	4a69      	ldr	r2, [pc, #420]	; (800044c <initSystem+0x208>)
 80002a6:	601a      	str	r2, [r3, #0]
	handlerDir1Config.GPIO_PinConfig.GPIO_PinNumber				= PIN_11;					// Pin a emplear: PC8
 80002a8:	4b6a      	ldr	r3, [pc, #424]	; (8000454 <initSystem+0x210>)
 80002aa:	220b      	movs	r2, #11
 80002ac:	711a      	strb	r2, [r3, #4]
	handlerDir1Config.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;			// Señal de salida
 80002ae:	4b69      	ldr	r3, [pc, #420]	; (8000454 <initSystem+0x210>)
 80002b0:	2201      	movs	r2, #1
 80002b2:	715a      	strb	r2, [r3, #5]
	handlerDir1Config.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 80002b4:	4b67      	ldr	r3, [pc, #412]	; (8000454 <initSystem+0x210>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	721a      	strb	r2, [r3, #8]
	handlerDir1Config.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_PULLUP;
 80002ba:	4b66      	ldr	r3, [pc, #408]	; (8000454 <initSystem+0x210>)
 80002bc:	2201      	movs	r2, #1
 80002be:	71da      	strb	r2, [r3, #7]
	handlerDir1Config.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_MEDIUM;
 80002c0:	4b64      	ldr	r3, [pc, #400]	; (8000454 <initSystem+0x210>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	719a      	strb	r2, [r3, #6]
	handlerDir1Config.GPIO_PinConfig.GPIO_PinAltFunMode			= AF0;						// Ninguna función
 80002c6:	4b63      	ldr	r3, [pc, #396]	; (8000454 <initSystem+0x210>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	725a      	strb	r2, [r3, #9]

	// Cargamos la configuración del PIN_B8  (DIR1)
	GPIO_Config(&handlerDir1Config);
 80002cc:	4861      	ldr	r0, [pc, #388]	; (8000454 <initSystem+0x210>)
 80002ce:	f000 fa83 	bl	80007d8 <GPIO_Config>

	// Definimos el handler para la configuración del STEP del motor2

	handlerStep2Config.pGPIOx 									= GPIOA;					// Puerto a emplear: GPIOB
 80002d2:	4b61      	ldr	r3, [pc, #388]	; (8000458 <initSystem+0x214>)
 80002d4:	4a5d      	ldr	r2, [pc, #372]	; (800044c <initSystem+0x208>)
 80002d6:	601a      	str	r2, [r3, #0]
	handlerStep2Config.GPIO_PinConfig.GPIO_PinNumber			= PIN_7;					// Pin a emplear: PB9
 80002d8:	4b5f      	ldr	r3, [pc, #380]	; (8000458 <initSystem+0x214>)
 80002da:	2207      	movs	r2, #7
 80002dc:	711a      	strb	r2, [r3, #4]
	handlerStep2Config.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;			// Señal de salida
 80002de:	4b5e      	ldr	r3, [pc, #376]	; (8000458 <initSystem+0x214>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	715a      	strb	r2, [r3, #5]
	handlerStep2Config.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 80002e4:	4b5c      	ldr	r3, [pc, #368]	; (8000458 <initSystem+0x214>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	721a      	strb	r2, [r3, #8]
	handlerStep2Config.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_PULLUP;
 80002ea:	4b5b      	ldr	r3, [pc, #364]	; (8000458 <initSystem+0x214>)
 80002ec:	2201      	movs	r2, #1
 80002ee:	71da      	strb	r2, [r3, #7]
	handlerStep2Config.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_MEDIUM;
 80002f0:	4b59      	ldr	r3, [pc, #356]	; (8000458 <initSystem+0x214>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	719a      	strb	r2, [r3, #6]
	handlerStep2Config.GPIO_PinConfig.GPIO_PinAltFunMode		= AF0;						// Ninguna función
 80002f6:	4b58      	ldr	r3, [pc, #352]	; (8000458 <initSystem+0x214>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	725a      	strb	r2, [r3, #9]

	// Cargamos la configuración del PIN_A6 (Step2)
	GPIO_Config(&handlerStep2Config);
 80002fc:	4856      	ldr	r0, [pc, #344]	; (8000458 <initSystem+0x214>)
 80002fe:	f000 fa6b 	bl	80007d8 <GPIO_Config>

	// Definimos el handler para la dirección del motor2

	handlerDir2Config.pGPIOx 									= GPIOB;					// Puerto a emplear: GPIOC
 8000302:	4b56      	ldr	r3, [pc, #344]	; (800045c <initSystem+0x218>)
 8000304:	4a56      	ldr	r2, [pc, #344]	; (8000460 <initSystem+0x21c>)
 8000306:	601a      	str	r2, [r3, #0]
	handlerDir2Config.GPIO_PinConfig.GPIO_PinNumber				= PIN_12;					// Pin a emplear: PC5
 8000308:	4b54      	ldr	r3, [pc, #336]	; (800045c <initSystem+0x218>)
 800030a:	220c      	movs	r2, #12
 800030c:	711a      	strb	r2, [r3, #4]
	handlerDir2Config.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;			// Señal de salida
 800030e:	4b53      	ldr	r3, [pc, #332]	; (800045c <initSystem+0x218>)
 8000310:	2201      	movs	r2, #1
 8000312:	715a      	strb	r2, [r3, #5]
	handlerDir2Config.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8000314:	4b51      	ldr	r3, [pc, #324]	; (800045c <initSystem+0x218>)
 8000316:	2200      	movs	r2, #0
 8000318:	721a      	strb	r2, [r3, #8]
	handlerDir2Config.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_PULLUP;
 800031a:	4b50      	ldr	r3, [pc, #320]	; (800045c <initSystem+0x218>)
 800031c:	2201      	movs	r2, #1
 800031e:	71da      	strb	r2, [r3, #7]
	handlerDir2Config.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_MEDIUM;
 8000320:	4b4e      	ldr	r3, [pc, #312]	; (800045c <initSystem+0x218>)
 8000322:	2201      	movs	r2, #1
 8000324:	719a      	strb	r2, [r3, #6]
	handlerDir2Config.GPIO_PinConfig.GPIO_PinAltFunMode			= AF0;						// Ninguna función
 8000326:	4b4d      	ldr	r3, [pc, #308]	; (800045c <initSystem+0x218>)
 8000328:	2200      	movs	r2, #0
 800032a:	725a      	strb	r2, [r3, #9]

	// Cargamos la configuración del PIN_A5  (DIR2)
	GPIO_Config(&handlerDir2Config);
 800032c:	484b      	ldr	r0, [pc, #300]	; (800045c <initSystem+0x218>)
 800032e:	f000 fa53 	bl	80007d8 <GPIO_Config>

	// Definimos el handler para la configuración del STEP del motor3

	handlerStep3Config.pGPIOx 									= GPIOA;					// Puerto a emplear: GPIOA
 8000332:	4b4c      	ldr	r3, [pc, #304]	; (8000464 <initSystem+0x220>)
 8000334:	4a45      	ldr	r2, [pc, #276]	; (800044c <initSystem+0x208>)
 8000336:	601a      	str	r2, [r3, #0]
	handlerStep3Config.GPIO_PinConfig.GPIO_PinNumber			= PIN_9;					// Pin a emplear: PA9
 8000338:	4b4a      	ldr	r3, [pc, #296]	; (8000464 <initSystem+0x220>)
 800033a:	2209      	movs	r2, #9
 800033c:	711a      	strb	r2, [r3, #4]
	handlerStep3Config.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;			// Señal de salida
 800033e:	4b49      	ldr	r3, [pc, #292]	; (8000464 <initSystem+0x220>)
 8000340:	2201      	movs	r2, #1
 8000342:	715a      	strb	r2, [r3, #5]
	handlerStep3Config.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 8000344:	4b47      	ldr	r3, [pc, #284]	; (8000464 <initSystem+0x220>)
 8000346:	2200      	movs	r2, #0
 8000348:	721a      	strb	r2, [r3, #8]
	handlerStep3Config.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_PULLUP;
 800034a:	4b46      	ldr	r3, [pc, #280]	; (8000464 <initSystem+0x220>)
 800034c:	2201      	movs	r2, #1
 800034e:	71da      	strb	r2, [r3, #7]
	handlerStep3Config.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_MEDIUM;
 8000350:	4b44      	ldr	r3, [pc, #272]	; (8000464 <initSystem+0x220>)
 8000352:	2201      	movs	r2, #1
 8000354:	719a      	strb	r2, [r3, #6]
	handlerStep3Config.GPIO_PinConfig.GPIO_PinAltFunMode		= AF0;						// Ninguna función
 8000356:	4b43      	ldr	r3, [pc, #268]	; (8000464 <initSystem+0x220>)
 8000358:	2200      	movs	r2, #0
 800035a:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&handlerStep3Config);
 800035c:	4841      	ldr	r0, [pc, #260]	; (8000464 <initSystem+0x220>)
 800035e:	f000 fa3b 	bl	80007d8 <GPIO_Config>

	// Definimos el handler para la dirección del motor3

	handlerDir3Config.pGPIOx 									= GPIOB;					// Puerto a emplear: GPIOC
 8000362:	4b41      	ldr	r3, [pc, #260]	; (8000468 <initSystem+0x224>)
 8000364:	4a3e      	ldr	r2, [pc, #248]	; (8000460 <initSystem+0x21c>)
 8000366:	601a      	str	r2, [r3, #0]
	handlerDir3Config.GPIO_PinConfig.GPIO_PinNumber				= PIN_2;					// Pin a emplear: PB2
 8000368:	4b3f      	ldr	r3, [pc, #252]	; (8000468 <initSystem+0x224>)
 800036a:	2202      	movs	r2, #2
 800036c:	711a      	strb	r2, [r3, #4]
	handlerDir3Config.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;			// Señal de salida
 800036e:	4b3e      	ldr	r3, [pc, #248]	; (8000468 <initSystem+0x224>)
 8000370:	2201      	movs	r2, #1
 8000372:	715a      	strb	r2, [r3, #5]
	handlerDir3Config.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8000374:	4b3c      	ldr	r3, [pc, #240]	; (8000468 <initSystem+0x224>)
 8000376:	2200      	movs	r2, #0
 8000378:	721a      	strb	r2, [r3, #8]
	handlerDir3Config.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_PULLUP;
 800037a:	4b3b      	ldr	r3, [pc, #236]	; (8000468 <initSystem+0x224>)
 800037c:	2201      	movs	r2, #1
 800037e:	71da      	strb	r2, [r3, #7]
	handlerDir3Config.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_MEDIUM;
 8000380:	4b39      	ldr	r3, [pc, #228]	; (8000468 <initSystem+0x224>)
 8000382:	2201      	movs	r2, #1
 8000384:	719a      	strb	r2, [r3, #6]
	handlerDir3Config.GPIO_PinConfig.GPIO_PinAltFunMode			= AF0;						// Ninguna función
 8000386:	4b38      	ldr	r3, [pc, #224]	; (8000468 <initSystem+0x224>)
 8000388:	2200      	movs	r2, #0
 800038a:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&handlerDir3Config);
 800038c:	4836      	ldr	r0, [pc, #216]	; (8000468 <initSystem+0x224>)
 800038e:	f000 fa23 	bl	80007d8 <GPIO_Config>
//	********************************************************************************************************************************


	// Configuración del pin PA3 USB RX
	handlerUSBRX.pGPIOx									= GPIOA;
 8000392:	4b36      	ldr	r3, [pc, #216]	; (800046c <initSystem+0x228>)
 8000394:	4a2d      	ldr	r2, [pc, #180]	; (800044c <initSystem+0x208>)
 8000396:	601a      	str	r2, [r3, #0]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinNumber			= PIN_3;
 8000398:	4b34      	ldr	r3, [pc, #208]	; (800046c <initSystem+0x228>)
 800039a:	2203      	movs	r2, #3
 800039c:	711a      	strb	r2, [r3, #4]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 800039e:	4b33      	ldr	r3, [pc, #204]	; (800046c <initSystem+0x228>)
 80003a0:	2202      	movs	r2, #2
 80003a2:	715a      	strb	r2, [r3, #5]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 80003a4:	4b31      	ldr	r3, [pc, #196]	; (800046c <initSystem+0x228>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	721a      	strb	r2, [r3, #8]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 80003aa:	4b30      	ldr	r3, [pc, #192]	; (800046c <initSystem+0x228>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	71da      	strb	r2, [r3, #7]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_FAST;
 80003b0:	4b2e      	ldr	r3, [pc, #184]	; (800046c <initSystem+0x228>)
 80003b2:	2202      	movs	r2, #2
 80003b4:	719a      	strb	r2, [r3, #6]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinAltFunMode 		= AF7;
 80003b6:	4b2d      	ldr	r3, [pc, #180]	; (800046c <initSystem+0x228>)
 80003b8:	2207      	movs	r2, #7
 80003ba:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&handlerUSBRX);
 80003bc:	482b      	ldr	r0, [pc, #172]	; (800046c <initSystem+0x228>)
 80003be:	f000 fa0b 	bl	80007d8 <GPIO_Config>

	// Configuración del pin PA2 USB TX
	handlerUSBTX.pGPIOx									= GPIOA;
 80003c2:	4b2b      	ldr	r3, [pc, #172]	; (8000470 <initSystem+0x22c>)
 80003c4:	4a21      	ldr	r2, [pc, #132]	; (800044c <initSystem+0x208>)
 80003c6:	601a      	str	r2, [r3, #0]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinNumber			= PIN_2;
 80003c8:	4b29      	ldr	r3, [pc, #164]	; (8000470 <initSystem+0x22c>)
 80003ca:	2202      	movs	r2, #2
 80003cc:	711a      	strb	r2, [r3, #4]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 80003ce:	4b28      	ldr	r3, [pc, #160]	; (8000470 <initSystem+0x22c>)
 80003d0:	2202      	movs	r2, #2
 80003d2:	715a      	strb	r2, [r3, #5]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 80003d4:	4b26      	ldr	r3, [pc, #152]	; (8000470 <initSystem+0x22c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	721a      	strb	r2, [r3, #8]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 80003da:	4b25      	ldr	r3, [pc, #148]	; (8000470 <initSystem+0x22c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	71da      	strb	r2, [r3, #7]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_FAST;
 80003e0:	4b23      	ldr	r3, [pc, #140]	; (8000470 <initSystem+0x22c>)
 80003e2:	2202      	movs	r2, #2
 80003e4:	719a      	strb	r2, [r3, #6]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinAltFunMode 		= AF7;
 80003e6:	4b22      	ldr	r3, [pc, #136]	; (8000470 <initSystem+0x22c>)
 80003e8:	2207      	movs	r2, #7
 80003ea:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&handlerUSBTX);
 80003ec:	4820      	ldr	r0, [pc, #128]	; (8000470 <initSystem+0x22c>)
 80003ee:	f000 f9f3 	bl	80007d8 <GPIO_Config>

	// Configuración del USART del USB para RXTX
	handlerUsart2.ptrUSARTx								= USART2;
 80003f2:	4b20      	ldr	r3, [pc, #128]	; (8000474 <initSystem+0x230>)
 80003f4:	4a20      	ldr	r2, [pc, #128]	; (8000478 <initSystem+0x234>)
 80003f6:	601a      	str	r2, [r3, #0]
	handlerUsart2.USART_Config.USART_mode				= USART_MODE_RXTX;
 80003f8:	4b1e      	ldr	r3, [pc, #120]	; (8000474 <initSystem+0x230>)
 80003fa:	2202      	movs	r2, #2
 80003fc:	711a      	strb	r2, [r3, #4]
	handlerUsart2.USART_Config.USART_baudrate			= USART_BAUDRATE_19200;
 80003fe:	4b1d      	ldr	r3, [pc, #116]	; (8000474 <initSystem+0x230>)
 8000400:	2201      	movs	r2, #1
 8000402:	715a      	strb	r2, [r3, #5]
	handlerUsart2.USART_Config.USART_datasize			= USART_DATASIZE_8BIT;
 8000404:	4b1b      	ldr	r3, [pc, #108]	; (8000474 <initSystem+0x230>)
 8000406:	2200      	movs	r2, #0
 8000408:	719a      	strb	r2, [r3, #6]
	handlerUsart2.USART_Config.USART_parity				= USART_PARITY_ODD;
 800040a:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <initSystem+0x230>)
 800040c:	2201      	movs	r2, #1
 800040e:	71da      	strb	r2, [r3, #7]
	handlerUsart2.USART_Config.USART_stopbits			= USART_STOPBIT_1;
 8000410:	4b18      	ldr	r3, [pc, #96]	; (8000474 <initSystem+0x230>)
 8000412:	2200      	movs	r2, #0
 8000414:	721a      	strb	r2, [r3, #8]
	handlerUsart2.USART_Config.USART_interrupt 			= USART_INTERRUPT_RX_ENABLE;
 8000416:	4b17      	ldr	r3, [pc, #92]	; (8000474 <initSystem+0x230>)
 8000418:	2200      	movs	r2, #0
 800041a:	725a      	strb	r2, [r3, #9]

	USART_Config(&handlerUsart2);
 800041c:	4815      	ldr	r0, [pc, #84]	; (8000474 <initSystem+0x230>)
 800041e:	f000 fcab 	bl	8000d78 <USART_Config>

	// Configuración del timer2
	handlerTimer2.ptrTIMx								= TIM2;
 8000422:	4b16      	ldr	r3, [pc, #88]	; (800047c <initSystem+0x238>)
 8000424:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000428:	601a      	str	r2, [r3, #0]
	handlerTimer2.timerConfig.Timer_mode				= TIMER_MODE_UP;
 800042a:	4b14      	ldr	r3, [pc, #80]	; (800047c <initSystem+0x238>)
 800042c:	2200      	movs	r2, #0
 800042e:	711a      	strb	r2, [r3, #4]
	handlerTimer2.timerConfig.Timer_speed				= TIMER_INCR_SPEED_1ms;
 8000430:	4b12      	ldr	r3, [pc, #72]	; (800047c <initSystem+0x238>)
 8000432:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000436:	80da      	strh	r2, [r3, #6]
	handlerTimer2.timerConfig.Timer_period				= 10;
 8000438:	4b10      	ldr	r3, [pc, #64]	; (800047c <initSystem+0x238>)
 800043a:	220a      	movs	r2, #10
 800043c:	609a      	str	r2, [r3, #8]

	Timer_Config(&handlerTimer2);
 800043e:	480f      	ldr	r0, [pc, #60]	; (800047c <initSystem+0x238>)
 8000440:	f000 fb86 	bl	8000b50 <Timer_Config>
}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}
 8000448:	20000024 	.word	0x20000024
 800044c:	40020000 	.word	0x40020000
 8000450:	200000e0 	.word	0x200000e0
 8000454:	200000ec 	.word	0x200000ec
 8000458:	200000f8 	.word	0x200000f8
 800045c:	20000104 	.word	0x20000104
 8000460:	40020400 	.word	0x40020400
 8000464:	20000110 	.word	0x20000110
 8000468:	2000011c 	.word	0x2000011c
 800046c:	2000003c 	.word	0x2000003c
 8000470:	20000048 	.word	0x20000048
 8000474:	20000054 	.word	0x20000054
 8000478:	40004400 	.word	0x40004400
 800047c:	20000030 	.word	0x20000030

08000480 <motorConfig>:

//************// Función motor 1 //************//

void motorConfig(void){
 8000480:	b580      	push	{r7, lr}
 8000482:	b086      	sub	sp, #24
 8000484:	af00      	add	r7, sp, #0
	//************// Inicio Motor 1 //************//

	// Configuración motor 1

	// Condición: Pulsador de Giro en sentido ++
	if((nMotor == 1) ){
 8000486:	4b78      	ldr	r3, [pc, #480]	; (8000668 <motorConfig+0x1e8>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	2b01      	cmp	r3, #1
 800048c:	d149      	bne.n	8000522 <motorConfig+0xa2>

		if(dataValue == 'a'){
 800048e:	4b77      	ldr	r3, [pc, #476]	; (800066c <motorConfig+0x1ec>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b61      	cmp	r3, #97	; 0x61
 8000494:	d120      	bne.n	80004d8 <motorConfig+0x58>
			GPIO_WritePin(&handlerDir1Config, RESET);			//Rotación en sentido ++
 8000496:	2100      	movs	r1, #0
 8000498:	4875      	ldr	r0, [pc, #468]	; (8000670 <motorConfig+0x1f0>)
 800049a:	f000 fac5 	bl	8000a28 <GPIO_WritePin>
			for(uint32_t i = 0; i < pasos; i++){
 800049e:	2300      	movs	r3, #0
 80004a0:	617b      	str	r3, [r7, #20]
 80004a2:	e014      	b.n	80004ce <motorConfig+0x4e>
				GPIO_WritePin(&handlerStep1Config, SET);		//Enciende el motor
 80004a4:	2101      	movs	r1, #1
 80004a6:	4873      	ldr	r0, [pc, #460]	; (8000674 <motorConfig+0x1f4>)
 80004a8:	f000 fabe 	bl	8000a28 <GPIO_WritePin>
				delay(delayTime);								//Tiempo de espera entre paso y paso
 80004ac:	4b72      	ldr	r3, [pc, #456]	; (8000678 <motorConfig+0x1f8>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff feb1 	bl	8000218 <delay>

				GPIO_WritePin(&handlerStep1Config, RESET);		//Apaga el motor
 80004b6:	2100      	movs	r1, #0
 80004b8:	486e      	ldr	r0, [pc, #440]	; (8000674 <motorConfig+0x1f4>)
 80004ba:	f000 fab5 	bl	8000a28 <GPIO_WritePin>
				delay(delayTime);								//Tiempo de espera entre paso y paso
 80004be:	4b6e      	ldr	r3, [pc, #440]	; (8000678 <motorConfig+0x1f8>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff fea8 	bl	8000218 <delay>
			for(uint32_t i = 0; i < pasos; i++){
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	3301      	adds	r3, #1
 80004cc:	617b      	str	r3, [r7, #20]
 80004ce:	4b6b      	ldr	r3, [pc, #428]	; (800067c <motorConfig+0x1fc>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	697a      	ldr	r2, [r7, #20]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d3e5      	bcc.n	80004a4 <motorConfig+0x24>
			}
		}
	// Condición: Pulsador de Giro en sentido --
		if(dataValue == 'd'){
 80004d8:	4b64      	ldr	r3, [pc, #400]	; (800066c <motorConfig+0x1ec>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b64      	cmp	r3, #100	; 0x64
 80004de:	d120      	bne.n	8000522 <motorConfig+0xa2>
			GPIO_WritePin(&handlerDir1Config, SET);				//Rotación en sentido --
 80004e0:	2101      	movs	r1, #1
 80004e2:	4863      	ldr	r0, [pc, #396]	; (8000670 <motorConfig+0x1f0>)
 80004e4:	f000 faa0 	bl	8000a28 <GPIO_WritePin>
			for(uint32_t i = 0; i < pasos; i++){
 80004e8:	2300      	movs	r3, #0
 80004ea:	613b      	str	r3, [r7, #16]
 80004ec:	e014      	b.n	8000518 <motorConfig+0x98>
				GPIO_WritePin(&handlerStep1Config, SET);		//Enciende el motor
 80004ee:	2101      	movs	r1, #1
 80004f0:	4860      	ldr	r0, [pc, #384]	; (8000674 <motorConfig+0x1f4>)
 80004f2:	f000 fa99 	bl	8000a28 <GPIO_WritePin>
				delay(delayTime);								//Tiempo de espera entre paso y paso
 80004f6:	4b60      	ldr	r3, [pc, #384]	; (8000678 <motorConfig+0x1f8>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff fe8c 	bl	8000218 <delay>

				GPIO_WritePin(&handlerStep1Config, RESET);		//Apaga el motor
 8000500:	2100      	movs	r1, #0
 8000502:	485c      	ldr	r0, [pc, #368]	; (8000674 <motorConfig+0x1f4>)
 8000504:	f000 fa90 	bl	8000a28 <GPIO_WritePin>
				delay(delayTime);								//Tiempo de espera entre paso y paso
 8000508:	4b5b      	ldr	r3, [pc, #364]	; (8000678 <motorConfig+0x1f8>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff fe83 	bl	8000218 <delay>
			for(uint32_t i = 0; i < pasos; i++){
 8000512:	693b      	ldr	r3, [r7, #16]
 8000514:	3301      	adds	r3, #1
 8000516:	613b      	str	r3, [r7, #16]
 8000518:	4b58      	ldr	r3, [pc, #352]	; (800067c <motorConfig+0x1fc>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	693a      	ldr	r2, [r7, #16]
 800051e:	429a      	cmp	r2, r3
 8000520:	d3e5      	bcc.n	80004ee <motorConfig+0x6e>
	//************// Fin Motor 1 //************//

	//************// Inicio Motor 2 //************//

	// Condición: Pulsador de Giro en sentido ++
	if(nMotor == 2){
 8000522:	4b51      	ldr	r3, [pc, #324]	; (8000668 <motorConfig+0x1e8>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b02      	cmp	r3, #2
 8000528:	d149      	bne.n	80005be <motorConfig+0x13e>

		if(dataValue == 'a'){
 800052a:	4b50      	ldr	r3, [pc, #320]	; (800066c <motorConfig+0x1ec>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b61      	cmp	r3, #97	; 0x61
 8000530:	d120      	bne.n	8000574 <motorConfig+0xf4>
			GPIO_WritePin(&handlerDir2Config, RESET);			//Rotación en sentido ++
 8000532:	2100      	movs	r1, #0
 8000534:	4852      	ldr	r0, [pc, #328]	; (8000680 <motorConfig+0x200>)
 8000536:	f000 fa77 	bl	8000a28 <GPIO_WritePin>
			for(uint32_t i = 0; i < pasos; i++){
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	e014      	b.n	800056a <motorConfig+0xea>
				GPIO_WritePin(&handlerStep2Config, SET);		//Enciende el motor
 8000540:	2101      	movs	r1, #1
 8000542:	4850      	ldr	r0, [pc, #320]	; (8000684 <motorConfig+0x204>)
 8000544:	f000 fa70 	bl	8000a28 <GPIO_WritePin>
				delay(delayTime);								//Tiempo de espera entre paso y paso
 8000548:	4b4b      	ldr	r3, [pc, #300]	; (8000678 <motorConfig+0x1f8>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff fe63 	bl	8000218 <delay>

				GPIO_WritePin(&handlerStep2Config, RESET);		//Apaga el motor
 8000552:	2100      	movs	r1, #0
 8000554:	484b      	ldr	r0, [pc, #300]	; (8000684 <motorConfig+0x204>)
 8000556:	f000 fa67 	bl	8000a28 <GPIO_WritePin>
				delay(delayTime);								//Tiempo de espera entre paso y paso
 800055a:	4b47      	ldr	r3, [pc, #284]	; (8000678 <motorConfig+0x1f8>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff fe5a 	bl	8000218 <delay>
			for(uint32_t i = 0; i < pasos; i++){
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	3301      	adds	r3, #1
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	4b44      	ldr	r3, [pc, #272]	; (800067c <motorConfig+0x1fc>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	68fa      	ldr	r2, [r7, #12]
 8000570:	429a      	cmp	r2, r3
 8000572:	d3e5      	bcc.n	8000540 <motorConfig+0xc0>
			}
		}

		// Condición: Pulsador de Giro en sentido --
		if(dataValue == 'd'){
 8000574:	4b3d      	ldr	r3, [pc, #244]	; (800066c <motorConfig+0x1ec>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b64      	cmp	r3, #100	; 0x64
 800057a:	d120      	bne.n	80005be <motorConfig+0x13e>

			GPIO_WritePin(&handlerDir2Config, SET);				//Rotación en sentido --
 800057c:	2101      	movs	r1, #1
 800057e:	4840      	ldr	r0, [pc, #256]	; (8000680 <motorConfig+0x200>)
 8000580:	f000 fa52 	bl	8000a28 <GPIO_WritePin>
			for(uint32_t i = 0; i < pasos; i++){
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	e014      	b.n	80005b4 <motorConfig+0x134>
				GPIO_WritePin(&handlerStep2Config, SET);		//Enciende el motor
 800058a:	2101      	movs	r1, #1
 800058c:	483d      	ldr	r0, [pc, #244]	; (8000684 <motorConfig+0x204>)
 800058e:	f000 fa4b 	bl	8000a28 <GPIO_WritePin>
				delay(delayTime);								//Tiempo de espera entre paso y paso
 8000592:	4b39      	ldr	r3, [pc, #228]	; (8000678 <motorConfig+0x1f8>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff fe3e 	bl	8000218 <delay>

				GPIO_WritePin(&handlerStep2Config, RESET);		//Apaga el motor
 800059c:	2100      	movs	r1, #0
 800059e:	4839      	ldr	r0, [pc, #228]	; (8000684 <motorConfig+0x204>)
 80005a0:	f000 fa42 	bl	8000a28 <GPIO_WritePin>
				delay(delayTime);								//Tiempo de espera entre paso y paso
 80005a4:	4b34      	ldr	r3, [pc, #208]	; (8000678 <motorConfig+0x1f8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff fe35 	bl	8000218 <delay>
			for(uint32_t i = 0; i < pasos; i++){
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	3301      	adds	r3, #1
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	4b31      	ldr	r3, [pc, #196]	; (800067c <motorConfig+0x1fc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	68ba      	ldr	r2, [r7, #8]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d3e5      	bcc.n	800058a <motorConfig+0x10a>

	//************// Fin Motor 2 //************//

	//************// Inicio Motor 3 //************//

	if(nMotor == 3){
 80005be:	4b2a      	ldr	r3, [pc, #168]	; (8000668 <motorConfig+0x1e8>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b03      	cmp	r3, #3
 80005c4:	d149      	bne.n	800065a <motorConfig+0x1da>

		if(dataValue == 'a'){
 80005c6:	4b29      	ldr	r3, [pc, #164]	; (800066c <motorConfig+0x1ec>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b61      	cmp	r3, #97	; 0x61
 80005cc:	d120      	bne.n	8000610 <motorConfig+0x190>
			GPIO_WritePin(&handlerDir3Config, RESET);			//Rotación en sentido ++
 80005ce:	2100      	movs	r1, #0
 80005d0:	482d      	ldr	r0, [pc, #180]	; (8000688 <motorConfig+0x208>)
 80005d2:	f000 fa29 	bl	8000a28 <GPIO_WritePin>
			for(uint32_t i = 0; i < pasos; i++){
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	e014      	b.n	8000606 <motorConfig+0x186>
				GPIO_WritePin(&handlerStep3Config, SET);		//Enciende el motor
 80005dc:	2101      	movs	r1, #1
 80005de:	482b      	ldr	r0, [pc, #172]	; (800068c <motorConfig+0x20c>)
 80005e0:	f000 fa22 	bl	8000a28 <GPIO_WritePin>
				delay(delayTime);								//Tiempo de espera entre paso y paso
 80005e4:	4b24      	ldr	r3, [pc, #144]	; (8000678 <motorConfig+0x1f8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff fe15 	bl	8000218 <delay>

				GPIO_WritePin(&handlerStep3Config, RESET);		//Apaga el motor
 80005ee:	2100      	movs	r1, #0
 80005f0:	4826      	ldr	r0, [pc, #152]	; (800068c <motorConfig+0x20c>)
 80005f2:	f000 fa19 	bl	8000a28 <GPIO_WritePin>
				delay(delayTime);								//Tiempo de espera entre paso y paso
 80005f6:	4b20      	ldr	r3, [pc, #128]	; (8000678 <motorConfig+0x1f8>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fe0c 	bl	8000218 <delay>
			for(uint32_t i = 0; i < pasos; i++){
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3301      	adds	r3, #1
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	4b1d      	ldr	r3, [pc, #116]	; (800067c <motorConfig+0x1fc>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	429a      	cmp	r2, r3
 800060e:	d3e5      	bcc.n	80005dc <motorConfig+0x15c>
			}
		}

		// Condición: Pulsador de Giro en sentido --
		if(dataValue == 'd'){
 8000610:	4b16      	ldr	r3, [pc, #88]	; (800066c <motorConfig+0x1ec>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b64      	cmp	r3, #100	; 0x64
 8000616:	d120      	bne.n	800065a <motorConfig+0x1da>

			GPIO_WritePin(&handlerDir3Config, SET);				//Rotación en sentido --
 8000618:	2101      	movs	r1, #1
 800061a:	481b      	ldr	r0, [pc, #108]	; (8000688 <motorConfig+0x208>)
 800061c:	f000 fa04 	bl	8000a28 <GPIO_WritePin>
			for(uint32_t i = 0; i < pasos; i++){
 8000620:	2300      	movs	r3, #0
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	e014      	b.n	8000650 <motorConfig+0x1d0>
				GPIO_WritePin(&handlerStep3Config, SET);		//Enciende el motor
 8000626:	2101      	movs	r1, #1
 8000628:	4818      	ldr	r0, [pc, #96]	; (800068c <motorConfig+0x20c>)
 800062a:	f000 f9fd 	bl	8000a28 <GPIO_WritePin>
				delay(delayTime);								//Tiempo de espera entre paso y paso
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <motorConfig+0x1f8>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff fdf0 	bl	8000218 <delay>

				GPIO_WritePin(&handlerStep3Config, RESET);		//Apaga el motor
 8000638:	2100      	movs	r1, #0
 800063a:	4814      	ldr	r0, [pc, #80]	; (800068c <motorConfig+0x20c>)
 800063c:	f000 f9f4 	bl	8000a28 <GPIO_WritePin>
				delay(delayTime);								//Tiempo de espera entre paso y paso
 8000640:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <motorConfig+0x1f8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff fde7 	bl	8000218 <delay>
			for(uint32_t i = 0; i < pasos; i++){
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <motorConfig+0x1fc>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	429a      	cmp	r2, r3
 8000658:	d3e5      	bcc.n	8000626 <motorConfig+0x1a6>
			}
		}
	}

	//nMotor = 0;
	dataValue = '\0';
 800065a:	4b04      	ldr	r3, [pc, #16]	; (800066c <motorConfig+0x1ec>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
}
 8000660:	bf00      	nop
 8000662:	3718      	adds	r7, #24
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000128 	.word	0x20000128
 800066c:	2000012c 	.word	0x2000012c
 8000670:	200000ec 	.word	0x200000ec
 8000674:	200000e0 	.word	0x200000e0
 8000678:	20000004 	.word	0x20000004
 800067c:	20000000 	.word	0x20000000
 8000680:	20000104 	.word	0x20000104
 8000684:	200000f8 	.word	0x200000f8
 8000688:	2000011c 	.word	0x2000011c
 800068c:	20000110 	.word	0x20000110

08000690 <ledControl>:

//***********// LED_CONTROL //***********//

void ledControl(void){
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	if(auxLedState == 1){
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <ledControl+0x5c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d10a      	bne.n	80006b2 <ledControl+0x22>

		handlerTimer2.timerConfig.Timer_period				= 400;
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <ledControl+0x60>)
 800069e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80006a2:	609a      	str	r2, [r3, #8]
		Timer_Config(&handlerTimer2);
 80006a4:	4812      	ldr	r0, [pc, #72]	; (80006f0 <ledControl+0x60>)
 80006a6:	f000 fa53 	bl	8000b50 <Timer_Config>
		auxLedState = 0;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <ledControl+0x5c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
		handlerTimer2.timerConfig.Timer_period				= 50;
		Timer_Config(&handlerTimer2);
		auxLedState = 0;

	}
}
 80006b0:	e01a      	b.n	80006e8 <ledControl+0x58>
	}else if(auxLedState == 2){							// Se oprimió dos veces 'O'
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <ledControl+0x5c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d109      	bne.n	80006ce <ledControl+0x3e>
		handlerTimer2.timerConfig.Timer_period				= 200;
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <ledControl+0x60>)
 80006bc:	22c8      	movs	r2, #200	; 0xc8
 80006be:	609a      	str	r2, [r3, #8]
		Timer_Config(&handlerTimer2);
 80006c0:	480b      	ldr	r0, [pc, #44]	; (80006f0 <ledControl+0x60>)
 80006c2:	f000 fa45 	bl	8000b50 <Timer_Config>
		auxLedState = 0;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <ledControl+0x5c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
}
 80006cc:	e00c      	b.n	80006e8 <ledControl+0x58>
	}else if(auxLedState == 3){							// Se oprimió dos veces 'O'
 80006ce:	4b07      	ldr	r3, [pc, #28]	; (80006ec <ledControl+0x5c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b03      	cmp	r3, #3
 80006d4:	d108      	bne.n	80006e8 <ledControl+0x58>
		handlerTimer2.timerConfig.Timer_period				= 50;
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <ledControl+0x60>)
 80006d8:	2232      	movs	r2, #50	; 0x32
 80006da:	609a      	str	r2, [r3, #8]
		Timer_Config(&handlerTimer2);
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <ledControl+0x60>)
 80006de:	f000 fa37 	bl	8000b50 <Timer_Config>
		auxLedState = 0;
 80006e2:	4b02      	ldr	r3, [pc, #8]	; (80006ec <ledControl+0x5c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000130 	.word	0x20000130
 80006f0:	20000030 	.word	0x20000030

080006f4 <Timer2_Callback>:
//***********// CallBacks //***********//

void Timer2_Callback(void){
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
	handlerStateLED.pGPIOx -> ODR ^= GPIO_ODR_OD5;		// Encendido y apagado StateLED
 80006f8:	4b05      	ldr	r3, [pc, #20]	; (8000710 <Timer2_Callback+0x1c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	695a      	ldr	r2, [r3, #20]
 80006fe:	4b04      	ldr	r3, [pc, #16]	; (8000710 <Timer2_Callback+0x1c>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f082 0220 	eor.w	r2, r2, #32
 8000706:	615a      	str	r2, [r3, #20]
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	20000024 	.word	0x20000024

08000714 <USART2_Callback>:

void USART2_Callback(void){
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	// Lectura de los datos recibidos
	dataValue = returnData();
 8000718:	f000 fd64 	bl	80011e4 <returnData>
 800071c:	4603      	mov	r3, r0
 800071e:	461a      	mov	r2, r3
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <USART2_Callback+0x60>)
 8000722:	701a      	strb	r2, [r3, #0]
	writeChar(&handlerUsart2,dataValue);
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <USART2_Callback+0x60>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4619      	mov	r1, r3
 800072a:	4813      	ldr	r0, [pc, #76]	; (8000778 <USART2_Callback+0x64>)
 800072c:	f000 fd64 	bl	80011f8 <writeChar>

	// Comparación de los valores recibidos.
	if(dataValue == '1'){
 8000730:	4b10      	ldr	r3, [pc, #64]	; (8000774 <USART2_Callback+0x60>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b31      	cmp	r3, #49	; 0x31
 8000736:	d106      	bne.n	8000746 <USART2_Callback+0x32>
		nMotor = 1;				// Acción cada vez que se oprima el interruptor
 8000738:	4b10      	ldr	r3, [pc, #64]	; (800077c <USART2_Callback+0x68>)
 800073a:	2201      	movs	r2, #1
 800073c:	601a      	str	r2, [r3, #0]
		auxLedState = 1;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <USART2_Callback+0x6c>)
 8000740:	2201      	movs	r2, #1
 8000742:	601a      	str	r2, [r3, #0]
	//*********************
	//ledControl();
	//************************
	//motorConfig(*ptr_interruptor);
	//writeChar(&handlerUsartTX, dataValue);
}
 8000744:	e014      	b.n	8000770 <USART2_Callback+0x5c>
	}else if(dataValue == '2'){
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <USART2_Callback+0x60>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b32      	cmp	r3, #50	; 0x32
 800074c:	d106      	bne.n	800075c <USART2_Callback+0x48>
		nMotor = 2;				// Acción cada vez que se oprima el interruptor
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <USART2_Callback+0x68>)
 8000750:	2202      	movs	r2, #2
 8000752:	601a      	str	r2, [r3, #0]
		auxLedState = 2;
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <USART2_Callback+0x6c>)
 8000756:	2202      	movs	r2, #2
 8000758:	601a      	str	r2, [r3, #0]
}
 800075a:	e009      	b.n	8000770 <USART2_Callback+0x5c>
	}else if(dataValue == '3'){
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <USART2_Callback+0x60>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b33      	cmp	r3, #51	; 0x33
 8000762:	d105      	bne.n	8000770 <USART2_Callback+0x5c>
		nMotor = 3;				// Acción cada vez que se oprima el interruptor
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <USART2_Callback+0x68>)
 8000766:	2203      	movs	r2, #3
 8000768:	601a      	str	r2, [r3, #0]
		auxLedState = 3;
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <USART2_Callback+0x6c>)
 800076c:	2203      	movs	r2, #3
 800076e:	601a      	str	r2, [r3, #0]
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	2000012c 	.word	0x2000012c
 8000778:	20000054 	.word	0x20000054
 800077c:	20000128 	.word	0x20000128
 8000780:	20000130 	.word	0x20000130

08000784 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000784:	480d      	ldr	r0, [pc, #52]	; (80007bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000786:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000788:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800078c:	480c      	ldr	r0, [pc, #48]	; (80007c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800078e:	490d      	ldr	r1, [pc, #52]	; (80007c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000790:	4a0d      	ldr	r2, [pc, #52]	; (80007c8 <LoopForever+0xe>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000794:	e002      	b.n	800079c <LoopCopyDataInit>

08000796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079a:	3304      	adds	r3, #4

0800079c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800079c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a0:	d3f9      	bcc.n	8000796 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a2:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80007a4:	4c0a      	ldr	r4, [pc, #40]	; (80007d0 <LoopForever+0x16>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a8:	e001      	b.n	80007ae <LoopFillZerobss>

080007aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ac:	3204      	adds	r2, #4

080007ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b0:	d3fb      	bcc.n	80007aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007b2:	f000 fd39 	bl	8001228 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007b6:	f7ff fd0f 	bl	80001d8 <main>

080007ba <LoopForever>:

LoopForever:
    b LoopForever
 80007ba:	e7fe      	b.n	80007ba <LoopForever>
  ldr   r0, =_estack
 80007bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c4:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80007c8:	08001290 	.word	0x08001290
  ldr r2, =_sbss
 80007cc:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80007d0:	20000138 	.word	0x20000138

080007d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007d4:	e7fe      	b.n	80007d4 <ADC_IRQHandler>
	...

080007d8 <GPIO_Config>:
orden estricto para poder que el sistema permita configurar el periférico X.
Lo primero y más importante es activar la señal del reloj principal hacia ese
elemento específico (relacionado con el periférico RCC), a esto llamaremos
simplemente "activar el periférico o activar la señal de reloj del periférico".
*/
void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periférico
	// Verificamos para GPIOA
	if (pGPIOHandler -> pGPIOx == GPIOA){
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a87      	ldr	r2, [pc, #540]	; (8000a0c <GPIO_Config+0x234>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d106      	bne.n	8000800 <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOA
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 80007f2:	4b87      	ldr	r3, [pc, #540]	; (8000a10 <GPIO_Config+0x238>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a86      	ldr	r2, [pc, #536]	; (8000a10 <GPIO_Config+0x238>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	e03a      	b.n	8000876 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if (pGPIOHandler -> pGPIOx == GPIOB){
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a83      	ldr	r2, [pc, #524]	; (8000a14 <GPIO_Config+0x23c>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d106      	bne.n	8000818 <GPIO_Config+0x40>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOB
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 800080a:	4b81      	ldr	r3, [pc, #516]	; (8000a10 <GPIO_Config+0x238>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a80      	ldr	r2, [pc, #512]	; (8000a10 <GPIO_Config+0x238>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	e02e      	b.n	8000876 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOC
	else if (pGPIOHandler -> pGPIOx == GPIOC){
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a7e      	ldr	r2, [pc, #504]	; (8000a18 <GPIO_Config+0x240>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d106      	bne.n	8000830 <GPIO_Config+0x58>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOC
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8000822:	4b7b      	ldr	r3, [pc, #492]	; (8000a10 <GPIO_Config+0x238>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a7a      	ldr	r2, [pc, #488]	; (8000a10 <GPIO_Config+0x238>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	e022      	b.n	8000876 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOD
	else if (pGPIOHandler -> pGPIOx == GPIOD){
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a79      	ldr	r2, [pc, #484]	; (8000a1c <GPIO_Config+0x244>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d106      	bne.n	8000848 <GPIO_Config+0x70>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOD
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 800083a:	4b75      	ldr	r3, [pc, #468]	; (8000a10 <GPIO_Config+0x238>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a74      	ldr	r2, [pc, #464]	; (8000a10 <GPIO_Config+0x238>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	e016      	b.n	8000876 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOE
	else if (pGPIOHandler -> pGPIOx == GPIOE){
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a74      	ldr	r2, [pc, #464]	; (8000a20 <GPIO_Config+0x248>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d106      	bne.n	8000860 <GPIO_Config+0x88>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOE
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8000852:	4b6f      	ldr	r3, [pc, #444]	; (8000a10 <GPIO_Config+0x238>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a6e      	ldr	r2, [pc, #440]	; (8000a10 <GPIO_Config+0x238>)
 8000858:	f043 0310 	orr.w	r3, r3, #16
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	e00a      	b.n	8000876 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOH
	else if (pGPIOHandler -> pGPIOx == GPIOH){
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a6f      	ldr	r2, [pc, #444]	; (8000a24 <GPIO_Config+0x24c>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d105      	bne.n	8000876 <GPIO_Config+0x9e>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOH
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 800086a:	4b69      	ldr	r3, [pc, #420]	; (8000a10 <GPIO_Config+0x238>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a68      	ldr	r2, [pc, #416]	; (8000a10 <GPIO_Config+0x238>)
 8000870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
	// Después de activado, podemos comenzar a configurar.

	// 2) Configurando el registro GPIOx_MODER
	// Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y todo eso lo cargamos en la variable aux_Config
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	795b      	ldrb	r3, [r3, #5]
 800087a:	461a      	mov	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	791b      	ldrb	r3, [r3, #4]
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	60fb      	str	r3, [r7, #12]

	// Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (debemos escribir 0b00)
	// para lo cual aplicamos una máscara y una operación bitwise AND
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	791b      	ldrb	r3, [r3, #4]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	2103      	movs	r1, #3
 8000896:	fa01 f303 	lsl.w	r3, r1, r3
 800089a:	43db      	mvns	r3, r3
 800089c:	4619      	mov	r1, r3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	400a      	ands	r2, r1
 80008a4:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler -> pGPIOx -> MODER |= auxConfig;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	6819      	ldr	r1, [r3, #0]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	68fa      	ldr	r2, [r7, #12]
 80008b2:	430a      	orrs	r2, r1
 80008b4:	601a      	str	r2, [r3, #0]

	// 3) Configurando el registro GPIOx_OTYPER
	// De nuevo, leemos y movemos el valor un número "PinNumber" de veces
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	7a1b      	ldrb	r3, [r3, #8]
 80008ba:	461a      	mov	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	791b      	ldrb	r3, [r3, #4]
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler -> pGPIOx -> OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	685a      	ldr	r2, [r3, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	791b      	ldrb	r3, [r3, #4]
 80008d0:	4619      	mov	r1, r3
 80008d2:	2301      	movs	r3, #1
 80008d4:	408b      	lsls	r3, r1
 80008d6:	43db      	mvns	r3, r3
 80008d8:	4619      	mov	r1, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	400a      	ands	r2, r1
 80008e0:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OTYPER |= auxConfig;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	6859      	ldr	r1, [r3, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	68fa      	ldr	r2, [r7, #12]
 80008ee:	430a      	orrs	r2, r1
 80008f0:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	799b      	ldrb	r3, [r3, #6]
 80008f6:	461a      	mov	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	791b      	ldrb	r3, [r3, #4]
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler -> pGPIOx -> OSPEEDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	689a      	ldr	r2, [r3, #8]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	791b      	ldrb	r3, [r3, #4]
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	2103      	movs	r1, #3
 8000912:	fa01 f303 	lsl.w	r3, r1, r3
 8000916:	43db      	mvns	r3, r3
 8000918:	4619      	mov	r1, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	400a      	ands	r2, r1
 8000920:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OSPEEDR |= auxConfig;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	6899      	ldr	r1, [r3, #8]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	68fa      	ldr	r2, [r7, #12]
 800092e:	430a      	orrs	r2, r1
 8000930:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante.
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	79db      	ldrb	r3, [r3, #7]
 8000936:	461a      	mov	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	791b      	ldrb	r3, [r3, #4]
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler -> pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	68da      	ldr	r2, [r3, #12]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	791b      	ldrb	r3, [r3, #4]
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	2103      	movs	r1, #3
 8000952:	fa01 f303 	lsl.w	r3, r1, r3
 8000956:	43db      	mvns	r3, r3
 8000958:	4619      	mov	r1, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	400a      	ands	r2, r1
 8000960:	60da      	str	r2, [r3, #12]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> PUPDR |= auxConfig;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	68d9      	ldr	r1, [r3, #12]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	430a      	orrs	r2, r1
 8000970:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuración de las funciones alternativas... Se verá luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	795b      	ldrb	r3, [r3, #5]
 8000976:	2b02      	cmp	r3, #2
 8000978:	d143      	bne.n	8000a02 <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	791b      	ldrb	r3, [r3, #4]
 800097e:	2b07      	cmp	r3, #7
 8000980:	d81f      	bhi.n	80009c2 <GPIO_Config+0x1ea>
			// Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	791b      	ldrb	r3, [r3, #4]
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	60bb      	str	r3, [r7, #8]

			// Limpiamos primero la posición del registro que deseamos escribir a continuación
			pGPIOHandler -> pGPIOx -> AFR[0] &= ~(0b1111 << auxPosition);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	6a1a      	ldr	r2, [r3, #32]
 8000990:	210f      	movs	r1, #15
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	fa01 f303 	lsl.w	r3, r1, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	4619      	mov	r1, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	400a      	ands	r2, r1
 80009a2:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posición seleccionada
			pGPIOHandler -> pGPIOx -> AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	6a1a      	ldr	r2, [r3, #32]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	7a5b      	ldrb	r3, [r3, #9]
 80009ae:	4619      	mov	r1, r3
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	fa01 f303 	lsl.w	r3, r1, r3
 80009b6:	4619      	mov	r1, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	430a      	orrs	r2, r1
 80009be:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurando en la posición seleccionada
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} // Fin del GPIO_Config
 80009c0:	e01f      	b.n	8000a02 <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber -8);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	791b      	ldrb	r3, [r3, #4]
 80009c6:	3b08      	subs	r3, #8
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx -> AFR[1] &= ~(0b1111 << auxPosition);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009d2:	210f      	movs	r1, #15
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	fa01 f303 	lsl.w	r3, r1, r3
 80009da:	43db      	mvns	r3, r3
 80009dc:	4619      	mov	r1, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	400a      	ands	r2, r1
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	7a5b      	ldrb	r3, [r3, #9]
 80009f0:	4619      	mov	r1, r3
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	fa01 f303 	lsl.w	r3, r1, r3
 80009f8:	4619      	mov	r1, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	430a      	orrs	r2, r1
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_Config
 8000a02:	bf00      	nop
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	40020000 	.word	0x40020000
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020400 	.word	0x40020400
 8000a18:	40020800 	.word	0x40020800
 8000a1c:	40020c00 	.word	0x40020c00
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40021c00 	.word	0x40021c00

08000a28 <GPIO_WritePin>:
 *
 *
Función utilizada para cambiar de estado el pin entregado en el handler, asignando
el valor entregado en la variable newState
*/
void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	460b      	mov	r3, r1
 8000a32:	70fb      	strb	r3, [r7, #3]
	// Limpiamos la posición que deseamos
	// pPinHandler -> pGPIOx -> ODR &= ~(SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
	if(newState == SET){
 8000a34:	78fb      	ldrb	r3, [r7, #3]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d10d      	bne.n	8000a56 <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler -> pGPIOx -> BSRR |= (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	699a      	ldr	r2, [r3, #24]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	791b      	ldrb	r3, [r3, #4]
 8000a44:	4619      	mov	r1, r3
 8000a46:	2301      	movs	r3, #1
 8000a48:	408b      	lsls	r3, r1
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	430a      	orrs	r2, r1
 8000a52:	619a      	str	r2, [r3, #24]
	}
	else{
		// Trabajando con la parte alta del registro
		pPinHandler -> pGPIOx -> BSRR |= (SET << (pPinHandler -> GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8000a54:	e00d      	b.n	8000a72 <GPIO_WritePin+0x4a>
		pPinHandler -> pGPIOx -> BSRR |= (SET << (pPinHandler -> GPIO_PinConfig.GPIO_PinNumber + 16));
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	699a      	ldr	r2, [r3, #24]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	791b      	ldrb	r3, [r3, #4]
 8000a60:	3310      	adds	r3, #16
 8000a62:	2101      	movs	r1, #1
 8000a64:	fa01 f303 	lsl.w	r3, r1, r3
 8000a68:	4619      	mov	r1, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	619a      	str	r2, [r3, #24]
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	db0b      	blt.n	8000aa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	f003 021f 	and.w	r2, r3, #31
 8000a94:	4906      	ldr	r1, [pc, #24]	; (8000ab0 <__NVIC_EnableIRQ+0x34>)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	095b      	lsrs	r3, r3, #5
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	e000e100 	.word	0xe000e100

08000ab4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	db12      	blt.n	8000aec <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	f003 021f 	and.w	r2, r3, #31
 8000acc:	490a      	ldr	r1, [pc, #40]	; (8000af8 <__NVIC_DisableIRQ+0x44>)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	095b      	lsrs	r3, r3, #5
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ada:	3320      	adds	r3, #32
 8000adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ae0:	f3bf 8f4f 	dsb	sy
}
 8000ae4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ae6:	f3bf 8f6f 	isb	sy
}
 8000aea:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000e100 	.word	0xe000e100

08000afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	db0a      	blt.n	8000b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	490c      	ldr	r1, [pc, #48]	; (8000b48 <__NVIC_SetPriority+0x4c>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	0112      	lsls	r2, r2, #4
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	440b      	add	r3, r1
 8000b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b24:	e00a      	b.n	8000b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4908      	ldr	r1, [pc, #32]	; (8000b4c <__NVIC_SetPriority+0x50>)
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	f003 030f 	and.w	r3, r3, #15
 8000b32:	3b04      	subs	r3, #4
 8000b34:	0112      	lsls	r2, r2, #4
 8000b36:	b2d2      	uxtb	r2, r2
 8000b38:	440b      	add	r3, r1
 8000b3a:	761a      	strb	r2, [r3, #24]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000e100 	.word	0xe000e100
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <Timer_Config>:
 *
 * */

//NOTA: Hay que desactivar las interrupciones globales y luego volver a activarlas

void Timer_Config(TIMER_Handler_t *ptrTimerConfig){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
}
 8000b5a:	bf00      	nop
	/* 0. Desactivamos las interrupciones globales */

	__disable_irq();

	/* 1. Activamos la señal de reloj para el periférico específico */
	if(ptrTimerConfig -> ptrTIMx == TIM2){
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b64:	d106      	bne.n	8000b74 <Timer_Config+0x24>
		// Activamos la señal de reloj del TIM2
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000b66:	4b4b      	ldr	r3, [pc, #300]	; (8000c94 <Timer_Config+0x144>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a4a      	ldr	r2, [pc, #296]	; (8000c94 <Timer_Config+0x144>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	e022      	b.n	8000bba <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM3){
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a47      	ldr	r2, [pc, #284]	; (8000c98 <Timer_Config+0x148>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d106      	bne.n	8000b8c <Timer_Config+0x3c>
		// Activamos la señal de reloj del TIM3
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000b7e:	4b45      	ldr	r3, [pc, #276]	; (8000c94 <Timer_Config+0x144>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	4a44      	ldr	r2, [pc, #272]	; (8000c94 <Timer_Config+0x144>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	e016      	b.n	8000bba <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM4){
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a42      	ldr	r2, [pc, #264]	; (8000c9c <Timer_Config+0x14c>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d106      	bne.n	8000ba4 <Timer_Config+0x54>
		// Activamos la señal de reloj del TIM4
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000b96:	4b3f      	ldr	r3, [pc, #252]	; (8000c94 <Timer_Config+0x144>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	4a3e      	ldr	r2, [pc, #248]	; (8000c94 <Timer_Config+0x144>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba2:	e00a      	b.n	8000bba <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM5){
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a3d      	ldr	r2, [pc, #244]	; (8000ca0 <Timer_Config+0x150>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d105      	bne.n	8000bba <Timer_Config+0x6a>
		// Activamos la señal de reloj del TIM5
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8000bae:	4b39      	ldr	r3, [pc, #228]	; (8000c94 <Timer_Config+0x144>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a38      	ldr	r2, [pc, #224]	; (8000c94 <Timer_Config+0x144>)
 8000bb4:	f043 0308 	orr.w	r3, r3, #8
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuración del modo del timer (UP or DOWN) */

	if(ptrTimerConfig -> timerConfig.Timer_mode == TIMER_MODE_UP){
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	791b      	ldrb	r3, [r3, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d10c      	bne.n	8000bdc <Timer_Config+0x8c>
		// Configuramos el timer en modo UP
		ptrTimerConfig -> ptrTIMx -> CR1 &= ~(TIM_CR1_DIR);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f022 0210 	bic.w	r2, r2, #16
 8000bd0:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) en cero.
		ptrTimerConfig -> ptrTIMx -> CNT = 0;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	; 0x24
 8000bda:	e00d      	b.n	8000bf8 <Timer_Config+0xa8>

	}
	else{
		// Configuramos el timer en modo DOWN
		ptrTimerConfig -> ptrTIMx -> CR1 |= ~(TIM_CR1_DIR);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f062 0210 	orn	r2, r2, #16
 8000bea:	601a      	str	r2, [r3, #0]

		// Ponemos en el contador (CNT) el valor del periodo
		ptrTimerConfig -> ptrTIMx -> CNT = ptrTimerConfig -> timerConfig.Timer_period -1;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuración del Prescaler */
	ptrTimerConfig -> ptrTIMx -> PSC = ptrTimerConfig -> timerConfig.Timer_speed -1;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	88db      	ldrh	r3, [r3, #6]
 8000bfc:	1e5a      	subs	r2, r3, #1
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo de las interrupciones */
	ptrTimerConfig -> ptrTIMx -> ARR = ptrTimerConfig -> timerConfig.Timer_period -1;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	689a      	ldr	r2, [r3, #8]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	3a01      	subs	r2, #1
 8000c0e:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse  */
	ptrTimerConfig -> ptrTIMx -> CR1 |= TIM_CR1_CEN;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f042 0201 	orr.w	r2, r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]

	/* 6. Activamos la interrupción debida a un "update event" */
	if(ptrTimerConfig -> ptrTIMx != TIM3){
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a1c      	ldr	r2, [pc, #112]	; (8000c98 <Timer_Config+0x148>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d007      	beq.n	8000c3a <Timer_Config+0xea>
		ptrTimerConfig -> ptrTIMx -> DIER |= TIM_DIER_UIE;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f042 0201 	orr.w	r2, r2, #1
 8000c38:	60da      	str	r2, [r3, #12]
	}

	/* 7. Activamos la señal de la interrupcuón en el NVIC */

	if(ptrTimerConfig -> ptrTIMx == TIM2){
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c42:	d107      	bne.n	8000c54 <Timer_Config+0x104>
		// Activamos la IRQ del TIM2
		__NVIC_EnableIRQ(TIM2_IRQn);
 8000c44:	201c      	movs	r0, #28
 8000c46:	f7ff ff19 	bl	8000a7c <__NVIC_EnableIRQ>

		// Establecemos la prioridad del timer
		__NVIC_SetPriority(TIM2_IRQn,3);
 8000c4a:	2103      	movs	r1, #3
 8000c4c:	201c      	movs	r0, #28
 8000c4e:	f7ff ff55 	bl	8000afc <__NVIC_SetPriority>
 8000c52:	e019      	b.n	8000c88 <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM3){
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0f      	ldr	r2, [pc, #60]	; (8000c98 <Timer_Config+0x148>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d103      	bne.n	8000c66 <Timer_Config+0x116>
		// Activamos la IRQ del TIM3
		__NVIC_DisableIRQ(TIM3_IRQn);
 8000c5e:	201d      	movs	r0, #29
 8000c60:	f7ff ff28 	bl	8000ab4 <__NVIC_DisableIRQ>
 8000c64:	e010      	b.n	8000c88 <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM4){
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a0c      	ldr	r2, [pc, #48]	; (8000c9c <Timer_Config+0x14c>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d103      	bne.n	8000c78 <Timer_Config+0x128>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM4_IRQn);
 8000c70:	201e      	movs	r0, #30
 8000c72:	f7ff ff03 	bl	8000a7c <__NVIC_EnableIRQ>
 8000c76:	e007      	b.n	8000c88 <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM5){
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a08      	ldr	r2, [pc, #32]	; (8000ca0 <Timer_Config+0x150>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d102      	bne.n	8000c88 <Timer_Config+0x138>
		// Activamos la IRQ del TIM5
		__NVIC_EnableIRQ(TIM5_IRQn);
 8000c82:	2032      	movs	r0, #50	; 0x32
 8000c84:	f7ff fefa 	bl	8000a7c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c88:	b662      	cpsie	i
}
 8000c8a:	bf00      	nop
	}


	/* 8. Activamos de nuevo todas las interrupciones. */
	__enable_irq();
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40000400 	.word	0x40000400
 8000c9c:	40000800 	.word	0x40000800
 8000ca0:	40000c00 	.word	0x40000c00

08000ca4 <Timer3_Callback>:
__attribute__((weak)) void Timer2_Callback(void){
	__NOP();
}

// Callback Timer3
__attribute__((weak)) void Timer3_Callback(void){
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
	__NOP();
 8000ca8:	bf00      	nop
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr

08000cb2 <Timer4_Callback>:

// Callback Timer4
__attribute__((weak)) void Timer4_Callback(void){
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
	__NOP();
 8000cb6:	bf00      	nop
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <Timer5_Callback>:

// Callback Timer5
__attribute__((weak)) void Timer5_Callback(void){
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
	__NOP();
 8000cc4:	bf00      	nop
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr

08000cce <TIM2_IRQHandler>:

// Hay que hacer dos cosas: 1) Atender la interrupción. 2) Llamamos al Callback
/* Rutina de atención a la interrupción del TIM2 */

void TIM2_IRQHandler(void){
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
	TIM2 -> SR &= ~(TIM_SR_UIF);
 8000cd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cd6:	691b      	ldr	r3, [r3, #16]
 8000cd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cdc:	f023 0301 	bic.w	r3, r3, #1
 8000ce0:	6113      	str	r3, [r2, #16]
	Timer2_Callback();
 8000ce2:	f7ff fd07 	bl	80006f4 <Timer2_Callback>
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	TIM3 -> SR &= ~(TIM_SR_UIF);
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <TIM3_IRQHandler+0x18>)
 8000cf2:	691b      	ldr	r3, [r3, #16]
 8000cf4:	4a03      	ldr	r2, [pc, #12]	; (8000d04 <TIM3_IRQHandler+0x18>)
 8000cf6:	f023 0301 	bic.w	r3, r3, #1
 8000cfa:	6113      	str	r3, [r2, #16]
	Timer3_Callback();
 8000cfc:	f7ff ffd2 	bl	8000ca4 <Timer3_Callback>
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40000400 	.word	0x40000400

08000d08 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	TIM4 -> SR &= ~(TIM_SR_UIF);
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <TIM4_IRQHandler+0x18>)
 8000d0e:	691b      	ldr	r3, [r3, #16]
 8000d10:	4a03      	ldr	r2, [pc, #12]	; (8000d20 <TIM4_IRQHandler+0x18>)
 8000d12:	f023 0301 	bic.w	r3, r3, #1
 8000d16:	6113      	str	r3, [r2, #16]
	Timer4_Callback();
 8000d18:	f7ff ffcb 	bl	8000cb2 <Timer4_Callback>
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40000800 	.word	0x40000800

08000d24 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	TIM5 -> SR &= ~(TIM_SR_UIF);
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <TIM5_IRQHandler+0x18>)
 8000d2a:	691b      	ldr	r3, [r3, #16]
 8000d2c:	4a03      	ldr	r2, [pc, #12]	; (8000d3c <TIM5_IRQHandler+0x18>)
 8000d2e:	f023 0301 	bic.w	r3, r3, #1
 8000d32:	6113      	str	r3, [r2, #16]
	Timer5_Callback();
 8000d34:	f7ff ffc4 	bl	8000cc0 <Timer5_Callback>
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40000c00 	.word	0x40000c00

08000d40 <__NVIC_EnableIRQ>:
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	db0b      	blt.n	8000d6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	f003 021f 	and.w	r2, r3, #31
 8000d58:	4906      	ldr	r1, [pc, #24]	; (8000d74 <__NVIC_EnableIRQ+0x34>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	095b      	lsrs	r3, r3, #5
 8000d60:	2001      	movs	r0, #1
 8000d62:	fa00 f202 	lsl.w	r2, r0, r2
 8000d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	e000e100 	.word	0xe000e100

08000d78 <USART_Config>:
 * del periférico que se está utilizando.
 */

uint8_t data;

void USART_Config(USART_Handler_t *ptrUsartHandler){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
}
 8000d82:	bf00      	nop

	/* 1. Activamos la señal de reloj que viene desde el bus al que pertenece el periférico.
	 * Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6)
	 */
	/*1.1 Configuramos el USART1*/
	if(ptrUsartHandler -> ptrUSARTx == USART1){
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a8c      	ldr	r2, [pc, #560]	; (8000fbc <USART_Config+0x244>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d106      	bne.n	8000d9c <USART_Config+0x24>
		// Escribimos 1 (SET) en la posición correspondiente al USART1
		RCC -> APB2ENR |= (RCC_APB2ENR_USART1EN);
 8000d8e:	4b8c      	ldr	r3, [pc, #560]	; (8000fc0 <USART_Config+0x248>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	4a8b      	ldr	r2, [pc, #556]	; (8000fc0 <USART_Config+0x248>)
 8000d94:	f043 0310 	orr.w	r3, r3, #16
 8000d98:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9a:	e016      	b.n	8000dca <USART_Config+0x52>
	}
	/*1.2 Configuramos el USART2*/
	else if(ptrUsartHandler -> ptrUSARTx == USART2){
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a88      	ldr	r2, [pc, #544]	; (8000fc4 <USART_Config+0x24c>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d106      	bne.n	8000db4 <USART_Config+0x3c>
		// Escribimos 1 (SET) en la posición correspondiente al USART1
		RCC -> APB1ENR |= (RCC_APB1ENR_USART2EN);
 8000da6:	4b86      	ldr	r3, [pc, #536]	; (8000fc0 <USART_Config+0x248>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a85      	ldr	r2, [pc, #532]	; (8000fc0 <USART_Config+0x248>)
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	e00a      	b.n	8000dca <USART_Config+0x52>
	}
	/*1.3 Configuramos el USART6*/
	else if(ptrUsartHandler -> ptrUSARTx == USART6){
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a83      	ldr	r2, [pc, #524]	; (8000fc8 <USART_Config+0x250>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d105      	bne.n	8000dca <USART_Config+0x52>
		// Escribimos 1 (SET) en la posición correspondiente al USART1
		RCC -> APB2ENR |= (RCC_APB2ENR_USART6EN);
 8000dbe:	4b80      	ldr	r3, [pc, #512]	; (8000fc0 <USART_Config+0x248>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	4a7f      	ldr	r2, [pc, #508]	; (8000fc0 <USART_Config+0x248>)
 8000dc4:	f043 0320 	orr.w	r3, r3, #32
 8000dc8:	6453      	str	r3, [r2, #68]	; 0x44
	 * Configuramos el modo: only TX, only RX, o RXTX
	 * Por último activamos el modulo USART cuando todo está correctamente configurado
	 * */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero.
	ptrUsartHandler -> ptrUSARTx -> CR1 = 0;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
	ptrUsartHandler -> ptrUSARTx -> CR2 = 0;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]

	// 2.2 Configuración del Parity:
	// Verificamos si el parity está activado o no
	if(ptrUsartHandler -> USART_Config.USART_parity != USART_PARITY_NONE){
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	79db      	ldrb	r3, [r3, #7]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d02b      	beq.n	8000e3a <USART_Config+0xc2>

		// Verificamos si se ha seleccionado ODD or EVEN

		//Se selecciona EVEN
		if(ptrUsartHandler -> USART_Config.USART_parity == USART_PARITY_EVEN){
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	79db      	ldrb	r3, [r3, #7]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d113      	bne.n	8000e12 <USART_Config+0x9a>
			//Ponemos 0b0 en la posicion 9 del registo CR1 para escoger Even
			ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_PS);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	68da      	ldr	r2, [r3, #12]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000df8:	60da      	str	r2, [r3, #12]

			// Además, se seleccionan 9 bits.
			ptrUsartHandler -> USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	719a      	strb	r2, [r3, #6]
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	68da      	ldr	r2, [r3, #12]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	e01b      	b.n	8000e4a <USART_Config+0xd2>
		}
		//Se selecciona ODD
		else{
			//Ponemos 0b1 en la posicion 9 del registo CR1 para escoger Even
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_PS);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	68da      	ldr	r2, [r3, #12]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e20:	60da      	str	r2, [r3, #12]

			// Además, se seleccionan 9 bits.
			ptrUsartHandler -> USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2201      	movs	r2, #1
 8000e26:	719a      	strb	r2, [r3, #6]
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	68da      	ldr	r2, [r3, #12]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	e007      	b.n	8000e4a <USART_Config+0xd2>
		}
	}
	//No deseamos activar el parity-check
	else{
		//Ponemos 0b0 en la posicion 10 del registro CR1 para desactivar el Parity
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_PCE);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e48:	60da      	str	r2, [r3, #12]

	// 2.3 Configuramos el tamaño del dato:

	//Verificamos si va a ser de 8 o 9 bits

	if(ptrUsartHandler -> USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	799b      	ldrb	r3, [r3, #6]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d108      	bne.n	8000e64 <USART_Config+0xec>
		//Ponemos 0b0 en la posicion 12 del registro CR1 para escoger 8 bits
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_M);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	68da      	ldr	r2, [r3, #12]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	e007      	b.n	8000e74 <USART_Config+0xfc>
	}else{
		//Ponemos 0b1 en la posicion 12 del registro CR1 para escoger 9 bits
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	68da      	ldr	r2, [r3, #12]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e72:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)

	switch(ptrUsartHandler -> USART_Config.USART_stopbits){
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	7a1b      	ldrb	r3, [r3, #8]
 8000e78:	2b03      	cmp	r3, #3
 8000e7a:	d847      	bhi.n	8000f0c <USART_Config+0x194>
 8000e7c:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <USART_Config+0x10c>)
 8000e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e82:	bf00      	nop
 8000e84:	08000e95 	.word	0x08000e95
 8000e88:	08000ea7 	.word	0x08000ea7
 8000e8c:	08000ec9 	.word	0x08000ec9
 8000e90:	08000eeb 	.word	0x08000eeb
	case USART_STOPBIT_1: {
		//Cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	691a      	ldr	r2, [r3, #16]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000ea2:	611a      	str	r2, [r3, #16]
		break;
 8000ea4:	e03b      	b.n	8000f1e <USART_Config+0x1a6>
	}
	case USART_STOPBIT_0_5:{
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	691a      	ldr	r2, [r3, #16]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000eb4:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b01 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP_0);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	691a      	ldr	r2, [r3, #16]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ec4:	611a      	str	r2, [r3, #16]
		break;
 8000ec6:	e02a      	b.n	8000f1e <USART_Config+0x1a6>
	}
	case USART_STOPBIT_2:{
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	691a      	ldr	r2, [r3, #16]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000ed6:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b10 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP_1);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	691a      	ldr	r2, [r3, #16]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ee6:	611a      	str	r2, [r3, #16]
		break;
 8000ee8:	e019      	b.n	8000f1e <USART_Config+0x1a6>
	}
	case USART_STOPBIT_1_5: {
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	691a      	ldr	r2, [r3, #16]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000ef8:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b11 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	691a      	ldr	r2, [r3, #16]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000f08:	611a      	str	r2, [r3, #16]
		break;
 8000f0a:	e008      	b.n	8000f1e <USART_Config+0x1a6>
	}
	default:{
		//Cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	691a      	ldr	r2, [r3, #16]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000f1a:	611a      	str	r2, [r3, #16]
		break;
 8000f1c:	bf00      	nop
	}
	}

	// 2.4 Configuración del Baudrate (SFR USART_BRR)
	// Ver tabla de valores (Tabla 75), Frec = 16MHz, overr = 0;
	if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	795b      	ldrb	r3, [r3, #5]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d105      	bne.n	8000f32 <USART_Config+0x1ba>
		// El valor a cargar es 104.1875 -> Mantiza = 104, fraction = 0.1875
		// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
		// Valor a cargar 0x683
		// Configurando el Baudrate generator para una velocidad de 9600bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0683;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f240 6283 	movw	r2, #1667	; 0x683
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	e011      	b.n	8000f56 <USART_Config+0x1de>
	}

	else if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_19200){
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	795b      	ldrb	r3, [r3, #5]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d105      	bne.n	8000f46 <USART_Config+0x1ce>
		// El valor a cargar es 52.0625 -> Mantiza = 52, fraction = 0.0625
		// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
		// Valor a cargar 0x0341
		// Configurando el Baudrate generator para una velocidad de 19200bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0341;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f240 3241 	movw	r2, #833	; 0x341
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	e007      	b.n	8000f56 <USART_Config+0x1de>
	}

	else if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_115200){	//**************************************DUDAAAAAA
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	795b      	ldrb	r3, [r3, #5]
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d103      	bne.n	8000f56 <USART_Config+0x1de>
		// El valor a cargar es 8.6875 -> Mantiza = 8, fraction = 0.6875
		// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11
		// Valor a cargar 0x0081
		// Configurando el Baudrate generator para una velocidad de 115200bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x08B;//0x0081;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	228b      	movs	r2, #139	; 0x8b
 8000f54:	609a      	str	r2, [r3, #8]
	}

	// 2.5 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler -> USART_Config.USART_mode){
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	791b      	ldrb	r3, [r3, #4]
 8000f5a:	2b03      	cmp	r3, #3
 8000f5c:	d847      	bhi.n	8000fee <USART_Config+0x276>
 8000f5e:	a201      	add	r2, pc, #4	; (adr r2, 8000f64 <USART_Config+0x1ec>)
 8000f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f64:	08000f75 	.word	0x08000f75
 8000f68:	08000f87 	.word	0x08000f87
 8000f6c:	08000f99 	.word	0x08000f99
 8000f70:	08000fcd 	.word	0x08000fcd
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		//Cargamos el valor 0b1 en el bit TE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TE);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	68da      	ldr	r2, [r3, #12]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f042 0208 	orr.w	r2, r2, #8
 8000f82:	60da      	str	r2, [r3, #12]
		break;
 8000f84:	e044      	b.n	8001010 <USART_Config+0x298>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		//Cargamos el valor 0b1 en el bit RE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RE);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	68da      	ldr	r2, [r3, #12]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f042 0204 	orr.w	r2, r2, #4
 8000f94:	60da      	str	r2, [r3, #12]
		break;
 8000f96:	e03b      	b.n	8001010 <USART_Config+0x298>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmisión como recepción
		//Cargamos el valor 0b1 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TE);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	68da      	ldr	r2, [r3, #12]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f042 0208 	orr.w	r2, r2, #8
 8000fa6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RE);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	68da      	ldr	r2, [r3, #12]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f042 0204 	orr.w	r2, r2, #4
 8000fb6:	60da      	str	r2, [r3, #12]
		break;
 8000fb8:	e02a      	b.n	8001010 <USART_Config+0x298>
 8000fba:	bf00      	nop
 8000fbc:	40011000 	.word	0x40011000
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40004400 	.word	0x40004400
 8000fc8:	40011400 	.word	0x40011400
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		//Cargamos el valor 0b0 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TE);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f022 0208 	bic.w	r2, r2, #8
 8000fda:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RE);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68da      	ldr	r2, [r3, #12]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0204 	bic.w	r2, r2, #4
 8000fea:	60da      	str	r2, [r3, #12]
		break;
 8000fec:	e010      	b.n	8001010 <USART_Config+0x298>
	}
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		//Cargamos el valor 0b0 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TE);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f022 0208 	bic.w	r2, r2, #8
 8000ffc:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RE);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f022 0204 	bic.w	r2, r2, #4
 800100c:	60da      	str	r2, [r3, #12]
		break;
 800100e:	bf00      	nop
	}
	}

	// 2.6 Activamos el modulo serial.

	if(ptrUsartHandler -> USART_Config.USART_mode != USART_MODE_DISABLE){
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	791b      	ldrb	r3, [r3, #4]
 8001014:	2b03      	cmp	r3, #3
 8001016:	d007      	beq.n	8001028 <USART_Config+0x2b0>
		//Cargamos el valor de 0b1 en el bit UE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_UE);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	68da      	ldr	r2, [r3, #12]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001026:	60da      	str	r2, [r3, #12]
	}

	// 3. Activamos la interrupción para el USART

	switch(ptrUsartHandler -> USART_Config.USART_interrupt){
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7a5b      	ldrb	r3, [r3, #9]
 800102c:	2b03      	cmp	r3, #3
 800102e:	d84f      	bhi.n	80010d0 <USART_Config+0x358>
 8001030:	a201      	add	r2, pc, #4	; (adr r2, 8001038 <USART_Config+0x2c0>)
 8001032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001036:	bf00      	nop
 8001038:	08001049 	.word	0x08001049
 800103c:	0800106b 	.word	0x0800106b
 8001040:	0800108d 	.word	0x0800108d
 8001044:	080010af 	.word	0x080010af
	// Analizamos los
	case USART_INTERRUPT_RX_ENABLE:
	{
		// Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RXNEIE);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	68da      	ldr	r2, [r3, #12]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f042 0220 	orr.w	r2, r2, #32
 8001056:	60da      	str	r2, [r3, #12]
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	68da      	ldr	r2, [r3, #12]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001066:	60da      	str	r2, [r3, #12]
		break;
 8001068:	e043      	b.n	80010f2 <USART_Config+0x37a>
	}
	case USART_INTERRUPT_TX_ENABLE:
	{
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001078:	60da      	str	r2, [r3, #12]
		// NO Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RXNEIE);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	68da      	ldr	r2, [r3, #12]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 0220 	bic.w	r2, r2, #32
 8001088:	60da      	str	r2, [r3, #12]
		break;
 800108a:	e032      	b.n	80010f2 <USART_Config+0x37a>

	}
	case USART_INTERRUPT_RXTX_ENABLE:
	{
		// Activamos las dos interrupciones tanto del RX como del TX
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TXEIE);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800109a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	68da      	ldr	r2, [r3, #12]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010aa:	60da      	str	r2, [r3, #12]
		break;
 80010ac:	e021      	b.n	80010f2 <USART_Config+0x37a>
	}
	case USART_INTERRUPT_RXTX_DISABLE:
	{
		// Activamos las dos interrupciones tanto del RX como del TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68da      	ldr	r2, [r3, #12]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010bc:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010cc:	60da      	str	r2, [r3, #12]
		break;
 80010ce:	e010      	b.n	80010f2 <USART_Config+0x37a>
	}

	default:
	{
		// NO Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RXNEIE);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0220 	bic.w	r2, r2, #32
 80010de:	60da      	str	r2, [r3, #12]
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010ee:	60da      	str	r2, [r3, #12]
		break;
 80010f0:	bf00      	nop
	}
	}

	// 4. Activamos la señal de la interrupción en el NVIC

	if((ptrUsartHandler -> USART_Config.USART_interrupt == USART_INTERRUPT_RX_ENABLE) | (ptrUsartHandler -> USART_Config.USART_interrupt == USART_INTERRUPT_TX_ENABLE))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	7a5b      	ldrb	r3, [r3, #9]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	bf0c      	ite	eq
 80010fa:	2301      	moveq	r3, #1
 80010fc:	2300      	movne	r3, #0
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	7a5b      	ldrb	r3, [r3, #9]
 8001104:	2b01      	cmp	r3, #1
 8001106:	bf0c      	ite	eq
 8001108:	2301      	moveq	r3, #1
 800110a:	2300      	movne	r3, #0
 800110c:	b2db      	uxtb	r3, r3
 800110e:	4313      	orrs	r3, r2
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d019      	beq.n	800114a <USART_Config+0x3d2>
	{

		if(ptrUsartHandler -> ptrUSARTx == USART1){
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a0f      	ldr	r2, [pc, #60]	; (8001158 <USART_Config+0x3e0>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d103      	bne.n	8001128 <USART_Config+0x3b0>
			// Activamos la IRQ del USART1
			__NVIC_EnableIRQ(USART1_IRQn);
 8001120:	2025      	movs	r0, #37	; 0x25
 8001122:	f7ff fe0d 	bl	8000d40 <__NVIC_EnableIRQ>
 8001126:	e010      	b.n	800114a <USART_Config+0x3d2>

		}else if(ptrUsartHandler -> ptrUSARTx == USART2){
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0b      	ldr	r2, [pc, #44]	; (800115c <USART_Config+0x3e4>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d103      	bne.n	800113a <USART_Config+0x3c2>
			// Activamos la IRQ del USART2
			__NVIC_EnableIRQ(USART2_IRQn);
 8001132:	2026      	movs	r0, #38	; 0x26
 8001134:	f7ff fe04 	bl	8000d40 <__NVIC_EnableIRQ>
 8001138:	e007      	b.n	800114a <USART_Config+0x3d2>

		}else if(ptrUsartHandler -> ptrUSARTx == USART6){
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a08      	ldr	r2, [pc, #32]	; (8001160 <USART_Config+0x3e8>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d102      	bne.n	800114a <USART_Config+0x3d2>
			// Activamos la IRQ del USART6
			__NVIC_EnableIRQ(USART6_IRQn);
 8001144:	2047      	movs	r0, #71	; 0x47
 8001146:	f7ff fdfb 	bl	8000d40 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800114a:	b662      	cpsie	i
}
 800114c:	bf00      	nop
		}

	// 5. Activamos de nuevo todas las interrupciones

	__enable_irq();
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40011000 	.word	0x40011000
 800115c:	40004400 	.word	0x40004400
 8001160:	40011400 	.word	0x40011400

08001164 <USART1_Callback>:

//**********//  CallBacks //**********//

// Callback USART1
__attribute__((weak)) void USART1_Callback(void){
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
	__NOP();
 8001168:	bf00      	nop
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr

08001172 <USART6_Callback>:
__attribute__((weak)) void USART2_Callback(void){
	__NOP();
}

// Callback USART6
__attribute__((weak)) void USART6_Callback(void){
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
	__NOP();
 8001176:	bf00      	nop
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr

08001180 <USART1_IRQHandler>:

// Hay que hacer dos cosas: 1) Atender la interrupción. 2) Llamamos al Callback
/* Rutina de atención a la interrupción del USART */

void USART1_IRQHandler(void){
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0

	USART1 -> SR &= ~(USART_SR_RXNE);		// Bajamos la bandera manualmente
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <USART1_IRQHandler+0x18>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a03      	ldr	r2, [pc, #12]	; (8001198 <USART1_IRQHandler+0x18>)
 800118a:	f023 0320 	bic.w	r3, r3, #32
 800118e:	6013      	str	r3, [r2, #0]

	USART1_Callback();
 8001190:	f7ff ffe8 	bl	8001164 <USART1_Callback>
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40011000 	.word	0x40011000

0800119c <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	USART2 -> SR &= ~(USART_SR_RXNE);		// Desactivamos la bandera manualmente para el RX
 80011a0:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <USART2_IRQHandler+0x24>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <USART2_IRQHandler+0x24>)
 80011a6:	f023 0320 	bic.w	r3, r3, #32
 80011aa:	6013      	str	r3, [r2, #0]

	data = (USART2 -> DR);
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <USART2_IRQHandler+0x24>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <USART2_IRQHandler+0x28>)
 80011b4:	701a      	strb	r2, [r3, #0]

	USART2_Callback();
 80011b6:	f7ff faad 	bl	8000714 <USART2_Callback>

	//USART2 -> SR &= ~(USART_SR_TXE);		// Desactivamos la bandera para el TX
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40004400 	.word	0x40004400
 80011c4:	20000134 	.word	0x20000134

080011c8 <USART6_IRQHandler>:

void USART6_IRQHandler(void){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	USART6 -> SR &= ~(USART_SR_RXNE);
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <USART6_IRQHandler+0x18>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a03      	ldr	r2, [pc, #12]	; (80011e0 <USART6_IRQHandler+0x18>)
 80011d2:	f023 0320 	bic.w	r3, r3, #32
 80011d6:	6013      	str	r3, [r2, #0]
	USART6_Callback();
 80011d8:	f7ff ffcb 	bl	8001172 <USART6_Callback>
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40011400 	.word	0x40011400

080011e4 <returnData>:
	dataToRead = ((char) (ptrUsartHandler -> ptrUSARTx -> DR));
	return dataToRead;

}

uint8_t returnData(void){
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
	return data;				// Devolvemos el valor
 80011e8:	4b02      	ldr	r3, [pc, #8]	; (80011f4 <returnData+0x10>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	20000134 	.word	0x20000134

080011f8 <writeChar>:

//**********// Función para escribir un solo char //**********//

int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend){
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
	while(!(ptrUsartHandler -> ptrUSARTx -> SR & USART_SR_TXE)){
 8001202:	e000      	b.n	8001206 <writeChar+0xe>
		__NOP();
 8001204:	bf00      	nop
	while(!(ptrUsartHandler -> ptrUSARTx -> SR & USART_SR_TXE)){
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0f7      	beq.n	8001204 <writeChar+0xc>
	// Permitimos la bandera del TX para el USART2
	//ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TXEIE);
	//USART2 -> SR |= (USART_SR_TXE);

	//Cargamos el valor de dataToSend en el USER DATA Register
	ptrUsartHandler -> ptrUSARTx -> DR = (dataToSend);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	605a      	str	r2, [r3, #4]

	//ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
	//USART2 -> SR &= ~(USART_SR_TXE);		// Desactivamos la bandera para el TX
	return dataToSend;
 800121c:	683b      	ldr	r3, [r7, #0]
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <__libc_init_array>:
 8001228:	b570      	push	{r4, r5, r6, lr}
 800122a:	4d0d      	ldr	r5, [pc, #52]	; (8001260 <__libc_init_array+0x38>)
 800122c:	4c0d      	ldr	r4, [pc, #52]	; (8001264 <__libc_init_array+0x3c>)
 800122e:	1b64      	subs	r4, r4, r5
 8001230:	10a4      	asrs	r4, r4, #2
 8001232:	2600      	movs	r6, #0
 8001234:	42a6      	cmp	r6, r4
 8001236:	d109      	bne.n	800124c <__libc_init_array+0x24>
 8001238:	4d0b      	ldr	r5, [pc, #44]	; (8001268 <__libc_init_array+0x40>)
 800123a:	4c0c      	ldr	r4, [pc, #48]	; (800126c <__libc_init_array+0x44>)
 800123c:	f000 f818 	bl	8001270 <_init>
 8001240:	1b64      	subs	r4, r4, r5
 8001242:	10a4      	asrs	r4, r4, #2
 8001244:	2600      	movs	r6, #0
 8001246:	42a6      	cmp	r6, r4
 8001248:	d105      	bne.n	8001256 <__libc_init_array+0x2e>
 800124a:	bd70      	pop	{r4, r5, r6, pc}
 800124c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001250:	4798      	blx	r3
 8001252:	3601      	adds	r6, #1
 8001254:	e7ee      	b.n	8001234 <__libc_init_array+0xc>
 8001256:	f855 3b04 	ldr.w	r3, [r5], #4
 800125a:	4798      	blx	r3
 800125c:	3601      	adds	r6, #1
 800125e:	e7f2      	b.n	8001246 <__libc_init_array+0x1e>
 8001260:	08001288 	.word	0x08001288
 8001264:	08001288 	.word	0x08001288
 8001268:	08001288 	.word	0x08001288
 800126c:	0800128c 	.word	0x0800128c

08001270 <_init>:
 8001270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001272:	bf00      	nop
 8001274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001276:	bc08      	pop	{r3}
 8001278:	469e      	mov	lr, r3
 800127a:	4770      	bx	lr

0800127c <_fini>:
 800127c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800127e:	bf00      	nop
 8001280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001282:	bc08      	pop	{r3}
 8001284:	469e      	mov	lr, r3
 8001286:	4770      	bx	lr
