
Driver_Servo_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08004968  08004968  00014968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d54  08004d54  00020214  2**0
                  CONTENTS
  4 .ARM          00000000  08004d54  08004d54  00020214  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d54  08004d54  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d54  08004d54  00014d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d58  08004d58  00014d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08004d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000214  08004f70  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08004f70  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002293  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008fb  00000000  00000000  000224d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  00022dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  00022fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000103d2  00000000  00000000  00023160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002d61  00000000  00000000  00033532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00056504  00000000  00000000  00036293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008c797  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001820  00000000  00000000  0008c7e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000214 	.word	0x20000214
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004950 	.word	0x08004950

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000218 	.word	0x20000218
 80001dc:	08004950 	.word	0x08004950

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <main>:
void initSystem(void);
void delay(int time);

// *************** // MAIN // *************** //
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	// Inicializamos el sistema
	initSystem();
 8000bbc:	f000 f8ec 	bl	8000d98 <initSystem>
	/* Main Loop */
	while(1){

		// Hacemos un "eco" con el valor que nos llega por el serial
		if(rxData != '\0'){
 8000bc0:	4b6d      	ldr	r3, [pc, #436]	; (8000d78 <main+0x1c0>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0fb      	beq.n	8000bc0 <main+0x8>
			writeChar(&handlerCommTerminal, rxData);
 8000bc8:	4b6b      	ldr	r3, [pc, #428]	; (8000d78 <main+0x1c0>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	486b      	ldr	r0, [pc, #428]	; (8000d7c <main+0x1c4>)
 8000bd0:	f000 ff76 	bl	8001ac0 <writeChar>

			if(rxData == 'd'){
 8000bd4:	4b68      	ldr	r3, [pc, #416]	; (8000d78 <main+0x1c0>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b64      	cmp	r3, #100	; 0x64
 8000bda:	d120      	bne.n	8000c1e <main+0x66>
				dutyCounter += 1;
 8000bdc:	4b68      	ldr	r3, [pc, #416]	; (8000d80 <main+0x1c8>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	3301      	adds	r3, #1
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	4b66      	ldr	r3, [pc, #408]	; (8000d80 <main+0x1c8>)
 8000be6:	701a      	strb	r2, [r3, #0]
				handlerPWM1.timerConfig.pwmDuty = dutyCounter;
 8000be8:	4b65      	ldr	r3, [pc, #404]	; (8000d80 <main+0x1c8>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b65      	ldr	r3, [pc, #404]	; (8000d84 <main+0x1cc>)
 8000bf0:	60da      	str	r2, [r3, #12]
				PWM_Config(&handlerPWM1);
 8000bf2:	4864      	ldr	r0, [pc, #400]	; (8000d84 <main+0x1cc>)
 8000bf4:	f000 fbe4 	bl	80013c0 <PWM_Config>
				// *****  //
				PWM1Buffer = dutyCounter;
 8000bf8:	4b61      	ldr	r3, [pc, #388]	; (8000d80 <main+0x1c8>)
 8000bfa:	781a      	ldrb	r2, [r3, #0]
 8000bfc:	4b62      	ldr	r3, [pc, #392]	; (8000d88 <main+0x1d0>)
 8000bfe:	701a      	strb	r2, [r3, #0]
				sprintf(bufferData, "DutyValue= %2x \n", (unsigned int) PWM1Buffer);
 8000c00:	4b61      	ldr	r3, [pc, #388]	; (8000d88 <main+0x1d0>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4961      	ldr	r1, [pc, #388]	; (8000d8c <main+0x1d4>)
 8000c08:	4861      	ldr	r0, [pc, #388]	; (8000d90 <main+0x1d8>)
 8000c0a:	f001 fc27 	bl	800245c <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 8000c0e:	4960      	ldr	r1, [pc, #384]	; (8000d90 <main+0x1d8>)
 8000c10:	485a      	ldr	r0, [pc, #360]	; (8000d7c <main+0x1c4>)
 8000c12:	f000 ff6e 	bl	8001af2 <writeMsg>
				// ***** //
				rxData = '\0';
 8000c16:	4b58      	ldr	r3, [pc, #352]	; (8000d78 <main+0x1c0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
 8000c1c:	e7d0      	b.n	8000bc0 <main+0x8>
			}
			else if(rxData == 'a'){
 8000c1e:	4b56      	ldr	r3, [pc, #344]	; (8000d78 <main+0x1c0>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b61      	cmp	r3, #97	; 0x61
 8000c24:	d120      	bne.n	8000c68 <main+0xb0>
				dutyCounter -= 1;
 8000c26:	4b56      	ldr	r3, [pc, #344]	; (8000d80 <main+0x1c8>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4b54      	ldr	r3, [pc, #336]	; (8000d80 <main+0x1c8>)
 8000c30:	701a      	strb	r2, [r3, #0]
				handlerPWM1.timerConfig.pwmDuty = dutyCounter;
 8000c32:	4b53      	ldr	r3, [pc, #332]	; (8000d80 <main+0x1c8>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	4b52      	ldr	r3, [pc, #328]	; (8000d84 <main+0x1cc>)
 8000c3a:	60da      	str	r2, [r3, #12]
				PWM_Config(&handlerPWM1);
 8000c3c:	4851      	ldr	r0, [pc, #324]	; (8000d84 <main+0x1cc>)
 8000c3e:	f000 fbbf 	bl	80013c0 <PWM_Config>
				// *****  //
				PWM1Buffer = dutyCounter;
 8000c42:	4b4f      	ldr	r3, [pc, #316]	; (8000d80 <main+0x1c8>)
 8000c44:	781a      	ldrb	r2, [r3, #0]
 8000c46:	4b50      	ldr	r3, [pc, #320]	; (8000d88 <main+0x1d0>)
 8000c48:	701a      	strb	r2, [r3, #0]
				sprintf(bufferData, "DutyValue= %2x \n", (unsigned int) PWM1Buffer);
 8000c4a:	4b4f      	ldr	r3, [pc, #316]	; (8000d88 <main+0x1d0>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	494e      	ldr	r1, [pc, #312]	; (8000d8c <main+0x1d4>)
 8000c52:	484f      	ldr	r0, [pc, #316]	; (8000d90 <main+0x1d8>)
 8000c54:	f001 fc02 	bl	800245c <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 8000c58:	494d      	ldr	r1, [pc, #308]	; (8000d90 <main+0x1d8>)
 8000c5a:	4848      	ldr	r0, [pc, #288]	; (8000d7c <main+0x1c4>)
 8000c5c:	f000 ff49 	bl	8001af2 <writeMsg>
				// ***** //
				rxData = '\0';
 8000c60:	4b45      	ldr	r3, [pc, #276]	; (8000d78 <main+0x1c0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
 8000c66:	e7ab      	b.n	8000bc0 <main+0x8>
			}
			else if(rxData == 'c'){
 8000c68:	4b43      	ldr	r3, [pc, #268]	; (8000d78 <main+0x1c0>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b63      	cmp	r3, #99	; 0x63
 8000c6e:	d13a      	bne.n	8000ce6 <main+0x12e>
				while(1){
					dutyCounter = 1;
 8000c70:	4b43      	ldr	r3, [pc, #268]	; (8000d80 <main+0x1c8>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
					handlerPWM1.timerConfig.pwmDuty = dutyCounter;
 8000c76:	4b42      	ldr	r3, [pc, #264]	; (8000d80 <main+0x1c8>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4b41      	ldr	r3, [pc, #260]	; (8000d84 <main+0x1cc>)
 8000c7e:	60da      	str	r2, [r3, #12]
					PWM_Config(&handlerPWM1);
 8000c80:	4840      	ldr	r0, [pc, #256]	; (8000d84 <main+0x1cc>)
 8000c82:	f000 fb9d 	bl	80013c0 <PWM_Config>
					delay(3000000);
 8000c86:	4843      	ldr	r0, [pc, #268]	; (8000d94 <main+0x1dc>)
 8000c88:	f000 f932 	bl	8000ef0 <delay>
					// *****  //
					PWM1Buffer = dutyCounter;
 8000c8c:	4b3c      	ldr	r3, [pc, #240]	; (8000d80 <main+0x1c8>)
 8000c8e:	781a      	ldrb	r2, [r3, #0]
 8000c90:	4b3d      	ldr	r3, [pc, #244]	; (8000d88 <main+0x1d0>)
 8000c92:	701a      	strb	r2, [r3, #0]
					sprintf(bufferData, "DutyValue= %2x \n", (unsigned int) PWM1Buffer);
 8000c94:	4b3c      	ldr	r3, [pc, #240]	; (8000d88 <main+0x1d0>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	493c      	ldr	r1, [pc, #240]	; (8000d8c <main+0x1d4>)
 8000c9c:	483c      	ldr	r0, [pc, #240]	; (8000d90 <main+0x1d8>)
 8000c9e:	f001 fbdd 	bl	800245c <siprintf>
					writeMsg(&handlerCommTerminal, bufferData);
 8000ca2:	493b      	ldr	r1, [pc, #236]	; (8000d90 <main+0x1d8>)
 8000ca4:	4835      	ldr	r0, [pc, #212]	; (8000d7c <main+0x1c4>)
 8000ca6:	f000 ff24 	bl	8001af2 <writeMsg>
					// ***** //
					dutyCounter = 2;
 8000caa:	4b35      	ldr	r3, [pc, #212]	; (8000d80 <main+0x1c8>)
 8000cac:	2202      	movs	r2, #2
 8000cae:	701a      	strb	r2, [r3, #0]
					handlerPWM1.timerConfig.pwmDuty = dutyCounter;
 8000cb0:	4b33      	ldr	r3, [pc, #204]	; (8000d80 <main+0x1c8>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b33      	ldr	r3, [pc, #204]	; (8000d84 <main+0x1cc>)
 8000cb8:	60da      	str	r2, [r3, #12]
					PWM_Config(&handlerPWM1);
 8000cba:	4832      	ldr	r0, [pc, #200]	; (8000d84 <main+0x1cc>)
 8000cbc:	f000 fb80 	bl	80013c0 <PWM_Config>
					delay(3000000);
 8000cc0:	4834      	ldr	r0, [pc, #208]	; (8000d94 <main+0x1dc>)
 8000cc2:	f000 f915 	bl	8000ef0 <delay>
					// *****  //
					PWM1Buffer = dutyCounter;
 8000cc6:	4b2e      	ldr	r3, [pc, #184]	; (8000d80 <main+0x1c8>)
 8000cc8:	781a      	ldrb	r2, [r3, #0]
 8000cca:	4b2f      	ldr	r3, [pc, #188]	; (8000d88 <main+0x1d0>)
 8000ccc:	701a      	strb	r2, [r3, #0]
					sprintf(bufferData, "DutyValue= %2x \n", (unsigned int) PWM1Buffer);
 8000cce:	4b2e      	ldr	r3, [pc, #184]	; (8000d88 <main+0x1d0>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	492d      	ldr	r1, [pc, #180]	; (8000d8c <main+0x1d4>)
 8000cd6:	482e      	ldr	r0, [pc, #184]	; (8000d90 <main+0x1d8>)
 8000cd8:	f001 fbc0 	bl	800245c <siprintf>
					writeMsg(&handlerCommTerminal, bufferData);
 8000cdc:	492c      	ldr	r1, [pc, #176]	; (8000d90 <main+0x1d8>)
 8000cde:	4827      	ldr	r0, [pc, #156]	; (8000d7c <main+0x1c4>)
 8000ce0:	f000 ff07 	bl	8001af2 <writeMsg>
					dutyCounter = 1;
 8000ce4:	e7c4      	b.n	8000c70 <main+0xb8>
					// ***** //
				}
				rxData = '\0';
			}
			else if(rxData == 'l'){
 8000ce6:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <main+0x1c0>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b6c      	cmp	r3, #108	; 0x6c
 8000cec:	d11d      	bne.n	8000d2a <main+0x172>
				dutyCounter = 1;
 8000cee:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <main+0x1c8>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
				handlerPWM1.timerConfig.pwmDuty = dutyCounter;
 8000cf4:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <main+0x1c8>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <main+0x1cc>)
 8000cfc:	60da      	str	r2, [r3, #12]
				PWM_Config(&handlerPWM1);
 8000cfe:	4821      	ldr	r0, [pc, #132]	; (8000d84 <main+0x1cc>)
 8000d00:	f000 fb5e 	bl	80013c0 <PWM_Config>
				// *****  //
				PWM1Buffer = dutyCounter;
 8000d04:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <main+0x1c8>)
 8000d06:	781a      	ldrb	r2, [r3, #0]
 8000d08:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <main+0x1d0>)
 8000d0a:	701a      	strb	r2, [r3, #0]
				sprintf(bufferData, "DutyValue= %2x \n", (unsigned int) PWM1Buffer);
 8000d0c:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <main+0x1d0>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	491e      	ldr	r1, [pc, #120]	; (8000d8c <main+0x1d4>)
 8000d14:	481e      	ldr	r0, [pc, #120]	; (8000d90 <main+0x1d8>)
 8000d16:	f001 fba1 	bl	800245c <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 8000d1a:	491d      	ldr	r1, [pc, #116]	; (8000d90 <main+0x1d8>)
 8000d1c:	4817      	ldr	r0, [pc, #92]	; (8000d7c <main+0x1c4>)
 8000d1e:	f000 fee8 	bl	8001af2 <writeMsg>
				// ***** //
				rxData = '\0';
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <main+0x1c0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
 8000d28:	e74a      	b.n	8000bc0 <main+0x8>
			}
			else if(rxData == 'j'){
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <main+0x1c0>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b6a      	cmp	r3, #106	; 0x6a
 8000d30:	d11d      	bne.n	8000d6e <main+0x1b6>
				dutyCounter = 2;
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <main+0x1c8>)
 8000d34:	2202      	movs	r2, #2
 8000d36:	701a      	strb	r2, [r3, #0]
				handlerPWM1.timerConfig.pwmDuty = dutyCounter;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <main+0x1c8>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <main+0x1cc>)
 8000d40:	60da      	str	r2, [r3, #12]
				PWM_Config(&handlerPWM1);
 8000d42:	4810      	ldr	r0, [pc, #64]	; (8000d84 <main+0x1cc>)
 8000d44:	f000 fb3c 	bl	80013c0 <PWM_Config>
				// *****  //
				PWM1Buffer = dutyCounter;
 8000d48:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <main+0x1c8>)
 8000d4a:	781a      	ldrb	r2, [r3, #0]
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <main+0x1d0>)
 8000d4e:	701a      	strb	r2, [r3, #0]
				sprintf(bufferData, "DutyValue= %2x \n", (unsigned int) PWM1Buffer);
 8000d50:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <main+0x1d0>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	490d      	ldr	r1, [pc, #52]	; (8000d8c <main+0x1d4>)
 8000d58:	480d      	ldr	r0, [pc, #52]	; (8000d90 <main+0x1d8>)
 8000d5a:	f001 fb7f 	bl	800245c <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 8000d5e:	490c      	ldr	r1, [pc, #48]	; (8000d90 <main+0x1d8>)
 8000d60:	4806      	ldr	r0, [pc, #24]	; (8000d7c <main+0x1c4>)
 8000d62:	f000 fec6 	bl	8001af2 <writeMsg>
				// ***** //
				rxData = '\0';
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <main+0x1c0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]
 8000d6c:	e728      	b.n	8000bc0 <main+0x8>
			}
			else{
				rxData = '\0';
 8000d6e:	4b02      	ldr	r3, [pc, #8]	; (8000d78 <main+0x1c0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
		if(rxData != '\0'){
 8000d74:	e724      	b.n	8000bc0 <main+0x8>
 8000d76:	bf00      	nop
 8000d78:	20000300 	.word	0x20000300
 8000d7c:	20000260 	.word	0x20000260
 8000d80:	20000040 	.word	0x20000040
 8000d84:	200002ec 	.word	0x200002ec
 8000d88:	20000301 	.word	0x20000301
 8000d8c:	08004968 	.word	0x08004968
 8000d90:	20000000 	.word	0x20000000
 8000d94:	002dc6c0 	.word	0x002dc6c0

08000d98 <initSystem>:

//***********// InitSystem //***********//

// Función que define la configuración de todos los pines y periféricos

void initSystem(void){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0

	// Configuración el State LED
	handlerStateLED.pGPIOx								= GPIOA;
 8000d9c:	4b4b      	ldr	r3, [pc, #300]	; (8000ecc <initSystem+0x134>)
 8000d9e:	4a4c      	ldr	r2, [pc, #304]	; (8000ed0 <initSystem+0x138>)
 8000da0:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 8000da2:	4b4a      	ldr	r3, [pc, #296]	; (8000ecc <initSystem+0x134>)
 8000da4:	2205      	movs	r2, #5
 8000da6:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 8000da8:	4b48      	ldr	r3, [pc, #288]	; (8000ecc <initSystem+0x134>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 8000dae:	4b47      	ldr	r3, [pc, #284]	; (8000ecc <initSystem+0x134>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000db4:	4b45      	ldr	r3, [pc, #276]	; (8000ecc <initSystem+0x134>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	71da      	strb	r2, [r3, #7]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_FAST;
 8000dba:	4b44      	ldr	r3, [pc, #272]	; (8000ecc <initSystem+0x134>)
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	719a      	strb	r2, [r3, #6]

	//Cargamos la configuración
	GPIO_Config(&handlerStateLED);
 8000dc0:	4842      	ldr	r0, [pc, #264]	; (8000ecc <initSystem+0x134>)
 8000dc2:	f000 f9a7 	bl	8001114 <GPIO_Config>

	// Prendemos el LED
	GPIO_WritePin(&handlerStateLED, SET);
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	4840      	ldr	r0, [pc, #256]	; (8000ecc <initSystem+0x134>)
 8000dca:	f000 facd 	bl	8001368 <GPIO_WritePin>

	/* Configurando los pines sobre los que funciona el USART */
	handlerPinTX.pGPIOx									= GPIOA;
 8000dce:	4b41      	ldr	r3, [pc, #260]	; (8000ed4 <initSystem+0x13c>)
 8000dd0:	4a3f      	ldr	r2, [pc, #252]	; (8000ed0 <initSystem+0x138>)
 8000dd2:	601a      	str	r2, [r3, #0]
	handlerPinTX.GPIO_PinConfig.GPIO_PinNumber			= PIN_2;
 8000dd4:	4b3f      	ldr	r3, [pc, #252]	; (8000ed4 <initSystem+0x13c>)
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	711a      	strb	r2, [r3, #4]
	handlerPinTX.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 8000dda:	4b3e      	ldr	r3, [pc, #248]	; (8000ed4 <initSystem+0x13c>)
 8000ddc:	2202      	movs	r2, #2
 8000dde:	715a      	strb	r2, [r3, #5]
	handlerPinTX.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 8000de0:	4b3c      	ldr	r3, [pc, #240]	; (8000ed4 <initSystem+0x13c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	721a      	strb	r2, [r3, #8]
	handlerPinTX.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 8000de6:	4b3b      	ldr	r3, [pc, #236]	; (8000ed4 <initSystem+0x13c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	71da      	strb	r2, [r3, #7]
	handlerPinTX.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_FAST;
 8000dec:	4b39      	ldr	r3, [pc, #228]	; (8000ed4 <initSystem+0x13c>)
 8000dee:	2202      	movs	r2, #2
 8000df0:	719a      	strb	r2, [r3, #6]
	handlerPinTX.GPIO_PinConfig.GPIO_PinAltFunMode		= AF7;
 8000df2:	4b38      	ldr	r3, [pc, #224]	; (8000ed4 <initSystem+0x13c>)
 8000df4:	2207      	movs	r2, #7
 8000df6:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&handlerPinTX);
 8000df8:	4836      	ldr	r0, [pc, #216]	; (8000ed4 <initSystem+0x13c>)
 8000dfa:	f000 f98b 	bl	8001114 <GPIO_Config>

	handlerPinRX.pGPIOx									= GPIOA;
 8000dfe:	4b36      	ldr	r3, [pc, #216]	; (8000ed8 <initSystem+0x140>)
 8000e00:	4a33      	ldr	r2, [pc, #204]	; (8000ed0 <initSystem+0x138>)
 8000e02:	601a      	str	r2, [r3, #0]
	handlerPinRX.GPIO_PinConfig.GPIO_PinNumber			= PIN_3;
 8000e04:	4b34      	ldr	r3, [pc, #208]	; (8000ed8 <initSystem+0x140>)
 8000e06:	2203      	movs	r2, #3
 8000e08:	711a      	strb	r2, [r3, #4]
	handlerPinRX.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 8000e0a:	4b33      	ldr	r3, [pc, #204]	; (8000ed8 <initSystem+0x140>)
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	715a      	strb	r2, [r3, #5]
	handlerPinRX.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 8000e10:	4b31      	ldr	r3, [pc, #196]	; (8000ed8 <initSystem+0x140>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	721a      	strb	r2, [r3, #8]
	handlerPinRX.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 8000e16:	4b30      	ldr	r3, [pc, #192]	; (8000ed8 <initSystem+0x140>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	71da      	strb	r2, [r3, #7]
	handlerPinRX.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_FAST;
 8000e1c:	4b2e      	ldr	r3, [pc, #184]	; (8000ed8 <initSystem+0x140>)
 8000e1e:	2202      	movs	r2, #2
 8000e20:	719a      	strb	r2, [r3, #6]
	handlerPinRX.GPIO_PinConfig.GPIO_PinAltFunMode		= AF7;
 8000e22:	4b2d      	ldr	r3, [pc, #180]	; (8000ed8 <initSystem+0x140>)
 8000e24:	2207      	movs	r2, #7
 8000e26:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&handlerPinRX);
 8000e28:	482b      	ldr	r0, [pc, #172]	; (8000ed8 <initSystem+0x140>)
 8000e2a:	f000 f973 	bl	8001114 <GPIO_Config>

	// Configuración del USART del USB para RX
	handlerCommTerminal.ptrUSARTx							= USART2;
 8000e2e:	4b2b      	ldr	r3, [pc, #172]	; (8000edc <initSystem+0x144>)
 8000e30:	4a2b      	ldr	r2, [pc, #172]	; (8000ee0 <initSystem+0x148>)
 8000e32:	601a      	str	r2, [r3, #0]
	handlerCommTerminal.USART_Config.USART_mode				= USART_MODE_RXTX;
 8000e34:	4b29      	ldr	r3, [pc, #164]	; (8000edc <initSystem+0x144>)
 8000e36:	2202      	movs	r2, #2
 8000e38:	711a      	strb	r2, [r3, #4]
	handlerCommTerminal.USART_Config.USART_baudrate			= USART_BAUDRATE_19200;
 8000e3a:	4b28      	ldr	r3, [pc, #160]	; (8000edc <initSystem+0x144>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	715a      	strb	r2, [r3, #5]
	handlerCommTerminal.USART_Config.USART_datasize			= USART_DATASIZE_8BIT;
 8000e40:	4b26      	ldr	r3, [pc, #152]	; (8000edc <initSystem+0x144>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	719a      	strb	r2, [r3, #6]
	handlerCommTerminal.USART_Config.USART_parity			= USART_PARITY_ODD;
 8000e46:	4b25      	ldr	r3, [pc, #148]	; (8000edc <initSystem+0x144>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	71da      	strb	r2, [r3, #7]
	handlerCommTerminal.USART_Config.USART_stopbits			= USART_STOPBIT_1;
 8000e4c:	4b23      	ldr	r3, [pc, #140]	; (8000edc <initSystem+0x144>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	721a      	strb	r2, [r3, #8]
	handlerCommTerminal.USART_Config.USART_interrupt		= USART_INTERRUPT_RX_ENABLE;
 8000e52:	4b22      	ldr	r3, [pc, #136]	; (8000edc <initSystem+0x144>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	725a      	strb	r2, [r3, #9]

	USART_Config(&handlerCommTerminal);
 8000e58:	4820      	ldr	r0, [pc, #128]	; (8000edc <initSystem+0x144>)
 8000e5a:	f000 fbdd 	bl	8001618 <USART_Config>
//	handlerTimer2.timerConfig.Timer_speed				= TIMER_INCR_SPEED_1ms;
//	handlerTimer2.timerConfig.Timer_period				= 250;

//	Timer_Config(&handlerTimer2);

	GPIO_WritePin(&handlerStateLED, SET);
 8000e5e:	2101      	movs	r1, #1
 8000e60:	481a      	ldr	r0, [pc, #104]	; (8000ecc <initSystem+0x134>)
 8000e62:	f000 fa81 	bl	8001368 <GPIO_WritePin>

	// Configuración del PWM
	handlerPinServo1.pGPIOx								= GPIOA;
 8000e66:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <initSystem+0x14c>)
 8000e68:	4a19      	ldr	r2, [pc, #100]	; (8000ed0 <initSystem+0x138>)
 8000e6a:	601a      	str	r2, [r3, #0]
	handlerPinServo1.GPIO_PinConfig.GPIO_PinNumber		= PIN_0;
 8000e6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <initSystem+0x14c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	711a      	strb	r2, [r3, #4]
	handlerPinServo1.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 8000e72:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <initSystem+0x14c>)
 8000e74:	2202      	movs	r2, #2
 8000e76:	715a      	strb	r2, [r3, #5]
	handlerPinServo1.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 8000e78:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <initSystem+0x14c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	721a      	strb	r2, [r3, #8]
	handlerPinServo1.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <initSystem+0x14c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	71da      	strb	r2, [r3, #7]
	handlerPinServo1.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 8000e84:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <initSystem+0x14c>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	719a      	strb	r2, [r3, #6]
	handlerPinServo1.GPIO_PinConfig.GPIO_PinAltFunMode	= AF1;
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <initSystem+0x14c>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	725a      	strb	r2, [r3, #9]

	//Cargamos la configuración
	GPIO_Config(&handlerPinServo1);
 8000e90:	4814      	ldr	r0, [pc, #80]	; (8000ee4 <initSystem+0x14c>)
 8000e92:	f000 f93f 	bl	8001114 <GPIO_Config>

	handlerPWM1.ptrTIMx								= TIM2;
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <initSystem+0x150>)
 8000e98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e9c:	601a      	str	r2, [r3, #0]
	handlerPWM1.timerConfig.pwmMode					= TIMER_MODE_UP;
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <initSystem+0x150>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	711a      	strb	r2, [r3, #4]
	handlerPWM1.timerConfig.pwmSpeed				= TIMER_INCR_SPEED_1ms;
 8000ea4:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <initSystem+0x150>)
 8000ea6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000eaa:	80da      	strh	r2, [r3, #6]
	handlerPWM1.timerConfig.pwmPeriod				= 20;
 8000eac:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <initSystem+0x150>)
 8000eae:	2214      	movs	r2, #20
 8000eb0:	609a      	str	r2, [r3, #8]
	handlerPWM1.timerConfig.pwmDuty					= dutyCounter;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <initSystem+0x154>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <initSystem+0x150>)
 8000eba:	60da      	str	r2, [r3, #12]
	handlerPWM1.timerConfig.channel					= PWM_CHANNEL_1;
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <initSystem+0x150>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]

	PWM_Config(&handlerPWM1);
 8000ec2:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <initSystem+0x150>)
 8000ec4:	f000 fa7c 	bl	80013c0 <PWM_Config>
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000230 	.word	0x20000230
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	2000023c 	.word	0x2000023c
 8000ed8:	20000248 	.word	0x20000248
 8000edc:	20000260 	.word	0x20000260
 8000ee0:	40004400 	.word	0x40004400
 8000ee4:	20000254 	.word	0x20000254
 8000ee8:	200002ec 	.word	0x200002ec
 8000eec:	20000040 	.word	0x20000040

08000ef0 <delay>:

//***********// Delay //***********//

void delay(int time){
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	// Con este ciclo se genera un intervalo de tiempo en el programa (no tiene otro objetivo)
	for (int i = 0; i <= time; i++){
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	e003      	b.n	8000f06 <delay+0x16>
		__NOP();
 8000efe:	bf00      	nop
	for (int i = 0; i <= time; i++){
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	3301      	adds	r3, #1
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	ddf7      	ble.n	8000efe <delay+0xe>
	}
}
 8000f0e:	bf00      	nop
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <USART2_Callback>:

//***********// CallBacks //***********//

void USART2_Callback(void){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	// Lectura de los datos recibidos
	rxData = returnData();
 8000f20:	f000 fdc2 	bl	8001aa8 <returnData>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b01      	ldr	r3, [pc, #4]	; (8000f30 <USART2_Callback+0x14>)
 8000f2a:	701a      	strb	r2, [r3, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000300 	.word	0x20000300

08000f34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
	return 1;
 8000f38:	2301      	movs	r3, #1
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <_kill>:

int _kill(int pid, int sig)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f4e:	f000 fde9 	bl	8001b24 <__errno>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2216      	movs	r2, #22
 8000f56:	601a      	str	r2, [r3, #0]
	return -1;
 8000f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <_exit>:

void _exit (int status)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ffe7 	bl	8000f44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f76:	e7fe      	b.n	8000f76 <_exit+0x12>

08000f78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	e00a      	b.n	8000fa0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f8a:	f3af 8000 	nop.w
 8000f8e:	4601      	mov	r1, r0
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	1c5a      	adds	r2, r3, #1
 8000f94:	60ba      	str	r2, [r7, #8]
 8000f96:	b2ca      	uxtb	r2, r1
 8000f98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	dbf0      	blt.n	8000f8a <_read+0x12>
	}

return len;
 8000fa8:	687b      	ldr	r3, [r7, #4]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	e009      	b.n	8000fd8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	60ba      	str	r2, [r7, #8]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dbf1      	blt.n	8000fc4 <_write+0x12>
	}
	return len;
 8000fe0:	687b      	ldr	r3, [r7, #4]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <_close>:

int _close(int file)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001012:	605a      	str	r2, [r3, #4]
	return 0;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <_isatty>:

int _isatty(int file)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
	return 1;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
	return 0;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800105c:	4a14      	ldr	r2, [pc, #80]	; (80010b0 <_sbrk+0x5c>)
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <_sbrk+0x60>)
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d102      	bne.n	8001076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <_sbrk+0x64>)
 8001072:	4a12      	ldr	r2, [pc, #72]	; (80010bc <_sbrk+0x68>)
 8001074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <_sbrk+0x64>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	429a      	cmp	r2, r3
 8001082:	d207      	bcs.n	8001094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001084:	f000 fd4e 	bl	8001b24 <__errno>
 8001088:	4603      	mov	r3, r0
 800108a:	220c      	movs	r2, #12
 800108c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001092:	e009      	b.n	80010a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109a:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <_sbrk+0x64>)
 80010a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a6:	68fb      	ldr	r3, [r7, #12]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20020000 	.word	0x20020000
 80010b4:	00000400 	.word	0x00000400
 80010b8:	20000304 	.word	0x20000304
 80010bc:	20000320 	.word	0x20000320

080010c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010c0:	480d      	ldr	r0, [pc, #52]	; (80010f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c8:	480c      	ldr	r0, [pc, #48]	; (80010fc <LoopForever+0x6>)
  ldr r1, =_edata
 80010ca:	490d      	ldr	r1, [pc, #52]	; (8001100 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010cc:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <LoopForever+0xe>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d0:	e002      	b.n	80010d8 <LoopCopyDataInit>

080010d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d6:	3304      	adds	r3, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010dc:	d3f9      	bcc.n	80010d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e0:	4c0a      	ldr	r4, [pc, #40]	; (800110c <LoopForever+0x16>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e4:	e001      	b.n	80010ea <LoopFillZerobss>

080010e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e8:	3204      	adds	r2, #4

080010ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ec:	d3fb      	bcc.n	80010e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010ee:	f000 fd1f 	bl	8001b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010f2:	f7ff fd61 	bl	8000bb8 <main>

080010f6 <LoopForever>:

LoopForever:
    b LoopForever
 80010f6:	e7fe      	b.n	80010f6 <LoopForever>
  ldr   r0, =_estack
 80010f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001100:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8001104:	08004d5c 	.word	0x08004d5c
  ldr r2, =_sbss
 8001108:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 800110c:	2000031c 	.word	0x2000031c

08001110 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001110:	e7fe      	b.n	8001110 <ADC_IRQHandler>
	...

08001114 <GPIO_Config>:
orden estricto para poder que el sistema permita configurar el periférico X.
Lo primero y más importante es activar la señal del reloj principal hacia ese
elemento específico (relacionado con el periférico RCC), a esto llamaremos
simplemente "activar el periférico o activar la señal de reloj del periférico".
*/
void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periférico
	// Verificamos para GPIOA
	if (pGPIOHandler -> pGPIOx == GPIOA){
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a88      	ldr	r2, [pc, #544]	; (800134c <GPIO_Config+0x238>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d106      	bne.n	800113c <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOA
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 800112e:	4b88      	ldr	r3, [pc, #544]	; (8001350 <GPIO_Config+0x23c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a87      	ldr	r2, [pc, #540]	; (8001350 <GPIO_Config+0x23c>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	e03a      	b.n	80011b2 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if (pGPIOHandler -> pGPIOx == GPIOB){
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a84      	ldr	r2, [pc, #528]	; (8001354 <GPIO_Config+0x240>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d106      	bne.n	8001154 <GPIO_Config+0x40>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOB
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 8001146:	4b82      	ldr	r3, [pc, #520]	; (8001350 <GPIO_Config+0x23c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a81      	ldr	r2, [pc, #516]	; (8001350 <GPIO_Config+0x23c>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	e02e      	b.n	80011b2 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOC
	else if (pGPIOHandler -> pGPIOx == GPIOC){
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a7f      	ldr	r2, [pc, #508]	; (8001358 <GPIO_Config+0x244>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d106      	bne.n	800116c <GPIO_Config+0x58>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOC
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 800115e:	4b7c      	ldr	r3, [pc, #496]	; (8001350 <GPIO_Config+0x23c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a7b      	ldr	r2, [pc, #492]	; (8001350 <GPIO_Config+0x23c>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	e022      	b.n	80011b2 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOD
	else if (pGPIOHandler -> pGPIOx == GPIOD){
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a7a      	ldr	r2, [pc, #488]	; (800135c <GPIO_Config+0x248>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d106      	bne.n	8001184 <GPIO_Config+0x70>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOD
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 8001176:	4b76      	ldr	r3, [pc, #472]	; (8001350 <GPIO_Config+0x23c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a75      	ldr	r2, [pc, #468]	; (8001350 <GPIO_Config+0x23c>)
 800117c:	f043 0308 	orr.w	r3, r3, #8
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	e016      	b.n	80011b2 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOE
	else if (pGPIOHandler -> pGPIOx == GPIOE){
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a75      	ldr	r2, [pc, #468]	; (8001360 <GPIO_Config+0x24c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d106      	bne.n	800119c <GPIO_Config+0x88>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOE
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 800118e:	4b70      	ldr	r3, [pc, #448]	; (8001350 <GPIO_Config+0x23c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a6f      	ldr	r2, [pc, #444]	; (8001350 <GPIO_Config+0x23c>)
 8001194:	f043 0310 	orr.w	r3, r3, #16
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	e00a      	b.n	80011b2 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOH
	else if (pGPIOHandler -> pGPIOx == GPIOH){
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a70      	ldr	r2, [pc, #448]	; (8001364 <GPIO_Config+0x250>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d105      	bne.n	80011b2 <GPIO_Config+0x9e>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOH
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 80011a6:	4b6a      	ldr	r3, [pc, #424]	; (8001350 <GPIO_Config+0x23c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a69      	ldr	r2, [pc, #420]	; (8001350 <GPIO_Config+0x23c>)
 80011ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
	// Después de activado, podemos comenzar a configurar.

	// 2) Configurando el registro GPIOx_MODER
	// Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y todo eso lo cargamos en la variable aux_Config
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	795b      	ldrb	r3, [r3, #5]
 80011b6:	461a      	mov	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	791b      	ldrb	r3, [r3, #4]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	60fb      	str	r3, [r7, #12]

	// Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (debemos escribir 0b00)
	// para lo cual aplicamos una máscara y una operación bitwise AND
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	791b      	ldrb	r3, [r3, #4]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	2103      	movs	r1, #3
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	4619      	mov	r1, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	400a      	ands	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler -> pGPIOx -> MODER |= auxConfig;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6819      	ldr	r1, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	430a      	orrs	r2, r1
 80011f0:	601a      	str	r2, [r3, #0]

	// 3) Configurando el registro GPIOx_OTYPER
	// De nuevo, leemos y movemos el valor un número "PinNumber" de veces
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7a1b      	ldrb	r3, [r3, #8]
 80011f6:	461a      	mov	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	791b      	ldrb	r3, [r3, #4]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler -> pGPIOx -> OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	791b      	ldrb	r3, [r3, #4]
 800120c:	4619      	mov	r1, r3
 800120e:	2301      	movs	r3, #1
 8001210:	408b      	lsls	r3, r1
 8001212:	43db      	mvns	r3, r3
 8001214:	4619      	mov	r1, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	400a      	ands	r2, r1
 800121c:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OTYPER |= auxConfig;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6859      	ldr	r1, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	430a      	orrs	r2, r1
 800122c:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	799b      	ldrb	r3, [r3, #6]
 8001232:	461a      	mov	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	791b      	ldrb	r3, [r3, #4]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler -> pGPIOx -> OSPEEDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	791b      	ldrb	r3, [r3, #4]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	2103      	movs	r1, #3
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	4619      	mov	r1, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	400a      	ands	r2, r1
 800125c:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OSPEEDR |= auxConfig;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6899      	ldr	r1, [r3, #8]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	430a      	orrs	r2, r1
 800126c:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante.
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	79db      	ldrb	r3, [r3, #7]
 8001272:	461a      	mov	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	791b      	ldrb	r3, [r3, #4]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler -> pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	68da      	ldr	r2, [r3, #12]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	791b      	ldrb	r3, [r3, #4]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	2103      	movs	r1, #3
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	4619      	mov	r1, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	400a      	ands	r2, r1
 800129c:	60da      	str	r2, [r3, #12]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> PUPDR |= auxConfig;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68d9      	ldr	r1, [r3, #12]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuración de las funciones alternativas... Se verá luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	795b      	ldrb	r3, [r3, #5]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d143      	bne.n	800133e <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	791b      	ldrb	r3, [r3, #4]
 80012ba:	2b07      	cmp	r3, #7
 80012bc:	d81f      	bhi.n	80012fe <GPIO_Config+0x1ea>
			// Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	791b      	ldrb	r3, [r3, #4]
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	60bb      	str	r3, [r7, #8]

			// Limpiamos primero la posición del registro que deseamos escribir a continuación
			pGPIOHandler -> pGPIOx -> AFR[0] &= ~(0b1111 << auxPosition);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6a1a      	ldr	r2, [r3, #32]
 80012cc:	210f      	movs	r1, #15
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	fa01 f303 	lsl.w	r3, r1, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	4619      	mov	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	400a      	ands	r2, r1
 80012de:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posición seleccionada
			pGPIOHandler -> pGPIOx -> AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6a1a      	ldr	r2, [r3, #32]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	7a5b      	ldrb	r3, [r3, #9]
 80012ea:	4619      	mov	r1, r3
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	4619      	mov	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	430a      	orrs	r2, r1
 80012fa:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurando en la posición seleccionada
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} // Fin del GPIO_Config
 80012fc:	e01f      	b.n	800133e <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber -8);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	791b      	ldrb	r3, [r3, #4]
 8001302:	3b08      	subs	r3, #8
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx -> AFR[1] &= ~(0b1111 << auxPosition);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800130e:	210f      	movs	r1, #15
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	fa01 f303 	lsl.w	r3, r1, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	4619      	mov	r1, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	400a      	ands	r2, r1
 8001320:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	7a5b      	ldrb	r3, [r3, #9]
 800132c:	4619      	mov	r1, r3
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	4619      	mov	r1, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_Config
 800133e:	bf00      	nop
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40020000 	.word	0x40020000
 8001350:	40023800 	.word	0x40023800
 8001354:	40020400 	.word	0x40020400
 8001358:	40020800 	.word	0x40020800
 800135c:	40020c00 	.word	0x40020c00
 8001360:	40021000 	.word	0x40021000
 8001364:	40021c00 	.word	0x40021c00

08001368 <GPIO_WritePin>:
 *
 *
Función utilizada para cambiar de estado el pin entregado en el handler, asignando
el valor entregado en la variable newState
*/
void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	70fb      	strb	r3, [r7, #3]
	// Limpiamos la posición que deseamos
	// pPinHandler -> pGPIOx -> ODR &= ~(SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
	if(newState == SET){
 8001374:	78fb      	ldrb	r3, [r7, #3]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d10d      	bne.n	8001396 <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler -> pGPIOx -> BSRR |= (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	699a      	ldr	r2, [r3, #24]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	791b      	ldrb	r3, [r3, #4]
 8001384:	4619      	mov	r1, r3
 8001386:	2301      	movs	r3, #1
 8001388:	408b      	lsls	r3, r1
 800138a:	4619      	mov	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	619a      	str	r2, [r3, #24]
	}
	else{
		// Trabajando con la parte alta del registro
		pPinHandler -> pGPIOx -> BSRR |= (SET << (pPinHandler -> GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8001394:	e00d      	b.n	80013b2 <GPIO_WritePin+0x4a>
		pPinHandler -> pGPIOx -> BSRR |= (SET << (pPinHandler -> GPIO_PinConfig.GPIO_PinNumber + 16));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	699a      	ldr	r2, [r3, #24]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	791b      	ldrb	r3, [r3, #4]
 80013a0:	3310      	adds	r3, #16
 80013a2:	2101      	movs	r1, #1
 80013a4:	fa01 f303 	lsl.w	r3, r1, r3
 80013a8:	4619      	mov	r1, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	619a      	str	r2, [r3, #24]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <PWM_Config>:
 *
 * */

//NOTA: Hay que desactivar las interrupciones globales y luego volver a activarlas

void PWM_Config(PWM_Handler_t *prtPWMConfig){
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

	/* 1. Activamos la señal de reloj para el periférico específico */
	if(prtPWMConfig -> ptrTIMx == TIM2){
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d0:	d106      	bne.n	80013e0 <PWM_Config+0x20>
		// Activamos la señal de reloj del TIM2
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 80013d2:	4b7e      	ldr	r3, [pc, #504]	; (80015cc <PWM_Config+0x20c>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	4a7d      	ldr	r2, [pc, #500]	; (80015cc <PWM_Config+0x20c>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6413      	str	r3, [r2, #64]	; 0x40
 80013de:	e022      	b.n	8001426 <PWM_Config+0x66>

	}else if(prtPWMConfig -> ptrTIMx == TIM3){
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a7a      	ldr	r2, [pc, #488]	; (80015d0 <PWM_Config+0x210>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d106      	bne.n	80013f8 <PWM_Config+0x38>
		// Activamos la señal de reloj del TIM3
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 80013ea:	4b78      	ldr	r3, [pc, #480]	; (80015cc <PWM_Config+0x20c>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	4a77      	ldr	r2, [pc, #476]	; (80015cc <PWM_Config+0x20c>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
 80013f6:	e016      	b.n	8001426 <PWM_Config+0x66>

	}else if(prtPWMConfig -> ptrTIMx == TIM4){
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a75      	ldr	r2, [pc, #468]	; (80015d4 <PWM_Config+0x214>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d106      	bne.n	8001410 <PWM_Config+0x50>
		// Activamos la señal de reloj del TIM4
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001402:	4b72      	ldr	r3, [pc, #456]	; (80015cc <PWM_Config+0x20c>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	4a71      	ldr	r2, [pc, #452]	; (80015cc <PWM_Config+0x20c>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	6413      	str	r3, [r2, #64]	; 0x40
 800140e:	e00a      	b.n	8001426 <PWM_Config+0x66>

	}else if(prtPWMConfig -> ptrTIMx == TIM5){
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a70      	ldr	r2, [pc, #448]	; (80015d8 <PWM_Config+0x218>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d105      	bne.n	8001426 <PWM_Config+0x66>
		// Activamos la señal de reloj del TIM5
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 800141a:	4b6c      	ldr	r3, [pc, #432]	; (80015cc <PWM_Config+0x20c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	4a6b      	ldr	r2, [pc, #428]	; (80015cc <PWM_Config+0x20c>)
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuración del modo del timer (UP or DOWN) */

	if(prtPWMConfig -> timerConfig.pwmMode == TIMER_MODE_UP){
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	791b      	ldrb	r3, [r3, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10c      	bne.n	8001448 <PWM_Config+0x88>
		// Configuramos el timer en modo UP
		prtPWMConfig -> ptrTIMx -> CR1 &= ~(TIM_CR1_DIR);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0210 	bic.w	r2, r2, #16
 800143c:	601a      	str	r2, [r3, #0]
		// Ponemos el contador (CNT) en cero.
		prtPWMConfig -> ptrTIMx -> CNT = 0;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	; 0x24
 8001446:	e00d      	b.n	8001464 <PWM_Config+0xa4>
	}
	else{
		// Configuramos el timer en modo DOWN
		prtPWMConfig -> ptrTIMx -> CR1 |= ~(TIM_CR1_DIR);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f062 0210 	orn	r2, r2, #16
 8001456:	601a      	str	r2, [r3, #0]
		// Ponemos en el contador (CNT) el valor del periodo
		prtPWMConfig -> ptrTIMx -> CNT = prtPWMConfig -> timerConfig.pwmPeriod -1;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3a01      	subs	r2, #1
 8001462:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuración del Prescaler */
	prtPWMConfig -> ptrTIMx -> PSC = prtPWMConfig -> timerConfig.pwmSpeed -1;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	88db      	ldrh	r3, [r3, #6]
 8001468:	1e5a      	subs	r2, r3, #1
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo*/
	prtPWMConfig -> ptrTIMx -> ARR = prtPWMConfig -> timerConfig.pwmPeriod -1;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	3a01      	subs	r2, #1
 800147a:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse  */
	prtPWMConfig -> ptrTIMx -> CR1 |= TIM_CR1_CEN;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 0201 	orr.w	r2, r2, #1
 800148a:	601a      	str	r2, [r3, #0]

	/* 6. Configuramos el Duty */
	prtPWMConfig -> ptrTIMx -> CCR1 = prtPWMConfig -> timerConfig.pwmDuty -1;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	3a01      	subs	r2, #1
 8001496:	635a      	str	r2, [r3, #52]	; 0x34

	/* 7. Configuramos el OutPut Register CCMR1 y CCMR2 */

	if(prtPWMConfig -> timerConfig.channel == PWM_CHANNEL_1){
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d120      	bne.n	80014e2 <PWM_Config+0x122>
		// Escogemos el canal 1 como salida
		prtPWMConfig -> ptrTIMx -> CCMR1 &= ~TIM_CCMR1_CC1S;	// Ponemos 00: CC1 channel is configured as output.
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	699a      	ldr	r2, [r3, #24]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0203 	bic.w	r2, r2, #3
 80014ae:	619a      	str	r2, [r3, #24]
		// Escoger si el Preload está activado
		prtPWMConfig -> ptrTIMx -> CCMR1 |= TIM_CCMR1_OC1PE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	699a      	ldr	r2, [r3, #24]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 0208 	orr.w	r2, r2, #8
 80014be:	619a      	str	r2, [r3, #24]
		// Configurar el Output compare 1 mode
		prtPWMConfig -> ptrTIMx -> CCMR1 |= (0b110 << TIM_CCMR1_OC1M_Pos);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	699a      	ldr	r2, [r3, #24]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80014ce:	619a      	str	r2, [r3, #24]
		// Activamos el enable a través del CCER
		prtPWMConfig -> ptrTIMx -> CCER |= TIM_CCER_CC1E;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6a1a      	ldr	r2, [r3, #32]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f042 0201 	orr.w	r2, r2, #1
 80014de:	621a      	str	r2, [r3, #32]
		// Configurar el Output compare 1 mode
		prtPWMConfig -> ptrTIMx -> CCMR2 |= (0b110 << TIM_CCMR2_OC4M_Pos);
		// Activamos el enable a través del CCER
		prtPWMConfig -> ptrTIMx -> CCER |= TIM_CCER_CC4E;
	}
}
 80014e0:	e06d      	b.n	80015be <PWM_Config+0x1fe>
	} else if(prtPWMConfig -> timerConfig.channel == PWM_CHANNEL_2){
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d120      	bne.n	800152c <PWM_Config+0x16c>
		prtPWMConfig -> ptrTIMx -> CCMR1 &= ~TIM_CCMR1_CC2S;	// Ponemos 00: CC1 channel is configured as output.
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	699a      	ldr	r2, [r3, #24]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80014f8:	619a      	str	r2, [r3, #24]
		prtPWMConfig -> ptrTIMx -> CCMR1 |= TIM_CCMR1_OC2PE;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	699a      	ldr	r2, [r3, #24]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001508:	619a      	str	r2, [r3, #24]
		prtPWMConfig -> ptrTIMx -> CCMR1 |= (0b110 << TIM_CCMR1_OC2M_Pos);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	699a      	ldr	r2, [r3, #24]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001518:	619a      	str	r2, [r3, #24]
		prtPWMConfig -> ptrTIMx -> CCER |= TIM_CCER_CC2E;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6a1a      	ldr	r2, [r3, #32]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f042 0210 	orr.w	r2, r2, #16
 8001528:	621a      	str	r2, [r3, #32]
}
 800152a:	e048      	b.n	80015be <PWM_Config+0x1fe>
	} else if(prtPWMConfig -> timerConfig.channel == PWM_CHANNEL_3){
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d120      	bne.n	8001576 <PWM_Config+0x1b6>
		prtPWMConfig -> ptrTIMx -> CCMR2 &= ~TIM_CCMR2_CC3S;	// Ponemos 00: CC1 channel is configured as output.
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	69da      	ldr	r2, [r3, #28]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0203 	bic.w	r2, r2, #3
 8001542:	61da      	str	r2, [r3, #28]
		prtPWMConfig -> ptrTIMx -> CCMR2 |= TIM_CCMR2_OC3PE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	69da      	ldr	r2, [r3, #28]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0208 	orr.w	r2, r2, #8
 8001552:	61da      	str	r2, [r3, #28]
		prtPWMConfig -> ptrTIMx -> CCMR2 |= (0b110 << TIM_CCMR2_OC3M_Pos);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	69da      	ldr	r2, [r3, #28]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001562:	61da      	str	r2, [r3, #28]
		prtPWMConfig -> ptrTIMx -> CCER |= TIM_CCER_CC3E;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6a1a      	ldr	r2, [r3, #32]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001572:	621a      	str	r2, [r3, #32]
}
 8001574:	e023      	b.n	80015be <PWM_Config+0x1fe>
	} else if(prtPWMConfig -> timerConfig.channel == PWM_CHANNEL_4){
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	2b03      	cmp	r3, #3
 800157c:	d11f      	bne.n	80015be <PWM_Config+0x1fe>
		prtPWMConfig -> ptrTIMx -> CCMR2 &= ~TIM_CCMR2_CC4S;	// Ponemos 00: CC1 channel is configured as output.
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	69da      	ldr	r2, [r3, #28]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800158c:	61da      	str	r2, [r3, #28]
		prtPWMConfig -> ptrTIMx -> CCMR2 |= TIM_CCMR2_OC3PE;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	69da      	ldr	r2, [r3, #28]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 0208 	orr.w	r2, r2, #8
 800159c:	61da      	str	r2, [r3, #28]
		prtPWMConfig -> ptrTIMx -> CCMR2 |= (0b110 << TIM_CCMR2_OC4M_Pos);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	69da      	ldr	r2, [r3, #28]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80015ac:	61da      	str	r2, [r3, #28]
		prtPWMConfig -> ptrTIMx -> CCER |= TIM_CCER_CC4E;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6a1a      	ldr	r2, [r3, #32]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015bc:	621a      	str	r2, [r3, #32]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40000400 	.word	0x40000400
 80015d4:	40000800 	.word	0x40000800
 80015d8:	40000c00 	.word	0x40000c00

080015dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	db0b      	blt.n	8001606 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	f003 021f 	and.w	r2, r3, #31
 80015f4:	4907      	ldr	r1, [pc, #28]	; (8001614 <__NVIC_EnableIRQ+0x38>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	095b      	lsrs	r3, r3, #5
 80015fc:	2001      	movs	r0, #1
 80015fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000e100 	.word	0xe000e100

08001618 <USART_Config>:
 * del periférico que se está utilizando.
 */

uint8_t data;

void USART_Config(USART_Handler_t *ptrUsartHandler){
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001620:	b672      	cpsid	i
}
 8001622:	bf00      	nop

	/* 1. Activamos la señal de reloj que viene desde el bus al que pertenece el periférico.
	 * Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6)
	 */
	/*1.1 Configuramos el USART1*/
	if(ptrUsartHandler -> ptrUSARTx == USART1){
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a8c      	ldr	r2, [pc, #560]	; (800185c <USART_Config+0x244>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d106      	bne.n	800163c <USART_Config+0x24>
		// Escribimos 1 (SET) en la posición correspondiente al USART1
		RCC -> APB2ENR |= (RCC_APB2ENR_USART1EN);
 800162e:	4b8c      	ldr	r3, [pc, #560]	; (8001860 <USART_Config+0x248>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	4a8b      	ldr	r2, [pc, #556]	; (8001860 <USART_Config+0x248>)
 8001634:	f043 0310 	orr.w	r3, r3, #16
 8001638:	6453      	str	r3, [r2, #68]	; 0x44
 800163a:	e016      	b.n	800166a <USART_Config+0x52>
	}
	/*1.2 Configuramos el USART2*/
	else if(ptrUsartHandler -> ptrUSARTx == USART2){
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a88      	ldr	r2, [pc, #544]	; (8001864 <USART_Config+0x24c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d106      	bne.n	8001654 <USART_Config+0x3c>
		// Escribimos 1 (SET) en la posición correspondiente al USART1
		RCC -> APB1ENR |= (RCC_APB1ENR_USART2EN);
 8001646:	4b86      	ldr	r3, [pc, #536]	; (8001860 <USART_Config+0x248>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a85      	ldr	r2, [pc, #532]	; (8001860 <USART_Config+0x248>)
 800164c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
 8001652:	e00a      	b.n	800166a <USART_Config+0x52>
	}
	/*1.3 Configuramos el USART6*/
	else if(ptrUsartHandler -> ptrUSARTx == USART6){
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a83      	ldr	r2, [pc, #524]	; (8001868 <USART_Config+0x250>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d105      	bne.n	800166a <USART_Config+0x52>
		// Escribimos 1 (SET) en la posición correspondiente al USART1
		RCC -> APB2ENR |= (RCC_APB2ENR_USART6EN);
 800165e:	4b80      	ldr	r3, [pc, #512]	; (8001860 <USART_Config+0x248>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	4a7f      	ldr	r2, [pc, #508]	; (8001860 <USART_Config+0x248>)
 8001664:	f043 0320 	orr.w	r3, r3, #32
 8001668:	6453      	str	r3, [r2, #68]	; 0x44
	 * Configuramos el modo: only TX, only RX, o RXTX
	 * Por último activamos el modulo USART cuando todo está correctamente configurado
	 * */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero.
	ptrUsartHandler -> ptrUSARTx -> CR1 = 0;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
	ptrUsartHandler -> ptrUSARTx -> CR2 = 0;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]

	// 2.2 Configuración del Parity:
	// Verificamos si el parity está activado o no
	if(ptrUsartHandler -> USART_Config.USART_parity != USART_PARITY_NONE){
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	79db      	ldrb	r3, [r3, #7]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d02b      	beq.n	80016da <USART_Config+0xc2>

		// Verificamos si se ha seleccionado ODD or EVEN

		//Se selecciona EVEN
		if(ptrUsartHandler -> USART_Config.USART_parity == USART_PARITY_EVEN){
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	79db      	ldrb	r3, [r3, #7]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d113      	bne.n	80016b2 <USART_Config+0x9a>
			//Ponemos 0b0 en la posicion 9 del registo CR1 para escoger Even
			ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_PS);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001698:	60da      	str	r2, [r3, #12]

			// Además, se seleccionan 9 bits.
			ptrUsartHandler -> USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	719a      	strb	r2, [r3, #6]
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68da      	ldr	r2, [r3, #12]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	e01b      	b.n	80016ea <USART_Config+0xd2>
		}
		//Se selecciona ODD
		else{
			//Ponemos 0b1 en la posicion 9 del registo CR1 para escoger Even
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_PS);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68da      	ldr	r2, [r3, #12]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016c0:	60da      	str	r2, [r3, #12]

			// Además, se seleccionan 9 bits.
			ptrUsartHandler -> USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	719a      	strb	r2, [r3, #6]
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	e007      	b.n	80016ea <USART_Config+0xd2>
		}
	}
	//No deseamos activar el parity-check
	else{
		//Ponemos 0b0 en la posicion 10 del registro CR1 para desactivar el Parity
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_PCE);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68da      	ldr	r2, [r3, #12]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016e8:	60da      	str	r2, [r3, #12]

	// 2.3 Configuramos el tamaño del dato:

	//Verificamos si va a ser de 8 o 9 bits

	if(ptrUsartHandler -> USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	799b      	ldrb	r3, [r3, #6]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d108      	bne.n	8001704 <USART_Config+0xec>
		//Ponemos 0b0 en la posicion 12 del registro CR1 para escoger 8 bits
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_M);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	e007      	b.n	8001714 <USART_Config+0xfc>
	}else{
		//Ponemos 0b1 en la posicion 12 del registro CR1 para escoger 9 bits
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68da      	ldr	r2, [r3, #12]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001712:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)

	switch(ptrUsartHandler -> USART_Config.USART_stopbits){
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7a1b      	ldrb	r3, [r3, #8]
 8001718:	2b03      	cmp	r3, #3
 800171a:	d847      	bhi.n	80017ac <USART_Config+0x194>
 800171c:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <USART_Config+0x10c>)
 800171e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001722:	bf00      	nop
 8001724:	08001735 	.word	0x08001735
 8001728:	08001747 	.word	0x08001747
 800172c:	08001769 	.word	0x08001769
 8001730:	0800178b 	.word	0x0800178b
	case USART_STOPBIT_1: {
		//Cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691a      	ldr	r2, [r3, #16]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001742:	611a      	str	r2, [r3, #16]
		break;
 8001744:	e03b      	b.n	80017be <USART_Config+0x1a6>
	}
	case USART_STOPBIT_0_5:{
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	691a      	ldr	r2, [r3, #16]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001754:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b01 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP_0);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	691a      	ldr	r2, [r3, #16]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001764:	611a      	str	r2, [r3, #16]
		break;
 8001766:	e02a      	b.n	80017be <USART_Config+0x1a6>
	}
	case USART_STOPBIT_2:{
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	691a      	ldr	r2, [r3, #16]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001776:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b10 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP_1);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	691a      	ldr	r2, [r3, #16]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001786:	611a      	str	r2, [r3, #16]
		break;
 8001788:	e019      	b.n	80017be <USART_Config+0x1a6>
	}
	case USART_STOPBIT_1_5: {
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	691a      	ldr	r2, [r3, #16]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001798:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b11 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	691a      	ldr	r2, [r3, #16]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80017a8:	611a      	str	r2, [r3, #16]
		break;
 80017aa:	e008      	b.n	80017be <USART_Config+0x1a6>
	}
	default:{
		//Cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	691a      	ldr	r2, [r3, #16]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80017ba:	611a      	str	r2, [r3, #16]
		break;
 80017bc:	bf00      	nop
	}
	}

	// 2.4 Configuración del Baudrate (SFR USART_BRR)
	// Ver tabla de valores (Tabla 75), Frec = 16MHz, overr = 0;
	if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	795b      	ldrb	r3, [r3, #5]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d105      	bne.n	80017d2 <USART_Config+0x1ba>
		// El valor a cargar es 104.1875 -> Mantiza = 104, fraction = 0.1875
		// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
		// Valor a cargar 0x683
		// Configurando el Baudrate generator para una velocidad de 9600bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0683;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f240 6283 	movw	r2, #1667	; 0x683
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	e011      	b.n	80017f6 <USART_Config+0x1de>
	}

	else if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_19200){
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	795b      	ldrb	r3, [r3, #5]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d105      	bne.n	80017e6 <USART_Config+0x1ce>
		// El valor a cargar es 52.0625 -> Mantiza = 52, fraction = 0.0625
		// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
		// Valor a cargar 0x0341
		// Configurando el Baudrate generator para una velocidad de 19200bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0341;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f240 3241 	movw	r2, #833	; 0x341
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	e007      	b.n	80017f6 <USART_Config+0x1de>
	}

	else if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_115200){	//**************************************DUDAAAAAA
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	795b      	ldrb	r3, [r3, #5]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d103      	bne.n	80017f6 <USART_Config+0x1de>
		// El valor a cargar es 8.6875 -> Mantiza = 8, fraction = 0.6875
		// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11
		// Valor a cargar 0x0081
		// Configurando el Baudrate generator para una velocidad de 115200bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x08B;//0x0081;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	228b      	movs	r2, #139	; 0x8b
 80017f4:	609a      	str	r2, [r3, #8]
	}

	// 2.5 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler -> USART_Config.USART_mode){
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	791b      	ldrb	r3, [r3, #4]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d847      	bhi.n	800188e <USART_Config+0x276>
 80017fe:	a201      	add	r2, pc, #4	; (adr r2, 8001804 <USART_Config+0x1ec>)
 8001800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001804:	08001815 	.word	0x08001815
 8001808:	08001827 	.word	0x08001827
 800180c:	08001839 	.word	0x08001839
 8001810:	0800186d 	.word	0x0800186d
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		//Cargamos el valor 0b1 en el bit TE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TE);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68da      	ldr	r2, [r3, #12]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 0208 	orr.w	r2, r2, #8
 8001822:	60da      	str	r2, [r3, #12]
		break;
 8001824:	e044      	b.n	80018b0 <USART_Config+0x298>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		//Cargamos el valor 0b1 en el bit RE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RE);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f042 0204 	orr.w	r2, r2, #4
 8001834:	60da      	str	r2, [r3, #12]
		break;
 8001836:	e03b      	b.n	80018b0 <USART_Config+0x298>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmisión como recepción
		//Cargamos el valor 0b1 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TE);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0208 	orr.w	r2, r2, #8
 8001846:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RE);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0204 	orr.w	r2, r2, #4
 8001856:	60da      	str	r2, [r3, #12]
		break;
 8001858:	e02a      	b.n	80018b0 <USART_Config+0x298>
 800185a:	bf00      	nop
 800185c:	40011000 	.word	0x40011000
 8001860:	40023800 	.word	0x40023800
 8001864:	40004400 	.word	0x40004400
 8001868:	40011400 	.word	0x40011400
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		//Cargamos el valor 0b0 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TE);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0208 	bic.w	r2, r2, #8
 800187a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RE);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 0204 	bic.w	r2, r2, #4
 800188a:	60da      	str	r2, [r3, #12]
		break;
 800188c:	e010      	b.n	80018b0 <USART_Config+0x298>
	}
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		//Cargamos el valor 0b0 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TE);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 0208 	bic.w	r2, r2, #8
 800189c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RE);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0204 	bic.w	r2, r2, #4
 80018ac:	60da      	str	r2, [r3, #12]
		break;
 80018ae:	bf00      	nop
	}
	}

	// 2.6 Activamos el modulo serial.

	if(ptrUsartHandler -> USART_Config.USART_mode != USART_MODE_DISABLE){
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	791b      	ldrb	r3, [r3, #4]
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d007      	beq.n	80018c8 <USART_Config+0x2b0>
		//Cargamos el valor de 0b1 en el bit UE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_UE);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018c6:	60da      	str	r2, [r3, #12]
	}

	// 3. Activamos la interrupción para el USART

	switch(ptrUsartHandler -> USART_Config.USART_interrupt){
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7a5b      	ldrb	r3, [r3, #9]
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d84f      	bhi.n	8001970 <USART_Config+0x358>
 80018d0:	a201      	add	r2, pc, #4	; (adr r2, 80018d8 <USART_Config+0x2c0>)
 80018d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d6:	bf00      	nop
 80018d8:	080018e9 	.word	0x080018e9
 80018dc:	0800190b 	.word	0x0800190b
 80018e0:	0800192d 	.word	0x0800192d
 80018e4:	0800194f 	.word	0x0800194f
	// Analizamos los
	case USART_INTERRUPT_RX_ENABLE:
	{
		// Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RXNEIE);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0220 	orr.w	r2, r2, #32
 80018f6:	60da      	str	r2, [r3, #12]
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001906:	60da      	str	r2, [r3, #12]
		break;
 8001908:	e043      	b.n	8001992 <USART_Config+0x37a>
	}
	case USART_INTERRUPT_TX_ENABLE:
	{
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001918:	60da      	str	r2, [r3, #12]
		// NO Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RXNEIE);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 0220 	bic.w	r2, r2, #32
 8001928:	60da      	str	r2, [r3, #12]
		break;
 800192a:	e032      	b.n	8001992 <USART_Config+0x37a>

	}
	case USART_INTERRUPT_RXTX_ENABLE:
	{
		// Activamos las dos interrupciones tanto del RX como del TX
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TXEIE);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800193a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800194a:	60da      	str	r2, [r3, #12]
		break;
 800194c:	e021      	b.n	8001992 <USART_Config+0x37a>
	}
	case USART_INTERRUPT_RXTX_DISABLE:
	{
		// Activamos las dos interrupciones tanto del RX como del TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800195c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800196c:	60da      	str	r2, [r3, #12]
		break;
 800196e:	e010      	b.n	8001992 <USART_Config+0x37a>
	}

	default:
	{
		// NO Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RXNEIE);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0220 	bic.w	r2, r2, #32
 800197e:	60da      	str	r2, [r3, #12]
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800198e:	60da      	str	r2, [r3, #12]
		break;
 8001990:	bf00      	nop
	}
	}

	// 4. Activamos la señal de la interrupción en el NVIC

	if((ptrUsartHandler -> USART_Config.USART_interrupt == USART_INTERRUPT_RX_ENABLE) | (ptrUsartHandler -> USART_Config.USART_interrupt == USART_INTERRUPT_TX_ENABLE))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7a5b      	ldrb	r3, [r3, #9]
 8001996:	2b00      	cmp	r3, #0
 8001998:	bf0c      	ite	eq
 800199a:	2301      	moveq	r3, #1
 800199c:	2300      	movne	r3, #0
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	7a5b      	ldrb	r3, [r3, #9]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	bf0c      	ite	eq
 80019a8:	2301      	moveq	r3, #1
 80019aa:	2300      	movne	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	4313      	orrs	r3, r2
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d019      	beq.n	80019ea <USART_Config+0x3d2>
	{

		if(ptrUsartHandler -> ptrUSARTx == USART1){
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a0f      	ldr	r2, [pc, #60]	; (80019f8 <USART_Config+0x3e0>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d103      	bne.n	80019c8 <USART_Config+0x3b0>
			// Activamos la IRQ del USART1
			__NVIC_EnableIRQ(USART1_IRQn);
 80019c0:	2025      	movs	r0, #37	; 0x25
 80019c2:	f7ff fe0b 	bl	80015dc <__NVIC_EnableIRQ>
 80019c6:	e010      	b.n	80019ea <USART_Config+0x3d2>

		}else if(ptrUsartHandler -> ptrUSARTx == USART2){
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <USART_Config+0x3e4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d103      	bne.n	80019da <USART_Config+0x3c2>
			// Activamos la IRQ del USART2
			__NVIC_EnableIRQ(USART2_IRQn);
 80019d2:	2026      	movs	r0, #38	; 0x26
 80019d4:	f7ff fe02 	bl	80015dc <__NVIC_EnableIRQ>
 80019d8:	e007      	b.n	80019ea <USART_Config+0x3d2>

		}else if(ptrUsartHandler -> ptrUSARTx == USART6){
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a08      	ldr	r2, [pc, #32]	; (8001a00 <USART_Config+0x3e8>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d102      	bne.n	80019ea <USART_Config+0x3d2>
			// Activamos la IRQ del USART6
			__NVIC_EnableIRQ(USART6_IRQn);
 80019e4:	2047      	movs	r0, #71	; 0x47
 80019e6:	f7ff fdf9 	bl	80015dc <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80019ea:	b662      	cpsie	i
}
 80019ec:	bf00      	nop
		}

	// 5. Activamos de nuevo todas las interrupciones

	__enable_irq();
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40011000 	.word	0x40011000
 80019fc:	40004400 	.word	0x40004400
 8001a00:	40011400 	.word	0x40011400

08001a04 <USART1_Callback>:

//**********//  CallBacks //**********//

// Callback USART1
__attribute__((weak)) void USART1_Callback(void){
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
	__NOP();
 8001a08:	bf00      	nop
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <USART6_Callback>:
__attribute__((weak)) void USART2_Callback(void){
	__NOP();
}

// Callback USART6
__attribute__((weak)) void USART6_Callback(void){
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
	__NOP();
 8001a18:	bf00      	nop
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <USART1_IRQHandler>:

// Hay que hacer dos cosas: 1) Atender la interrupción. 2) Llamamos al Callback
/* Rutina de atención a la interrupción del USART */

void USART1_IRQHandler(void){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0

	USART1 -> SR &= ~(USART_SR_RXNE);		// Bajamos la bandera manualmente
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <USART1_IRQHandler+0x24>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a06      	ldr	r2, [pc, #24]	; (8001a48 <USART1_IRQHandler+0x24>)
 8001a2e:	f023 0320 	bic.w	r3, r3, #32
 8001a32:	6013      	str	r3, [r2, #0]

	data = (USART1 -> DR);
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <USART1_IRQHandler+0x24>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <USART1_IRQHandler+0x28>)
 8001a3c:	701a      	strb	r2, [r3, #0]

	USART1_Callback();
 8001a3e:	f7ff ffe1 	bl	8001a04 <USART1_Callback>
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40011000 	.word	0x40011000
 8001a4c:	20000308 	.word	0x20000308

08001a50 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
	USART2 -> SR &= ~(USART_SR_RXNE);		// Desactivamos la bandera manualmente para el RX
 8001a54:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <USART2_IRQHandler+0x24>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a06      	ldr	r2, [pc, #24]	; (8001a74 <USART2_IRQHandler+0x24>)
 8001a5a:	f023 0320 	bic.w	r3, r3, #32
 8001a5e:	6013      	str	r3, [r2, #0]

	data = (USART2 -> DR);
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <USART2_IRQHandler+0x24>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <USART2_IRQHandler+0x28>)
 8001a68:	701a      	strb	r2, [r3, #0]

	USART2_Callback();
 8001a6a:	f7ff fa57 	bl	8000f1c <USART2_Callback>

	//USART2 -> SR &= ~(USART_SR_TXE);		// Desactivamos la bandera para el TX
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40004400 	.word	0x40004400
 8001a78:	20000308 	.word	0x20000308

08001a7c <USART6_IRQHandler>:

void USART6_IRQHandler(void){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
	USART6 -> SR &= ~(USART_SR_RXNE);
 8001a80:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <USART6_IRQHandler+0x24>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a06      	ldr	r2, [pc, #24]	; (8001aa0 <USART6_IRQHandler+0x24>)
 8001a86:	f023 0320 	bic.w	r3, r3, #32
 8001a8a:	6013      	str	r3, [r2, #0]

	data = (USART6 -> DR);
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <USART6_IRQHandler+0x24>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <USART6_IRQHandler+0x28>)
 8001a94:	701a      	strb	r2, [r3, #0]

	USART6_Callback();
 8001a96:	f7ff ffbd 	bl	8001a14 <USART6_Callback>
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40011400 	.word	0x40011400
 8001aa4:	20000308 	.word	0x20000308

08001aa8 <returnData>:
	dataToRead = ((char) (ptrUsartHandler -> ptrUSARTx -> DR));
	return dataToRead;

}

uint8_t returnData(void){
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
	return data;				// Devolvemos el valor
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <returnData+0x14>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000308 	.word	0x20000308

08001ac0 <writeChar>:

//**********// Función para escribir un solo char //**********//

int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend){
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
	while(!(ptrUsartHandler -> ptrUSARTx -> SR & USART_SR_TXE)){
 8001aca:	e000      	b.n	8001ace <writeChar+0xe>
		__NOP();
 8001acc:	bf00      	nop
	while(!(ptrUsartHandler -> ptrUSARTx -> SR & USART_SR_TXE)){
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0f7      	beq.n	8001acc <writeChar+0xc>
	// Permitimos la bandera del TX para el USART2
	//ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TXEIE);
	//USART2 -> SR |= (USART_SR_TXE);

	//Cargamos el valor de dataToSend en el USER DATA Register
	ptrUsartHandler -> ptrUSARTx -> DR = (dataToSend);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	605a      	str	r2, [r3, #4]

	//ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
	//USART2 -> SR &= ~(USART_SR_TXE);		// Desactivamos la bandera para el TX
	return dataToSend;
 8001ae4:	683b      	ldr	r3, [r7, #0]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <writeMsg>:

/* Función para escribir un mensaje */

void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	6039      	str	r1, [r7, #0]
	while(*msgToSend != '\0'){
 8001afc:	e008      	b.n	8001b10 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	4619      	mov	r1, r3
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ffdb 	bl	8001ac0 <writeChar>
		msgToSend++;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f2      	bne.n	8001afe <writeMsg+0xc>
	}
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <__errno>:
 8001b24:	4b01      	ldr	r3, [pc, #4]	; (8001b2c <__errno+0x8>)
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000044 	.word	0x20000044

08001b30 <__libc_init_array>:
 8001b30:	b570      	push	{r4, r5, r6, lr}
 8001b32:	4d0d      	ldr	r5, [pc, #52]	; (8001b68 <__libc_init_array+0x38>)
 8001b34:	4c0d      	ldr	r4, [pc, #52]	; (8001b6c <__libc_init_array+0x3c>)
 8001b36:	1b64      	subs	r4, r4, r5
 8001b38:	10a4      	asrs	r4, r4, #2
 8001b3a:	2600      	movs	r6, #0
 8001b3c:	42a6      	cmp	r6, r4
 8001b3e:	d109      	bne.n	8001b54 <__libc_init_array+0x24>
 8001b40:	4d0b      	ldr	r5, [pc, #44]	; (8001b70 <__libc_init_array+0x40>)
 8001b42:	4c0c      	ldr	r4, [pc, #48]	; (8001b74 <__libc_init_array+0x44>)
 8001b44:	f002 ff04 	bl	8004950 <_init>
 8001b48:	1b64      	subs	r4, r4, r5
 8001b4a:	10a4      	asrs	r4, r4, #2
 8001b4c:	2600      	movs	r6, #0
 8001b4e:	42a6      	cmp	r6, r4
 8001b50:	d105      	bne.n	8001b5e <__libc_init_array+0x2e>
 8001b52:	bd70      	pop	{r4, r5, r6, pc}
 8001b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b58:	4798      	blx	r3
 8001b5a:	3601      	adds	r6, #1
 8001b5c:	e7ee      	b.n	8001b3c <__libc_init_array+0xc>
 8001b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b62:	4798      	blx	r3
 8001b64:	3601      	adds	r6, #1
 8001b66:	e7f2      	b.n	8001b4e <__libc_init_array+0x1e>
 8001b68:	08004d54 	.word	0x08004d54
 8001b6c:	08004d54 	.word	0x08004d54
 8001b70:	08004d54 	.word	0x08004d54
 8001b74:	08004d58 	.word	0x08004d58

08001b78 <memset>:
 8001b78:	4402      	add	r2, r0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d100      	bne.n	8001b82 <memset+0xa>
 8001b80:	4770      	bx	lr
 8001b82:	f803 1b01 	strb.w	r1, [r3], #1
 8001b86:	e7f9      	b.n	8001b7c <memset+0x4>

08001b88 <__cvt>:
 8001b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b8c:	ec55 4b10 	vmov	r4, r5, d0
 8001b90:	2d00      	cmp	r5, #0
 8001b92:	460e      	mov	r6, r1
 8001b94:	4619      	mov	r1, r3
 8001b96:	462b      	mov	r3, r5
 8001b98:	bfbb      	ittet	lt
 8001b9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8001b9e:	461d      	movlt	r5, r3
 8001ba0:	2300      	movge	r3, #0
 8001ba2:	232d      	movlt	r3, #45	; 0x2d
 8001ba4:	700b      	strb	r3, [r1, #0]
 8001ba6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001ba8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8001bac:	4691      	mov	r9, r2
 8001bae:	f023 0820 	bic.w	r8, r3, #32
 8001bb2:	bfbc      	itt	lt
 8001bb4:	4622      	movlt	r2, r4
 8001bb6:	4614      	movlt	r4, r2
 8001bb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8001bbc:	d005      	beq.n	8001bca <__cvt+0x42>
 8001bbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8001bc2:	d100      	bne.n	8001bc6 <__cvt+0x3e>
 8001bc4:	3601      	adds	r6, #1
 8001bc6:	2102      	movs	r1, #2
 8001bc8:	e000      	b.n	8001bcc <__cvt+0x44>
 8001bca:	2103      	movs	r1, #3
 8001bcc:	ab03      	add	r3, sp, #12
 8001bce:	9301      	str	r3, [sp, #4]
 8001bd0:	ab02      	add	r3, sp, #8
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	ec45 4b10 	vmov	d0, r4, r5
 8001bd8:	4653      	mov	r3, sl
 8001bda:	4632      	mov	r2, r6
 8001bdc:	f000 fcec 	bl	80025b8 <_dtoa_r>
 8001be0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8001be4:	4607      	mov	r7, r0
 8001be6:	d102      	bne.n	8001bee <__cvt+0x66>
 8001be8:	f019 0f01 	tst.w	r9, #1
 8001bec:	d022      	beq.n	8001c34 <__cvt+0xac>
 8001bee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8001bf2:	eb07 0906 	add.w	r9, r7, r6
 8001bf6:	d110      	bne.n	8001c1a <__cvt+0x92>
 8001bf8:	783b      	ldrb	r3, [r7, #0]
 8001bfa:	2b30      	cmp	r3, #48	; 0x30
 8001bfc:	d10a      	bne.n	8001c14 <__cvt+0x8c>
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2300      	movs	r3, #0
 8001c02:	4620      	mov	r0, r4
 8001c04:	4629      	mov	r1, r5
 8001c06:	f7fe ff67 	bl	8000ad8 <__aeabi_dcmpeq>
 8001c0a:	b918      	cbnz	r0, 8001c14 <__cvt+0x8c>
 8001c0c:	f1c6 0601 	rsb	r6, r6, #1
 8001c10:	f8ca 6000 	str.w	r6, [sl]
 8001c14:	f8da 3000 	ldr.w	r3, [sl]
 8001c18:	4499      	add	r9, r3
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	4620      	mov	r0, r4
 8001c20:	4629      	mov	r1, r5
 8001c22:	f7fe ff59 	bl	8000ad8 <__aeabi_dcmpeq>
 8001c26:	b108      	cbz	r0, 8001c2c <__cvt+0xa4>
 8001c28:	f8cd 900c 	str.w	r9, [sp, #12]
 8001c2c:	2230      	movs	r2, #48	; 0x30
 8001c2e:	9b03      	ldr	r3, [sp, #12]
 8001c30:	454b      	cmp	r3, r9
 8001c32:	d307      	bcc.n	8001c44 <__cvt+0xbc>
 8001c34:	9b03      	ldr	r3, [sp, #12]
 8001c36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001c38:	1bdb      	subs	r3, r3, r7
 8001c3a:	4638      	mov	r0, r7
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	b004      	add	sp, #16
 8001c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c44:	1c59      	adds	r1, r3, #1
 8001c46:	9103      	str	r1, [sp, #12]
 8001c48:	701a      	strb	r2, [r3, #0]
 8001c4a:	e7f0      	b.n	8001c2e <__cvt+0xa6>

08001c4c <__exponent>:
 8001c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2900      	cmp	r1, #0
 8001c52:	bfb8      	it	lt
 8001c54:	4249      	neglt	r1, r1
 8001c56:	f803 2b02 	strb.w	r2, [r3], #2
 8001c5a:	bfb4      	ite	lt
 8001c5c:	222d      	movlt	r2, #45	; 0x2d
 8001c5e:	222b      	movge	r2, #43	; 0x2b
 8001c60:	2909      	cmp	r1, #9
 8001c62:	7042      	strb	r2, [r0, #1]
 8001c64:	dd2a      	ble.n	8001cbc <__exponent+0x70>
 8001c66:	f10d 0407 	add.w	r4, sp, #7
 8001c6a:	46a4      	mov	ip, r4
 8001c6c:	270a      	movs	r7, #10
 8001c6e:	46a6      	mov	lr, r4
 8001c70:	460a      	mov	r2, r1
 8001c72:	fb91 f6f7 	sdiv	r6, r1, r7
 8001c76:	fb07 1516 	mls	r5, r7, r6, r1
 8001c7a:	3530      	adds	r5, #48	; 0x30
 8001c7c:	2a63      	cmp	r2, #99	; 0x63
 8001c7e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8001c82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8001c86:	4631      	mov	r1, r6
 8001c88:	dcf1      	bgt.n	8001c6e <__exponent+0x22>
 8001c8a:	3130      	adds	r1, #48	; 0x30
 8001c8c:	f1ae 0502 	sub.w	r5, lr, #2
 8001c90:	f804 1c01 	strb.w	r1, [r4, #-1]
 8001c94:	1c44      	adds	r4, r0, #1
 8001c96:	4629      	mov	r1, r5
 8001c98:	4561      	cmp	r1, ip
 8001c9a:	d30a      	bcc.n	8001cb2 <__exponent+0x66>
 8001c9c:	f10d 0209 	add.w	r2, sp, #9
 8001ca0:	eba2 020e 	sub.w	r2, r2, lr
 8001ca4:	4565      	cmp	r5, ip
 8001ca6:	bf88      	it	hi
 8001ca8:	2200      	movhi	r2, #0
 8001caa:	4413      	add	r3, r2
 8001cac:	1a18      	subs	r0, r3, r0
 8001cae:	b003      	add	sp, #12
 8001cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001cb6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8001cba:	e7ed      	b.n	8001c98 <__exponent+0x4c>
 8001cbc:	2330      	movs	r3, #48	; 0x30
 8001cbe:	3130      	adds	r1, #48	; 0x30
 8001cc0:	7083      	strb	r3, [r0, #2]
 8001cc2:	70c1      	strb	r1, [r0, #3]
 8001cc4:	1d03      	adds	r3, r0, #4
 8001cc6:	e7f1      	b.n	8001cac <__exponent+0x60>

08001cc8 <_printf_float>:
 8001cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ccc:	ed2d 8b02 	vpush	{d8}
 8001cd0:	b08d      	sub	sp, #52	; 0x34
 8001cd2:	460c      	mov	r4, r1
 8001cd4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8001cd8:	4616      	mov	r6, r2
 8001cda:	461f      	mov	r7, r3
 8001cdc:	4605      	mov	r5, r0
 8001cde:	f001 fa59 	bl	8003194 <_localeconv_r>
 8001ce2:	f8d0 a000 	ldr.w	sl, [r0]
 8001ce6:	4650      	mov	r0, sl
 8001ce8:	f7fe fa7a 	bl	80001e0 <strlen>
 8001cec:	2300      	movs	r3, #0
 8001cee:	930a      	str	r3, [sp, #40]	; 0x28
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	9305      	str	r3, [sp, #20]
 8001cf4:	f8d8 3000 	ldr.w	r3, [r8]
 8001cf8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8001cfc:	3307      	adds	r3, #7
 8001cfe:	f023 0307 	bic.w	r3, r3, #7
 8001d02:	f103 0208 	add.w	r2, r3, #8
 8001d06:	f8c8 2000 	str.w	r2, [r8]
 8001d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8001d12:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8001d16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8001d1a:	9307      	str	r3, [sp, #28]
 8001d1c:	f8cd 8018 	str.w	r8, [sp, #24]
 8001d20:	ee08 0a10 	vmov	s16, r0
 8001d24:	4b9f      	ldr	r3, [pc, #636]	; (8001fa4 <_printf_float+0x2dc>)
 8001d26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001d2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d2e:	f7fe ff05 	bl	8000b3c <__aeabi_dcmpun>
 8001d32:	bb88      	cbnz	r0, 8001d98 <_printf_float+0xd0>
 8001d34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001d38:	4b9a      	ldr	r3, [pc, #616]	; (8001fa4 <_printf_float+0x2dc>)
 8001d3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d3e:	f7fe fedf 	bl	8000b00 <__aeabi_dcmple>
 8001d42:	bb48      	cbnz	r0, 8001d98 <_printf_float+0xd0>
 8001d44:	2200      	movs	r2, #0
 8001d46:	2300      	movs	r3, #0
 8001d48:	4640      	mov	r0, r8
 8001d4a:	4649      	mov	r1, r9
 8001d4c:	f7fe fece 	bl	8000aec <__aeabi_dcmplt>
 8001d50:	b110      	cbz	r0, 8001d58 <_printf_float+0x90>
 8001d52:	232d      	movs	r3, #45	; 0x2d
 8001d54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d58:	4b93      	ldr	r3, [pc, #588]	; (8001fa8 <_printf_float+0x2e0>)
 8001d5a:	4894      	ldr	r0, [pc, #592]	; (8001fac <_printf_float+0x2e4>)
 8001d5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8001d60:	bf94      	ite	ls
 8001d62:	4698      	movls	r8, r3
 8001d64:	4680      	movhi	r8, r0
 8001d66:	2303      	movs	r3, #3
 8001d68:	6123      	str	r3, [r4, #16]
 8001d6a:	9b05      	ldr	r3, [sp, #20]
 8001d6c:	f023 0204 	bic.w	r2, r3, #4
 8001d70:	6022      	str	r2, [r4, #0]
 8001d72:	f04f 0900 	mov.w	r9, #0
 8001d76:	9700      	str	r7, [sp, #0]
 8001d78:	4633      	mov	r3, r6
 8001d7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8001d7c:	4621      	mov	r1, r4
 8001d7e:	4628      	mov	r0, r5
 8001d80:	f000 f9d8 	bl	8002134 <_printf_common>
 8001d84:	3001      	adds	r0, #1
 8001d86:	f040 8090 	bne.w	8001eaa <_printf_float+0x1e2>
 8001d8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d8e:	b00d      	add	sp, #52	; 0x34
 8001d90:	ecbd 8b02 	vpop	{d8}
 8001d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d98:	4642      	mov	r2, r8
 8001d9a:	464b      	mov	r3, r9
 8001d9c:	4640      	mov	r0, r8
 8001d9e:	4649      	mov	r1, r9
 8001da0:	f7fe fecc 	bl	8000b3c <__aeabi_dcmpun>
 8001da4:	b140      	cbz	r0, 8001db8 <_printf_float+0xf0>
 8001da6:	464b      	mov	r3, r9
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	bfbc      	itt	lt
 8001dac:	232d      	movlt	r3, #45	; 0x2d
 8001dae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8001db2:	487f      	ldr	r0, [pc, #508]	; (8001fb0 <_printf_float+0x2e8>)
 8001db4:	4b7f      	ldr	r3, [pc, #508]	; (8001fb4 <_printf_float+0x2ec>)
 8001db6:	e7d1      	b.n	8001d5c <_printf_float+0x94>
 8001db8:	6863      	ldr	r3, [r4, #4]
 8001dba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8001dbe:	9206      	str	r2, [sp, #24]
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	d13f      	bne.n	8001e44 <_printf_float+0x17c>
 8001dc4:	2306      	movs	r3, #6
 8001dc6:	6063      	str	r3, [r4, #4]
 8001dc8:	9b05      	ldr	r3, [sp, #20]
 8001dca:	6861      	ldr	r1, [r4, #4]
 8001dcc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	9303      	str	r3, [sp, #12]
 8001dd4:	ab0a      	add	r3, sp, #40	; 0x28
 8001dd6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8001dda:	ab09      	add	r3, sp, #36	; 0x24
 8001ddc:	ec49 8b10 	vmov	d0, r8, r9
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	6022      	str	r2, [r4, #0]
 8001de4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8001de8:	4628      	mov	r0, r5
 8001dea:	f7ff fecd 	bl	8001b88 <__cvt>
 8001dee:	9b06      	ldr	r3, [sp, #24]
 8001df0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001df2:	2b47      	cmp	r3, #71	; 0x47
 8001df4:	4680      	mov	r8, r0
 8001df6:	d108      	bne.n	8001e0a <_printf_float+0x142>
 8001df8:	1cc8      	adds	r0, r1, #3
 8001dfa:	db02      	blt.n	8001e02 <_printf_float+0x13a>
 8001dfc:	6863      	ldr	r3, [r4, #4]
 8001dfe:	4299      	cmp	r1, r3
 8001e00:	dd41      	ble.n	8001e86 <_printf_float+0x1be>
 8001e02:	f1ab 0b02 	sub.w	fp, fp, #2
 8001e06:	fa5f fb8b 	uxtb.w	fp, fp
 8001e0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8001e0e:	d820      	bhi.n	8001e52 <_printf_float+0x18a>
 8001e10:	3901      	subs	r1, #1
 8001e12:	465a      	mov	r2, fp
 8001e14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8001e18:	9109      	str	r1, [sp, #36]	; 0x24
 8001e1a:	f7ff ff17 	bl	8001c4c <__exponent>
 8001e1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001e20:	1813      	adds	r3, r2, r0
 8001e22:	2a01      	cmp	r2, #1
 8001e24:	4681      	mov	r9, r0
 8001e26:	6123      	str	r3, [r4, #16]
 8001e28:	dc02      	bgt.n	8001e30 <_printf_float+0x168>
 8001e2a:	6822      	ldr	r2, [r4, #0]
 8001e2c:	07d2      	lsls	r2, r2, #31
 8001e2e:	d501      	bpl.n	8001e34 <_printf_float+0x16c>
 8001e30:	3301      	adds	r3, #1
 8001e32:	6123      	str	r3, [r4, #16]
 8001e34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d09c      	beq.n	8001d76 <_printf_float+0xae>
 8001e3c:	232d      	movs	r3, #45	; 0x2d
 8001e3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e42:	e798      	b.n	8001d76 <_printf_float+0xae>
 8001e44:	9a06      	ldr	r2, [sp, #24]
 8001e46:	2a47      	cmp	r2, #71	; 0x47
 8001e48:	d1be      	bne.n	8001dc8 <_printf_float+0x100>
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1bc      	bne.n	8001dc8 <_printf_float+0x100>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e7b9      	b.n	8001dc6 <_printf_float+0xfe>
 8001e52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8001e56:	d118      	bne.n	8001e8a <_printf_float+0x1c2>
 8001e58:	2900      	cmp	r1, #0
 8001e5a:	6863      	ldr	r3, [r4, #4]
 8001e5c:	dd0b      	ble.n	8001e76 <_printf_float+0x1ae>
 8001e5e:	6121      	str	r1, [r4, #16]
 8001e60:	b913      	cbnz	r3, 8001e68 <_printf_float+0x1a0>
 8001e62:	6822      	ldr	r2, [r4, #0]
 8001e64:	07d0      	lsls	r0, r2, #31
 8001e66:	d502      	bpl.n	8001e6e <_printf_float+0x1a6>
 8001e68:	3301      	adds	r3, #1
 8001e6a:	440b      	add	r3, r1
 8001e6c:	6123      	str	r3, [r4, #16]
 8001e6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8001e70:	f04f 0900 	mov.w	r9, #0
 8001e74:	e7de      	b.n	8001e34 <_printf_float+0x16c>
 8001e76:	b913      	cbnz	r3, 8001e7e <_printf_float+0x1b6>
 8001e78:	6822      	ldr	r2, [r4, #0]
 8001e7a:	07d2      	lsls	r2, r2, #31
 8001e7c:	d501      	bpl.n	8001e82 <_printf_float+0x1ba>
 8001e7e:	3302      	adds	r3, #2
 8001e80:	e7f4      	b.n	8001e6c <_printf_float+0x1a4>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e7f2      	b.n	8001e6c <_printf_float+0x1a4>
 8001e86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8001e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e8c:	4299      	cmp	r1, r3
 8001e8e:	db05      	blt.n	8001e9c <_printf_float+0x1d4>
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	6121      	str	r1, [r4, #16]
 8001e94:	07d8      	lsls	r0, r3, #31
 8001e96:	d5ea      	bpl.n	8001e6e <_printf_float+0x1a6>
 8001e98:	1c4b      	adds	r3, r1, #1
 8001e9a:	e7e7      	b.n	8001e6c <_printf_float+0x1a4>
 8001e9c:	2900      	cmp	r1, #0
 8001e9e:	bfd4      	ite	le
 8001ea0:	f1c1 0202 	rsble	r2, r1, #2
 8001ea4:	2201      	movgt	r2, #1
 8001ea6:	4413      	add	r3, r2
 8001ea8:	e7e0      	b.n	8001e6c <_printf_float+0x1a4>
 8001eaa:	6823      	ldr	r3, [r4, #0]
 8001eac:	055a      	lsls	r2, r3, #21
 8001eae:	d407      	bmi.n	8001ec0 <_printf_float+0x1f8>
 8001eb0:	6923      	ldr	r3, [r4, #16]
 8001eb2:	4642      	mov	r2, r8
 8001eb4:	4631      	mov	r1, r6
 8001eb6:	4628      	mov	r0, r5
 8001eb8:	47b8      	blx	r7
 8001eba:	3001      	adds	r0, #1
 8001ebc:	d12c      	bne.n	8001f18 <_printf_float+0x250>
 8001ebe:	e764      	b.n	8001d8a <_printf_float+0xc2>
 8001ec0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8001ec4:	f240 80e0 	bls.w	8002088 <_printf_float+0x3c0>
 8001ec8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f7fe fe02 	bl	8000ad8 <__aeabi_dcmpeq>
 8001ed4:	2800      	cmp	r0, #0
 8001ed6:	d034      	beq.n	8001f42 <_printf_float+0x27a>
 8001ed8:	4a37      	ldr	r2, [pc, #220]	; (8001fb8 <_printf_float+0x2f0>)
 8001eda:	2301      	movs	r3, #1
 8001edc:	4631      	mov	r1, r6
 8001ede:	4628      	mov	r0, r5
 8001ee0:	47b8      	blx	r7
 8001ee2:	3001      	adds	r0, #1
 8001ee4:	f43f af51 	beq.w	8001d8a <_printf_float+0xc2>
 8001ee8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001eec:	429a      	cmp	r2, r3
 8001eee:	db02      	blt.n	8001ef6 <_printf_float+0x22e>
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	07d8      	lsls	r0, r3, #31
 8001ef4:	d510      	bpl.n	8001f18 <_printf_float+0x250>
 8001ef6:	ee18 3a10 	vmov	r3, s16
 8001efa:	4652      	mov	r2, sl
 8001efc:	4631      	mov	r1, r6
 8001efe:	4628      	mov	r0, r5
 8001f00:	47b8      	blx	r7
 8001f02:	3001      	adds	r0, #1
 8001f04:	f43f af41 	beq.w	8001d8a <_printf_float+0xc2>
 8001f08:	f04f 0800 	mov.w	r8, #0
 8001f0c:	f104 091a 	add.w	r9, r4, #26
 8001f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001f12:	3b01      	subs	r3, #1
 8001f14:	4543      	cmp	r3, r8
 8001f16:	dc09      	bgt.n	8001f2c <_printf_float+0x264>
 8001f18:	6823      	ldr	r3, [r4, #0]
 8001f1a:	079b      	lsls	r3, r3, #30
 8001f1c:	f100 8105 	bmi.w	800212a <_printf_float+0x462>
 8001f20:	68e0      	ldr	r0, [r4, #12]
 8001f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001f24:	4298      	cmp	r0, r3
 8001f26:	bfb8      	it	lt
 8001f28:	4618      	movlt	r0, r3
 8001f2a:	e730      	b.n	8001d8e <_printf_float+0xc6>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	464a      	mov	r2, r9
 8001f30:	4631      	mov	r1, r6
 8001f32:	4628      	mov	r0, r5
 8001f34:	47b8      	blx	r7
 8001f36:	3001      	adds	r0, #1
 8001f38:	f43f af27 	beq.w	8001d8a <_printf_float+0xc2>
 8001f3c:	f108 0801 	add.w	r8, r8, #1
 8001f40:	e7e6      	b.n	8001f10 <_printf_float+0x248>
 8001f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	dc39      	bgt.n	8001fbc <_printf_float+0x2f4>
 8001f48:	4a1b      	ldr	r2, [pc, #108]	; (8001fb8 <_printf_float+0x2f0>)
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	4631      	mov	r1, r6
 8001f4e:	4628      	mov	r0, r5
 8001f50:	47b8      	blx	r7
 8001f52:	3001      	adds	r0, #1
 8001f54:	f43f af19 	beq.w	8001d8a <_printf_float+0xc2>
 8001f58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	d102      	bne.n	8001f66 <_printf_float+0x29e>
 8001f60:	6823      	ldr	r3, [r4, #0]
 8001f62:	07d9      	lsls	r1, r3, #31
 8001f64:	d5d8      	bpl.n	8001f18 <_printf_float+0x250>
 8001f66:	ee18 3a10 	vmov	r3, s16
 8001f6a:	4652      	mov	r2, sl
 8001f6c:	4631      	mov	r1, r6
 8001f6e:	4628      	mov	r0, r5
 8001f70:	47b8      	blx	r7
 8001f72:	3001      	adds	r0, #1
 8001f74:	f43f af09 	beq.w	8001d8a <_printf_float+0xc2>
 8001f78:	f04f 0900 	mov.w	r9, #0
 8001f7c:	f104 0a1a 	add.w	sl, r4, #26
 8001f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f82:	425b      	negs	r3, r3
 8001f84:	454b      	cmp	r3, r9
 8001f86:	dc01      	bgt.n	8001f8c <_printf_float+0x2c4>
 8001f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001f8a:	e792      	b.n	8001eb2 <_printf_float+0x1ea>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	4652      	mov	r2, sl
 8001f90:	4631      	mov	r1, r6
 8001f92:	4628      	mov	r0, r5
 8001f94:	47b8      	blx	r7
 8001f96:	3001      	adds	r0, #1
 8001f98:	f43f aef7 	beq.w	8001d8a <_printf_float+0xc2>
 8001f9c:	f109 0901 	add.w	r9, r9, #1
 8001fa0:	e7ee      	b.n	8001f80 <_printf_float+0x2b8>
 8001fa2:	bf00      	nop
 8001fa4:	7fefffff 	.word	0x7fefffff
 8001fa8:	08004980 	.word	0x08004980
 8001fac:	08004984 	.word	0x08004984
 8001fb0:	0800498c 	.word	0x0800498c
 8001fb4:	08004988 	.word	0x08004988
 8001fb8:	08004990 	.word	0x08004990
 8001fbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001fbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	bfa8      	it	ge
 8001fc4:	461a      	movge	r2, r3
 8001fc6:	2a00      	cmp	r2, #0
 8001fc8:	4691      	mov	r9, r2
 8001fca:	dc37      	bgt.n	800203c <_printf_float+0x374>
 8001fcc:	f04f 0b00 	mov.w	fp, #0
 8001fd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8001fd4:	f104 021a 	add.w	r2, r4, #26
 8001fd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001fda:	9305      	str	r3, [sp, #20]
 8001fdc:	eba3 0309 	sub.w	r3, r3, r9
 8001fe0:	455b      	cmp	r3, fp
 8001fe2:	dc33      	bgt.n	800204c <_printf_float+0x384>
 8001fe4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	db3b      	blt.n	8002064 <_printf_float+0x39c>
 8001fec:	6823      	ldr	r3, [r4, #0]
 8001fee:	07da      	lsls	r2, r3, #31
 8001ff0:	d438      	bmi.n	8002064 <_printf_float+0x39c>
 8001ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001ff4:	9a05      	ldr	r2, [sp, #20]
 8001ff6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001ff8:	1a9a      	subs	r2, r3, r2
 8001ffa:	eba3 0901 	sub.w	r9, r3, r1
 8001ffe:	4591      	cmp	r9, r2
 8002000:	bfa8      	it	ge
 8002002:	4691      	movge	r9, r2
 8002004:	f1b9 0f00 	cmp.w	r9, #0
 8002008:	dc35      	bgt.n	8002076 <_printf_float+0x3ae>
 800200a:	f04f 0800 	mov.w	r8, #0
 800200e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002012:	f104 0a1a 	add.w	sl, r4, #26
 8002016:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800201a:	1a9b      	subs	r3, r3, r2
 800201c:	eba3 0309 	sub.w	r3, r3, r9
 8002020:	4543      	cmp	r3, r8
 8002022:	f77f af79 	ble.w	8001f18 <_printf_float+0x250>
 8002026:	2301      	movs	r3, #1
 8002028:	4652      	mov	r2, sl
 800202a:	4631      	mov	r1, r6
 800202c:	4628      	mov	r0, r5
 800202e:	47b8      	blx	r7
 8002030:	3001      	adds	r0, #1
 8002032:	f43f aeaa 	beq.w	8001d8a <_printf_float+0xc2>
 8002036:	f108 0801 	add.w	r8, r8, #1
 800203a:	e7ec      	b.n	8002016 <_printf_float+0x34e>
 800203c:	4613      	mov	r3, r2
 800203e:	4631      	mov	r1, r6
 8002040:	4642      	mov	r2, r8
 8002042:	4628      	mov	r0, r5
 8002044:	47b8      	blx	r7
 8002046:	3001      	adds	r0, #1
 8002048:	d1c0      	bne.n	8001fcc <_printf_float+0x304>
 800204a:	e69e      	b.n	8001d8a <_printf_float+0xc2>
 800204c:	2301      	movs	r3, #1
 800204e:	4631      	mov	r1, r6
 8002050:	4628      	mov	r0, r5
 8002052:	9205      	str	r2, [sp, #20]
 8002054:	47b8      	blx	r7
 8002056:	3001      	adds	r0, #1
 8002058:	f43f ae97 	beq.w	8001d8a <_printf_float+0xc2>
 800205c:	9a05      	ldr	r2, [sp, #20]
 800205e:	f10b 0b01 	add.w	fp, fp, #1
 8002062:	e7b9      	b.n	8001fd8 <_printf_float+0x310>
 8002064:	ee18 3a10 	vmov	r3, s16
 8002068:	4652      	mov	r2, sl
 800206a:	4631      	mov	r1, r6
 800206c:	4628      	mov	r0, r5
 800206e:	47b8      	blx	r7
 8002070:	3001      	adds	r0, #1
 8002072:	d1be      	bne.n	8001ff2 <_printf_float+0x32a>
 8002074:	e689      	b.n	8001d8a <_printf_float+0xc2>
 8002076:	9a05      	ldr	r2, [sp, #20]
 8002078:	464b      	mov	r3, r9
 800207a:	4442      	add	r2, r8
 800207c:	4631      	mov	r1, r6
 800207e:	4628      	mov	r0, r5
 8002080:	47b8      	blx	r7
 8002082:	3001      	adds	r0, #1
 8002084:	d1c1      	bne.n	800200a <_printf_float+0x342>
 8002086:	e680      	b.n	8001d8a <_printf_float+0xc2>
 8002088:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800208a:	2a01      	cmp	r2, #1
 800208c:	dc01      	bgt.n	8002092 <_printf_float+0x3ca>
 800208e:	07db      	lsls	r3, r3, #31
 8002090:	d538      	bpl.n	8002104 <_printf_float+0x43c>
 8002092:	2301      	movs	r3, #1
 8002094:	4642      	mov	r2, r8
 8002096:	4631      	mov	r1, r6
 8002098:	4628      	mov	r0, r5
 800209a:	47b8      	blx	r7
 800209c:	3001      	adds	r0, #1
 800209e:	f43f ae74 	beq.w	8001d8a <_printf_float+0xc2>
 80020a2:	ee18 3a10 	vmov	r3, s16
 80020a6:	4652      	mov	r2, sl
 80020a8:	4631      	mov	r1, r6
 80020aa:	4628      	mov	r0, r5
 80020ac:	47b8      	blx	r7
 80020ae:	3001      	adds	r0, #1
 80020b0:	f43f ae6b 	beq.w	8001d8a <_printf_float+0xc2>
 80020b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80020b8:	2200      	movs	r2, #0
 80020ba:	2300      	movs	r3, #0
 80020bc:	f7fe fd0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80020c0:	b9d8      	cbnz	r0, 80020fa <_printf_float+0x432>
 80020c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80020c4:	f108 0201 	add.w	r2, r8, #1
 80020c8:	3b01      	subs	r3, #1
 80020ca:	4631      	mov	r1, r6
 80020cc:	4628      	mov	r0, r5
 80020ce:	47b8      	blx	r7
 80020d0:	3001      	adds	r0, #1
 80020d2:	d10e      	bne.n	80020f2 <_printf_float+0x42a>
 80020d4:	e659      	b.n	8001d8a <_printf_float+0xc2>
 80020d6:	2301      	movs	r3, #1
 80020d8:	4652      	mov	r2, sl
 80020da:	4631      	mov	r1, r6
 80020dc:	4628      	mov	r0, r5
 80020de:	47b8      	blx	r7
 80020e0:	3001      	adds	r0, #1
 80020e2:	f43f ae52 	beq.w	8001d8a <_printf_float+0xc2>
 80020e6:	f108 0801 	add.w	r8, r8, #1
 80020ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80020ec:	3b01      	subs	r3, #1
 80020ee:	4543      	cmp	r3, r8
 80020f0:	dcf1      	bgt.n	80020d6 <_printf_float+0x40e>
 80020f2:	464b      	mov	r3, r9
 80020f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80020f8:	e6dc      	b.n	8001eb4 <_printf_float+0x1ec>
 80020fa:	f04f 0800 	mov.w	r8, #0
 80020fe:	f104 0a1a 	add.w	sl, r4, #26
 8002102:	e7f2      	b.n	80020ea <_printf_float+0x422>
 8002104:	2301      	movs	r3, #1
 8002106:	4642      	mov	r2, r8
 8002108:	e7df      	b.n	80020ca <_printf_float+0x402>
 800210a:	2301      	movs	r3, #1
 800210c:	464a      	mov	r2, r9
 800210e:	4631      	mov	r1, r6
 8002110:	4628      	mov	r0, r5
 8002112:	47b8      	blx	r7
 8002114:	3001      	adds	r0, #1
 8002116:	f43f ae38 	beq.w	8001d8a <_printf_float+0xc2>
 800211a:	f108 0801 	add.w	r8, r8, #1
 800211e:	68e3      	ldr	r3, [r4, #12]
 8002120:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002122:	1a5b      	subs	r3, r3, r1
 8002124:	4543      	cmp	r3, r8
 8002126:	dcf0      	bgt.n	800210a <_printf_float+0x442>
 8002128:	e6fa      	b.n	8001f20 <_printf_float+0x258>
 800212a:	f04f 0800 	mov.w	r8, #0
 800212e:	f104 0919 	add.w	r9, r4, #25
 8002132:	e7f4      	b.n	800211e <_printf_float+0x456>

08002134 <_printf_common>:
 8002134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002138:	4616      	mov	r6, r2
 800213a:	4699      	mov	r9, r3
 800213c:	688a      	ldr	r2, [r1, #8]
 800213e:	690b      	ldr	r3, [r1, #16]
 8002140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002144:	4293      	cmp	r3, r2
 8002146:	bfb8      	it	lt
 8002148:	4613      	movlt	r3, r2
 800214a:	6033      	str	r3, [r6, #0]
 800214c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002150:	4607      	mov	r7, r0
 8002152:	460c      	mov	r4, r1
 8002154:	b10a      	cbz	r2, 800215a <_printf_common+0x26>
 8002156:	3301      	adds	r3, #1
 8002158:	6033      	str	r3, [r6, #0]
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	0699      	lsls	r1, r3, #26
 800215e:	bf42      	ittt	mi
 8002160:	6833      	ldrmi	r3, [r6, #0]
 8002162:	3302      	addmi	r3, #2
 8002164:	6033      	strmi	r3, [r6, #0]
 8002166:	6825      	ldr	r5, [r4, #0]
 8002168:	f015 0506 	ands.w	r5, r5, #6
 800216c:	d106      	bne.n	800217c <_printf_common+0x48>
 800216e:	f104 0a19 	add.w	sl, r4, #25
 8002172:	68e3      	ldr	r3, [r4, #12]
 8002174:	6832      	ldr	r2, [r6, #0]
 8002176:	1a9b      	subs	r3, r3, r2
 8002178:	42ab      	cmp	r3, r5
 800217a:	dc26      	bgt.n	80021ca <_printf_common+0x96>
 800217c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002180:	1e13      	subs	r3, r2, #0
 8002182:	6822      	ldr	r2, [r4, #0]
 8002184:	bf18      	it	ne
 8002186:	2301      	movne	r3, #1
 8002188:	0692      	lsls	r2, r2, #26
 800218a:	d42b      	bmi.n	80021e4 <_printf_common+0xb0>
 800218c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002190:	4649      	mov	r1, r9
 8002192:	4638      	mov	r0, r7
 8002194:	47c0      	blx	r8
 8002196:	3001      	adds	r0, #1
 8002198:	d01e      	beq.n	80021d8 <_printf_common+0xa4>
 800219a:	6823      	ldr	r3, [r4, #0]
 800219c:	68e5      	ldr	r5, [r4, #12]
 800219e:	6832      	ldr	r2, [r6, #0]
 80021a0:	f003 0306 	and.w	r3, r3, #6
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	bf08      	it	eq
 80021a8:	1aad      	subeq	r5, r5, r2
 80021aa:	68a3      	ldr	r3, [r4, #8]
 80021ac:	6922      	ldr	r2, [r4, #16]
 80021ae:	bf0c      	ite	eq
 80021b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80021b4:	2500      	movne	r5, #0
 80021b6:	4293      	cmp	r3, r2
 80021b8:	bfc4      	itt	gt
 80021ba:	1a9b      	subgt	r3, r3, r2
 80021bc:	18ed      	addgt	r5, r5, r3
 80021be:	2600      	movs	r6, #0
 80021c0:	341a      	adds	r4, #26
 80021c2:	42b5      	cmp	r5, r6
 80021c4:	d11a      	bne.n	80021fc <_printf_common+0xc8>
 80021c6:	2000      	movs	r0, #0
 80021c8:	e008      	b.n	80021dc <_printf_common+0xa8>
 80021ca:	2301      	movs	r3, #1
 80021cc:	4652      	mov	r2, sl
 80021ce:	4649      	mov	r1, r9
 80021d0:	4638      	mov	r0, r7
 80021d2:	47c0      	blx	r8
 80021d4:	3001      	adds	r0, #1
 80021d6:	d103      	bne.n	80021e0 <_printf_common+0xac>
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021e0:	3501      	adds	r5, #1
 80021e2:	e7c6      	b.n	8002172 <_printf_common+0x3e>
 80021e4:	18e1      	adds	r1, r4, r3
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	2030      	movs	r0, #48	; 0x30
 80021ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80021ee:	4422      	add	r2, r4
 80021f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80021f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80021f8:	3302      	adds	r3, #2
 80021fa:	e7c7      	b.n	800218c <_printf_common+0x58>
 80021fc:	2301      	movs	r3, #1
 80021fe:	4622      	mov	r2, r4
 8002200:	4649      	mov	r1, r9
 8002202:	4638      	mov	r0, r7
 8002204:	47c0      	blx	r8
 8002206:	3001      	adds	r0, #1
 8002208:	d0e6      	beq.n	80021d8 <_printf_common+0xa4>
 800220a:	3601      	adds	r6, #1
 800220c:	e7d9      	b.n	80021c2 <_printf_common+0x8e>
	...

08002210 <_printf_i>:
 8002210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002214:	7e0f      	ldrb	r7, [r1, #24]
 8002216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002218:	2f78      	cmp	r7, #120	; 0x78
 800221a:	4691      	mov	r9, r2
 800221c:	4680      	mov	r8, r0
 800221e:	460c      	mov	r4, r1
 8002220:	469a      	mov	sl, r3
 8002222:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002226:	d807      	bhi.n	8002238 <_printf_i+0x28>
 8002228:	2f62      	cmp	r7, #98	; 0x62
 800222a:	d80a      	bhi.n	8002242 <_printf_i+0x32>
 800222c:	2f00      	cmp	r7, #0
 800222e:	f000 80d8 	beq.w	80023e2 <_printf_i+0x1d2>
 8002232:	2f58      	cmp	r7, #88	; 0x58
 8002234:	f000 80a3 	beq.w	800237e <_printf_i+0x16e>
 8002238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800223c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002240:	e03a      	b.n	80022b8 <_printf_i+0xa8>
 8002242:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002246:	2b15      	cmp	r3, #21
 8002248:	d8f6      	bhi.n	8002238 <_printf_i+0x28>
 800224a:	a101      	add	r1, pc, #4	; (adr r1, 8002250 <_printf_i+0x40>)
 800224c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002250:	080022a9 	.word	0x080022a9
 8002254:	080022bd 	.word	0x080022bd
 8002258:	08002239 	.word	0x08002239
 800225c:	08002239 	.word	0x08002239
 8002260:	08002239 	.word	0x08002239
 8002264:	08002239 	.word	0x08002239
 8002268:	080022bd 	.word	0x080022bd
 800226c:	08002239 	.word	0x08002239
 8002270:	08002239 	.word	0x08002239
 8002274:	08002239 	.word	0x08002239
 8002278:	08002239 	.word	0x08002239
 800227c:	080023c9 	.word	0x080023c9
 8002280:	080022ed 	.word	0x080022ed
 8002284:	080023ab 	.word	0x080023ab
 8002288:	08002239 	.word	0x08002239
 800228c:	08002239 	.word	0x08002239
 8002290:	080023eb 	.word	0x080023eb
 8002294:	08002239 	.word	0x08002239
 8002298:	080022ed 	.word	0x080022ed
 800229c:	08002239 	.word	0x08002239
 80022a0:	08002239 	.word	0x08002239
 80022a4:	080023b3 	.word	0x080023b3
 80022a8:	682b      	ldr	r3, [r5, #0]
 80022aa:	1d1a      	adds	r2, r3, #4
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	602a      	str	r2, [r5, #0]
 80022b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0a3      	b.n	8002404 <_printf_i+0x1f4>
 80022bc:	6820      	ldr	r0, [r4, #0]
 80022be:	6829      	ldr	r1, [r5, #0]
 80022c0:	0606      	lsls	r6, r0, #24
 80022c2:	f101 0304 	add.w	r3, r1, #4
 80022c6:	d50a      	bpl.n	80022de <_printf_i+0xce>
 80022c8:	680e      	ldr	r6, [r1, #0]
 80022ca:	602b      	str	r3, [r5, #0]
 80022cc:	2e00      	cmp	r6, #0
 80022ce:	da03      	bge.n	80022d8 <_printf_i+0xc8>
 80022d0:	232d      	movs	r3, #45	; 0x2d
 80022d2:	4276      	negs	r6, r6
 80022d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022d8:	485e      	ldr	r0, [pc, #376]	; (8002454 <_printf_i+0x244>)
 80022da:	230a      	movs	r3, #10
 80022dc:	e019      	b.n	8002312 <_printf_i+0x102>
 80022de:	680e      	ldr	r6, [r1, #0]
 80022e0:	602b      	str	r3, [r5, #0]
 80022e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80022e6:	bf18      	it	ne
 80022e8:	b236      	sxthne	r6, r6
 80022ea:	e7ef      	b.n	80022cc <_printf_i+0xbc>
 80022ec:	682b      	ldr	r3, [r5, #0]
 80022ee:	6820      	ldr	r0, [r4, #0]
 80022f0:	1d19      	adds	r1, r3, #4
 80022f2:	6029      	str	r1, [r5, #0]
 80022f4:	0601      	lsls	r1, r0, #24
 80022f6:	d501      	bpl.n	80022fc <_printf_i+0xec>
 80022f8:	681e      	ldr	r6, [r3, #0]
 80022fa:	e002      	b.n	8002302 <_printf_i+0xf2>
 80022fc:	0646      	lsls	r6, r0, #25
 80022fe:	d5fb      	bpl.n	80022f8 <_printf_i+0xe8>
 8002300:	881e      	ldrh	r6, [r3, #0]
 8002302:	4854      	ldr	r0, [pc, #336]	; (8002454 <_printf_i+0x244>)
 8002304:	2f6f      	cmp	r7, #111	; 0x6f
 8002306:	bf0c      	ite	eq
 8002308:	2308      	moveq	r3, #8
 800230a:	230a      	movne	r3, #10
 800230c:	2100      	movs	r1, #0
 800230e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002312:	6865      	ldr	r5, [r4, #4]
 8002314:	60a5      	str	r5, [r4, #8]
 8002316:	2d00      	cmp	r5, #0
 8002318:	bfa2      	ittt	ge
 800231a:	6821      	ldrge	r1, [r4, #0]
 800231c:	f021 0104 	bicge.w	r1, r1, #4
 8002320:	6021      	strge	r1, [r4, #0]
 8002322:	b90e      	cbnz	r6, 8002328 <_printf_i+0x118>
 8002324:	2d00      	cmp	r5, #0
 8002326:	d04d      	beq.n	80023c4 <_printf_i+0x1b4>
 8002328:	4615      	mov	r5, r2
 800232a:	fbb6 f1f3 	udiv	r1, r6, r3
 800232e:	fb03 6711 	mls	r7, r3, r1, r6
 8002332:	5dc7      	ldrb	r7, [r0, r7]
 8002334:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002338:	4637      	mov	r7, r6
 800233a:	42bb      	cmp	r3, r7
 800233c:	460e      	mov	r6, r1
 800233e:	d9f4      	bls.n	800232a <_printf_i+0x11a>
 8002340:	2b08      	cmp	r3, #8
 8002342:	d10b      	bne.n	800235c <_printf_i+0x14c>
 8002344:	6823      	ldr	r3, [r4, #0]
 8002346:	07de      	lsls	r6, r3, #31
 8002348:	d508      	bpl.n	800235c <_printf_i+0x14c>
 800234a:	6923      	ldr	r3, [r4, #16]
 800234c:	6861      	ldr	r1, [r4, #4]
 800234e:	4299      	cmp	r1, r3
 8002350:	bfde      	ittt	le
 8002352:	2330      	movle	r3, #48	; 0x30
 8002354:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002358:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800235c:	1b52      	subs	r2, r2, r5
 800235e:	6122      	str	r2, [r4, #16]
 8002360:	f8cd a000 	str.w	sl, [sp]
 8002364:	464b      	mov	r3, r9
 8002366:	aa03      	add	r2, sp, #12
 8002368:	4621      	mov	r1, r4
 800236a:	4640      	mov	r0, r8
 800236c:	f7ff fee2 	bl	8002134 <_printf_common>
 8002370:	3001      	adds	r0, #1
 8002372:	d14c      	bne.n	800240e <_printf_i+0x1fe>
 8002374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002378:	b004      	add	sp, #16
 800237a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800237e:	4835      	ldr	r0, [pc, #212]	; (8002454 <_printf_i+0x244>)
 8002380:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002384:	6829      	ldr	r1, [r5, #0]
 8002386:	6823      	ldr	r3, [r4, #0]
 8002388:	f851 6b04 	ldr.w	r6, [r1], #4
 800238c:	6029      	str	r1, [r5, #0]
 800238e:	061d      	lsls	r5, r3, #24
 8002390:	d514      	bpl.n	80023bc <_printf_i+0x1ac>
 8002392:	07df      	lsls	r7, r3, #31
 8002394:	bf44      	itt	mi
 8002396:	f043 0320 	orrmi.w	r3, r3, #32
 800239a:	6023      	strmi	r3, [r4, #0]
 800239c:	b91e      	cbnz	r6, 80023a6 <_printf_i+0x196>
 800239e:	6823      	ldr	r3, [r4, #0]
 80023a0:	f023 0320 	bic.w	r3, r3, #32
 80023a4:	6023      	str	r3, [r4, #0]
 80023a6:	2310      	movs	r3, #16
 80023a8:	e7b0      	b.n	800230c <_printf_i+0xfc>
 80023aa:	6823      	ldr	r3, [r4, #0]
 80023ac:	f043 0320 	orr.w	r3, r3, #32
 80023b0:	6023      	str	r3, [r4, #0]
 80023b2:	2378      	movs	r3, #120	; 0x78
 80023b4:	4828      	ldr	r0, [pc, #160]	; (8002458 <_printf_i+0x248>)
 80023b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80023ba:	e7e3      	b.n	8002384 <_printf_i+0x174>
 80023bc:	0659      	lsls	r1, r3, #25
 80023be:	bf48      	it	mi
 80023c0:	b2b6      	uxthmi	r6, r6
 80023c2:	e7e6      	b.n	8002392 <_printf_i+0x182>
 80023c4:	4615      	mov	r5, r2
 80023c6:	e7bb      	b.n	8002340 <_printf_i+0x130>
 80023c8:	682b      	ldr	r3, [r5, #0]
 80023ca:	6826      	ldr	r6, [r4, #0]
 80023cc:	6961      	ldr	r1, [r4, #20]
 80023ce:	1d18      	adds	r0, r3, #4
 80023d0:	6028      	str	r0, [r5, #0]
 80023d2:	0635      	lsls	r5, r6, #24
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	d501      	bpl.n	80023dc <_printf_i+0x1cc>
 80023d8:	6019      	str	r1, [r3, #0]
 80023da:	e002      	b.n	80023e2 <_printf_i+0x1d2>
 80023dc:	0670      	lsls	r0, r6, #25
 80023de:	d5fb      	bpl.n	80023d8 <_printf_i+0x1c8>
 80023e0:	8019      	strh	r1, [r3, #0]
 80023e2:	2300      	movs	r3, #0
 80023e4:	6123      	str	r3, [r4, #16]
 80023e6:	4615      	mov	r5, r2
 80023e8:	e7ba      	b.n	8002360 <_printf_i+0x150>
 80023ea:	682b      	ldr	r3, [r5, #0]
 80023ec:	1d1a      	adds	r2, r3, #4
 80023ee:	602a      	str	r2, [r5, #0]
 80023f0:	681d      	ldr	r5, [r3, #0]
 80023f2:	6862      	ldr	r2, [r4, #4]
 80023f4:	2100      	movs	r1, #0
 80023f6:	4628      	mov	r0, r5
 80023f8:	f7fd fefa 	bl	80001f0 <memchr>
 80023fc:	b108      	cbz	r0, 8002402 <_printf_i+0x1f2>
 80023fe:	1b40      	subs	r0, r0, r5
 8002400:	6060      	str	r0, [r4, #4]
 8002402:	6863      	ldr	r3, [r4, #4]
 8002404:	6123      	str	r3, [r4, #16]
 8002406:	2300      	movs	r3, #0
 8002408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800240c:	e7a8      	b.n	8002360 <_printf_i+0x150>
 800240e:	6923      	ldr	r3, [r4, #16]
 8002410:	462a      	mov	r2, r5
 8002412:	4649      	mov	r1, r9
 8002414:	4640      	mov	r0, r8
 8002416:	47d0      	blx	sl
 8002418:	3001      	adds	r0, #1
 800241a:	d0ab      	beq.n	8002374 <_printf_i+0x164>
 800241c:	6823      	ldr	r3, [r4, #0]
 800241e:	079b      	lsls	r3, r3, #30
 8002420:	d413      	bmi.n	800244a <_printf_i+0x23a>
 8002422:	68e0      	ldr	r0, [r4, #12]
 8002424:	9b03      	ldr	r3, [sp, #12]
 8002426:	4298      	cmp	r0, r3
 8002428:	bfb8      	it	lt
 800242a:	4618      	movlt	r0, r3
 800242c:	e7a4      	b.n	8002378 <_printf_i+0x168>
 800242e:	2301      	movs	r3, #1
 8002430:	4632      	mov	r2, r6
 8002432:	4649      	mov	r1, r9
 8002434:	4640      	mov	r0, r8
 8002436:	47d0      	blx	sl
 8002438:	3001      	adds	r0, #1
 800243a:	d09b      	beq.n	8002374 <_printf_i+0x164>
 800243c:	3501      	adds	r5, #1
 800243e:	68e3      	ldr	r3, [r4, #12]
 8002440:	9903      	ldr	r1, [sp, #12]
 8002442:	1a5b      	subs	r3, r3, r1
 8002444:	42ab      	cmp	r3, r5
 8002446:	dcf2      	bgt.n	800242e <_printf_i+0x21e>
 8002448:	e7eb      	b.n	8002422 <_printf_i+0x212>
 800244a:	2500      	movs	r5, #0
 800244c:	f104 0619 	add.w	r6, r4, #25
 8002450:	e7f5      	b.n	800243e <_printf_i+0x22e>
 8002452:	bf00      	nop
 8002454:	08004992 	.word	0x08004992
 8002458:	080049a3 	.word	0x080049a3

0800245c <siprintf>:
 800245c:	b40e      	push	{r1, r2, r3}
 800245e:	b500      	push	{lr}
 8002460:	b09c      	sub	sp, #112	; 0x70
 8002462:	ab1d      	add	r3, sp, #116	; 0x74
 8002464:	9002      	str	r0, [sp, #8]
 8002466:	9006      	str	r0, [sp, #24]
 8002468:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800246c:	4809      	ldr	r0, [pc, #36]	; (8002494 <siprintf+0x38>)
 800246e:	9107      	str	r1, [sp, #28]
 8002470:	9104      	str	r1, [sp, #16]
 8002472:	4909      	ldr	r1, [pc, #36]	; (8002498 <siprintf+0x3c>)
 8002474:	f853 2b04 	ldr.w	r2, [r3], #4
 8002478:	9105      	str	r1, [sp, #20]
 800247a:	6800      	ldr	r0, [r0, #0]
 800247c:	9301      	str	r3, [sp, #4]
 800247e:	a902      	add	r1, sp, #8
 8002480:	f001 fb78 	bl	8003b74 <_svfiprintf_r>
 8002484:	9b02      	ldr	r3, [sp, #8]
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]
 800248a:	b01c      	add	sp, #112	; 0x70
 800248c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002490:	b003      	add	sp, #12
 8002492:	4770      	bx	lr
 8002494:	20000044 	.word	0x20000044
 8002498:	ffff0208 	.word	0xffff0208

0800249c <quorem>:
 800249c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024a0:	6903      	ldr	r3, [r0, #16]
 80024a2:	690c      	ldr	r4, [r1, #16]
 80024a4:	42a3      	cmp	r3, r4
 80024a6:	4607      	mov	r7, r0
 80024a8:	f2c0 8081 	blt.w	80025ae <quorem+0x112>
 80024ac:	3c01      	subs	r4, #1
 80024ae:	f101 0814 	add.w	r8, r1, #20
 80024b2:	f100 0514 	add.w	r5, r0, #20
 80024b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80024c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80024c4:	3301      	adds	r3, #1
 80024c6:	429a      	cmp	r2, r3
 80024c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80024cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80024d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80024d4:	d331      	bcc.n	800253a <quorem+0x9e>
 80024d6:	f04f 0e00 	mov.w	lr, #0
 80024da:	4640      	mov	r0, r8
 80024dc:	46ac      	mov	ip, r5
 80024de:	46f2      	mov	sl, lr
 80024e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80024e4:	b293      	uxth	r3, r2
 80024e6:	fb06 e303 	mla	r3, r6, r3, lr
 80024ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	ebaa 0303 	sub.w	r3, sl, r3
 80024f4:	f8dc a000 	ldr.w	sl, [ip]
 80024f8:	0c12      	lsrs	r2, r2, #16
 80024fa:	fa13 f38a 	uxtah	r3, r3, sl
 80024fe:	fb06 e202 	mla	r2, r6, r2, lr
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	9b00      	ldr	r3, [sp, #0]
 8002506:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800250a:	b292      	uxth	r2, r2
 800250c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002510:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002514:	f8bd 3000 	ldrh.w	r3, [sp]
 8002518:	4581      	cmp	r9, r0
 800251a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800251e:	f84c 3b04 	str.w	r3, [ip], #4
 8002522:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002526:	d2db      	bcs.n	80024e0 <quorem+0x44>
 8002528:	f855 300b 	ldr.w	r3, [r5, fp]
 800252c:	b92b      	cbnz	r3, 800253a <quorem+0x9e>
 800252e:	9b01      	ldr	r3, [sp, #4]
 8002530:	3b04      	subs	r3, #4
 8002532:	429d      	cmp	r5, r3
 8002534:	461a      	mov	r2, r3
 8002536:	d32e      	bcc.n	8002596 <quorem+0xfa>
 8002538:	613c      	str	r4, [r7, #16]
 800253a:	4638      	mov	r0, r7
 800253c:	f001 f8c6 	bl	80036cc <__mcmp>
 8002540:	2800      	cmp	r0, #0
 8002542:	db24      	blt.n	800258e <quorem+0xf2>
 8002544:	3601      	adds	r6, #1
 8002546:	4628      	mov	r0, r5
 8002548:	f04f 0c00 	mov.w	ip, #0
 800254c:	f858 2b04 	ldr.w	r2, [r8], #4
 8002550:	f8d0 e000 	ldr.w	lr, [r0]
 8002554:	b293      	uxth	r3, r2
 8002556:	ebac 0303 	sub.w	r3, ip, r3
 800255a:	0c12      	lsrs	r2, r2, #16
 800255c:	fa13 f38e 	uxtah	r3, r3, lr
 8002560:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002564:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002568:	b29b      	uxth	r3, r3
 800256a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800256e:	45c1      	cmp	r9, r8
 8002570:	f840 3b04 	str.w	r3, [r0], #4
 8002574:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002578:	d2e8      	bcs.n	800254c <quorem+0xb0>
 800257a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800257e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002582:	b922      	cbnz	r2, 800258e <quorem+0xf2>
 8002584:	3b04      	subs	r3, #4
 8002586:	429d      	cmp	r5, r3
 8002588:	461a      	mov	r2, r3
 800258a:	d30a      	bcc.n	80025a2 <quorem+0x106>
 800258c:	613c      	str	r4, [r7, #16]
 800258e:	4630      	mov	r0, r6
 8002590:	b003      	add	sp, #12
 8002592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	3b04      	subs	r3, #4
 800259a:	2a00      	cmp	r2, #0
 800259c:	d1cc      	bne.n	8002538 <quorem+0x9c>
 800259e:	3c01      	subs	r4, #1
 80025a0:	e7c7      	b.n	8002532 <quorem+0x96>
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	3b04      	subs	r3, #4
 80025a6:	2a00      	cmp	r2, #0
 80025a8:	d1f0      	bne.n	800258c <quorem+0xf0>
 80025aa:	3c01      	subs	r4, #1
 80025ac:	e7eb      	b.n	8002586 <quorem+0xea>
 80025ae:	2000      	movs	r0, #0
 80025b0:	e7ee      	b.n	8002590 <quorem+0xf4>
 80025b2:	0000      	movs	r0, r0
 80025b4:	0000      	movs	r0, r0
	...

080025b8 <_dtoa_r>:
 80025b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025bc:	ed2d 8b04 	vpush	{d8-d9}
 80025c0:	ec57 6b10 	vmov	r6, r7, d0
 80025c4:	b093      	sub	sp, #76	; 0x4c
 80025c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80025c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80025cc:	9106      	str	r1, [sp, #24]
 80025ce:	ee10 aa10 	vmov	sl, s0
 80025d2:	4604      	mov	r4, r0
 80025d4:	9209      	str	r2, [sp, #36]	; 0x24
 80025d6:	930c      	str	r3, [sp, #48]	; 0x30
 80025d8:	46bb      	mov	fp, r7
 80025da:	b975      	cbnz	r5, 80025fa <_dtoa_r+0x42>
 80025dc:	2010      	movs	r0, #16
 80025de:	f000 fddd 	bl	800319c <malloc>
 80025e2:	4602      	mov	r2, r0
 80025e4:	6260      	str	r0, [r4, #36]	; 0x24
 80025e6:	b920      	cbnz	r0, 80025f2 <_dtoa_r+0x3a>
 80025e8:	4ba7      	ldr	r3, [pc, #668]	; (8002888 <_dtoa_r+0x2d0>)
 80025ea:	21ea      	movs	r1, #234	; 0xea
 80025ec:	48a7      	ldr	r0, [pc, #668]	; (800288c <_dtoa_r+0x2d4>)
 80025ee:	f001 fbd1 	bl	8003d94 <__assert_func>
 80025f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80025f6:	6005      	str	r5, [r0, #0]
 80025f8:	60c5      	str	r5, [r0, #12]
 80025fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025fc:	6819      	ldr	r1, [r3, #0]
 80025fe:	b151      	cbz	r1, 8002616 <_dtoa_r+0x5e>
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	604a      	str	r2, [r1, #4]
 8002604:	2301      	movs	r3, #1
 8002606:	4093      	lsls	r3, r2
 8002608:	608b      	str	r3, [r1, #8]
 800260a:	4620      	mov	r0, r4
 800260c:	f000 fe1c 	bl	8003248 <_Bfree>
 8002610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	1e3b      	subs	r3, r7, #0
 8002618:	bfaa      	itet	ge
 800261a:	2300      	movge	r3, #0
 800261c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8002620:	f8c8 3000 	strge.w	r3, [r8]
 8002624:	4b9a      	ldr	r3, [pc, #616]	; (8002890 <_dtoa_r+0x2d8>)
 8002626:	bfbc      	itt	lt
 8002628:	2201      	movlt	r2, #1
 800262a:	f8c8 2000 	strlt.w	r2, [r8]
 800262e:	ea33 030b 	bics.w	r3, r3, fp
 8002632:	d11b      	bne.n	800266c <_dtoa_r+0xb4>
 8002634:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002636:	f242 730f 	movw	r3, #9999	; 0x270f
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8002640:	4333      	orrs	r3, r6
 8002642:	f000 8592 	beq.w	800316a <_dtoa_r+0xbb2>
 8002646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002648:	b963      	cbnz	r3, 8002664 <_dtoa_r+0xac>
 800264a:	4b92      	ldr	r3, [pc, #584]	; (8002894 <_dtoa_r+0x2dc>)
 800264c:	e022      	b.n	8002694 <_dtoa_r+0xdc>
 800264e:	4b92      	ldr	r3, [pc, #584]	; (8002898 <_dtoa_r+0x2e0>)
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	3308      	adds	r3, #8
 8002654:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	9801      	ldr	r0, [sp, #4]
 800265a:	b013      	add	sp, #76	; 0x4c
 800265c:	ecbd 8b04 	vpop	{d8-d9}
 8002660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002664:	4b8b      	ldr	r3, [pc, #556]	; (8002894 <_dtoa_r+0x2dc>)
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	3303      	adds	r3, #3
 800266a:	e7f3      	b.n	8002654 <_dtoa_r+0x9c>
 800266c:	2200      	movs	r2, #0
 800266e:	2300      	movs	r3, #0
 8002670:	4650      	mov	r0, sl
 8002672:	4659      	mov	r1, fp
 8002674:	f7fe fa30 	bl	8000ad8 <__aeabi_dcmpeq>
 8002678:	ec4b ab19 	vmov	d9, sl, fp
 800267c:	4680      	mov	r8, r0
 800267e:	b158      	cbz	r0, 8002698 <_dtoa_r+0xe0>
 8002680:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002682:	2301      	movs	r3, #1
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 856b 	beq.w	8003164 <_dtoa_r+0xbac>
 800268e:	4883      	ldr	r0, [pc, #524]	; (800289c <_dtoa_r+0x2e4>)
 8002690:	6018      	str	r0, [r3, #0]
 8002692:	1e43      	subs	r3, r0, #1
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	e7df      	b.n	8002658 <_dtoa_r+0xa0>
 8002698:	ec4b ab10 	vmov	d0, sl, fp
 800269c:	aa10      	add	r2, sp, #64	; 0x40
 800269e:	a911      	add	r1, sp, #68	; 0x44
 80026a0:	4620      	mov	r0, r4
 80026a2:	f001 f8b9 	bl	8003818 <__d2b>
 80026a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80026aa:	ee08 0a10 	vmov	s16, r0
 80026ae:	2d00      	cmp	r5, #0
 80026b0:	f000 8084 	beq.w	80027bc <_dtoa_r+0x204>
 80026b4:	ee19 3a90 	vmov	r3, s19
 80026b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80026c0:	4656      	mov	r6, sl
 80026c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80026c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80026ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80026ce:	4b74      	ldr	r3, [pc, #464]	; (80028a0 <_dtoa_r+0x2e8>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	4630      	mov	r0, r6
 80026d4:	4639      	mov	r1, r7
 80026d6:	f7fd fddf 	bl	8000298 <__aeabi_dsub>
 80026da:	a365      	add	r3, pc, #404	; (adr r3, 8002870 <_dtoa_r+0x2b8>)
 80026dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e0:	f7fd ff92 	bl	8000608 <__aeabi_dmul>
 80026e4:	a364      	add	r3, pc, #400	; (adr r3, 8002878 <_dtoa_r+0x2c0>)
 80026e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ea:	f7fd fdd7 	bl	800029c <__adddf3>
 80026ee:	4606      	mov	r6, r0
 80026f0:	4628      	mov	r0, r5
 80026f2:	460f      	mov	r7, r1
 80026f4:	f7fd ff1e 	bl	8000534 <__aeabi_i2d>
 80026f8:	a361      	add	r3, pc, #388	; (adr r3, 8002880 <_dtoa_r+0x2c8>)
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	f7fd ff83 	bl	8000608 <__aeabi_dmul>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4630      	mov	r0, r6
 8002708:	4639      	mov	r1, r7
 800270a:	f7fd fdc7 	bl	800029c <__adddf3>
 800270e:	4606      	mov	r6, r0
 8002710:	460f      	mov	r7, r1
 8002712:	f7fe fa29 	bl	8000b68 <__aeabi_d2iz>
 8002716:	2200      	movs	r2, #0
 8002718:	9000      	str	r0, [sp, #0]
 800271a:	2300      	movs	r3, #0
 800271c:	4630      	mov	r0, r6
 800271e:	4639      	mov	r1, r7
 8002720:	f7fe f9e4 	bl	8000aec <__aeabi_dcmplt>
 8002724:	b150      	cbz	r0, 800273c <_dtoa_r+0x184>
 8002726:	9800      	ldr	r0, [sp, #0]
 8002728:	f7fd ff04 	bl	8000534 <__aeabi_i2d>
 800272c:	4632      	mov	r2, r6
 800272e:	463b      	mov	r3, r7
 8002730:	f7fe f9d2 	bl	8000ad8 <__aeabi_dcmpeq>
 8002734:	b910      	cbnz	r0, 800273c <_dtoa_r+0x184>
 8002736:	9b00      	ldr	r3, [sp, #0]
 8002738:	3b01      	subs	r3, #1
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	9b00      	ldr	r3, [sp, #0]
 800273e:	2b16      	cmp	r3, #22
 8002740:	d85a      	bhi.n	80027f8 <_dtoa_r+0x240>
 8002742:	9a00      	ldr	r2, [sp, #0]
 8002744:	4b57      	ldr	r3, [pc, #348]	; (80028a4 <_dtoa_r+0x2ec>)
 8002746:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274e:	ec51 0b19 	vmov	r0, r1, d9
 8002752:	f7fe f9cb 	bl	8000aec <__aeabi_dcmplt>
 8002756:	2800      	cmp	r0, #0
 8002758:	d050      	beq.n	80027fc <_dtoa_r+0x244>
 800275a:	9b00      	ldr	r3, [sp, #0]
 800275c:	3b01      	subs	r3, #1
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	2300      	movs	r3, #0
 8002762:	930b      	str	r3, [sp, #44]	; 0x2c
 8002764:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002766:	1b5d      	subs	r5, r3, r5
 8002768:	1e6b      	subs	r3, r5, #1
 800276a:	9305      	str	r3, [sp, #20]
 800276c:	bf45      	ittet	mi
 800276e:	f1c5 0301 	rsbmi	r3, r5, #1
 8002772:	9304      	strmi	r3, [sp, #16]
 8002774:	2300      	movpl	r3, #0
 8002776:	2300      	movmi	r3, #0
 8002778:	bf4c      	ite	mi
 800277a:	9305      	strmi	r3, [sp, #20]
 800277c:	9304      	strpl	r3, [sp, #16]
 800277e:	9b00      	ldr	r3, [sp, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	db3d      	blt.n	8002800 <_dtoa_r+0x248>
 8002784:	9b05      	ldr	r3, [sp, #20]
 8002786:	9a00      	ldr	r2, [sp, #0]
 8002788:	920a      	str	r2, [sp, #40]	; 0x28
 800278a:	4413      	add	r3, r2
 800278c:	9305      	str	r3, [sp, #20]
 800278e:	2300      	movs	r3, #0
 8002790:	9307      	str	r3, [sp, #28]
 8002792:	9b06      	ldr	r3, [sp, #24]
 8002794:	2b09      	cmp	r3, #9
 8002796:	f200 8089 	bhi.w	80028ac <_dtoa_r+0x2f4>
 800279a:	2b05      	cmp	r3, #5
 800279c:	bfc4      	itt	gt
 800279e:	3b04      	subgt	r3, #4
 80027a0:	9306      	strgt	r3, [sp, #24]
 80027a2:	9b06      	ldr	r3, [sp, #24]
 80027a4:	f1a3 0302 	sub.w	r3, r3, #2
 80027a8:	bfcc      	ite	gt
 80027aa:	2500      	movgt	r5, #0
 80027ac:	2501      	movle	r5, #1
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	f200 8087 	bhi.w	80028c2 <_dtoa_r+0x30a>
 80027b4:	e8df f003 	tbb	[pc, r3]
 80027b8:	59383a2d 	.word	0x59383a2d
 80027bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80027c0:	441d      	add	r5, r3
 80027c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80027c6:	2b20      	cmp	r3, #32
 80027c8:	bfc1      	itttt	gt
 80027ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80027ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80027d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80027d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80027da:	bfda      	itte	le
 80027dc:	f1c3 0320 	rsble	r3, r3, #32
 80027e0:	fa06 f003 	lslle.w	r0, r6, r3
 80027e4:	4318      	orrgt	r0, r3
 80027e6:	f7fd fe95 	bl	8000514 <__aeabi_ui2d>
 80027ea:	2301      	movs	r3, #1
 80027ec:	4606      	mov	r6, r0
 80027ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80027f2:	3d01      	subs	r5, #1
 80027f4:	930e      	str	r3, [sp, #56]	; 0x38
 80027f6:	e76a      	b.n	80026ce <_dtoa_r+0x116>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e7b2      	b.n	8002762 <_dtoa_r+0x1aa>
 80027fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80027fe:	e7b1      	b.n	8002764 <_dtoa_r+0x1ac>
 8002800:	9b04      	ldr	r3, [sp, #16]
 8002802:	9a00      	ldr	r2, [sp, #0]
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	9304      	str	r3, [sp, #16]
 8002808:	4253      	negs	r3, r2
 800280a:	9307      	str	r3, [sp, #28]
 800280c:	2300      	movs	r3, #0
 800280e:	930a      	str	r3, [sp, #40]	; 0x28
 8002810:	e7bf      	b.n	8002792 <_dtoa_r+0x1da>
 8002812:	2300      	movs	r3, #0
 8002814:	9308      	str	r3, [sp, #32]
 8002816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002818:	2b00      	cmp	r3, #0
 800281a:	dc55      	bgt.n	80028c8 <_dtoa_r+0x310>
 800281c:	2301      	movs	r3, #1
 800281e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002822:	461a      	mov	r2, r3
 8002824:	9209      	str	r2, [sp, #36]	; 0x24
 8002826:	e00c      	b.n	8002842 <_dtoa_r+0x28a>
 8002828:	2301      	movs	r3, #1
 800282a:	e7f3      	b.n	8002814 <_dtoa_r+0x25c>
 800282c:	2300      	movs	r3, #0
 800282e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002830:	9308      	str	r3, [sp, #32]
 8002832:	9b00      	ldr	r3, [sp, #0]
 8002834:	4413      	add	r3, r2
 8002836:	9302      	str	r3, [sp, #8]
 8002838:	3301      	adds	r3, #1
 800283a:	2b01      	cmp	r3, #1
 800283c:	9303      	str	r3, [sp, #12]
 800283e:	bfb8      	it	lt
 8002840:	2301      	movlt	r3, #1
 8002842:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002844:	2200      	movs	r2, #0
 8002846:	6042      	str	r2, [r0, #4]
 8002848:	2204      	movs	r2, #4
 800284a:	f102 0614 	add.w	r6, r2, #20
 800284e:	429e      	cmp	r6, r3
 8002850:	6841      	ldr	r1, [r0, #4]
 8002852:	d93d      	bls.n	80028d0 <_dtoa_r+0x318>
 8002854:	4620      	mov	r0, r4
 8002856:	f000 fcb7 	bl	80031c8 <_Balloc>
 800285a:	9001      	str	r0, [sp, #4]
 800285c:	2800      	cmp	r0, #0
 800285e:	d13b      	bne.n	80028d8 <_dtoa_r+0x320>
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <_dtoa_r+0x2f0>)
 8002862:	4602      	mov	r2, r0
 8002864:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002868:	e6c0      	b.n	80025ec <_dtoa_r+0x34>
 800286a:	2301      	movs	r3, #1
 800286c:	e7df      	b.n	800282e <_dtoa_r+0x276>
 800286e:	bf00      	nop
 8002870:	636f4361 	.word	0x636f4361
 8002874:	3fd287a7 	.word	0x3fd287a7
 8002878:	8b60c8b3 	.word	0x8b60c8b3
 800287c:	3fc68a28 	.word	0x3fc68a28
 8002880:	509f79fb 	.word	0x509f79fb
 8002884:	3fd34413 	.word	0x3fd34413
 8002888:	080049c1 	.word	0x080049c1
 800288c:	080049d8 	.word	0x080049d8
 8002890:	7ff00000 	.word	0x7ff00000
 8002894:	080049bd 	.word	0x080049bd
 8002898:	080049b4 	.word	0x080049b4
 800289c:	08004991 	.word	0x08004991
 80028a0:	3ff80000 	.word	0x3ff80000
 80028a4:	08004ac8 	.word	0x08004ac8
 80028a8:	08004a33 	.word	0x08004a33
 80028ac:	2501      	movs	r5, #1
 80028ae:	2300      	movs	r3, #0
 80028b0:	9306      	str	r3, [sp, #24]
 80028b2:	9508      	str	r5, [sp, #32]
 80028b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80028bc:	2200      	movs	r2, #0
 80028be:	2312      	movs	r3, #18
 80028c0:	e7b0      	b.n	8002824 <_dtoa_r+0x26c>
 80028c2:	2301      	movs	r3, #1
 80028c4:	9308      	str	r3, [sp, #32]
 80028c6:	e7f5      	b.n	80028b4 <_dtoa_r+0x2fc>
 80028c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80028ce:	e7b8      	b.n	8002842 <_dtoa_r+0x28a>
 80028d0:	3101      	adds	r1, #1
 80028d2:	6041      	str	r1, [r0, #4]
 80028d4:	0052      	lsls	r2, r2, #1
 80028d6:	e7b8      	b.n	800284a <_dtoa_r+0x292>
 80028d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028da:	9a01      	ldr	r2, [sp, #4]
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	9b03      	ldr	r3, [sp, #12]
 80028e0:	2b0e      	cmp	r3, #14
 80028e2:	f200 809d 	bhi.w	8002a20 <_dtoa_r+0x468>
 80028e6:	2d00      	cmp	r5, #0
 80028e8:	f000 809a 	beq.w	8002a20 <_dtoa_r+0x468>
 80028ec:	9b00      	ldr	r3, [sp, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	dd32      	ble.n	8002958 <_dtoa_r+0x3a0>
 80028f2:	4ab7      	ldr	r2, [pc, #732]	; (8002bd0 <_dtoa_r+0x618>)
 80028f4:	f003 030f 	and.w	r3, r3, #15
 80028f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80028fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002900:	9b00      	ldr	r3, [sp, #0]
 8002902:	05d8      	lsls	r0, r3, #23
 8002904:	ea4f 1723 	mov.w	r7, r3, asr #4
 8002908:	d516      	bpl.n	8002938 <_dtoa_r+0x380>
 800290a:	4bb2      	ldr	r3, [pc, #712]	; (8002bd4 <_dtoa_r+0x61c>)
 800290c:	ec51 0b19 	vmov	r0, r1, d9
 8002910:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002914:	f7fd ffa2 	bl	800085c <__aeabi_ddiv>
 8002918:	f007 070f 	and.w	r7, r7, #15
 800291c:	4682      	mov	sl, r0
 800291e:	468b      	mov	fp, r1
 8002920:	2503      	movs	r5, #3
 8002922:	4eac      	ldr	r6, [pc, #688]	; (8002bd4 <_dtoa_r+0x61c>)
 8002924:	b957      	cbnz	r7, 800293c <_dtoa_r+0x384>
 8002926:	4642      	mov	r2, r8
 8002928:	464b      	mov	r3, r9
 800292a:	4650      	mov	r0, sl
 800292c:	4659      	mov	r1, fp
 800292e:	f7fd ff95 	bl	800085c <__aeabi_ddiv>
 8002932:	4682      	mov	sl, r0
 8002934:	468b      	mov	fp, r1
 8002936:	e028      	b.n	800298a <_dtoa_r+0x3d2>
 8002938:	2502      	movs	r5, #2
 800293a:	e7f2      	b.n	8002922 <_dtoa_r+0x36a>
 800293c:	07f9      	lsls	r1, r7, #31
 800293e:	d508      	bpl.n	8002952 <_dtoa_r+0x39a>
 8002940:	4640      	mov	r0, r8
 8002942:	4649      	mov	r1, r9
 8002944:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002948:	f7fd fe5e 	bl	8000608 <__aeabi_dmul>
 800294c:	3501      	adds	r5, #1
 800294e:	4680      	mov	r8, r0
 8002950:	4689      	mov	r9, r1
 8002952:	107f      	asrs	r7, r7, #1
 8002954:	3608      	adds	r6, #8
 8002956:	e7e5      	b.n	8002924 <_dtoa_r+0x36c>
 8002958:	f000 809b 	beq.w	8002a92 <_dtoa_r+0x4da>
 800295c:	9b00      	ldr	r3, [sp, #0]
 800295e:	4f9d      	ldr	r7, [pc, #628]	; (8002bd4 <_dtoa_r+0x61c>)
 8002960:	425e      	negs	r6, r3
 8002962:	4b9b      	ldr	r3, [pc, #620]	; (8002bd0 <_dtoa_r+0x618>)
 8002964:	f006 020f 	and.w	r2, r6, #15
 8002968:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800296c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002970:	ec51 0b19 	vmov	r0, r1, d9
 8002974:	f7fd fe48 	bl	8000608 <__aeabi_dmul>
 8002978:	1136      	asrs	r6, r6, #4
 800297a:	4682      	mov	sl, r0
 800297c:	468b      	mov	fp, r1
 800297e:	2300      	movs	r3, #0
 8002980:	2502      	movs	r5, #2
 8002982:	2e00      	cmp	r6, #0
 8002984:	d17a      	bne.n	8002a7c <_dtoa_r+0x4c4>
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1d3      	bne.n	8002932 <_dtoa_r+0x37a>
 800298a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 8082 	beq.w	8002a96 <_dtoa_r+0x4de>
 8002992:	4b91      	ldr	r3, [pc, #580]	; (8002bd8 <_dtoa_r+0x620>)
 8002994:	2200      	movs	r2, #0
 8002996:	4650      	mov	r0, sl
 8002998:	4659      	mov	r1, fp
 800299a:	f7fe f8a7 	bl	8000aec <__aeabi_dcmplt>
 800299e:	2800      	cmp	r0, #0
 80029a0:	d079      	beq.n	8002a96 <_dtoa_r+0x4de>
 80029a2:	9b03      	ldr	r3, [sp, #12]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d076      	beq.n	8002a96 <_dtoa_r+0x4de>
 80029a8:	9b02      	ldr	r3, [sp, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	dd36      	ble.n	8002a1c <_dtoa_r+0x464>
 80029ae:	9b00      	ldr	r3, [sp, #0]
 80029b0:	4650      	mov	r0, sl
 80029b2:	4659      	mov	r1, fp
 80029b4:	1e5f      	subs	r7, r3, #1
 80029b6:	2200      	movs	r2, #0
 80029b8:	4b88      	ldr	r3, [pc, #544]	; (8002bdc <_dtoa_r+0x624>)
 80029ba:	f7fd fe25 	bl	8000608 <__aeabi_dmul>
 80029be:	9e02      	ldr	r6, [sp, #8]
 80029c0:	4682      	mov	sl, r0
 80029c2:	468b      	mov	fp, r1
 80029c4:	3501      	adds	r5, #1
 80029c6:	4628      	mov	r0, r5
 80029c8:	f7fd fdb4 	bl	8000534 <__aeabi_i2d>
 80029cc:	4652      	mov	r2, sl
 80029ce:	465b      	mov	r3, fp
 80029d0:	f7fd fe1a 	bl	8000608 <__aeabi_dmul>
 80029d4:	4b82      	ldr	r3, [pc, #520]	; (8002be0 <_dtoa_r+0x628>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	f7fd fc60 	bl	800029c <__adddf3>
 80029dc:	46d0      	mov	r8, sl
 80029de:	46d9      	mov	r9, fp
 80029e0:	4682      	mov	sl, r0
 80029e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80029e6:	2e00      	cmp	r6, #0
 80029e8:	d158      	bne.n	8002a9c <_dtoa_r+0x4e4>
 80029ea:	4b7e      	ldr	r3, [pc, #504]	; (8002be4 <_dtoa_r+0x62c>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	4640      	mov	r0, r8
 80029f0:	4649      	mov	r1, r9
 80029f2:	f7fd fc51 	bl	8000298 <__aeabi_dsub>
 80029f6:	4652      	mov	r2, sl
 80029f8:	465b      	mov	r3, fp
 80029fa:	4680      	mov	r8, r0
 80029fc:	4689      	mov	r9, r1
 80029fe:	f7fe f893 	bl	8000b28 <__aeabi_dcmpgt>
 8002a02:	2800      	cmp	r0, #0
 8002a04:	f040 8295 	bne.w	8002f32 <_dtoa_r+0x97a>
 8002a08:	4652      	mov	r2, sl
 8002a0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8002a0e:	4640      	mov	r0, r8
 8002a10:	4649      	mov	r1, r9
 8002a12:	f7fe f86b 	bl	8000aec <__aeabi_dcmplt>
 8002a16:	2800      	cmp	r0, #0
 8002a18:	f040 8289 	bne.w	8002f2e <_dtoa_r+0x976>
 8002a1c:	ec5b ab19 	vmov	sl, fp, d9
 8002a20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f2c0 8148 	blt.w	8002cb8 <_dtoa_r+0x700>
 8002a28:	9a00      	ldr	r2, [sp, #0]
 8002a2a:	2a0e      	cmp	r2, #14
 8002a2c:	f300 8144 	bgt.w	8002cb8 <_dtoa_r+0x700>
 8002a30:	4b67      	ldr	r3, [pc, #412]	; (8002bd0 <_dtoa_r+0x618>)
 8002a32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002a36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f280 80d5 	bge.w	8002bec <_dtoa_r+0x634>
 8002a42:	9b03      	ldr	r3, [sp, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f300 80d1 	bgt.w	8002bec <_dtoa_r+0x634>
 8002a4a:	f040 826f 	bne.w	8002f2c <_dtoa_r+0x974>
 8002a4e:	4b65      	ldr	r3, [pc, #404]	; (8002be4 <_dtoa_r+0x62c>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	4640      	mov	r0, r8
 8002a54:	4649      	mov	r1, r9
 8002a56:	f7fd fdd7 	bl	8000608 <__aeabi_dmul>
 8002a5a:	4652      	mov	r2, sl
 8002a5c:	465b      	mov	r3, fp
 8002a5e:	f7fe f859 	bl	8000b14 <__aeabi_dcmpge>
 8002a62:	9e03      	ldr	r6, [sp, #12]
 8002a64:	4637      	mov	r7, r6
 8002a66:	2800      	cmp	r0, #0
 8002a68:	f040 8245 	bne.w	8002ef6 <_dtoa_r+0x93e>
 8002a6c:	9d01      	ldr	r5, [sp, #4]
 8002a6e:	2331      	movs	r3, #49	; 0x31
 8002a70:	f805 3b01 	strb.w	r3, [r5], #1
 8002a74:	9b00      	ldr	r3, [sp, #0]
 8002a76:	3301      	adds	r3, #1
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	e240      	b.n	8002efe <_dtoa_r+0x946>
 8002a7c:	07f2      	lsls	r2, r6, #31
 8002a7e:	d505      	bpl.n	8002a8c <_dtoa_r+0x4d4>
 8002a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a84:	f7fd fdc0 	bl	8000608 <__aeabi_dmul>
 8002a88:	3501      	adds	r5, #1
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	1076      	asrs	r6, r6, #1
 8002a8e:	3708      	adds	r7, #8
 8002a90:	e777      	b.n	8002982 <_dtoa_r+0x3ca>
 8002a92:	2502      	movs	r5, #2
 8002a94:	e779      	b.n	800298a <_dtoa_r+0x3d2>
 8002a96:	9f00      	ldr	r7, [sp, #0]
 8002a98:	9e03      	ldr	r6, [sp, #12]
 8002a9a:	e794      	b.n	80029c6 <_dtoa_r+0x40e>
 8002a9c:	9901      	ldr	r1, [sp, #4]
 8002a9e:	4b4c      	ldr	r3, [pc, #304]	; (8002bd0 <_dtoa_r+0x618>)
 8002aa0:	4431      	add	r1, r6
 8002aa2:	910d      	str	r1, [sp, #52]	; 0x34
 8002aa4:	9908      	ldr	r1, [sp, #32]
 8002aa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002aaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002aae:	2900      	cmp	r1, #0
 8002ab0:	d043      	beq.n	8002b3a <_dtoa_r+0x582>
 8002ab2:	494d      	ldr	r1, [pc, #308]	; (8002be8 <_dtoa_r+0x630>)
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f7fd fed1 	bl	800085c <__aeabi_ddiv>
 8002aba:	4652      	mov	r2, sl
 8002abc:	465b      	mov	r3, fp
 8002abe:	f7fd fbeb 	bl	8000298 <__aeabi_dsub>
 8002ac2:	9d01      	ldr	r5, [sp, #4]
 8002ac4:	4682      	mov	sl, r0
 8002ac6:	468b      	mov	fp, r1
 8002ac8:	4649      	mov	r1, r9
 8002aca:	4640      	mov	r0, r8
 8002acc:	f7fe f84c 	bl	8000b68 <__aeabi_d2iz>
 8002ad0:	4606      	mov	r6, r0
 8002ad2:	f7fd fd2f 	bl	8000534 <__aeabi_i2d>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4640      	mov	r0, r8
 8002adc:	4649      	mov	r1, r9
 8002ade:	f7fd fbdb 	bl	8000298 <__aeabi_dsub>
 8002ae2:	3630      	adds	r6, #48	; 0x30
 8002ae4:	f805 6b01 	strb.w	r6, [r5], #1
 8002ae8:	4652      	mov	r2, sl
 8002aea:	465b      	mov	r3, fp
 8002aec:	4680      	mov	r8, r0
 8002aee:	4689      	mov	r9, r1
 8002af0:	f7fd fffc 	bl	8000aec <__aeabi_dcmplt>
 8002af4:	2800      	cmp	r0, #0
 8002af6:	d163      	bne.n	8002bc0 <_dtoa_r+0x608>
 8002af8:	4642      	mov	r2, r8
 8002afa:	464b      	mov	r3, r9
 8002afc:	4936      	ldr	r1, [pc, #216]	; (8002bd8 <_dtoa_r+0x620>)
 8002afe:	2000      	movs	r0, #0
 8002b00:	f7fd fbca 	bl	8000298 <__aeabi_dsub>
 8002b04:	4652      	mov	r2, sl
 8002b06:	465b      	mov	r3, fp
 8002b08:	f7fd fff0 	bl	8000aec <__aeabi_dcmplt>
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	f040 80b5 	bne.w	8002c7c <_dtoa_r+0x6c4>
 8002b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002b14:	429d      	cmp	r5, r3
 8002b16:	d081      	beq.n	8002a1c <_dtoa_r+0x464>
 8002b18:	4b30      	ldr	r3, [pc, #192]	; (8002bdc <_dtoa_r+0x624>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	4650      	mov	r0, sl
 8002b1e:	4659      	mov	r1, fp
 8002b20:	f7fd fd72 	bl	8000608 <__aeabi_dmul>
 8002b24:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <_dtoa_r+0x624>)
 8002b26:	4682      	mov	sl, r0
 8002b28:	468b      	mov	fp, r1
 8002b2a:	4640      	mov	r0, r8
 8002b2c:	4649      	mov	r1, r9
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f7fd fd6a 	bl	8000608 <__aeabi_dmul>
 8002b34:	4680      	mov	r8, r0
 8002b36:	4689      	mov	r9, r1
 8002b38:	e7c6      	b.n	8002ac8 <_dtoa_r+0x510>
 8002b3a:	4650      	mov	r0, sl
 8002b3c:	4659      	mov	r1, fp
 8002b3e:	f7fd fd63 	bl	8000608 <__aeabi_dmul>
 8002b42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002b44:	9d01      	ldr	r5, [sp, #4]
 8002b46:	930f      	str	r3, [sp, #60]	; 0x3c
 8002b48:	4682      	mov	sl, r0
 8002b4a:	468b      	mov	fp, r1
 8002b4c:	4649      	mov	r1, r9
 8002b4e:	4640      	mov	r0, r8
 8002b50:	f7fe f80a 	bl	8000b68 <__aeabi_d2iz>
 8002b54:	4606      	mov	r6, r0
 8002b56:	f7fd fced 	bl	8000534 <__aeabi_i2d>
 8002b5a:	3630      	adds	r6, #48	; 0x30
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4640      	mov	r0, r8
 8002b62:	4649      	mov	r1, r9
 8002b64:	f7fd fb98 	bl	8000298 <__aeabi_dsub>
 8002b68:	f805 6b01 	strb.w	r6, [r5], #1
 8002b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002b6e:	429d      	cmp	r5, r3
 8002b70:	4680      	mov	r8, r0
 8002b72:	4689      	mov	r9, r1
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	d124      	bne.n	8002bc4 <_dtoa_r+0x60c>
 8002b7a:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <_dtoa_r+0x630>)
 8002b7c:	4650      	mov	r0, sl
 8002b7e:	4659      	mov	r1, fp
 8002b80:	f7fd fb8c 	bl	800029c <__adddf3>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4640      	mov	r0, r8
 8002b8a:	4649      	mov	r1, r9
 8002b8c:	f7fd ffcc 	bl	8000b28 <__aeabi_dcmpgt>
 8002b90:	2800      	cmp	r0, #0
 8002b92:	d173      	bne.n	8002c7c <_dtoa_r+0x6c4>
 8002b94:	4652      	mov	r2, sl
 8002b96:	465b      	mov	r3, fp
 8002b98:	4913      	ldr	r1, [pc, #76]	; (8002be8 <_dtoa_r+0x630>)
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f7fd fb7c 	bl	8000298 <__aeabi_dsub>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4640      	mov	r0, r8
 8002ba6:	4649      	mov	r1, r9
 8002ba8:	f7fd ffa0 	bl	8000aec <__aeabi_dcmplt>
 8002bac:	2800      	cmp	r0, #0
 8002bae:	f43f af35 	beq.w	8002a1c <_dtoa_r+0x464>
 8002bb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8002bb4:	1e6b      	subs	r3, r5, #1
 8002bb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8002bb8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002bbc:	2b30      	cmp	r3, #48	; 0x30
 8002bbe:	d0f8      	beq.n	8002bb2 <_dtoa_r+0x5fa>
 8002bc0:	9700      	str	r7, [sp, #0]
 8002bc2:	e049      	b.n	8002c58 <_dtoa_r+0x6a0>
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <_dtoa_r+0x624>)
 8002bc6:	f7fd fd1f 	bl	8000608 <__aeabi_dmul>
 8002bca:	4680      	mov	r8, r0
 8002bcc:	4689      	mov	r9, r1
 8002bce:	e7bd      	b.n	8002b4c <_dtoa_r+0x594>
 8002bd0:	08004ac8 	.word	0x08004ac8
 8002bd4:	08004aa0 	.word	0x08004aa0
 8002bd8:	3ff00000 	.word	0x3ff00000
 8002bdc:	40240000 	.word	0x40240000
 8002be0:	401c0000 	.word	0x401c0000
 8002be4:	40140000 	.word	0x40140000
 8002be8:	3fe00000 	.word	0x3fe00000
 8002bec:	9d01      	ldr	r5, [sp, #4]
 8002bee:	4656      	mov	r6, sl
 8002bf0:	465f      	mov	r7, fp
 8002bf2:	4642      	mov	r2, r8
 8002bf4:	464b      	mov	r3, r9
 8002bf6:	4630      	mov	r0, r6
 8002bf8:	4639      	mov	r1, r7
 8002bfa:	f7fd fe2f 	bl	800085c <__aeabi_ddiv>
 8002bfe:	f7fd ffb3 	bl	8000b68 <__aeabi_d2iz>
 8002c02:	4682      	mov	sl, r0
 8002c04:	f7fd fc96 	bl	8000534 <__aeabi_i2d>
 8002c08:	4642      	mov	r2, r8
 8002c0a:	464b      	mov	r3, r9
 8002c0c:	f7fd fcfc 	bl	8000608 <__aeabi_dmul>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4630      	mov	r0, r6
 8002c16:	4639      	mov	r1, r7
 8002c18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8002c1c:	f7fd fb3c 	bl	8000298 <__aeabi_dsub>
 8002c20:	f805 6b01 	strb.w	r6, [r5], #1
 8002c24:	9e01      	ldr	r6, [sp, #4]
 8002c26:	9f03      	ldr	r7, [sp, #12]
 8002c28:	1bae      	subs	r6, r5, r6
 8002c2a:	42b7      	cmp	r7, r6
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	d135      	bne.n	8002c9e <_dtoa_r+0x6e6>
 8002c32:	f7fd fb33 	bl	800029c <__adddf3>
 8002c36:	4642      	mov	r2, r8
 8002c38:	464b      	mov	r3, r9
 8002c3a:	4606      	mov	r6, r0
 8002c3c:	460f      	mov	r7, r1
 8002c3e:	f7fd ff73 	bl	8000b28 <__aeabi_dcmpgt>
 8002c42:	b9d0      	cbnz	r0, 8002c7a <_dtoa_r+0x6c2>
 8002c44:	4642      	mov	r2, r8
 8002c46:	464b      	mov	r3, r9
 8002c48:	4630      	mov	r0, r6
 8002c4a:	4639      	mov	r1, r7
 8002c4c:	f7fd ff44 	bl	8000ad8 <__aeabi_dcmpeq>
 8002c50:	b110      	cbz	r0, 8002c58 <_dtoa_r+0x6a0>
 8002c52:	f01a 0f01 	tst.w	sl, #1
 8002c56:	d110      	bne.n	8002c7a <_dtoa_r+0x6c2>
 8002c58:	4620      	mov	r0, r4
 8002c5a:	ee18 1a10 	vmov	r1, s16
 8002c5e:	f000 faf3 	bl	8003248 <_Bfree>
 8002c62:	2300      	movs	r3, #0
 8002c64:	9800      	ldr	r0, [sp, #0]
 8002c66:	702b      	strb	r3, [r5, #0]
 8002c68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c6a:	3001      	adds	r0, #1
 8002c6c:	6018      	str	r0, [r3, #0]
 8002c6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f43f acf1 	beq.w	8002658 <_dtoa_r+0xa0>
 8002c76:	601d      	str	r5, [r3, #0]
 8002c78:	e4ee      	b.n	8002658 <_dtoa_r+0xa0>
 8002c7a:	9f00      	ldr	r7, [sp, #0]
 8002c7c:	462b      	mov	r3, r5
 8002c7e:	461d      	mov	r5, r3
 8002c80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8002c84:	2a39      	cmp	r2, #57	; 0x39
 8002c86:	d106      	bne.n	8002c96 <_dtoa_r+0x6de>
 8002c88:	9a01      	ldr	r2, [sp, #4]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d1f7      	bne.n	8002c7e <_dtoa_r+0x6c6>
 8002c8e:	9901      	ldr	r1, [sp, #4]
 8002c90:	2230      	movs	r2, #48	; 0x30
 8002c92:	3701      	adds	r7, #1
 8002c94:	700a      	strb	r2, [r1, #0]
 8002c96:	781a      	ldrb	r2, [r3, #0]
 8002c98:	3201      	adds	r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]
 8002c9c:	e790      	b.n	8002bc0 <_dtoa_r+0x608>
 8002c9e:	4ba6      	ldr	r3, [pc, #664]	; (8002f38 <_dtoa_r+0x980>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f7fd fcb1 	bl	8000608 <__aeabi_dmul>
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2300      	movs	r3, #0
 8002caa:	4606      	mov	r6, r0
 8002cac:	460f      	mov	r7, r1
 8002cae:	f7fd ff13 	bl	8000ad8 <__aeabi_dcmpeq>
 8002cb2:	2800      	cmp	r0, #0
 8002cb4:	d09d      	beq.n	8002bf2 <_dtoa_r+0x63a>
 8002cb6:	e7cf      	b.n	8002c58 <_dtoa_r+0x6a0>
 8002cb8:	9a08      	ldr	r2, [sp, #32]
 8002cba:	2a00      	cmp	r2, #0
 8002cbc:	f000 80d7 	beq.w	8002e6e <_dtoa_r+0x8b6>
 8002cc0:	9a06      	ldr	r2, [sp, #24]
 8002cc2:	2a01      	cmp	r2, #1
 8002cc4:	f300 80ba 	bgt.w	8002e3c <_dtoa_r+0x884>
 8002cc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002cca:	2a00      	cmp	r2, #0
 8002ccc:	f000 80b2 	beq.w	8002e34 <_dtoa_r+0x87c>
 8002cd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8002cd4:	9e07      	ldr	r6, [sp, #28]
 8002cd6:	9d04      	ldr	r5, [sp, #16]
 8002cd8:	9a04      	ldr	r2, [sp, #16]
 8002cda:	441a      	add	r2, r3
 8002cdc:	9204      	str	r2, [sp, #16]
 8002cde:	9a05      	ldr	r2, [sp, #20]
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	441a      	add	r2, r3
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	9205      	str	r2, [sp, #20]
 8002ce8:	f000 fb66 	bl	80033b8 <__i2b>
 8002cec:	4607      	mov	r7, r0
 8002cee:	2d00      	cmp	r5, #0
 8002cf0:	dd0c      	ble.n	8002d0c <_dtoa_r+0x754>
 8002cf2:	9b05      	ldr	r3, [sp, #20]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	dd09      	ble.n	8002d0c <_dtoa_r+0x754>
 8002cf8:	42ab      	cmp	r3, r5
 8002cfa:	9a04      	ldr	r2, [sp, #16]
 8002cfc:	bfa8      	it	ge
 8002cfe:	462b      	movge	r3, r5
 8002d00:	1ad2      	subs	r2, r2, r3
 8002d02:	9204      	str	r2, [sp, #16]
 8002d04:	9a05      	ldr	r2, [sp, #20]
 8002d06:	1aed      	subs	r5, r5, r3
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	9305      	str	r3, [sp, #20]
 8002d0c:	9b07      	ldr	r3, [sp, #28]
 8002d0e:	b31b      	cbz	r3, 8002d58 <_dtoa_r+0x7a0>
 8002d10:	9b08      	ldr	r3, [sp, #32]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80af 	beq.w	8002e76 <_dtoa_r+0x8be>
 8002d18:	2e00      	cmp	r6, #0
 8002d1a:	dd13      	ble.n	8002d44 <_dtoa_r+0x78c>
 8002d1c:	4639      	mov	r1, r7
 8002d1e:	4632      	mov	r2, r6
 8002d20:	4620      	mov	r0, r4
 8002d22:	f000 fc09 	bl	8003538 <__pow5mult>
 8002d26:	ee18 2a10 	vmov	r2, s16
 8002d2a:	4601      	mov	r1, r0
 8002d2c:	4607      	mov	r7, r0
 8002d2e:	4620      	mov	r0, r4
 8002d30:	f000 fb58 	bl	80033e4 <__multiply>
 8002d34:	ee18 1a10 	vmov	r1, s16
 8002d38:	4680      	mov	r8, r0
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	f000 fa84 	bl	8003248 <_Bfree>
 8002d40:	ee08 8a10 	vmov	s16, r8
 8002d44:	9b07      	ldr	r3, [sp, #28]
 8002d46:	1b9a      	subs	r2, r3, r6
 8002d48:	d006      	beq.n	8002d58 <_dtoa_r+0x7a0>
 8002d4a:	ee18 1a10 	vmov	r1, s16
 8002d4e:	4620      	mov	r0, r4
 8002d50:	f000 fbf2 	bl	8003538 <__pow5mult>
 8002d54:	ee08 0a10 	vmov	s16, r0
 8002d58:	2101      	movs	r1, #1
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f000 fb2c 	bl	80033b8 <__i2b>
 8002d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	4606      	mov	r6, r0
 8002d66:	f340 8088 	ble.w	8002e7a <_dtoa_r+0x8c2>
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	4601      	mov	r1, r0
 8002d6e:	4620      	mov	r0, r4
 8002d70:	f000 fbe2 	bl	8003538 <__pow5mult>
 8002d74:	9b06      	ldr	r3, [sp, #24]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	4606      	mov	r6, r0
 8002d7a:	f340 8081 	ble.w	8002e80 <_dtoa_r+0x8c8>
 8002d7e:	f04f 0800 	mov.w	r8, #0
 8002d82:	6933      	ldr	r3, [r6, #16]
 8002d84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002d88:	6918      	ldr	r0, [r3, #16]
 8002d8a:	f000 fac5 	bl	8003318 <__hi0bits>
 8002d8e:	f1c0 0020 	rsb	r0, r0, #32
 8002d92:	9b05      	ldr	r3, [sp, #20]
 8002d94:	4418      	add	r0, r3
 8002d96:	f010 001f 	ands.w	r0, r0, #31
 8002d9a:	f000 8092 	beq.w	8002ec2 <_dtoa_r+0x90a>
 8002d9e:	f1c0 0320 	rsb	r3, r0, #32
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	f340 808a 	ble.w	8002ebc <_dtoa_r+0x904>
 8002da8:	f1c0 001c 	rsb	r0, r0, #28
 8002dac:	9b04      	ldr	r3, [sp, #16]
 8002dae:	4403      	add	r3, r0
 8002db0:	9304      	str	r3, [sp, #16]
 8002db2:	9b05      	ldr	r3, [sp, #20]
 8002db4:	4403      	add	r3, r0
 8002db6:	4405      	add	r5, r0
 8002db8:	9305      	str	r3, [sp, #20]
 8002dba:	9b04      	ldr	r3, [sp, #16]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	dd07      	ble.n	8002dd0 <_dtoa_r+0x818>
 8002dc0:	ee18 1a10 	vmov	r1, s16
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	f000 fc10 	bl	80035ec <__lshift>
 8002dcc:	ee08 0a10 	vmov	s16, r0
 8002dd0:	9b05      	ldr	r3, [sp, #20]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	dd05      	ble.n	8002de2 <_dtoa_r+0x82a>
 8002dd6:	4631      	mov	r1, r6
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f000 fc06 	bl	80035ec <__lshift>
 8002de0:	4606      	mov	r6, r0
 8002de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d06e      	beq.n	8002ec6 <_dtoa_r+0x90e>
 8002de8:	ee18 0a10 	vmov	r0, s16
 8002dec:	4631      	mov	r1, r6
 8002dee:	f000 fc6d 	bl	80036cc <__mcmp>
 8002df2:	2800      	cmp	r0, #0
 8002df4:	da67      	bge.n	8002ec6 <_dtoa_r+0x90e>
 8002df6:	9b00      	ldr	r3, [sp, #0]
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	ee18 1a10 	vmov	r1, s16
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	220a      	movs	r2, #10
 8002e02:	2300      	movs	r3, #0
 8002e04:	4620      	mov	r0, r4
 8002e06:	f000 fa41 	bl	800328c <__multadd>
 8002e0a:	9b08      	ldr	r3, [sp, #32]
 8002e0c:	ee08 0a10 	vmov	s16, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 81b1 	beq.w	8003178 <_dtoa_r+0xbc0>
 8002e16:	2300      	movs	r3, #0
 8002e18:	4639      	mov	r1, r7
 8002e1a:	220a      	movs	r2, #10
 8002e1c:	4620      	mov	r0, r4
 8002e1e:	f000 fa35 	bl	800328c <__multadd>
 8002e22:	9b02      	ldr	r3, [sp, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	4607      	mov	r7, r0
 8002e28:	f300 808e 	bgt.w	8002f48 <_dtoa_r+0x990>
 8002e2c:	9b06      	ldr	r3, [sp, #24]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	dc51      	bgt.n	8002ed6 <_dtoa_r+0x91e>
 8002e32:	e089      	b.n	8002f48 <_dtoa_r+0x990>
 8002e34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002e36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8002e3a:	e74b      	b.n	8002cd4 <_dtoa_r+0x71c>
 8002e3c:	9b03      	ldr	r3, [sp, #12]
 8002e3e:	1e5e      	subs	r6, r3, #1
 8002e40:	9b07      	ldr	r3, [sp, #28]
 8002e42:	42b3      	cmp	r3, r6
 8002e44:	bfbf      	itttt	lt
 8002e46:	9b07      	ldrlt	r3, [sp, #28]
 8002e48:	9607      	strlt	r6, [sp, #28]
 8002e4a:	1af2      	sublt	r2, r6, r3
 8002e4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8002e4e:	bfb6      	itet	lt
 8002e50:	189b      	addlt	r3, r3, r2
 8002e52:	1b9e      	subge	r6, r3, r6
 8002e54:	930a      	strlt	r3, [sp, #40]	; 0x28
 8002e56:	9b03      	ldr	r3, [sp, #12]
 8002e58:	bfb8      	it	lt
 8002e5a:	2600      	movlt	r6, #0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bfb7      	itett	lt
 8002e60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8002e64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8002e68:	1a9d      	sublt	r5, r3, r2
 8002e6a:	2300      	movlt	r3, #0
 8002e6c:	e734      	b.n	8002cd8 <_dtoa_r+0x720>
 8002e6e:	9e07      	ldr	r6, [sp, #28]
 8002e70:	9d04      	ldr	r5, [sp, #16]
 8002e72:	9f08      	ldr	r7, [sp, #32]
 8002e74:	e73b      	b.n	8002cee <_dtoa_r+0x736>
 8002e76:	9a07      	ldr	r2, [sp, #28]
 8002e78:	e767      	b.n	8002d4a <_dtoa_r+0x792>
 8002e7a:	9b06      	ldr	r3, [sp, #24]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	dc18      	bgt.n	8002eb2 <_dtoa_r+0x8fa>
 8002e80:	f1ba 0f00 	cmp.w	sl, #0
 8002e84:	d115      	bne.n	8002eb2 <_dtoa_r+0x8fa>
 8002e86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8002e8a:	b993      	cbnz	r3, 8002eb2 <_dtoa_r+0x8fa>
 8002e8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8002e90:	0d1b      	lsrs	r3, r3, #20
 8002e92:	051b      	lsls	r3, r3, #20
 8002e94:	b183      	cbz	r3, 8002eb8 <_dtoa_r+0x900>
 8002e96:	9b04      	ldr	r3, [sp, #16]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	9304      	str	r3, [sp, #16]
 8002e9c:	9b05      	ldr	r3, [sp, #20]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	9305      	str	r3, [sp, #20]
 8002ea2:	f04f 0801 	mov.w	r8, #1
 8002ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f47f af6a 	bne.w	8002d82 <_dtoa_r+0x7ca>
 8002eae:	2001      	movs	r0, #1
 8002eb0:	e76f      	b.n	8002d92 <_dtoa_r+0x7da>
 8002eb2:	f04f 0800 	mov.w	r8, #0
 8002eb6:	e7f6      	b.n	8002ea6 <_dtoa_r+0x8ee>
 8002eb8:	4698      	mov	r8, r3
 8002eba:	e7f4      	b.n	8002ea6 <_dtoa_r+0x8ee>
 8002ebc:	f43f af7d 	beq.w	8002dba <_dtoa_r+0x802>
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	301c      	adds	r0, #28
 8002ec4:	e772      	b.n	8002dac <_dtoa_r+0x7f4>
 8002ec6:	9b03      	ldr	r3, [sp, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	dc37      	bgt.n	8002f3c <_dtoa_r+0x984>
 8002ecc:	9b06      	ldr	r3, [sp, #24]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	dd34      	ble.n	8002f3c <_dtoa_r+0x984>
 8002ed2:	9b03      	ldr	r3, [sp, #12]
 8002ed4:	9302      	str	r3, [sp, #8]
 8002ed6:	9b02      	ldr	r3, [sp, #8]
 8002ed8:	b96b      	cbnz	r3, 8002ef6 <_dtoa_r+0x93e>
 8002eda:	4631      	mov	r1, r6
 8002edc:	2205      	movs	r2, #5
 8002ede:	4620      	mov	r0, r4
 8002ee0:	f000 f9d4 	bl	800328c <__multadd>
 8002ee4:	4601      	mov	r1, r0
 8002ee6:	4606      	mov	r6, r0
 8002ee8:	ee18 0a10 	vmov	r0, s16
 8002eec:	f000 fbee 	bl	80036cc <__mcmp>
 8002ef0:	2800      	cmp	r0, #0
 8002ef2:	f73f adbb 	bgt.w	8002a6c <_dtoa_r+0x4b4>
 8002ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ef8:	9d01      	ldr	r5, [sp, #4]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	f04f 0800 	mov.w	r8, #0
 8002f02:	4631      	mov	r1, r6
 8002f04:	4620      	mov	r0, r4
 8002f06:	f000 f99f 	bl	8003248 <_Bfree>
 8002f0a:	2f00      	cmp	r7, #0
 8002f0c:	f43f aea4 	beq.w	8002c58 <_dtoa_r+0x6a0>
 8002f10:	f1b8 0f00 	cmp.w	r8, #0
 8002f14:	d005      	beq.n	8002f22 <_dtoa_r+0x96a>
 8002f16:	45b8      	cmp	r8, r7
 8002f18:	d003      	beq.n	8002f22 <_dtoa_r+0x96a>
 8002f1a:	4641      	mov	r1, r8
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	f000 f993 	bl	8003248 <_Bfree>
 8002f22:	4639      	mov	r1, r7
 8002f24:	4620      	mov	r0, r4
 8002f26:	f000 f98f 	bl	8003248 <_Bfree>
 8002f2a:	e695      	b.n	8002c58 <_dtoa_r+0x6a0>
 8002f2c:	2600      	movs	r6, #0
 8002f2e:	4637      	mov	r7, r6
 8002f30:	e7e1      	b.n	8002ef6 <_dtoa_r+0x93e>
 8002f32:	9700      	str	r7, [sp, #0]
 8002f34:	4637      	mov	r7, r6
 8002f36:	e599      	b.n	8002a6c <_dtoa_r+0x4b4>
 8002f38:	40240000 	.word	0x40240000
 8002f3c:	9b08      	ldr	r3, [sp, #32]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 80ca 	beq.w	80030d8 <_dtoa_r+0xb20>
 8002f44:	9b03      	ldr	r3, [sp, #12]
 8002f46:	9302      	str	r3, [sp, #8]
 8002f48:	2d00      	cmp	r5, #0
 8002f4a:	dd05      	ble.n	8002f58 <_dtoa_r+0x9a0>
 8002f4c:	4639      	mov	r1, r7
 8002f4e:	462a      	mov	r2, r5
 8002f50:	4620      	mov	r0, r4
 8002f52:	f000 fb4b 	bl	80035ec <__lshift>
 8002f56:	4607      	mov	r7, r0
 8002f58:	f1b8 0f00 	cmp.w	r8, #0
 8002f5c:	d05b      	beq.n	8003016 <_dtoa_r+0xa5e>
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4620      	mov	r0, r4
 8002f62:	f000 f931 	bl	80031c8 <_Balloc>
 8002f66:	4605      	mov	r5, r0
 8002f68:	b928      	cbnz	r0, 8002f76 <_dtoa_r+0x9be>
 8002f6a:	4b87      	ldr	r3, [pc, #540]	; (8003188 <_dtoa_r+0xbd0>)
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8002f72:	f7ff bb3b 	b.w	80025ec <_dtoa_r+0x34>
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	3202      	adds	r2, #2
 8002f7a:	0092      	lsls	r2, r2, #2
 8002f7c:	f107 010c 	add.w	r1, r7, #12
 8002f80:	300c      	adds	r0, #12
 8002f82:	f000 f913 	bl	80031ac <memcpy>
 8002f86:	2201      	movs	r2, #1
 8002f88:	4629      	mov	r1, r5
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	f000 fb2e 	bl	80035ec <__lshift>
 8002f90:	9b01      	ldr	r3, [sp, #4]
 8002f92:	f103 0901 	add.w	r9, r3, #1
 8002f96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	9305      	str	r3, [sp, #20]
 8002f9e:	f00a 0301 	and.w	r3, sl, #1
 8002fa2:	46b8      	mov	r8, r7
 8002fa4:	9304      	str	r3, [sp, #16]
 8002fa6:	4607      	mov	r7, r0
 8002fa8:	4631      	mov	r1, r6
 8002faa:	ee18 0a10 	vmov	r0, s16
 8002fae:	f7ff fa75 	bl	800249c <quorem>
 8002fb2:	4641      	mov	r1, r8
 8002fb4:	9002      	str	r0, [sp, #8]
 8002fb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8002fba:	ee18 0a10 	vmov	r0, s16
 8002fbe:	f000 fb85 	bl	80036cc <__mcmp>
 8002fc2:	463a      	mov	r2, r7
 8002fc4:	9003      	str	r0, [sp, #12]
 8002fc6:	4631      	mov	r1, r6
 8002fc8:	4620      	mov	r0, r4
 8002fca:	f000 fb9b 	bl	8003704 <__mdiff>
 8002fce:	68c2      	ldr	r2, [r0, #12]
 8002fd0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8002fd4:	4605      	mov	r5, r0
 8002fd6:	bb02      	cbnz	r2, 800301a <_dtoa_r+0xa62>
 8002fd8:	4601      	mov	r1, r0
 8002fda:	ee18 0a10 	vmov	r0, s16
 8002fde:	f000 fb75 	bl	80036cc <__mcmp>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	9207      	str	r2, [sp, #28]
 8002fea:	f000 f92d 	bl	8003248 <_Bfree>
 8002fee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8002ff2:	ea43 0102 	orr.w	r1, r3, r2
 8002ff6:	9b04      	ldr	r3, [sp, #16]
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	464d      	mov	r5, r9
 8002ffc:	d10f      	bne.n	800301e <_dtoa_r+0xa66>
 8002ffe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003002:	d02a      	beq.n	800305a <_dtoa_r+0xaa2>
 8003004:	9b03      	ldr	r3, [sp, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	dd02      	ble.n	8003010 <_dtoa_r+0xa58>
 800300a:	9b02      	ldr	r3, [sp, #8]
 800300c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8003010:	f88b a000 	strb.w	sl, [fp]
 8003014:	e775      	b.n	8002f02 <_dtoa_r+0x94a>
 8003016:	4638      	mov	r0, r7
 8003018:	e7ba      	b.n	8002f90 <_dtoa_r+0x9d8>
 800301a:	2201      	movs	r2, #1
 800301c:	e7e2      	b.n	8002fe4 <_dtoa_r+0xa2c>
 800301e:	9b03      	ldr	r3, [sp, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	db04      	blt.n	800302e <_dtoa_r+0xa76>
 8003024:	9906      	ldr	r1, [sp, #24]
 8003026:	430b      	orrs	r3, r1
 8003028:	9904      	ldr	r1, [sp, #16]
 800302a:	430b      	orrs	r3, r1
 800302c:	d122      	bne.n	8003074 <_dtoa_r+0xabc>
 800302e:	2a00      	cmp	r2, #0
 8003030:	ddee      	ble.n	8003010 <_dtoa_r+0xa58>
 8003032:	ee18 1a10 	vmov	r1, s16
 8003036:	2201      	movs	r2, #1
 8003038:	4620      	mov	r0, r4
 800303a:	f000 fad7 	bl	80035ec <__lshift>
 800303e:	4631      	mov	r1, r6
 8003040:	ee08 0a10 	vmov	s16, r0
 8003044:	f000 fb42 	bl	80036cc <__mcmp>
 8003048:	2800      	cmp	r0, #0
 800304a:	dc03      	bgt.n	8003054 <_dtoa_r+0xa9c>
 800304c:	d1e0      	bne.n	8003010 <_dtoa_r+0xa58>
 800304e:	f01a 0f01 	tst.w	sl, #1
 8003052:	d0dd      	beq.n	8003010 <_dtoa_r+0xa58>
 8003054:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003058:	d1d7      	bne.n	800300a <_dtoa_r+0xa52>
 800305a:	2339      	movs	r3, #57	; 0x39
 800305c:	f88b 3000 	strb.w	r3, [fp]
 8003060:	462b      	mov	r3, r5
 8003062:	461d      	mov	r5, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800306a:	2a39      	cmp	r2, #57	; 0x39
 800306c:	d071      	beq.n	8003152 <_dtoa_r+0xb9a>
 800306e:	3201      	adds	r2, #1
 8003070:	701a      	strb	r2, [r3, #0]
 8003072:	e746      	b.n	8002f02 <_dtoa_r+0x94a>
 8003074:	2a00      	cmp	r2, #0
 8003076:	dd07      	ble.n	8003088 <_dtoa_r+0xad0>
 8003078:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800307c:	d0ed      	beq.n	800305a <_dtoa_r+0xaa2>
 800307e:	f10a 0301 	add.w	r3, sl, #1
 8003082:	f88b 3000 	strb.w	r3, [fp]
 8003086:	e73c      	b.n	8002f02 <_dtoa_r+0x94a>
 8003088:	9b05      	ldr	r3, [sp, #20]
 800308a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800308e:	4599      	cmp	r9, r3
 8003090:	d047      	beq.n	8003122 <_dtoa_r+0xb6a>
 8003092:	ee18 1a10 	vmov	r1, s16
 8003096:	2300      	movs	r3, #0
 8003098:	220a      	movs	r2, #10
 800309a:	4620      	mov	r0, r4
 800309c:	f000 f8f6 	bl	800328c <__multadd>
 80030a0:	45b8      	cmp	r8, r7
 80030a2:	ee08 0a10 	vmov	s16, r0
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	f04f 020a 	mov.w	r2, #10
 80030ae:	4641      	mov	r1, r8
 80030b0:	4620      	mov	r0, r4
 80030b2:	d106      	bne.n	80030c2 <_dtoa_r+0xb0a>
 80030b4:	f000 f8ea 	bl	800328c <__multadd>
 80030b8:	4680      	mov	r8, r0
 80030ba:	4607      	mov	r7, r0
 80030bc:	f109 0901 	add.w	r9, r9, #1
 80030c0:	e772      	b.n	8002fa8 <_dtoa_r+0x9f0>
 80030c2:	f000 f8e3 	bl	800328c <__multadd>
 80030c6:	4639      	mov	r1, r7
 80030c8:	4680      	mov	r8, r0
 80030ca:	2300      	movs	r3, #0
 80030cc:	220a      	movs	r2, #10
 80030ce:	4620      	mov	r0, r4
 80030d0:	f000 f8dc 	bl	800328c <__multadd>
 80030d4:	4607      	mov	r7, r0
 80030d6:	e7f1      	b.n	80030bc <_dtoa_r+0xb04>
 80030d8:	9b03      	ldr	r3, [sp, #12]
 80030da:	9302      	str	r3, [sp, #8]
 80030dc:	9d01      	ldr	r5, [sp, #4]
 80030de:	ee18 0a10 	vmov	r0, s16
 80030e2:	4631      	mov	r1, r6
 80030e4:	f7ff f9da 	bl	800249c <quorem>
 80030e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80030ec:	9b01      	ldr	r3, [sp, #4]
 80030ee:	f805 ab01 	strb.w	sl, [r5], #1
 80030f2:	1aea      	subs	r2, r5, r3
 80030f4:	9b02      	ldr	r3, [sp, #8]
 80030f6:	4293      	cmp	r3, r2
 80030f8:	dd09      	ble.n	800310e <_dtoa_r+0xb56>
 80030fa:	ee18 1a10 	vmov	r1, s16
 80030fe:	2300      	movs	r3, #0
 8003100:	220a      	movs	r2, #10
 8003102:	4620      	mov	r0, r4
 8003104:	f000 f8c2 	bl	800328c <__multadd>
 8003108:	ee08 0a10 	vmov	s16, r0
 800310c:	e7e7      	b.n	80030de <_dtoa_r+0xb26>
 800310e:	9b02      	ldr	r3, [sp, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	bfc8      	it	gt
 8003114:	461d      	movgt	r5, r3
 8003116:	9b01      	ldr	r3, [sp, #4]
 8003118:	bfd8      	it	le
 800311a:	2501      	movle	r5, #1
 800311c:	441d      	add	r5, r3
 800311e:	f04f 0800 	mov.w	r8, #0
 8003122:	ee18 1a10 	vmov	r1, s16
 8003126:	2201      	movs	r2, #1
 8003128:	4620      	mov	r0, r4
 800312a:	f000 fa5f 	bl	80035ec <__lshift>
 800312e:	4631      	mov	r1, r6
 8003130:	ee08 0a10 	vmov	s16, r0
 8003134:	f000 faca 	bl	80036cc <__mcmp>
 8003138:	2800      	cmp	r0, #0
 800313a:	dc91      	bgt.n	8003060 <_dtoa_r+0xaa8>
 800313c:	d102      	bne.n	8003144 <_dtoa_r+0xb8c>
 800313e:	f01a 0f01 	tst.w	sl, #1
 8003142:	d18d      	bne.n	8003060 <_dtoa_r+0xaa8>
 8003144:	462b      	mov	r3, r5
 8003146:	461d      	mov	r5, r3
 8003148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800314c:	2a30      	cmp	r2, #48	; 0x30
 800314e:	d0fa      	beq.n	8003146 <_dtoa_r+0xb8e>
 8003150:	e6d7      	b.n	8002f02 <_dtoa_r+0x94a>
 8003152:	9a01      	ldr	r2, [sp, #4]
 8003154:	429a      	cmp	r2, r3
 8003156:	d184      	bne.n	8003062 <_dtoa_r+0xaaa>
 8003158:	9b00      	ldr	r3, [sp, #0]
 800315a:	3301      	adds	r3, #1
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	2331      	movs	r3, #49	; 0x31
 8003160:	7013      	strb	r3, [r2, #0]
 8003162:	e6ce      	b.n	8002f02 <_dtoa_r+0x94a>
 8003164:	4b09      	ldr	r3, [pc, #36]	; (800318c <_dtoa_r+0xbd4>)
 8003166:	f7ff ba95 	b.w	8002694 <_dtoa_r+0xdc>
 800316a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800316c:	2b00      	cmp	r3, #0
 800316e:	f47f aa6e 	bne.w	800264e <_dtoa_r+0x96>
 8003172:	4b07      	ldr	r3, [pc, #28]	; (8003190 <_dtoa_r+0xbd8>)
 8003174:	f7ff ba8e 	b.w	8002694 <_dtoa_r+0xdc>
 8003178:	9b02      	ldr	r3, [sp, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	dcae      	bgt.n	80030dc <_dtoa_r+0xb24>
 800317e:	9b06      	ldr	r3, [sp, #24]
 8003180:	2b02      	cmp	r3, #2
 8003182:	f73f aea8 	bgt.w	8002ed6 <_dtoa_r+0x91e>
 8003186:	e7a9      	b.n	80030dc <_dtoa_r+0xb24>
 8003188:	08004a33 	.word	0x08004a33
 800318c:	08004990 	.word	0x08004990
 8003190:	080049b4 	.word	0x080049b4

08003194 <_localeconv_r>:
 8003194:	4800      	ldr	r0, [pc, #0]	; (8003198 <_localeconv_r+0x4>)
 8003196:	4770      	bx	lr
 8003198:	20000198 	.word	0x20000198

0800319c <malloc>:
 800319c:	4b02      	ldr	r3, [pc, #8]	; (80031a8 <malloc+0xc>)
 800319e:	4601      	mov	r1, r0
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	f000 bc17 	b.w	80039d4 <_malloc_r>
 80031a6:	bf00      	nop
 80031a8:	20000044 	.word	0x20000044

080031ac <memcpy>:
 80031ac:	440a      	add	r2, r1
 80031ae:	4291      	cmp	r1, r2
 80031b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80031b4:	d100      	bne.n	80031b8 <memcpy+0xc>
 80031b6:	4770      	bx	lr
 80031b8:	b510      	push	{r4, lr}
 80031ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031c2:	4291      	cmp	r1, r2
 80031c4:	d1f9      	bne.n	80031ba <memcpy+0xe>
 80031c6:	bd10      	pop	{r4, pc}

080031c8 <_Balloc>:
 80031c8:	b570      	push	{r4, r5, r6, lr}
 80031ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80031cc:	4604      	mov	r4, r0
 80031ce:	460d      	mov	r5, r1
 80031d0:	b976      	cbnz	r6, 80031f0 <_Balloc+0x28>
 80031d2:	2010      	movs	r0, #16
 80031d4:	f7ff ffe2 	bl	800319c <malloc>
 80031d8:	4602      	mov	r2, r0
 80031da:	6260      	str	r0, [r4, #36]	; 0x24
 80031dc:	b920      	cbnz	r0, 80031e8 <_Balloc+0x20>
 80031de:	4b18      	ldr	r3, [pc, #96]	; (8003240 <_Balloc+0x78>)
 80031e0:	4818      	ldr	r0, [pc, #96]	; (8003244 <_Balloc+0x7c>)
 80031e2:	2166      	movs	r1, #102	; 0x66
 80031e4:	f000 fdd6 	bl	8003d94 <__assert_func>
 80031e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80031ec:	6006      	str	r6, [r0, #0]
 80031ee:	60c6      	str	r6, [r0, #12]
 80031f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80031f2:	68f3      	ldr	r3, [r6, #12]
 80031f4:	b183      	cbz	r3, 8003218 <_Balloc+0x50>
 80031f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80031fe:	b9b8      	cbnz	r0, 8003230 <_Balloc+0x68>
 8003200:	2101      	movs	r1, #1
 8003202:	fa01 f605 	lsl.w	r6, r1, r5
 8003206:	1d72      	adds	r2, r6, #5
 8003208:	0092      	lsls	r2, r2, #2
 800320a:	4620      	mov	r0, r4
 800320c:	f000 fb60 	bl	80038d0 <_calloc_r>
 8003210:	b160      	cbz	r0, 800322c <_Balloc+0x64>
 8003212:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003216:	e00e      	b.n	8003236 <_Balloc+0x6e>
 8003218:	2221      	movs	r2, #33	; 0x21
 800321a:	2104      	movs	r1, #4
 800321c:	4620      	mov	r0, r4
 800321e:	f000 fb57 	bl	80038d0 <_calloc_r>
 8003222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003224:	60f0      	str	r0, [r6, #12]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1e4      	bne.n	80031f6 <_Balloc+0x2e>
 800322c:	2000      	movs	r0, #0
 800322e:	bd70      	pop	{r4, r5, r6, pc}
 8003230:	6802      	ldr	r2, [r0, #0]
 8003232:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003236:	2300      	movs	r3, #0
 8003238:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800323c:	e7f7      	b.n	800322e <_Balloc+0x66>
 800323e:	bf00      	nop
 8003240:	080049c1 	.word	0x080049c1
 8003244:	08004a44 	.word	0x08004a44

08003248 <_Bfree>:
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800324c:	4605      	mov	r5, r0
 800324e:	460c      	mov	r4, r1
 8003250:	b976      	cbnz	r6, 8003270 <_Bfree+0x28>
 8003252:	2010      	movs	r0, #16
 8003254:	f7ff ffa2 	bl	800319c <malloc>
 8003258:	4602      	mov	r2, r0
 800325a:	6268      	str	r0, [r5, #36]	; 0x24
 800325c:	b920      	cbnz	r0, 8003268 <_Bfree+0x20>
 800325e:	4b09      	ldr	r3, [pc, #36]	; (8003284 <_Bfree+0x3c>)
 8003260:	4809      	ldr	r0, [pc, #36]	; (8003288 <_Bfree+0x40>)
 8003262:	218a      	movs	r1, #138	; 0x8a
 8003264:	f000 fd96 	bl	8003d94 <__assert_func>
 8003268:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800326c:	6006      	str	r6, [r0, #0]
 800326e:	60c6      	str	r6, [r0, #12]
 8003270:	b13c      	cbz	r4, 8003282 <_Bfree+0x3a>
 8003272:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003274:	6862      	ldr	r2, [r4, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800327c:	6021      	str	r1, [r4, #0]
 800327e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003282:	bd70      	pop	{r4, r5, r6, pc}
 8003284:	080049c1 	.word	0x080049c1
 8003288:	08004a44 	.word	0x08004a44

0800328c <__multadd>:
 800328c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003290:	690d      	ldr	r5, [r1, #16]
 8003292:	4607      	mov	r7, r0
 8003294:	460c      	mov	r4, r1
 8003296:	461e      	mov	r6, r3
 8003298:	f101 0c14 	add.w	ip, r1, #20
 800329c:	2000      	movs	r0, #0
 800329e:	f8dc 3000 	ldr.w	r3, [ip]
 80032a2:	b299      	uxth	r1, r3
 80032a4:	fb02 6101 	mla	r1, r2, r1, r6
 80032a8:	0c1e      	lsrs	r6, r3, #16
 80032aa:	0c0b      	lsrs	r3, r1, #16
 80032ac:	fb02 3306 	mla	r3, r2, r6, r3
 80032b0:	b289      	uxth	r1, r1
 80032b2:	3001      	adds	r0, #1
 80032b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80032b8:	4285      	cmp	r5, r0
 80032ba:	f84c 1b04 	str.w	r1, [ip], #4
 80032be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80032c2:	dcec      	bgt.n	800329e <__multadd+0x12>
 80032c4:	b30e      	cbz	r6, 800330a <__multadd+0x7e>
 80032c6:	68a3      	ldr	r3, [r4, #8]
 80032c8:	42ab      	cmp	r3, r5
 80032ca:	dc19      	bgt.n	8003300 <__multadd+0x74>
 80032cc:	6861      	ldr	r1, [r4, #4]
 80032ce:	4638      	mov	r0, r7
 80032d0:	3101      	adds	r1, #1
 80032d2:	f7ff ff79 	bl	80031c8 <_Balloc>
 80032d6:	4680      	mov	r8, r0
 80032d8:	b928      	cbnz	r0, 80032e6 <__multadd+0x5a>
 80032da:	4602      	mov	r2, r0
 80032dc:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <__multadd+0x84>)
 80032de:	480d      	ldr	r0, [pc, #52]	; (8003314 <__multadd+0x88>)
 80032e0:	21b5      	movs	r1, #181	; 0xb5
 80032e2:	f000 fd57 	bl	8003d94 <__assert_func>
 80032e6:	6922      	ldr	r2, [r4, #16]
 80032e8:	3202      	adds	r2, #2
 80032ea:	f104 010c 	add.w	r1, r4, #12
 80032ee:	0092      	lsls	r2, r2, #2
 80032f0:	300c      	adds	r0, #12
 80032f2:	f7ff ff5b 	bl	80031ac <memcpy>
 80032f6:	4621      	mov	r1, r4
 80032f8:	4638      	mov	r0, r7
 80032fa:	f7ff ffa5 	bl	8003248 <_Bfree>
 80032fe:	4644      	mov	r4, r8
 8003300:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003304:	3501      	adds	r5, #1
 8003306:	615e      	str	r6, [r3, #20]
 8003308:	6125      	str	r5, [r4, #16]
 800330a:	4620      	mov	r0, r4
 800330c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003310:	08004a33 	.word	0x08004a33
 8003314:	08004a44 	.word	0x08004a44

08003318 <__hi0bits>:
 8003318:	0c03      	lsrs	r3, r0, #16
 800331a:	041b      	lsls	r3, r3, #16
 800331c:	b9d3      	cbnz	r3, 8003354 <__hi0bits+0x3c>
 800331e:	0400      	lsls	r0, r0, #16
 8003320:	2310      	movs	r3, #16
 8003322:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003326:	bf04      	itt	eq
 8003328:	0200      	lsleq	r0, r0, #8
 800332a:	3308      	addeq	r3, #8
 800332c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003330:	bf04      	itt	eq
 8003332:	0100      	lsleq	r0, r0, #4
 8003334:	3304      	addeq	r3, #4
 8003336:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800333a:	bf04      	itt	eq
 800333c:	0080      	lsleq	r0, r0, #2
 800333e:	3302      	addeq	r3, #2
 8003340:	2800      	cmp	r0, #0
 8003342:	db05      	blt.n	8003350 <__hi0bits+0x38>
 8003344:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003348:	f103 0301 	add.w	r3, r3, #1
 800334c:	bf08      	it	eq
 800334e:	2320      	moveq	r3, #32
 8003350:	4618      	mov	r0, r3
 8003352:	4770      	bx	lr
 8003354:	2300      	movs	r3, #0
 8003356:	e7e4      	b.n	8003322 <__hi0bits+0xa>

08003358 <__lo0bits>:
 8003358:	6803      	ldr	r3, [r0, #0]
 800335a:	f013 0207 	ands.w	r2, r3, #7
 800335e:	4601      	mov	r1, r0
 8003360:	d00b      	beq.n	800337a <__lo0bits+0x22>
 8003362:	07da      	lsls	r2, r3, #31
 8003364:	d423      	bmi.n	80033ae <__lo0bits+0x56>
 8003366:	0798      	lsls	r0, r3, #30
 8003368:	bf49      	itett	mi
 800336a:	085b      	lsrmi	r3, r3, #1
 800336c:	089b      	lsrpl	r3, r3, #2
 800336e:	2001      	movmi	r0, #1
 8003370:	600b      	strmi	r3, [r1, #0]
 8003372:	bf5c      	itt	pl
 8003374:	600b      	strpl	r3, [r1, #0]
 8003376:	2002      	movpl	r0, #2
 8003378:	4770      	bx	lr
 800337a:	b298      	uxth	r0, r3
 800337c:	b9a8      	cbnz	r0, 80033aa <__lo0bits+0x52>
 800337e:	0c1b      	lsrs	r3, r3, #16
 8003380:	2010      	movs	r0, #16
 8003382:	b2da      	uxtb	r2, r3
 8003384:	b90a      	cbnz	r2, 800338a <__lo0bits+0x32>
 8003386:	3008      	adds	r0, #8
 8003388:	0a1b      	lsrs	r3, r3, #8
 800338a:	071a      	lsls	r2, r3, #28
 800338c:	bf04      	itt	eq
 800338e:	091b      	lsreq	r3, r3, #4
 8003390:	3004      	addeq	r0, #4
 8003392:	079a      	lsls	r2, r3, #30
 8003394:	bf04      	itt	eq
 8003396:	089b      	lsreq	r3, r3, #2
 8003398:	3002      	addeq	r0, #2
 800339a:	07da      	lsls	r2, r3, #31
 800339c:	d403      	bmi.n	80033a6 <__lo0bits+0x4e>
 800339e:	085b      	lsrs	r3, r3, #1
 80033a0:	f100 0001 	add.w	r0, r0, #1
 80033a4:	d005      	beq.n	80033b2 <__lo0bits+0x5a>
 80033a6:	600b      	str	r3, [r1, #0]
 80033a8:	4770      	bx	lr
 80033aa:	4610      	mov	r0, r2
 80033ac:	e7e9      	b.n	8003382 <__lo0bits+0x2a>
 80033ae:	2000      	movs	r0, #0
 80033b0:	4770      	bx	lr
 80033b2:	2020      	movs	r0, #32
 80033b4:	4770      	bx	lr
	...

080033b8 <__i2b>:
 80033b8:	b510      	push	{r4, lr}
 80033ba:	460c      	mov	r4, r1
 80033bc:	2101      	movs	r1, #1
 80033be:	f7ff ff03 	bl	80031c8 <_Balloc>
 80033c2:	4602      	mov	r2, r0
 80033c4:	b928      	cbnz	r0, 80033d2 <__i2b+0x1a>
 80033c6:	4b05      	ldr	r3, [pc, #20]	; (80033dc <__i2b+0x24>)
 80033c8:	4805      	ldr	r0, [pc, #20]	; (80033e0 <__i2b+0x28>)
 80033ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80033ce:	f000 fce1 	bl	8003d94 <__assert_func>
 80033d2:	2301      	movs	r3, #1
 80033d4:	6144      	str	r4, [r0, #20]
 80033d6:	6103      	str	r3, [r0, #16]
 80033d8:	bd10      	pop	{r4, pc}
 80033da:	bf00      	nop
 80033dc:	08004a33 	.word	0x08004a33
 80033e0:	08004a44 	.word	0x08004a44

080033e4 <__multiply>:
 80033e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033e8:	4691      	mov	r9, r2
 80033ea:	690a      	ldr	r2, [r1, #16]
 80033ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	bfb8      	it	lt
 80033f4:	460b      	movlt	r3, r1
 80033f6:	460c      	mov	r4, r1
 80033f8:	bfbc      	itt	lt
 80033fa:	464c      	movlt	r4, r9
 80033fc:	4699      	movlt	r9, r3
 80033fe:	6927      	ldr	r7, [r4, #16]
 8003400:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003404:	68a3      	ldr	r3, [r4, #8]
 8003406:	6861      	ldr	r1, [r4, #4]
 8003408:	eb07 060a 	add.w	r6, r7, sl
 800340c:	42b3      	cmp	r3, r6
 800340e:	b085      	sub	sp, #20
 8003410:	bfb8      	it	lt
 8003412:	3101      	addlt	r1, #1
 8003414:	f7ff fed8 	bl	80031c8 <_Balloc>
 8003418:	b930      	cbnz	r0, 8003428 <__multiply+0x44>
 800341a:	4602      	mov	r2, r0
 800341c:	4b44      	ldr	r3, [pc, #272]	; (8003530 <__multiply+0x14c>)
 800341e:	4845      	ldr	r0, [pc, #276]	; (8003534 <__multiply+0x150>)
 8003420:	f240 115d 	movw	r1, #349	; 0x15d
 8003424:	f000 fcb6 	bl	8003d94 <__assert_func>
 8003428:	f100 0514 	add.w	r5, r0, #20
 800342c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003430:	462b      	mov	r3, r5
 8003432:	2200      	movs	r2, #0
 8003434:	4543      	cmp	r3, r8
 8003436:	d321      	bcc.n	800347c <__multiply+0x98>
 8003438:	f104 0314 	add.w	r3, r4, #20
 800343c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003440:	f109 0314 	add.w	r3, r9, #20
 8003444:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003448:	9202      	str	r2, [sp, #8]
 800344a:	1b3a      	subs	r2, r7, r4
 800344c:	3a15      	subs	r2, #21
 800344e:	f022 0203 	bic.w	r2, r2, #3
 8003452:	3204      	adds	r2, #4
 8003454:	f104 0115 	add.w	r1, r4, #21
 8003458:	428f      	cmp	r7, r1
 800345a:	bf38      	it	cc
 800345c:	2204      	movcc	r2, #4
 800345e:	9201      	str	r2, [sp, #4]
 8003460:	9a02      	ldr	r2, [sp, #8]
 8003462:	9303      	str	r3, [sp, #12]
 8003464:	429a      	cmp	r2, r3
 8003466:	d80c      	bhi.n	8003482 <__multiply+0x9e>
 8003468:	2e00      	cmp	r6, #0
 800346a:	dd03      	ble.n	8003474 <__multiply+0x90>
 800346c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003470:	2b00      	cmp	r3, #0
 8003472:	d05a      	beq.n	800352a <__multiply+0x146>
 8003474:	6106      	str	r6, [r0, #16]
 8003476:	b005      	add	sp, #20
 8003478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800347c:	f843 2b04 	str.w	r2, [r3], #4
 8003480:	e7d8      	b.n	8003434 <__multiply+0x50>
 8003482:	f8b3 a000 	ldrh.w	sl, [r3]
 8003486:	f1ba 0f00 	cmp.w	sl, #0
 800348a:	d024      	beq.n	80034d6 <__multiply+0xf2>
 800348c:	f104 0e14 	add.w	lr, r4, #20
 8003490:	46a9      	mov	r9, r5
 8003492:	f04f 0c00 	mov.w	ip, #0
 8003496:	f85e 2b04 	ldr.w	r2, [lr], #4
 800349a:	f8d9 1000 	ldr.w	r1, [r9]
 800349e:	fa1f fb82 	uxth.w	fp, r2
 80034a2:	b289      	uxth	r1, r1
 80034a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80034a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80034ac:	f8d9 2000 	ldr.w	r2, [r9]
 80034b0:	4461      	add	r1, ip
 80034b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80034b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80034ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80034be:	b289      	uxth	r1, r1
 80034c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80034c4:	4577      	cmp	r7, lr
 80034c6:	f849 1b04 	str.w	r1, [r9], #4
 80034ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80034ce:	d8e2      	bhi.n	8003496 <__multiply+0xb2>
 80034d0:	9a01      	ldr	r2, [sp, #4]
 80034d2:	f845 c002 	str.w	ip, [r5, r2]
 80034d6:	9a03      	ldr	r2, [sp, #12]
 80034d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80034dc:	3304      	adds	r3, #4
 80034de:	f1b9 0f00 	cmp.w	r9, #0
 80034e2:	d020      	beq.n	8003526 <__multiply+0x142>
 80034e4:	6829      	ldr	r1, [r5, #0]
 80034e6:	f104 0c14 	add.w	ip, r4, #20
 80034ea:	46ae      	mov	lr, r5
 80034ec:	f04f 0a00 	mov.w	sl, #0
 80034f0:	f8bc b000 	ldrh.w	fp, [ip]
 80034f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80034f8:	fb09 220b 	mla	r2, r9, fp, r2
 80034fc:	4492      	add	sl, r2
 80034fe:	b289      	uxth	r1, r1
 8003500:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8003504:	f84e 1b04 	str.w	r1, [lr], #4
 8003508:	f85c 2b04 	ldr.w	r2, [ip], #4
 800350c:	f8be 1000 	ldrh.w	r1, [lr]
 8003510:	0c12      	lsrs	r2, r2, #16
 8003512:	fb09 1102 	mla	r1, r9, r2, r1
 8003516:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800351a:	4567      	cmp	r7, ip
 800351c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003520:	d8e6      	bhi.n	80034f0 <__multiply+0x10c>
 8003522:	9a01      	ldr	r2, [sp, #4]
 8003524:	50a9      	str	r1, [r5, r2]
 8003526:	3504      	adds	r5, #4
 8003528:	e79a      	b.n	8003460 <__multiply+0x7c>
 800352a:	3e01      	subs	r6, #1
 800352c:	e79c      	b.n	8003468 <__multiply+0x84>
 800352e:	bf00      	nop
 8003530:	08004a33 	.word	0x08004a33
 8003534:	08004a44 	.word	0x08004a44

08003538 <__pow5mult>:
 8003538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800353c:	4615      	mov	r5, r2
 800353e:	f012 0203 	ands.w	r2, r2, #3
 8003542:	4606      	mov	r6, r0
 8003544:	460f      	mov	r7, r1
 8003546:	d007      	beq.n	8003558 <__pow5mult+0x20>
 8003548:	4c25      	ldr	r4, [pc, #148]	; (80035e0 <__pow5mult+0xa8>)
 800354a:	3a01      	subs	r2, #1
 800354c:	2300      	movs	r3, #0
 800354e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003552:	f7ff fe9b 	bl	800328c <__multadd>
 8003556:	4607      	mov	r7, r0
 8003558:	10ad      	asrs	r5, r5, #2
 800355a:	d03d      	beq.n	80035d8 <__pow5mult+0xa0>
 800355c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800355e:	b97c      	cbnz	r4, 8003580 <__pow5mult+0x48>
 8003560:	2010      	movs	r0, #16
 8003562:	f7ff fe1b 	bl	800319c <malloc>
 8003566:	4602      	mov	r2, r0
 8003568:	6270      	str	r0, [r6, #36]	; 0x24
 800356a:	b928      	cbnz	r0, 8003578 <__pow5mult+0x40>
 800356c:	4b1d      	ldr	r3, [pc, #116]	; (80035e4 <__pow5mult+0xac>)
 800356e:	481e      	ldr	r0, [pc, #120]	; (80035e8 <__pow5mult+0xb0>)
 8003570:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003574:	f000 fc0e 	bl	8003d94 <__assert_func>
 8003578:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800357c:	6004      	str	r4, [r0, #0]
 800357e:	60c4      	str	r4, [r0, #12]
 8003580:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003584:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003588:	b94c      	cbnz	r4, 800359e <__pow5mult+0x66>
 800358a:	f240 2171 	movw	r1, #625	; 0x271
 800358e:	4630      	mov	r0, r6
 8003590:	f7ff ff12 	bl	80033b8 <__i2b>
 8003594:	2300      	movs	r3, #0
 8003596:	f8c8 0008 	str.w	r0, [r8, #8]
 800359a:	4604      	mov	r4, r0
 800359c:	6003      	str	r3, [r0, #0]
 800359e:	f04f 0900 	mov.w	r9, #0
 80035a2:	07eb      	lsls	r3, r5, #31
 80035a4:	d50a      	bpl.n	80035bc <__pow5mult+0x84>
 80035a6:	4639      	mov	r1, r7
 80035a8:	4622      	mov	r2, r4
 80035aa:	4630      	mov	r0, r6
 80035ac:	f7ff ff1a 	bl	80033e4 <__multiply>
 80035b0:	4639      	mov	r1, r7
 80035b2:	4680      	mov	r8, r0
 80035b4:	4630      	mov	r0, r6
 80035b6:	f7ff fe47 	bl	8003248 <_Bfree>
 80035ba:	4647      	mov	r7, r8
 80035bc:	106d      	asrs	r5, r5, #1
 80035be:	d00b      	beq.n	80035d8 <__pow5mult+0xa0>
 80035c0:	6820      	ldr	r0, [r4, #0]
 80035c2:	b938      	cbnz	r0, 80035d4 <__pow5mult+0x9c>
 80035c4:	4622      	mov	r2, r4
 80035c6:	4621      	mov	r1, r4
 80035c8:	4630      	mov	r0, r6
 80035ca:	f7ff ff0b 	bl	80033e4 <__multiply>
 80035ce:	6020      	str	r0, [r4, #0]
 80035d0:	f8c0 9000 	str.w	r9, [r0]
 80035d4:	4604      	mov	r4, r0
 80035d6:	e7e4      	b.n	80035a2 <__pow5mult+0x6a>
 80035d8:	4638      	mov	r0, r7
 80035da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035de:	bf00      	nop
 80035e0:	08004b90 	.word	0x08004b90
 80035e4:	080049c1 	.word	0x080049c1
 80035e8:	08004a44 	.word	0x08004a44

080035ec <__lshift>:
 80035ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035f0:	460c      	mov	r4, r1
 80035f2:	6849      	ldr	r1, [r1, #4]
 80035f4:	6923      	ldr	r3, [r4, #16]
 80035f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80035fa:	68a3      	ldr	r3, [r4, #8]
 80035fc:	4607      	mov	r7, r0
 80035fe:	4691      	mov	r9, r2
 8003600:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003604:	f108 0601 	add.w	r6, r8, #1
 8003608:	42b3      	cmp	r3, r6
 800360a:	db0b      	blt.n	8003624 <__lshift+0x38>
 800360c:	4638      	mov	r0, r7
 800360e:	f7ff fddb 	bl	80031c8 <_Balloc>
 8003612:	4605      	mov	r5, r0
 8003614:	b948      	cbnz	r0, 800362a <__lshift+0x3e>
 8003616:	4602      	mov	r2, r0
 8003618:	4b2a      	ldr	r3, [pc, #168]	; (80036c4 <__lshift+0xd8>)
 800361a:	482b      	ldr	r0, [pc, #172]	; (80036c8 <__lshift+0xdc>)
 800361c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003620:	f000 fbb8 	bl	8003d94 <__assert_func>
 8003624:	3101      	adds	r1, #1
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	e7ee      	b.n	8003608 <__lshift+0x1c>
 800362a:	2300      	movs	r3, #0
 800362c:	f100 0114 	add.w	r1, r0, #20
 8003630:	f100 0210 	add.w	r2, r0, #16
 8003634:	4618      	mov	r0, r3
 8003636:	4553      	cmp	r3, sl
 8003638:	db37      	blt.n	80036aa <__lshift+0xbe>
 800363a:	6920      	ldr	r0, [r4, #16]
 800363c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003640:	f104 0314 	add.w	r3, r4, #20
 8003644:	f019 091f 	ands.w	r9, r9, #31
 8003648:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800364c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003650:	d02f      	beq.n	80036b2 <__lshift+0xc6>
 8003652:	f1c9 0e20 	rsb	lr, r9, #32
 8003656:	468a      	mov	sl, r1
 8003658:	f04f 0c00 	mov.w	ip, #0
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	fa02 f209 	lsl.w	r2, r2, r9
 8003662:	ea42 020c 	orr.w	r2, r2, ip
 8003666:	f84a 2b04 	str.w	r2, [sl], #4
 800366a:	f853 2b04 	ldr.w	r2, [r3], #4
 800366e:	4298      	cmp	r0, r3
 8003670:	fa22 fc0e 	lsr.w	ip, r2, lr
 8003674:	d8f2      	bhi.n	800365c <__lshift+0x70>
 8003676:	1b03      	subs	r3, r0, r4
 8003678:	3b15      	subs	r3, #21
 800367a:	f023 0303 	bic.w	r3, r3, #3
 800367e:	3304      	adds	r3, #4
 8003680:	f104 0215 	add.w	r2, r4, #21
 8003684:	4290      	cmp	r0, r2
 8003686:	bf38      	it	cc
 8003688:	2304      	movcc	r3, #4
 800368a:	f841 c003 	str.w	ip, [r1, r3]
 800368e:	f1bc 0f00 	cmp.w	ip, #0
 8003692:	d001      	beq.n	8003698 <__lshift+0xac>
 8003694:	f108 0602 	add.w	r6, r8, #2
 8003698:	3e01      	subs	r6, #1
 800369a:	4638      	mov	r0, r7
 800369c:	612e      	str	r6, [r5, #16]
 800369e:	4621      	mov	r1, r4
 80036a0:	f7ff fdd2 	bl	8003248 <_Bfree>
 80036a4:	4628      	mov	r0, r5
 80036a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80036ae:	3301      	adds	r3, #1
 80036b0:	e7c1      	b.n	8003636 <__lshift+0x4a>
 80036b2:	3904      	subs	r1, #4
 80036b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80036b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80036bc:	4298      	cmp	r0, r3
 80036be:	d8f9      	bhi.n	80036b4 <__lshift+0xc8>
 80036c0:	e7ea      	b.n	8003698 <__lshift+0xac>
 80036c2:	bf00      	nop
 80036c4:	08004a33 	.word	0x08004a33
 80036c8:	08004a44 	.word	0x08004a44

080036cc <__mcmp>:
 80036cc:	b530      	push	{r4, r5, lr}
 80036ce:	6902      	ldr	r2, [r0, #16]
 80036d0:	690c      	ldr	r4, [r1, #16]
 80036d2:	1b12      	subs	r2, r2, r4
 80036d4:	d10e      	bne.n	80036f4 <__mcmp+0x28>
 80036d6:	f100 0314 	add.w	r3, r0, #20
 80036da:	3114      	adds	r1, #20
 80036dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80036e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80036e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80036e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80036ec:	42a5      	cmp	r5, r4
 80036ee:	d003      	beq.n	80036f8 <__mcmp+0x2c>
 80036f0:	d305      	bcc.n	80036fe <__mcmp+0x32>
 80036f2:	2201      	movs	r2, #1
 80036f4:	4610      	mov	r0, r2
 80036f6:	bd30      	pop	{r4, r5, pc}
 80036f8:	4283      	cmp	r3, r0
 80036fa:	d3f3      	bcc.n	80036e4 <__mcmp+0x18>
 80036fc:	e7fa      	b.n	80036f4 <__mcmp+0x28>
 80036fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003702:	e7f7      	b.n	80036f4 <__mcmp+0x28>

08003704 <__mdiff>:
 8003704:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003708:	460c      	mov	r4, r1
 800370a:	4606      	mov	r6, r0
 800370c:	4611      	mov	r1, r2
 800370e:	4620      	mov	r0, r4
 8003710:	4690      	mov	r8, r2
 8003712:	f7ff ffdb 	bl	80036cc <__mcmp>
 8003716:	1e05      	subs	r5, r0, #0
 8003718:	d110      	bne.n	800373c <__mdiff+0x38>
 800371a:	4629      	mov	r1, r5
 800371c:	4630      	mov	r0, r6
 800371e:	f7ff fd53 	bl	80031c8 <_Balloc>
 8003722:	b930      	cbnz	r0, 8003732 <__mdiff+0x2e>
 8003724:	4b3a      	ldr	r3, [pc, #232]	; (8003810 <__mdiff+0x10c>)
 8003726:	4602      	mov	r2, r0
 8003728:	f240 2132 	movw	r1, #562	; 0x232
 800372c:	4839      	ldr	r0, [pc, #228]	; (8003814 <__mdiff+0x110>)
 800372e:	f000 fb31 	bl	8003d94 <__assert_func>
 8003732:	2301      	movs	r3, #1
 8003734:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003738:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800373c:	bfa4      	itt	ge
 800373e:	4643      	movge	r3, r8
 8003740:	46a0      	movge	r8, r4
 8003742:	4630      	mov	r0, r6
 8003744:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003748:	bfa6      	itte	ge
 800374a:	461c      	movge	r4, r3
 800374c:	2500      	movge	r5, #0
 800374e:	2501      	movlt	r5, #1
 8003750:	f7ff fd3a 	bl	80031c8 <_Balloc>
 8003754:	b920      	cbnz	r0, 8003760 <__mdiff+0x5c>
 8003756:	4b2e      	ldr	r3, [pc, #184]	; (8003810 <__mdiff+0x10c>)
 8003758:	4602      	mov	r2, r0
 800375a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800375e:	e7e5      	b.n	800372c <__mdiff+0x28>
 8003760:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003764:	6926      	ldr	r6, [r4, #16]
 8003766:	60c5      	str	r5, [r0, #12]
 8003768:	f104 0914 	add.w	r9, r4, #20
 800376c:	f108 0514 	add.w	r5, r8, #20
 8003770:	f100 0e14 	add.w	lr, r0, #20
 8003774:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8003778:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800377c:	f108 0210 	add.w	r2, r8, #16
 8003780:	46f2      	mov	sl, lr
 8003782:	2100      	movs	r1, #0
 8003784:	f859 3b04 	ldr.w	r3, [r9], #4
 8003788:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800378c:	fa1f f883 	uxth.w	r8, r3
 8003790:	fa11 f18b 	uxtah	r1, r1, fp
 8003794:	0c1b      	lsrs	r3, r3, #16
 8003796:	eba1 0808 	sub.w	r8, r1, r8
 800379a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800379e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80037a2:	fa1f f888 	uxth.w	r8, r8
 80037a6:	1419      	asrs	r1, r3, #16
 80037a8:	454e      	cmp	r6, r9
 80037aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80037ae:	f84a 3b04 	str.w	r3, [sl], #4
 80037b2:	d8e7      	bhi.n	8003784 <__mdiff+0x80>
 80037b4:	1b33      	subs	r3, r6, r4
 80037b6:	3b15      	subs	r3, #21
 80037b8:	f023 0303 	bic.w	r3, r3, #3
 80037bc:	3304      	adds	r3, #4
 80037be:	3415      	adds	r4, #21
 80037c0:	42a6      	cmp	r6, r4
 80037c2:	bf38      	it	cc
 80037c4:	2304      	movcc	r3, #4
 80037c6:	441d      	add	r5, r3
 80037c8:	4473      	add	r3, lr
 80037ca:	469e      	mov	lr, r3
 80037cc:	462e      	mov	r6, r5
 80037ce:	4566      	cmp	r6, ip
 80037d0:	d30e      	bcc.n	80037f0 <__mdiff+0xec>
 80037d2:	f10c 0203 	add.w	r2, ip, #3
 80037d6:	1b52      	subs	r2, r2, r5
 80037d8:	f022 0203 	bic.w	r2, r2, #3
 80037dc:	3d03      	subs	r5, #3
 80037de:	45ac      	cmp	ip, r5
 80037e0:	bf38      	it	cc
 80037e2:	2200      	movcc	r2, #0
 80037e4:	441a      	add	r2, r3
 80037e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80037ea:	b17b      	cbz	r3, 800380c <__mdiff+0x108>
 80037ec:	6107      	str	r7, [r0, #16]
 80037ee:	e7a3      	b.n	8003738 <__mdiff+0x34>
 80037f0:	f856 8b04 	ldr.w	r8, [r6], #4
 80037f4:	fa11 f288 	uxtah	r2, r1, r8
 80037f8:	1414      	asrs	r4, r2, #16
 80037fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80037fe:	b292      	uxth	r2, r2
 8003800:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003804:	f84e 2b04 	str.w	r2, [lr], #4
 8003808:	1421      	asrs	r1, r4, #16
 800380a:	e7e0      	b.n	80037ce <__mdiff+0xca>
 800380c:	3f01      	subs	r7, #1
 800380e:	e7ea      	b.n	80037e6 <__mdiff+0xe2>
 8003810:	08004a33 	.word	0x08004a33
 8003814:	08004a44 	.word	0x08004a44

08003818 <__d2b>:
 8003818:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800381c:	4689      	mov	r9, r1
 800381e:	2101      	movs	r1, #1
 8003820:	ec57 6b10 	vmov	r6, r7, d0
 8003824:	4690      	mov	r8, r2
 8003826:	f7ff fccf 	bl	80031c8 <_Balloc>
 800382a:	4604      	mov	r4, r0
 800382c:	b930      	cbnz	r0, 800383c <__d2b+0x24>
 800382e:	4602      	mov	r2, r0
 8003830:	4b25      	ldr	r3, [pc, #148]	; (80038c8 <__d2b+0xb0>)
 8003832:	4826      	ldr	r0, [pc, #152]	; (80038cc <__d2b+0xb4>)
 8003834:	f240 310a 	movw	r1, #778	; 0x30a
 8003838:	f000 faac 	bl	8003d94 <__assert_func>
 800383c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8003840:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003844:	bb35      	cbnz	r5, 8003894 <__d2b+0x7c>
 8003846:	2e00      	cmp	r6, #0
 8003848:	9301      	str	r3, [sp, #4]
 800384a:	d028      	beq.n	800389e <__d2b+0x86>
 800384c:	4668      	mov	r0, sp
 800384e:	9600      	str	r6, [sp, #0]
 8003850:	f7ff fd82 	bl	8003358 <__lo0bits>
 8003854:	9900      	ldr	r1, [sp, #0]
 8003856:	b300      	cbz	r0, 800389a <__d2b+0x82>
 8003858:	9a01      	ldr	r2, [sp, #4]
 800385a:	f1c0 0320 	rsb	r3, r0, #32
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	430b      	orrs	r3, r1
 8003864:	40c2      	lsrs	r2, r0
 8003866:	6163      	str	r3, [r4, #20]
 8003868:	9201      	str	r2, [sp, #4]
 800386a:	9b01      	ldr	r3, [sp, #4]
 800386c:	61a3      	str	r3, [r4, #24]
 800386e:	2b00      	cmp	r3, #0
 8003870:	bf14      	ite	ne
 8003872:	2202      	movne	r2, #2
 8003874:	2201      	moveq	r2, #1
 8003876:	6122      	str	r2, [r4, #16]
 8003878:	b1d5      	cbz	r5, 80038b0 <__d2b+0x98>
 800387a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800387e:	4405      	add	r5, r0
 8003880:	f8c9 5000 	str.w	r5, [r9]
 8003884:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003888:	f8c8 0000 	str.w	r0, [r8]
 800388c:	4620      	mov	r0, r4
 800388e:	b003      	add	sp, #12
 8003890:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003894:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003898:	e7d5      	b.n	8003846 <__d2b+0x2e>
 800389a:	6161      	str	r1, [r4, #20]
 800389c:	e7e5      	b.n	800386a <__d2b+0x52>
 800389e:	a801      	add	r0, sp, #4
 80038a0:	f7ff fd5a 	bl	8003358 <__lo0bits>
 80038a4:	9b01      	ldr	r3, [sp, #4]
 80038a6:	6163      	str	r3, [r4, #20]
 80038a8:	2201      	movs	r2, #1
 80038aa:	6122      	str	r2, [r4, #16]
 80038ac:	3020      	adds	r0, #32
 80038ae:	e7e3      	b.n	8003878 <__d2b+0x60>
 80038b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80038b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80038b8:	f8c9 0000 	str.w	r0, [r9]
 80038bc:	6918      	ldr	r0, [r3, #16]
 80038be:	f7ff fd2b 	bl	8003318 <__hi0bits>
 80038c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80038c6:	e7df      	b.n	8003888 <__d2b+0x70>
 80038c8:	08004a33 	.word	0x08004a33
 80038cc:	08004a44 	.word	0x08004a44

080038d0 <_calloc_r>:
 80038d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038d2:	fba1 2402 	umull	r2, r4, r1, r2
 80038d6:	b94c      	cbnz	r4, 80038ec <_calloc_r+0x1c>
 80038d8:	4611      	mov	r1, r2
 80038da:	9201      	str	r2, [sp, #4]
 80038dc:	f000 f87a 	bl	80039d4 <_malloc_r>
 80038e0:	9a01      	ldr	r2, [sp, #4]
 80038e2:	4605      	mov	r5, r0
 80038e4:	b930      	cbnz	r0, 80038f4 <_calloc_r+0x24>
 80038e6:	4628      	mov	r0, r5
 80038e8:	b003      	add	sp, #12
 80038ea:	bd30      	pop	{r4, r5, pc}
 80038ec:	220c      	movs	r2, #12
 80038ee:	6002      	str	r2, [r0, #0]
 80038f0:	2500      	movs	r5, #0
 80038f2:	e7f8      	b.n	80038e6 <_calloc_r+0x16>
 80038f4:	4621      	mov	r1, r4
 80038f6:	f7fe f93f 	bl	8001b78 <memset>
 80038fa:	e7f4      	b.n	80038e6 <_calloc_r+0x16>

080038fc <_free_r>:
 80038fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038fe:	2900      	cmp	r1, #0
 8003900:	d044      	beq.n	800398c <_free_r+0x90>
 8003902:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003906:	9001      	str	r0, [sp, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	f1a1 0404 	sub.w	r4, r1, #4
 800390e:	bfb8      	it	lt
 8003910:	18e4      	addlt	r4, r4, r3
 8003912:	f000 fa9b 	bl	8003e4c <__malloc_lock>
 8003916:	4a1e      	ldr	r2, [pc, #120]	; (8003990 <_free_r+0x94>)
 8003918:	9801      	ldr	r0, [sp, #4]
 800391a:	6813      	ldr	r3, [r2, #0]
 800391c:	b933      	cbnz	r3, 800392c <_free_r+0x30>
 800391e:	6063      	str	r3, [r4, #4]
 8003920:	6014      	str	r4, [r2, #0]
 8003922:	b003      	add	sp, #12
 8003924:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003928:	f000 ba96 	b.w	8003e58 <__malloc_unlock>
 800392c:	42a3      	cmp	r3, r4
 800392e:	d908      	bls.n	8003942 <_free_r+0x46>
 8003930:	6825      	ldr	r5, [r4, #0]
 8003932:	1961      	adds	r1, r4, r5
 8003934:	428b      	cmp	r3, r1
 8003936:	bf01      	itttt	eq
 8003938:	6819      	ldreq	r1, [r3, #0]
 800393a:	685b      	ldreq	r3, [r3, #4]
 800393c:	1949      	addeq	r1, r1, r5
 800393e:	6021      	streq	r1, [r4, #0]
 8003940:	e7ed      	b.n	800391e <_free_r+0x22>
 8003942:	461a      	mov	r2, r3
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	b10b      	cbz	r3, 800394c <_free_r+0x50>
 8003948:	42a3      	cmp	r3, r4
 800394a:	d9fa      	bls.n	8003942 <_free_r+0x46>
 800394c:	6811      	ldr	r1, [r2, #0]
 800394e:	1855      	adds	r5, r2, r1
 8003950:	42a5      	cmp	r5, r4
 8003952:	d10b      	bne.n	800396c <_free_r+0x70>
 8003954:	6824      	ldr	r4, [r4, #0]
 8003956:	4421      	add	r1, r4
 8003958:	1854      	adds	r4, r2, r1
 800395a:	42a3      	cmp	r3, r4
 800395c:	6011      	str	r1, [r2, #0]
 800395e:	d1e0      	bne.n	8003922 <_free_r+0x26>
 8003960:	681c      	ldr	r4, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	6053      	str	r3, [r2, #4]
 8003966:	4421      	add	r1, r4
 8003968:	6011      	str	r1, [r2, #0]
 800396a:	e7da      	b.n	8003922 <_free_r+0x26>
 800396c:	d902      	bls.n	8003974 <_free_r+0x78>
 800396e:	230c      	movs	r3, #12
 8003970:	6003      	str	r3, [r0, #0]
 8003972:	e7d6      	b.n	8003922 <_free_r+0x26>
 8003974:	6825      	ldr	r5, [r4, #0]
 8003976:	1961      	adds	r1, r4, r5
 8003978:	428b      	cmp	r3, r1
 800397a:	bf04      	itt	eq
 800397c:	6819      	ldreq	r1, [r3, #0]
 800397e:	685b      	ldreq	r3, [r3, #4]
 8003980:	6063      	str	r3, [r4, #4]
 8003982:	bf04      	itt	eq
 8003984:	1949      	addeq	r1, r1, r5
 8003986:	6021      	streq	r1, [r4, #0]
 8003988:	6054      	str	r4, [r2, #4]
 800398a:	e7ca      	b.n	8003922 <_free_r+0x26>
 800398c:	b003      	add	sp, #12
 800398e:	bd30      	pop	{r4, r5, pc}
 8003990:	2000030c 	.word	0x2000030c

08003994 <sbrk_aligned>:
 8003994:	b570      	push	{r4, r5, r6, lr}
 8003996:	4e0e      	ldr	r6, [pc, #56]	; (80039d0 <sbrk_aligned+0x3c>)
 8003998:	460c      	mov	r4, r1
 800399a:	6831      	ldr	r1, [r6, #0]
 800399c:	4605      	mov	r5, r0
 800399e:	b911      	cbnz	r1, 80039a6 <sbrk_aligned+0x12>
 80039a0:	f000 f9e8 	bl	8003d74 <_sbrk_r>
 80039a4:	6030      	str	r0, [r6, #0]
 80039a6:	4621      	mov	r1, r4
 80039a8:	4628      	mov	r0, r5
 80039aa:	f000 f9e3 	bl	8003d74 <_sbrk_r>
 80039ae:	1c43      	adds	r3, r0, #1
 80039b0:	d00a      	beq.n	80039c8 <sbrk_aligned+0x34>
 80039b2:	1cc4      	adds	r4, r0, #3
 80039b4:	f024 0403 	bic.w	r4, r4, #3
 80039b8:	42a0      	cmp	r0, r4
 80039ba:	d007      	beq.n	80039cc <sbrk_aligned+0x38>
 80039bc:	1a21      	subs	r1, r4, r0
 80039be:	4628      	mov	r0, r5
 80039c0:	f000 f9d8 	bl	8003d74 <_sbrk_r>
 80039c4:	3001      	adds	r0, #1
 80039c6:	d101      	bne.n	80039cc <sbrk_aligned+0x38>
 80039c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80039cc:	4620      	mov	r0, r4
 80039ce:	bd70      	pop	{r4, r5, r6, pc}
 80039d0:	20000310 	.word	0x20000310

080039d4 <_malloc_r>:
 80039d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039d8:	1ccd      	adds	r5, r1, #3
 80039da:	f025 0503 	bic.w	r5, r5, #3
 80039de:	3508      	adds	r5, #8
 80039e0:	2d0c      	cmp	r5, #12
 80039e2:	bf38      	it	cc
 80039e4:	250c      	movcc	r5, #12
 80039e6:	2d00      	cmp	r5, #0
 80039e8:	4607      	mov	r7, r0
 80039ea:	db01      	blt.n	80039f0 <_malloc_r+0x1c>
 80039ec:	42a9      	cmp	r1, r5
 80039ee:	d905      	bls.n	80039fc <_malloc_r+0x28>
 80039f0:	230c      	movs	r3, #12
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	2600      	movs	r6, #0
 80039f6:	4630      	mov	r0, r6
 80039f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039fc:	4e2e      	ldr	r6, [pc, #184]	; (8003ab8 <_malloc_r+0xe4>)
 80039fe:	f000 fa25 	bl	8003e4c <__malloc_lock>
 8003a02:	6833      	ldr	r3, [r6, #0]
 8003a04:	461c      	mov	r4, r3
 8003a06:	bb34      	cbnz	r4, 8003a56 <_malloc_r+0x82>
 8003a08:	4629      	mov	r1, r5
 8003a0a:	4638      	mov	r0, r7
 8003a0c:	f7ff ffc2 	bl	8003994 <sbrk_aligned>
 8003a10:	1c43      	adds	r3, r0, #1
 8003a12:	4604      	mov	r4, r0
 8003a14:	d14d      	bne.n	8003ab2 <_malloc_r+0xde>
 8003a16:	6834      	ldr	r4, [r6, #0]
 8003a18:	4626      	mov	r6, r4
 8003a1a:	2e00      	cmp	r6, #0
 8003a1c:	d140      	bne.n	8003aa0 <_malloc_r+0xcc>
 8003a1e:	6823      	ldr	r3, [r4, #0]
 8003a20:	4631      	mov	r1, r6
 8003a22:	4638      	mov	r0, r7
 8003a24:	eb04 0803 	add.w	r8, r4, r3
 8003a28:	f000 f9a4 	bl	8003d74 <_sbrk_r>
 8003a2c:	4580      	cmp	r8, r0
 8003a2e:	d13a      	bne.n	8003aa6 <_malloc_r+0xd2>
 8003a30:	6821      	ldr	r1, [r4, #0]
 8003a32:	3503      	adds	r5, #3
 8003a34:	1a6d      	subs	r5, r5, r1
 8003a36:	f025 0503 	bic.w	r5, r5, #3
 8003a3a:	3508      	adds	r5, #8
 8003a3c:	2d0c      	cmp	r5, #12
 8003a3e:	bf38      	it	cc
 8003a40:	250c      	movcc	r5, #12
 8003a42:	4629      	mov	r1, r5
 8003a44:	4638      	mov	r0, r7
 8003a46:	f7ff ffa5 	bl	8003994 <sbrk_aligned>
 8003a4a:	3001      	adds	r0, #1
 8003a4c:	d02b      	beq.n	8003aa6 <_malloc_r+0xd2>
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	442b      	add	r3, r5
 8003a52:	6023      	str	r3, [r4, #0]
 8003a54:	e00e      	b.n	8003a74 <_malloc_r+0xa0>
 8003a56:	6822      	ldr	r2, [r4, #0]
 8003a58:	1b52      	subs	r2, r2, r5
 8003a5a:	d41e      	bmi.n	8003a9a <_malloc_r+0xc6>
 8003a5c:	2a0b      	cmp	r2, #11
 8003a5e:	d916      	bls.n	8003a8e <_malloc_r+0xba>
 8003a60:	1961      	adds	r1, r4, r5
 8003a62:	42a3      	cmp	r3, r4
 8003a64:	6025      	str	r5, [r4, #0]
 8003a66:	bf18      	it	ne
 8003a68:	6059      	strne	r1, [r3, #4]
 8003a6a:	6863      	ldr	r3, [r4, #4]
 8003a6c:	bf08      	it	eq
 8003a6e:	6031      	streq	r1, [r6, #0]
 8003a70:	5162      	str	r2, [r4, r5]
 8003a72:	604b      	str	r3, [r1, #4]
 8003a74:	4638      	mov	r0, r7
 8003a76:	f104 060b 	add.w	r6, r4, #11
 8003a7a:	f000 f9ed 	bl	8003e58 <__malloc_unlock>
 8003a7e:	f026 0607 	bic.w	r6, r6, #7
 8003a82:	1d23      	adds	r3, r4, #4
 8003a84:	1af2      	subs	r2, r6, r3
 8003a86:	d0b6      	beq.n	80039f6 <_malloc_r+0x22>
 8003a88:	1b9b      	subs	r3, r3, r6
 8003a8a:	50a3      	str	r3, [r4, r2]
 8003a8c:	e7b3      	b.n	80039f6 <_malloc_r+0x22>
 8003a8e:	6862      	ldr	r2, [r4, #4]
 8003a90:	42a3      	cmp	r3, r4
 8003a92:	bf0c      	ite	eq
 8003a94:	6032      	streq	r2, [r6, #0]
 8003a96:	605a      	strne	r2, [r3, #4]
 8003a98:	e7ec      	b.n	8003a74 <_malloc_r+0xa0>
 8003a9a:	4623      	mov	r3, r4
 8003a9c:	6864      	ldr	r4, [r4, #4]
 8003a9e:	e7b2      	b.n	8003a06 <_malloc_r+0x32>
 8003aa0:	4634      	mov	r4, r6
 8003aa2:	6876      	ldr	r6, [r6, #4]
 8003aa4:	e7b9      	b.n	8003a1a <_malloc_r+0x46>
 8003aa6:	230c      	movs	r3, #12
 8003aa8:	603b      	str	r3, [r7, #0]
 8003aaa:	4638      	mov	r0, r7
 8003aac:	f000 f9d4 	bl	8003e58 <__malloc_unlock>
 8003ab0:	e7a1      	b.n	80039f6 <_malloc_r+0x22>
 8003ab2:	6025      	str	r5, [r4, #0]
 8003ab4:	e7de      	b.n	8003a74 <_malloc_r+0xa0>
 8003ab6:	bf00      	nop
 8003ab8:	2000030c 	.word	0x2000030c

08003abc <__ssputs_r>:
 8003abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ac0:	688e      	ldr	r6, [r1, #8]
 8003ac2:	429e      	cmp	r6, r3
 8003ac4:	4682      	mov	sl, r0
 8003ac6:	460c      	mov	r4, r1
 8003ac8:	4690      	mov	r8, r2
 8003aca:	461f      	mov	r7, r3
 8003acc:	d838      	bhi.n	8003b40 <__ssputs_r+0x84>
 8003ace:	898a      	ldrh	r2, [r1, #12]
 8003ad0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ad4:	d032      	beq.n	8003b3c <__ssputs_r+0x80>
 8003ad6:	6825      	ldr	r5, [r4, #0]
 8003ad8:	6909      	ldr	r1, [r1, #16]
 8003ada:	eba5 0901 	sub.w	r9, r5, r1
 8003ade:	6965      	ldr	r5, [r4, #20]
 8003ae0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ae4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ae8:	3301      	adds	r3, #1
 8003aea:	444b      	add	r3, r9
 8003aec:	106d      	asrs	r5, r5, #1
 8003aee:	429d      	cmp	r5, r3
 8003af0:	bf38      	it	cc
 8003af2:	461d      	movcc	r5, r3
 8003af4:	0553      	lsls	r3, r2, #21
 8003af6:	d531      	bpl.n	8003b5c <__ssputs_r+0xa0>
 8003af8:	4629      	mov	r1, r5
 8003afa:	f7ff ff6b 	bl	80039d4 <_malloc_r>
 8003afe:	4606      	mov	r6, r0
 8003b00:	b950      	cbnz	r0, 8003b18 <__ssputs_r+0x5c>
 8003b02:	230c      	movs	r3, #12
 8003b04:	f8ca 3000 	str.w	r3, [sl]
 8003b08:	89a3      	ldrh	r3, [r4, #12]
 8003b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b0e:	81a3      	strh	r3, [r4, #12]
 8003b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b18:	6921      	ldr	r1, [r4, #16]
 8003b1a:	464a      	mov	r2, r9
 8003b1c:	f7ff fb46 	bl	80031ac <memcpy>
 8003b20:	89a3      	ldrh	r3, [r4, #12]
 8003b22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b2a:	81a3      	strh	r3, [r4, #12]
 8003b2c:	6126      	str	r6, [r4, #16]
 8003b2e:	6165      	str	r5, [r4, #20]
 8003b30:	444e      	add	r6, r9
 8003b32:	eba5 0509 	sub.w	r5, r5, r9
 8003b36:	6026      	str	r6, [r4, #0]
 8003b38:	60a5      	str	r5, [r4, #8]
 8003b3a:	463e      	mov	r6, r7
 8003b3c:	42be      	cmp	r6, r7
 8003b3e:	d900      	bls.n	8003b42 <__ssputs_r+0x86>
 8003b40:	463e      	mov	r6, r7
 8003b42:	6820      	ldr	r0, [r4, #0]
 8003b44:	4632      	mov	r2, r6
 8003b46:	4641      	mov	r1, r8
 8003b48:	f000 f966 	bl	8003e18 <memmove>
 8003b4c:	68a3      	ldr	r3, [r4, #8]
 8003b4e:	1b9b      	subs	r3, r3, r6
 8003b50:	60a3      	str	r3, [r4, #8]
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	4433      	add	r3, r6
 8003b56:	6023      	str	r3, [r4, #0]
 8003b58:	2000      	movs	r0, #0
 8003b5a:	e7db      	b.n	8003b14 <__ssputs_r+0x58>
 8003b5c:	462a      	mov	r2, r5
 8003b5e:	f000 f981 	bl	8003e64 <_realloc_r>
 8003b62:	4606      	mov	r6, r0
 8003b64:	2800      	cmp	r0, #0
 8003b66:	d1e1      	bne.n	8003b2c <__ssputs_r+0x70>
 8003b68:	6921      	ldr	r1, [r4, #16]
 8003b6a:	4650      	mov	r0, sl
 8003b6c:	f7ff fec6 	bl	80038fc <_free_r>
 8003b70:	e7c7      	b.n	8003b02 <__ssputs_r+0x46>
	...

08003b74 <_svfiprintf_r>:
 8003b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b78:	4698      	mov	r8, r3
 8003b7a:	898b      	ldrh	r3, [r1, #12]
 8003b7c:	061b      	lsls	r3, r3, #24
 8003b7e:	b09d      	sub	sp, #116	; 0x74
 8003b80:	4607      	mov	r7, r0
 8003b82:	460d      	mov	r5, r1
 8003b84:	4614      	mov	r4, r2
 8003b86:	d50e      	bpl.n	8003ba6 <_svfiprintf_r+0x32>
 8003b88:	690b      	ldr	r3, [r1, #16]
 8003b8a:	b963      	cbnz	r3, 8003ba6 <_svfiprintf_r+0x32>
 8003b8c:	2140      	movs	r1, #64	; 0x40
 8003b8e:	f7ff ff21 	bl	80039d4 <_malloc_r>
 8003b92:	6028      	str	r0, [r5, #0]
 8003b94:	6128      	str	r0, [r5, #16]
 8003b96:	b920      	cbnz	r0, 8003ba2 <_svfiprintf_r+0x2e>
 8003b98:	230c      	movs	r3, #12
 8003b9a:	603b      	str	r3, [r7, #0]
 8003b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ba0:	e0d1      	b.n	8003d46 <_svfiprintf_r+0x1d2>
 8003ba2:	2340      	movs	r3, #64	; 0x40
 8003ba4:	616b      	str	r3, [r5, #20]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8003baa:	2320      	movs	r3, #32
 8003bac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bb4:	2330      	movs	r3, #48	; 0x30
 8003bb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003d60 <_svfiprintf_r+0x1ec>
 8003bba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bbe:	f04f 0901 	mov.w	r9, #1
 8003bc2:	4623      	mov	r3, r4
 8003bc4:	469a      	mov	sl, r3
 8003bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bca:	b10a      	cbz	r2, 8003bd0 <_svfiprintf_r+0x5c>
 8003bcc:	2a25      	cmp	r2, #37	; 0x25
 8003bce:	d1f9      	bne.n	8003bc4 <_svfiprintf_r+0x50>
 8003bd0:	ebba 0b04 	subs.w	fp, sl, r4
 8003bd4:	d00b      	beq.n	8003bee <_svfiprintf_r+0x7a>
 8003bd6:	465b      	mov	r3, fp
 8003bd8:	4622      	mov	r2, r4
 8003bda:	4629      	mov	r1, r5
 8003bdc:	4638      	mov	r0, r7
 8003bde:	f7ff ff6d 	bl	8003abc <__ssputs_r>
 8003be2:	3001      	adds	r0, #1
 8003be4:	f000 80aa 	beq.w	8003d3c <_svfiprintf_r+0x1c8>
 8003be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003bea:	445a      	add	r2, fp
 8003bec:	9209      	str	r2, [sp, #36]	; 0x24
 8003bee:	f89a 3000 	ldrb.w	r3, [sl]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 80a2 	beq.w	8003d3c <_svfiprintf_r+0x1c8>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c02:	f10a 0a01 	add.w	sl, sl, #1
 8003c06:	9304      	str	r3, [sp, #16]
 8003c08:	9307      	str	r3, [sp, #28]
 8003c0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c0e:	931a      	str	r3, [sp, #104]	; 0x68
 8003c10:	4654      	mov	r4, sl
 8003c12:	2205      	movs	r2, #5
 8003c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c18:	4851      	ldr	r0, [pc, #324]	; (8003d60 <_svfiprintf_r+0x1ec>)
 8003c1a:	f7fc fae9 	bl	80001f0 <memchr>
 8003c1e:	9a04      	ldr	r2, [sp, #16]
 8003c20:	b9d8      	cbnz	r0, 8003c5a <_svfiprintf_r+0xe6>
 8003c22:	06d0      	lsls	r0, r2, #27
 8003c24:	bf44      	itt	mi
 8003c26:	2320      	movmi	r3, #32
 8003c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c2c:	0711      	lsls	r1, r2, #28
 8003c2e:	bf44      	itt	mi
 8003c30:	232b      	movmi	r3, #43	; 0x2b
 8003c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c36:	f89a 3000 	ldrb.w	r3, [sl]
 8003c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8003c3c:	d015      	beq.n	8003c6a <_svfiprintf_r+0xf6>
 8003c3e:	9a07      	ldr	r2, [sp, #28]
 8003c40:	4654      	mov	r4, sl
 8003c42:	2000      	movs	r0, #0
 8003c44:	f04f 0c0a 	mov.w	ip, #10
 8003c48:	4621      	mov	r1, r4
 8003c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c4e:	3b30      	subs	r3, #48	; 0x30
 8003c50:	2b09      	cmp	r3, #9
 8003c52:	d94e      	bls.n	8003cf2 <_svfiprintf_r+0x17e>
 8003c54:	b1b0      	cbz	r0, 8003c84 <_svfiprintf_r+0x110>
 8003c56:	9207      	str	r2, [sp, #28]
 8003c58:	e014      	b.n	8003c84 <_svfiprintf_r+0x110>
 8003c5a:	eba0 0308 	sub.w	r3, r0, r8
 8003c5e:	fa09 f303 	lsl.w	r3, r9, r3
 8003c62:	4313      	orrs	r3, r2
 8003c64:	9304      	str	r3, [sp, #16]
 8003c66:	46a2      	mov	sl, r4
 8003c68:	e7d2      	b.n	8003c10 <_svfiprintf_r+0x9c>
 8003c6a:	9b03      	ldr	r3, [sp, #12]
 8003c6c:	1d19      	adds	r1, r3, #4
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	9103      	str	r1, [sp, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	bfbb      	ittet	lt
 8003c76:	425b      	neglt	r3, r3
 8003c78:	f042 0202 	orrlt.w	r2, r2, #2
 8003c7c:	9307      	strge	r3, [sp, #28]
 8003c7e:	9307      	strlt	r3, [sp, #28]
 8003c80:	bfb8      	it	lt
 8003c82:	9204      	strlt	r2, [sp, #16]
 8003c84:	7823      	ldrb	r3, [r4, #0]
 8003c86:	2b2e      	cmp	r3, #46	; 0x2e
 8003c88:	d10c      	bne.n	8003ca4 <_svfiprintf_r+0x130>
 8003c8a:	7863      	ldrb	r3, [r4, #1]
 8003c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8003c8e:	d135      	bne.n	8003cfc <_svfiprintf_r+0x188>
 8003c90:	9b03      	ldr	r3, [sp, #12]
 8003c92:	1d1a      	adds	r2, r3, #4
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	9203      	str	r2, [sp, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	bfb8      	it	lt
 8003c9c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003ca0:	3402      	adds	r4, #2
 8003ca2:	9305      	str	r3, [sp, #20]
 8003ca4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003d70 <_svfiprintf_r+0x1fc>
 8003ca8:	7821      	ldrb	r1, [r4, #0]
 8003caa:	2203      	movs	r2, #3
 8003cac:	4650      	mov	r0, sl
 8003cae:	f7fc fa9f 	bl	80001f0 <memchr>
 8003cb2:	b140      	cbz	r0, 8003cc6 <_svfiprintf_r+0x152>
 8003cb4:	2340      	movs	r3, #64	; 0x40
 8003cb6:	eba0 000a 	sub.w	r0, r0, sl
 8003cba:	fa03 f000 	lsl.w	r0, r3, r0
 8003cbe:	9b04      	ldr	r3, [sp, #16]
 8003cc0:	4303      	orrs	r3, r0
 8003cc2:	3401      	adds	r4, #1
 8003cc4:	9304      	str	r3, [sp, #16]
 8003cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cca:	4826      	ldr	r0, [pc, #152]	; (8003d64 <_svfiprintf_r+0x1f0>)
 8003ccc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cd0:	2206      	movs	r2, #6
 8003cd2:	f7fc fa8d 	bl	80001f0 <memchr>
 8003cd6:	2800      	cmp	r0, #0
 8003cd8:	d038      	beq.n	8003d4c <_svfiprintf_r+0x1d8>
 8003cda:	4b23      	ldr	r3, [pc, #140]	; (8003d68 <_svfiprintf_r+0x1f4>)
 8003cdc:	bb1b      	cbnz	r3, 8003d26 <_svfiprintf_r+0x1b2>
 8003cde:	9b03      	ldr	r3, [sp, #12]
 8003ce0:	3307      	adds	r3, #7
 8003ce2:	f023 0307 	bic.w	r3, r3, #7
 8003ce6:	3308      	adds	r3, #8
 8003ce8:	9303      	str	r3, [sp, #12]
 8003cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cec:	4433      	add	r3, r6
 8003cee:	9309      	str	r3, [sp, #36]	; 0x24
 8003cf0:	e767      	b.n	8003bc2 <_svfiprintf_r+0x4e>
 8003cf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cf6:	460c      	mov	r4, r1
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	e7a5      	b.n	8003c48 <_svfiprintf_r+0xd4>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	3401      	adds	r4, #1
 8003d00:	9305      	str	r3, [sp, #20]
 8003d02:	4619      	mov	r1, r3
 8003d04:	f04f 0c0a 	mov.w	ip, #10
 8003d08:	4620      	mov	r0, r4
 8003d0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d0e:	3a30      	subs	r2, #48	; 0x30
 8003d10:	2a09      	cmp	r2, #9
 8003d12:	d903      	bls.n	8003d1c <_svfiprintf_r+0x1a8>
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0c5      	beq.n	8003ca4 <_svfiprintf_r+0x130>
 8003d18:	9105      	str	r1, [sp, #20]
 8003d1a:	e7c3      	b.n	8003ca4 <_svfiprintf_r+0x130>
 8003d1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d20:	4604      	mov	r4, r0
 8003d22:	2301      	movs	r3, #1
 8003d24:	e7f0      	b.n	8003d08 <_svfiprintf_r+0x194>
 8003d26:	ab03      	add	r3, sp, #12
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	462a      	mov	r2, r5
 8003d2c:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <_svfiprintf_r+0x1f8>)
 8003d2e:	a904      	add	r1, sp, #16
 8003d30:	4638      	mov	r0, r7
 8003d32:	f7fd ffc9 	bl	8001cc8 <_printf_float>
 8003d36:	1c42      	adds	r2, r0, #1
 8003d38:	4606      	mov	r6, r0
 8003d3a:	d1d6      	bne.n	8003cea <_svfiprintf_r+0x176>
 8003d3c:	89ab      	ldrh	r3, [r5, #12]
 8003d3e:	065b      	lsls	r3, r3, #25
 8003d40:	f53f af2c 	bmi.w	8003b9c <_svfiprintf_r+0x28>
 8003d44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d46:	b01d      	add	sp, #116	; 0x74
 8003d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d4c:	ab03      	add	r3, sp, #12
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	462a      	mov	r2, r5
 8003d52:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <_svfiprintf_r+0x1f8>)
 8003d54:	a904      	add	r1, sp, #16
 8003d56:	4638      	mov	r0, r7
 8003d58:	f7fe fa5a 	bl	8002210 <_printf_i>
 8003d5c:	e7eb      	b.n	8003d36 <_svfiprintf_r+0x1c2>
 8003d5e:	bf00      	nop
 8003d60:	08004b9c 	.word	0x08004b9c
 8003d64:	08004ba6 	.word	0x08004ba6
 8003d68:	08001cc9 	.word	0x08001cc9
 8003d6c:	08003abd 	.word	0x08003abd
 8003d70:	08004ba2 	.word	0x08004ba2

08003d74 <_sbrk_r>:
 8003d74:	b538      	push	{r3, r4, r5, lr}
 8003d76:	4d06      	ldr	r5, [pc, #24]	; (8003d90 <_sbrk_r+0x1c>)
 8003d78:	2300      	movs	r3, #0
 8003d7a:	4604      	mov	r4, r0
 8003d7c:	4608      	mov	r0, r1
 8003d7e:	602b      	str	r3, [r5, #0]
 8003d80:	f7fd f968 	bl	8001054 <_sbrk>
 8003d84:	1c43      	adds	r3, r0, #1
 8003d86:	d102      	bne.n	8003d8e <_sbrk_r+0x1a>
 8003d88:	682b      	ldr	r3, [r5, #0]
 8003d8a:	b103      	cbz	r3, 8003d8e <_sbrk_r+0x1a>
 8003d8c:	6023      	str	r3, [r4, #0]
 8003d8e:	bd38      	pop	{r3, r4, r5, pc}
 8003d90:	20000314 	.word	0x20000314

08003d94 <__assert_func>:
 8003d94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003d96:	4614      	mov	r4, r2
 8003d98:	461a      	mov	r2, r3
 8003d9a:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <__assert_func+0x2c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4605      	mov	r5, r0
 8003da0:	68d8      	ldr	r0, [r3, #12]
 8003da2:	b14c      	cbz	r4, 8003db8 <__assert_func+0x24>
 8003da4:	4b07      	ldr	r3, [pc, #28]	; (8003dc4 <__assert_func+0x30>)
 8003da6:	9100      	str	r1, [sp, #0]
 8003da8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003dac:	4906      	ldr	r1, [pc, #24]	; (8003dc8 <__assert_func+0x34>)
 8003dae:	462b      	mov	r3, r5
 8003db0:	f000 f80e 	bl	8003dd0 <fiprintf>
 8003db4:	f000 faac 	bl	8004310 <abort>
 8003db8:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <__assert_func+0x38>)
 8003dba:	461c      	mov	r4, r3
 8003dbc:	e7f3      	b.n	8003da6 <__assert_func+0x12>
 8003dbe:	bf00      	nop
 8003dc0:	20000044 	.word	0x20000044
 8003dc4:	08004bad 	.word	0x08004bad
 8003dc8:	08004bba 	.word	0x08004bba
 8003dcc:	08004be8 	.word	0x08004be8

08003dd0 <fiprintf>:
 8003dd0:	b40e      	push	{r1, r2, r3}
 8003dd2:	b503      	push	{r0, r1, lr}
 8003dd4:	4601      	mov	r1, r0
 8003dd6:	ab03      	add	r3, sp, #12
 8003dd8:	4805      	ldr	r0, [pc, #20]	; (8003df0 <fiprintf+0x20>)
 8003dda:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dde:	6800      	ldr	r0, [r0, #0]
 8003de0:	9301      	str	r3, [sp, #4]
 8003de2:	f000 f897 	bl	8003f14 <_vfiprintf_r>
 8003de6:	b002      	add	sp, #8
 8003de8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dec:	b003      	add	sp, #12
 8003dee:	4770      	bx	lr
 8003df0:	20000044 	.word	0x20000044

08003df4 <__ascii_mbtowc>:
 8003df4:	b082      	sub	sp, #8
 8003df6:	b901      	cbnz	r1, 8003dfa <__ascii_mbtowc+0x6>
 8003df8:	a901      	add	r1, sp, #4
 8003dfa:	b142      	cbz	r2, 8003e0e <__ascii_mbtowc+0x1a>
 8003dfc:	b14b      	cbz	r3, 8003e12 <__ascii_mbtowc+0x1e>
 8003dfe:	7813      	ldrb	r3, [r2, #0]
 8003e00:	600b      	str	r3, [r1, #0]
 8003e02:	7812      	ldrb	r2, [r2, #0]
 8003e04:	1e10      	subs	r0, r2, #0
 8003e06:	bf18      	it	ne
 8003e08:	2001      	movne	r0, #1
 8003e0a:	b002      	add	sp, #8
 8003e0c:	4770      	bx	lr
 8003e0e:	4610      	mov	r0, r2
 8003e10:	e7fb      	b.n	8003e0a <__ascii_mbtowc+0x16>
 8003e12:	f06f 0001 	mvn.w	r0, #1
 8003e16:	e7f8      	b.n	8003e0a <__ascii_mbtowc+0x16>

08003e18 <memmove>:
 8003e18:	4288      	cmp	r0, r1
 8003e1a:	b510      	push	{r4, lr}
 8003e1c:	eb01 0402 	add.w	r4, r1, r2
 8003e20:	d902      	bls.n	8003e28 <memmove+0x10>
 8003e22:	4284      	cmp	r4, r0
 8003e24:	4623      	mov	r3, r4
 8003e26:	d807      	bhi.n	8003e38 <memmove+0x20>
 8003e28:	1e43      	subs	r3, r0, #1
 8003e2a:	42a1      	cmp	r1, r4
 8003e2c:	d008      	beq.n	8003e40 <memmove+0x28>
 8003e2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e36:	e7f8      	b.n	8003e2a <memmove+0x12>
 8003e38:	4402      	add	r2, r0
 8003e3a:	4601      	mov	r1, r0
 8003e3c:	428a      	cmp	r2, r1
 8003e3e:	d100      	bne.n	8003e42 <memmove+0x2a>
 8003e40:	bd10      	pop	{r4, pc}
 8003e42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e4a:	e7f7      	b.n	8003e3c <memmove+0x24>

08003e4c <__malloc_lock>:
 8003e4c:	4801      	ldr	r0, [pc, #4]	; (8003e54 <__malloc_lock+0x8>)
 8003e4e:	f000 bc1f 	b.w	8004690 <__retarget_lock_acquire_recursive>
 8003e52:	bf00      	nop
 8003e54:	20000318 	.word	0x20000318

08003e58 <__malloc_unlock>:
 8003e58:	4801      	ldr	r0, [pc, #4]	; (8003e60 <__malloc_unlock+0x8>)
 8003e5a:	f000 bc1a 	b.w	8004692 <__retarget_lock_release_recursive>
 8003e5e:	bf00      	nop
 8003e60:	20000318 	.word	0x20000318

08003e64 <_realloc_r>:
 8003e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e68:	4680      	mov	r8, r0
 8003e6a:	4614      	mov	r4, r2
 8003e6c:	460e      	mov	r6, r1
 8003e6e:	b921      	cbnz	r1, 8003e7a <_realloc_r+0x16>
 8003e70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e74:	4611      	mov	r1, r2
 8003e76:	f7ff bdad 	b.w	80039d4 <_malloc_r>
 8003e7a:	b92a      	cbnz	r2, 8003e88 <_realloc_r+0x24>
 8003e7c:	f7ff fd3e 	bl	80038fc <_free_r>
 8003e80:	4625      	mov	r5, r4
 8003e82:	4628      	mov	r0, r5
 8003e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e88:	f000 fc6a 	bl	8004760 <_malloc_usable_size_r>
 8003e8c:	4284      	cmp	r4, r0
 8003e8e:	4607      	mov	r7, r0
 8003e90:	d802      	bhi.n	8003e98 <_realloc_r+0x34>
 8003e92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e96:	d812      	bhi.n	8003ebe <_realloc_r+0x5a>
 8003e98:	4621      	mov	r1, r4
 8003e9a:	4640      	mov	r0, r8
 8003e9c:	f7ff fd9a 	bl	80039d4 <_malloc_r>
 8003ea0:	4605      	mov	r5, r0
 8003ea2:	2800      	cmp	r0, #0
 8003ea4:	d0ed      	beq.n	8003e82 <_realloc_r+0x1e>
 8003ea6:	42bc      	cmp	r4, r7
 8003ea8:	4622      	mov	r2, r4
 8003eaa:	4631      	mov	r1, r6
 8003eac:	bf28      	it	cs
 8003eae:	463a      	movcs	r2, r7
 8003eb0:	f7ff f97c 	bl	80031ac <memcpy>
 8003eb4:	4631      	mov	r1, r6
 8003eb6:	4640      	mov	r0, r8
 8003eb8:	f7ff fd20 	bl	80038fc <_free_r>
 8003ebc:	e7e1      	b.n	8003e82 <_realloc_r+0x1e>
 8003ebe:	4635      	mov	r5, r6
 8003ec0:	e7df      	b.n	8003e82 <_realloc_r+0x1e>

08003ec2 <__sfputc_r>:
 8003ec2:	6893      	ldr	r3, [r2, #8]
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	b410      	push	{r4}
 8003eca:	6093      	str	r3, [r2, #8]
 8003ecc:	da08      	bge.n	8003ee0 <__sfputc_r+0x1e>
 8003ece:	6994      	ldr	r4, [r2, #24]
 8003ed0:	42a3      	cmp	r3, r4
 8003ed2:	db01      	blt.n	8003ed8 <__sfputc_r+0x16>
 8003ed4:	290a      	cmp	r1, #10
 8003ed6:	d103      	bne.n	8003ee0 <__sfputc_r+0x1e>
 8003ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003edc:	f000 b94a 	b.w	8004174 <__swbuf_r>
 8003ee0:	6813      	ldr	r3, [r2, #0]
 8003ee2:	1c58      	adds	r0, r3, #1
 8003ee4:	6010      	str	r0, [r2, #0]
 8003ee6:	7019      	strb	r1, [r3, #0]
 8003ee8:	4608      	mov	r0, r1
 8003eea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <__sfputs_r>:
 8003ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef2:	4606      	mov	r6, r0
 8003ef4:	460f      	mov	r7, r1
 8003ef6:	4614      	mov	r4, r2
 8003ef8:	18d5      	adds	r5, r2, r3
 8003efa:	42ac      	cmp	r4, r5
 8003efc:	d101      	bne.n	8003f02 <__sfputs_r+0x12>
 8003efe:	2000      	movs	r0, #0
 8003f00:	e007      	b.n	8003f12 <__sfputs_r+0x22>
 8003f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f06:	463a      	mov	r2, r7
 8003f08:	4630      	mov	r0, r6
 8003f0a:	f7ff ffda 	bl	8003ec2 <__sfputc_r>
 8003f0e:	1c43      	adds	r3, r0, #1
 8003f10:	d1f3      	bne.n	8003efa <__sfputs_r+0xa>
 8003f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003f14 <_vfiprintf_r>:
 8003f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f18:	460d      	mov	r5, r1
 8003f1a:	b09d      	sub	sp, #116	; 0x74
 8003f1c:	4614      	mov	r4, r2
 8003f1e:	4698      	mov	r8, r3
 8003f20:	4606      	mov	r6, r0
 8003f22:	b118      	cbz	r0, 8003f2c <_vfiprintf_r+0x18>
 8003f24:	6983      	ldr	r3, [r0, #24]
 8003f26:	b90b      	cbnz	r3, 8003f2c <_vfiprintf_r+0x18>
 8003f28:	f000 fb14 	bl	8004554 <__sinit>
 8003f2c:	4b89      	ldr	r3, [pc, #548]	; (8004154 <_vfiprintf_r+0x240>)
 8003f2e:	429d      	cmp	r5, r3
 8003f30:	d11b      	bne.n	8003f6a <_vfiprintf_r+0x56>
 8003f32:	6875      	ldr	r5, [r6, #4]
 8003f34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f36:	07d9      	lsls	r1, r3, #31
 8003f38:	d405      	bmi.n	8003f46 <_vfiprintf_r+0x32>
 8003f3a:	89ab      	ldrh	r3, [r5, #12]
 8003f3c:	059a      	lsls	r2, r3, #22
 8003f3e:	d402      	bmi.n	8003f46 <_vfiprintf_r+0x32>
 8003f40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f42:	f000 fba5 	bl	8004690 <__retarget_lock_acquire_recursive>
 8003f46:	89ab      	ldrh	r3, [r5, #12]
 8003f48:	071b      	lsls	r3, r3, #28
 8003f4a:	d501      	bpl.n	8003f50 <_vfiprintf_r+0x3c>
 8003f4c:	692b      	ldr	r3, [r5, #16]
 8003f4e:	b9eb      	cbnz	r3, 8003f8c <_vfiprintf_r+0x78>
 8003f50:	4629      	mov	r1, r5
 8003f52:	4630      	mov	r0, r6
 8003f54:	f000 f96e 	bl	8004234 <__swsetup_r>
 8003f58:	b1c0      	cbz	r0, 8003f8c <_vfiprintf_r+0x78>
 8003f5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f5c:	07dc      	lsls	r4, r3, #31
 8003f5e:	d50e      	bpl.n	8003f7e <_vfiprintf_r+0x6a>
 8003f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f64:	b01d      	add	sp, #116	; 0x74
 8003f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f6a:	4b7b      	ldr	r3, [pc, #492]	; (8004158 <_vfiprintf_r+0x244>)
 8003f6c:	429d      	cmp	r5, r3
 8003f6e:	d101      	bne.n	8003f74 <_vfiprintf_r+0x60>
 8003f70:	68b5      	ldr	r5, [r6, #8]
 8003f72:	e7df      	b.n	8003f34 <_vfiprintf_r+0x20>
 8003f74:	4b79      	ldr	r3, [pc, #484]	; (800415c <_vfiprintf_r+0x248>)
 8003f76:	429d      	cmp	r5, r3
 8003f78:	bf08      	it	eq
 8003f7a:	68f5      	ldreq	r5, [r6, #12]
 8003f7c:	e7da      	b.n	8003f34 <_vfiprintf_r+0x20>
 8003f7e:	89ab      	ldrh	r3, [r5, #12]
 8003f80:	0598      	lsls	r0, r3, #22
 8003f82:	d4ed      	bmi.n	8003f60 <_vfiprintf_r+0x4c>
 8003f84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f86:	f000 fb84 	bl	8004692 <__retarget_lock_release_recursive>
 8003f8a:	e7e9      	b.n	8003f60 <_vfiprintf_r+0x4c>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f90:	2320      	movs	r3, #32
 8003f92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f96:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f9a:	2330      	movs	r3, #48	; 0x30
 8003f9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004160 <_vfiprintf_r+0x24c>
 8003fa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fa4:	f04f 0901 	mov.w	r9, #1
 8003fa8:	4623      	mov	r3, r4
 8003faa:	469a      	mov	sl, r3
 8003fac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fb0:	b10a      	cbz	r2, 8003fb6 <_vfiprintf_r+0xa2>
 8003fb2:	2a25      	cmp	r2, #37	; 0x25
 8003fb4:	d1f9      	bne.n	8003faa <_vfiprintf_r+0x96>
 8003fb6:	ebba 0b04 	subs.w	fp, sl, r4
 8003fba:	d00b      	beq.n	8003fd4 <_vfiprintf_r+0xc0>
 8003fbc:	465b      	mov	r3, fp
 8003fbe:	4622      	mov	r2, r4
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	f7ff ff94 	bl	8003ef0 <__sfputs_r>
 8003fc8:	3001      	adds	r0, #1
 8003fca:	f000 80aa 	beq.w	8004122 <_vfiprintf_r+0x20e>
 8003fce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fd0:	445a      	add	r2, fp
 8003fd2:	9209      	str	r2, [sp, #36]	; 0x24
 8003fd4:	f89a 3000 	ldrb.w	r3, [sl]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 80a2 	beq.w	8004122 <_vfiprintf_r+0x20e>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fe8:	f10a 0a01 	add.w	sl, sl, #1
 8003fec:	9304      	str	r3, [sp, #16]
 8003fee:	9307      	str	r3, [sp, #28]
 8003ff0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ff4:	931a      	str	r3, [sp, #104]	; 0x68
 8003ff6:	4654      	mov	r4, sl
 8003ff8:	2205      	movs	r2, #5
 8003ffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ffe:	4858      	ldr	r0, [pc, #352]	; (8004160 <_vfiprintf_r+0x24c>)
 8004000:	f7fc f8f6 	bl	80001f0 <memchr>
 8004004:	9a04      	ldr	r2, [sp, #16]
 8004006:	b9d8      	cbnz	r0, 8004040 <_vfiprintf_r+0x12c>
 8004008:	06d1      	lsls	r1, r2, #27
 800400a:	bf44      	itt	mi
 800400c:	2320      	movmi	r3, #32
 800400e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004012:	0713      	lsls	r3, r2, #28
 8004014:	bf44      	itt	mi
 8004016:	232b      	movmi	r3, #43	; 0x2b
 8004018:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800401c:	f89a 3000 	ldrb.w	r3, [sl]
 8004020:	2b2a      	cmp	r3, #42	; 0x2a
 8004022:	d015      	beq.n	8004050 <_vfiprintf_r+0x13c>
 8004024:	9a07      	ldr	r2, [sp, #28]
 8004026:	4654      	mov	r4, sl
 8004028:	2000      	movs	r0, #0
 800402a:	f04f 0c0a 	mov.w	ip, #10
 800402e:	4621      	mov	r1, r4
 8004030:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004034:	3b30      	subs	r3, #48	; 0x30
 8004036:	2b09      	cmp	r3, #9
 8004038:	d94e      	bls.n	80040d8 <_vfiprintf_r+0x1c4>
 800403a:	b1b0      	cbz	r0, 800406a <_vfiprintf_r+0x156>
 800403c:	9207      	str	r2, [sp, #28]
 800403e:	e014      	b.n	800406a <_vfiprintf_r+0x156>
 8004040:	eba0 0308 	sub.w	r3, r0, r8
 8004044:	fa09 f303 	lsl.w	r3, r9, r3
 8004048:	4313      	orrs	r3, r2
 800404a:	9304      	str	r3, [sp, #16]
 800404c:	46a2      	mov	sl, r4
 800404e:	e7d2      	b.n	8003ff6 <_vfiprintf_r+0xe2>
 8004050:	9b03      	ldr	r3, [sp, #12]
 8004052:	1d19      	adds	r1, r3, #4
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	9103      	str	r1, [sp, #12]
 8004058:	2b00      	cmp	r3, #0
 800405a:	bfbb      	ittet	lt
 800405c:	425b      	neglt	r3, r3
 800405e:	f042 0202 	orrlt.w	r2, r2, #2
 8004062:	9307      	strge	r3, [sp, #28]
 8004064:	9307      	strlt	r3, [sp, #28]
 8004066:	bfb8      	it	lt
 8004068:	9204      	strlt	r2, [sp, #16]
 800406a:	7823      	ldrb	r3, [r4, #0]
 800406c:	2b2e      	cmp	r3, #46	; 0x2e
 800406e:	d10c      	bne.n	800408a <_vfiprintf_r+0x176>
 8004070:	7863      	ldrb	r3, [r4, #1]
 8004072:	2b2a      	cmp	r3, #42	; 0x2a
 8004074:	d135      	bne.n	80040e2 <_vfiprintf_r+0x1ce>
 8004076:	9b03      	ldr	r3, [sp, #12]
 8004078:	1d1a      	adds	r2, r3, #4
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	9203      	str	r2, [sp, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	bfb8      	it	lt
 8004082:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004086:	3402      	adds	r4, #2
 8004088:	9305      	str	r3, [sp, #20]
 800408a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004170 <_vfiprintf_r+0x25c>
 800408e:	7821      	ldrb	r1, [r4, #0]
 8004090:	2203      	movs	r2, #3
 8004092:	4650      	mov	r0, sl
 8004094:	f7fc f8ac 	bl	80001f0 <memchr>
 8004098:	b140      	cbz	r0, 80040ac <_vfiprintf_r+0x198>
 800409a:	2340      	movs	r3, #64	; 0x40
 800409c:	eba0 000a 	sub.w	r0, r0, sl
 80040a0:	fa03 f000 	lsl.w	r0, r3, r0
 80040a4:	9b04      	ldr	r3, [sp, #16]
 80040a6:	4303      	orrs	r3, r0
 80040a8:	3401      	adds	r4, #1
 80040aa:	9304      	str	r3, [sp, #16]
 80040ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040b0:	482c      	ldr	r0, [pc, #176]	; (8004164 <_vfiprintf_r+0x250>)
 80040b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040b6:	2206      	movs	r2, #6
 80040b8:	f7fc f89a 	bl	80001f0 <memchr>
 80040bc:	2800      	cmp	r0, #0
 80040be:	d03f      	beq.n	8004140 <_vfiprintf_r+0x22c>
 80040c0:	4b29      	ldr	r3, [pc, #164]	; (8004168 <_vfiprintf_r+0x254>)
 80040c2:	bb1b      	cbnz	r3, 800410c <_vfiprintf_r+0x1f8>
 80040c4:	9b03      	ldr	r3, [sp, #12]
 80040c6:	3307      	adds	r3, #7
 80040c8:	f023 0307 	bic.w	r3, r3, #7
 80040cc:	3308      	adds	r3, #8
 80040ce:	9303      	str	r3, [sp, #12]
 80040d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040d2:	443b      	add	r3, r7
 80040d4:	9309      	str	r3, [sp, #36]	; 0x24
 80040d6:	e767      	b.n	8003fa8 <_vfiprintf_r+0x94>
 80040d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80040dc:	460c      	mov	r4, r1
 80040de:	2001      	movs	r0, #1
 80040e0:	e7a5      	b.n	800402e <_vfiprintf_r+0x11a>
 80040e2:	2300      	movs	r3, #0
 80040e4:	3401      	adds	r4, #1
 80040e6:	9305      	str	r3, [sp, #20]
 80040e8:	4619      	mov	r1, r3
 80040ea:	f04f 0c0a 	mov.w	ip, #10
 80040ee:	4620      	mov	r0, r4
 80040f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040f4:	3a30      	subs	r2, #48	; 0x30
 80040f6:	2a09      	cmp	r2, #9
 80040f8:	d903      	bls.n	8004102 <_vfiprintf_r+0x1ee>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0c5      	beq.n	800408a <_vfiprintf_r+0x176>
 80040fe:	9105      	str	r1, [sp, #20]
 8004100:	e7c3      	b.n	800408a <_vfiprintf_r+0x176>
 8004102:	fb0c 2101 	mla	r1, ip, r1, r2
 8004106:	4604      	mov	r4, r0
 8004108:	2301      	movs	r3, #1
 800410a:	e7f0      	b.n	80040ee <_vfiprintf_r+0x1da>
 800410c:	ab03      	add	r3, sp, #12
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	462a      	mov	r2, r5
 8004112:	4b16      	ldr	r3, [pc, #88]	; (800416c <_vfiprintf_r+0x258>)
 8004114:	a904      	add	r1, sp, #16
 8004116:	4630      	mov	r0, r6
 8004118:	f7fd fdd6 	bl	8001cc8 <_printf_float>
 800411c:	4607      	mov	r7, r0
 800411e:	1c78      	adds	r0, r7, #1
 8004120:	d1d6      	bne.n	80040d0 <_vfiprintf_r+0x1bc>
 8004122:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004124:	07d9      	lsls	r1, r3, #31
 8004126:	d405      	bmi.n	8004134 <_vfiprintf_r+0x220>
 8004128:	89ab      	ldrh	r3, [r5, #12]
 800412a:	059a      	lsls	r2, r3, #22
 800412c:	d402      	bmi.n	8004134 <_vfiprintf_r+0x220>
 800412e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004130:	f000 faaf 	bl	8004692 <__retarget_lock_release_recursive>
 8004134:	89ab      	ldrh	r3, [r5, #12]
 8004136:	065b      	lsls	r3, r3, #25
 8004138:	f53f af12 	bmi.w	8003f60 <_vfiprintf_r+0x4c>
 800413c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800413e:	e711      	b.n	8003f64 <_vfiprintf_r+0x50>
 8004140:	ab03      	add	r3, sp, #12
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	462a      	mov	r2, r5
 8004146:	4b09      	ldr	r3, [pc, #36]	; (800416c <_vfiprintf_r+0x258>)
 8004148:	a904      	add	r1, sp, #16
 800414a:	4630      	mov	r0, r6
 800414c:	f7fe f860 	bl	8002210 <_printf_i>
 8004150:	e7e4      	b.n	800411c <_vfiprintf_r+0x208>
 8004152:	bf00      	nop
 8004154:	08004d14 	.word	0x08004d14
 8004158:	08004d34 	.word	0x08004d34
 800415c:	08004cf4 	.word	0x08004cf4
 8004160:	08004b9c 	.word	0x08004b9c
 8004164:	08004ba6 	.word	0x08004ba6
 8004168:	08001cc9 	.word	0x08001cc9
 800416c:	08003ef1 	.word	0x08003ef1
 8004170:	08004ba2 	.word	0x08004ba2

08004174 <__swbuf_r>:
 8004174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004176:	460e      	mov	r6, r1
 8004178:	4614      	mov	r4, r2
 800417a:	4605      	mov	r5, r0
 800417c:	b118      	cbz	r0, 8004186 <__swbuf_r+0x12>
 800417e:	6983      	ldr	r3, [r0, #24]
 8004180:	b90b      	cbnz	r3, 8004186 <__swbuf_r+0x12>
 8004182:	f000 f9e7 	bl	8004554 <__sinit>
 8004186:	4b21      	ldr	r3, [pc, #132]	; (800420c <__swbuf_r+0x98>)
 8004188:	429c      	cmp	r4, r3
 800418a:	d12b      	bne.n	80041e4 <__swbuf_r+0x70>
 800418c:	686c      	ldr	r4, [r5, #4]
 800418e:	69a3      	ldr	r3, [r4, #24]
 8004190:	60a3      	str	r3, [r4, #8]
 8004192:	89a3      	ldrh	r3, [r4, #12]
 8004194:	071a      	lsls	r2, r3, #28
 8004196:	d52f      	bpl.n	80041f8 <__swbuf_r+0x84>
 8004198:	6923      	ldr	r3, [r4, #16]
 800419a:	b36b      	cbz	r3, 80041f8 <__swbuf_r+0x84>
 800419c:	6923      	ldr	r3, [r4, #16]
 800419e:	6820      	ldr	r0, [r4, #0]
 80041a0:	1ac0      	subs	r0, r0, r3
 80041a2:	6963      	ldr	r3, [r4, #20]
 80041a4:	b2f6      	uxtb	r6, r6
 80041a6:	4283      	cmp	r3, r0
 80041a8:	4637      	mov	r7, r6
 80041aa:	dc04      	bgt.n	80041b6 <__swbuf_r+0x42>
 80041ac:	4621      	mov	r1, r4
 80041ae:	4628      	mov	r0, r5
 80041b0:	f000 f93c 	bl	800442c <_fflush_r>
 80041b4:	bb30      	cbnz	r0, 8004204 <__swbuf_r+0x90>
 80041b6:	68a3      	ldr	r3, [r4, #8]
 80041b8:	3b01      	subs	r3, #1
 80041ba:	60a3      	str	r3, [r4, #8]
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	6022      	str	r2, [r4, #0]
 80041c2:	701e      	strb	r6, [r3, #0]
 80041c4:	6963      	ldr	r3, [r4, #20]
 80041c6:	3001      	adds	r0, #1
 80041c8:	4283      	cmp	r3, r0
 80041ca:	d004      	beq.n	80041d6 <__swbuf_r+0x62>
 80041cc:	89a3      	ldrh	r3, [r4, #12]
 80041ce:	07db      	lsls	r3, r3, #31
 80041d0:	d506      	bpl.n	80041e0 <__swbuf_r+0x6c>
 80041d2:	2e0a      	cmp	r6, #10
 80041d4:	d104      	bne.n	80041e0 <__swbuf_r+0x6c>
 80041d6:	4621      	mov	r1, r4
 80041d8:	4628      	mov	r0, r5
 80041da:	f000 f927 	bl	800442c <_fflush_r>
 80041de:	b988      	cbnz	r0, 8004204 <__swbuf_r+0x90>
 80041e0:	4638      	mov	r0, r7
 80041e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041e4:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <__swbuf_r+0x9c>)
 80041e6:	429c      	cmp	r4, r3
 80041e8:	d101      	bne.n	80041ee <__swbuf_r+0x7a>
 80041ea:	68ac      	ldr	r4, [r5, #8]
 80041ec:	e7cf      	b.n	800418e <__swbuf_r+0x1a>
 80041ee:	4b09      	ldr	r3, [pc, #36]	; (8004214 <__swbuf_r+0xa0>)
 80041f0:	429c      	cmp	r4, r3
 80041f2:	bf08      	it	eq
 80041f4:	68ec      	ldreq	r4, [r5, #12]
 80041f6:	e7ca      	b.n	800418e <__swbuf_r+0x1a>
 80041f8:	4621      	mov	r1, r4
 80041fa:	4628      	mov	r0, r5
 80041fc:	f000 f81a 	bl	8004234 <__swsetup_r>
 8004200:	2800      	cmp	r0, #0
 8004202:	d0cb      	beq.n	800419c <__swbuf_r+0x28>
 8004204:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004208:	e7ea      	b.n	80041e0 <__swbuf_r+0x6c>
 800420a:	bf00      	nop
 800420c:	08004d14 	.word	0x08004d14
 8004210:	08004d34 	.word	0x08004d34
 8004214:	08004cf4 	.word	0x08004cf4

08004218 <__ascii_wctomb>:
 8004218:	b149      	cbz	r1, 800422e <__ascii_wctomb+0x16>
 800421a:	2aff      	cmp	r2, #255	; 0xff
 800421c:	bf85      	ittet	hi
 800421e:	238a      	movhi	r3, #138	; 0x8a
 8004220:	6003      	strhi	r3, [r0, #0]
 8004222:	700a      	strbls	r2, [r1, #0]
 8004224:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8004228:	bf98      	it	ls
 800422a:	2001      	movls	r0, #1
 800422c:	4770      	bx	lr
 800422e:	4608      	mov	r0, r1
 8004230:	4770      	bx	lr
	...

08004234 <__swsetup_r>:
 8004234:	4b32      	ldr	r3, [pc, #200]	; (8004300 <__swsetup_r+0xcc>)
 8004236:	b570      	push	{r4, r5, r6, lr}
 8004238:	681d      	ldr	r5, [r3, #0]
 800423a:	4606      	mov	r6, r0
 800423c:	460c      	mov	r4, r1
 800423e:	b125      	cbz	r5, 800424a <__swsetup_r+0x16>
 8004240:	69ab      	ldr	r3, [r5, #24]
 8004242:	b913      	cbnz	r3, 800424a <__swsetup_r+0x16>
 8004244:	4628      	mov	r0, r5
 8004246:	f000 f985 	bl	8004554 <__sinit>
 800424a:	4b2e      	ldr	r3, [pc, #184]	; (8004304 <__swsetup_r+0xd0>)
 800424c:	429c      	cmp	r4, r3
 800424e:	d10f      	bne.n	8004270 <__swsetup_r+0x3c>
 8004250:	686c      	ldr	r4, [r5, #4]
 8004252:	89a3      	ldrh	r3, [r4, #12]
 8004254:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004258:	0719      	lsls	r1, r3, #28
 800425a:	d42c      	bmi.n	80042b6 <__swsetup_r+0x82>
 800425c:	06dd      	lsls	r5, r3, #27
 800425e:	d411      	bmi.n	8004284 <__swsetup_r+0x50>
 8004260:	2309      	movs	r3, #9
 8004262:	6033      	str	r3, [r6, #0]
 8004264:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004268:	81a3      	strh	r3, [r4, #12]
 800426a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800426e:	e03e      	b.n	80042ee <__swsetup_r+0xba>
 8004270:	4b25      	ldr	r3, [pc, #148]	; (8004308 <__swsetup_r+0xd4>)
 8004272:	429c      	cmp	r4, r3
 8004274:	d101      	bne.n	800427a <__swsetup_r+0x46>
 8004276:	68ac      	ldr	r4, [r5, #8]
 8004278:	e7eb      	b.n	8004252 <__swsetup_r+0x1e>
 800427a:	4b24      	ldr	r3, [pc, #144]	; (800430c <__swsetup_r+0xd8>)
 800427c:	429c      	cmp	r4, r3
 800427e:	bf08      	it	eq
 8004280:	68ec      	ldreq	r4, [r5, #12]
 8004282:	e7e6      	b.n	8004252 <__swsetup_r+0x1e>
 8004284:	0758      	lsls	r0, r3, #29
 8004286:	d512      	bpl.n	80042ae <__swsetup_r+0x7a>
 8004288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800428a:	b141      	cbz	r1, 800429e <__swsetup_r+0x6a>
 800428c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004290:	4299      	cmp	r1, r3
 8004292:	d002      	beq.n	800429a <__swsetup_r+0x66>
 8004294:	4630      	mov	r0, r6
 8004296:	f7ff fb31 	bl	80038fc <_free_r>
 800429a:	2300      	movs	r3, #0
 800429c:	6363      	str	r3, [r4, #52]	; 0x34
 800429e:	89a3      	ldrh	r3, [r4, #12]
 80042a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80042a4:	81a3      	strh	r3, [r4, #12]
 80042a6:	2300      	movs	r3, #0
 80042a8:	6063      	str	r3, [r4, #4]
 80042aa:	6923      	ldr	r3, [r4, #16]
 80042ac:	6023      	str	r3, [r4, #0]
 80042ae:	89a3      	ldrh	r3, [r4, #12]
 80042b0:	f043 0308 	orr.w	r3, r3, #8
 80042b4:	81a3      	strh	r3, [r4, #12]
 80042b6:	6923      	ldr	r3, [r4, #16]
 80042b8:	b94b      	cbnz	r3, 80042ce <__swsetup_r+0x9a>
 80042ba:	89a3      	ldrh	r3, [r4, #12]
 80042bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80042c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c4:	d003      	beq.n	80042ce <__swsetup_r+0x9a>
 80042c6:	4621      	mov	r1, r4
 80042c8:	4630      	mov	r0, r6
 80042ca:	f000 fa09 	bl	80046e0 <__smakebuf_r>
 80042ce:	89a0      	ldrh	r0, [r4, #12]
 80042d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042d4:	f010 0301 	ands.w	r3, r0, #1
 80042d8:	d00a      	beq.n	80042f0 <__swsetup_r+0xbc>
 80042da:	2300      	movs	r3, #0
 80042dc:	60a3      	str	r3, [r4, #8]
 80042de:	6963      	ldr	r3, [r4, #20]
 80042e0:	425b      	negs	r3, r3
 80042e2:	61a3      	str	r3, [r4, #24]
 80042e4:	6923      	ldr	r3, [r4, #16]
 80042e6:	b943      	cbnz	r3, 80042fa <__swsetup_r+0xc6>
 80042e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80042ec:	d1ba      	bne.n	8004264 <__swsetup_r+0x30>
 80042ee:	bd70      	pop	{r4, r5, r6, pc}
 80042f0:	0781      	lsls	r1, r0, #30
 80042f2:	bf58      	it	pl
 80042f4:	6963      	ldrpl	r3, [r4, #20]
 80042f6:	60a3      	str	r3, [r4, #8]
 80042f8:	e7f4      	b.n	80042e4 <__swsetup_r+0xb0>
 80042fa:	2000      	movs	r0, #0
 80042fc:	e7f7      	b.n	80042ee <__swsetup_r+0xba>
 80042fe:	bf00      	nop
 8004300:	20000044 	.word	0x20000044
 8004304:	08004d14 	.word	0x08004d14
 8004308:	08004d34 	.word	0x08004d34
 800430c:	08004cf4 	.word	0x08004cf4

08004310 <abort>:
 8004310:	b508      	push	{r3, lr}
 8004312:	2006      	movs	r0, #6
 8004314:	f000 fa54 	bl	80047c0 <raise>
 8004318:	2001      	movs	r0, #1
 800431a:	f7fc fe23 	bl	8000f64 <_exit>
	...

08004320 <__sflush_r>:
 8004320:	898a      	ldrh	r2, [r1, #12]
 8004322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004326:	4605      	mov	r5, r0
 8004328:	0710      	lsls	r0, r2, #28
 800432a:	460c      	mov	r4, r1
 800432c:	d458      	bmi.n	80043e0 <__sflush_r+0xc0>
 800432e:	684b      	ldr	r3, [r1, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	dc05      	bgt.n	8004340 <__sflush_r+0x20>
 8004334:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004336:	2b00      	cmp	r3, #0
 8004338:	dc02      	bgt.n	8004340 <__sflush_r+0x20>
 800433a:	2000      	movs	r0, #0
 800433c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004340:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004342:	2e00      	cmp	r6, #0
 8004344:	d0f9      	beq.n	800433a <__sflush_r+0x1a>
 8004346:	2300      	movs	r3, #0
 8004348:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800434c:	682f      	ldr	r7, [r5, #0]
 800434e:	602b      	str	r3, [r5, #0]
 8004350:	d032      	beq.n	80043b8 <__sflush_r+0x98>
 8004352:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004354:	89a3      	ldrh	r3, [r4, #12]
 8004356:	075a      	lsls	r2, r3, #29
 8004358:	d505      	bpl.n	8004366 <__sflush_r+0x46>
 800435a:	6863      	ldr	r3, [r4, #4]
 800435c:	1ac0      	subs	r0, r0, r3
 800435e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004360:	b10b      	cbz	r3, 8004366 <__sflush_r+0x46>
 8004362:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004364:	1ac0      	subs	r0, r0, r3
 8004366:	2300      	movs	r3, #0
 8004368:	4602      	mov	r2, r0
 800436a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800436c:	6a21      	ldr	r1, [r4, #32]
 800436e:	4628      	mov	r0, r5
 8004370:	47b0      	blx	r6
 8004372:	1c43      	adds	r3, r0, #1
 8004374:	89a3      	ldrh	r3, [r4, #12]
 8004376:	d106      	bne.n	8004386 <__sflush_r+0x66>
 8004378:	6829      	ldr	r1, [r5, #0]
 800437a:	291d      	cmp	r1, #29
 800437c:	d82c      	bhi.n	80043d8 <__sflush_r+0xb8>
 800437e:	4a2a      	ldr	r2, [pc, #168]	; (8004428 <__sflush_r+0x108>)
 8004380:	40ca      	lsrs	r2, r1
 8004382:	07d6      	lsls	r6, r2, #31
 8004384:	d528      	bpl.n	80043d8 <__sflush_r+0xb8>
 8004386:	2200      	movs	r2, #0
 8004388:	6062      	str	r2, [r4, #4]
 800438a:	04d9      	lsls	r1, r3, #19
 800438c:	6922      	ldr	r2, [r4, #16]
 800438e:	6022      	str	r2, [r4, #0]
 8004390:	d504      	bpl.n	800439c <__sflush_r+0x7c>
 8004392:	1c42      	adds	r2, r0, #1
 8004394:	d101      	bne.n	800439a <__sflush_r+0x7a>
 8004396:	682b      	ldr	r3, [r5, #0]
 8004398:	b903      	cbnz	r3, 800439c <__sflush_r+0x7c>
 800439a:	6560      	str	r0, [r4, #84]	; 0x54
 800439c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800439e:	602f      	str	r7, [r5, #0]
 80043a0:	2900      	cmp	r1, #0
 80043a2:	d0ca      	beq.n	800433a <__sflush_r+0x1a>
 80043a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043a8:	4299      	cmp	r1, r3
 80043aa:	d002      	beq.n	80043b2 <__sflush_r+0x92>
 80043ac:	4628      	mov	r0, r5
 80043ae:	f7ff faa5 	bl	80038fc <_free_r>
 80043b2:	2000      	movs	r0, #0
 80043b4:	6360      	str	r0, [r4, #52]	; 0x34
 80043b6:	e7c1      	b.n	800433c <__sflush_r+0x1c>
 80043b8:	6a21      	ldr	r1, [r4, #32]
 80043ba:	2301      	movs	r3, #1
 80043bc:	4628      	mov	r0, r5
 80043be:	47b0      	blx	r6
 80043c0:	1c41      	adds	r1, r0, #1
 80043c2:	d1c7      	bne.n	8004354 <__sflush_r+0x34>
 80043c4:	682b      	ldr	r3, [r5, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0c4      	beq.n	8004354 <__sflush_r+0x34>
 80043ca:	2b1d      	cmp	r3, #29
 80043cc:	d001      	beq.n	80043d2 <__sflush_r+0xb2>
 80043ce:	2b16      	cmp	r3, #22
 80043d0:	d101      	bne.n	80043d6 <__sflush_r+0xb6>
 80043d2:	602f      	str	r7, [r5, #0]
 80043d4:	e7b1      	b.n	800433a <__sflush_r+0x1a>
 80043d6:	89a3      	ldrh	r3, [r4, #12]
 80043d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043dc:	81a3      	strh	r3, [r4, #12]
 80043de:	e7ad      	b.n	800433c <__sflush_r+0x1c>
 80043e0:	690f      	ldr	r7, [r1, #16]
 80043e2:	2f00      	cmp	r7, #0
 80043e4:	d0a9      	beq.n	800433a <__sflush_r+0x1a>
 80043e6:	0793      	lsls	r3, r2, #30
 80043e8:	680e      	ldr	r6, [r1, #0]
 80043ea:	bf08      	it	eq
 80043ec:	694b      	ldreq	r3, [r1, #20]
 80043ee:	600f      	str	r7, [r1, #0]
 80043f0:	bf18      	it	ne
 80043f2:	2300      	movne	r3, #0
 80043f4:	eba6 0807 	sub.w	r8, r6, r7
 80043f8:	608b      	str	r3, [r1, #8]
 80043fa:	f1b8 0f00 	cmp.w	r8, #0
 80043fe:	dd9c      	ble.n	800433a <__sflush_r+0x1a>
 8004400:	6a21      	ldr	r1, [r4, #32]
 8004402:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004404:	4643      	mov	r3, r8
 8004406:	463a      	mov	r2, r7
 8004408:	4628      	mov	r0, r5
 800440a:	47b0      	blx	r6
 800440c:	2800      	cmp	r0, #0
 800440e:	dc06      	bgt.n	800441e <__sflush_r+0xfe>
 8004410:	89a3      	ldrh	r3, [r4, #12]
 8004412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004416:	81a3      	strh	r3, [r4, #12]
 8004418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800441c:	e78e      	b.n	800433c <__sflush_r+0x1c>
 800441e:	4407      	add	r7, r0
 8004420:	eba8 0800 	sub.w	r8, r8, r0
 8004424:	e7e9      	b.n	80043fa <__sflush_r+0xda>
 8004426:	bf00      	nop
 8004428:	20400001 	.word	0x20400001

0800442c <_fflush_r>:
 800442c:	b538      	push	{r3, r4, r5, lr}
 800442e:	690b      	ldr	r3, [r1, #16]
 8004430:	4605      	mov	r5, r0
 8004432:	460c      	mov	r4, r1
 8004434:	b913      	cbnz	r3, 800443c <_fflush_r+0x10>
 8004436:	2500      	movs	r5, #0
 8004438:	4628      	mov	r0, r5
 800443a:	bd38      	pop	{r3, r4, r5, pc}
 800443c:	b118      	cbz	r0, 8004446 <_fflush_r+0x1a>
 800443e:	6983      	ldr	r3, [r0, #24]
 8004440:	b90b      	cbnz	r3, 8004446 <_fflush_r+0x1a>
 8004442:	f000 f887 	bl	8004554 <__sinit>
 8004446:	4b14      	ldr	r3, [pc, #80]	; (8004498 <_fflush_r+0x6c>)
 8004448:	429c      	cmp	r4, r3
 800444a:	d11b      	bne.n	8004484 <_fflush_r+0x58>
 800444c:	686c      	ldr	r4, [r5, #4]
 800444e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0ef      	beq.n	8004436 <_fflush_r+0xa>
 8004456:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004458:	07d0      	lsls	r0, r2, #31
 800445a:	d404      	bmi.n	8004466 <_fflush_r+0x3a>
 800445c:	0599      	lsls	r1, r3, #22
 800445e:	d402      	bmi.n	8004466 <_fflush_r+0x3a>
 8004460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004462:	f000 f915 	bl	8004690 <__retarget_lock_acquire_recursive>
 8004466:	4628      	mov	r0, r5
 8004468:	4621      	mov	r1, r4
 800446a:	f7ff ff59 	bl	8004320 <__sflush_r>
 800446e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004470:	07da      	lsls	r2, r3, #31
 8004472:	4605      	mov	r5, r0
 8004474:	d4e0      	bmi.n	8004438 <_fflush_r+0xc>
 8004476:	89a3      	ldrh	r3, [r4, #12]
 8004478:	059b      	lsls	r3, r3, #22
 800447a:	d4dd      	bmi.n	8004438 <_fflush_r+0xc>
 800447c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800447e:	f000 f908 	bl	8004692 <__retarget_lock_release_recursive>
 8004482:	e7d9      	b.n	8004438 <_fflush_r+0xc>
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <_fflush_r+0x70>)
 8004486:	429c      	cmp	r4, r3
 8004488:	d101      	bne.n	800448e <_fflush_r+0x62>
 800448a:	68ac      	ldr	r4, [r5, #8]
 800448c:	e7df      	b.n	800444e <_fflush_r+0x22>
 800448e:	4b04      	ldr	r3, [pc, #16]	; (80044a0 <_fflush_r+0x74>)
 8004490:	429c      	cmp	r4, r3
 8004492:	bf08      	it	eq
 8004494:	68ec      	ldreq	r4, [r5, #12]
 8004496:	e7da      	b.n	800444e <_fflush_r+0x22>
 8004498:	08004d14 	.word	0x08004d14
 800449c:	08004d34 	.word	0x08004d34
 80044a0:	08004cf4 	.word	0x08004cf4

080044a4 <std>:
 80044a4:	2300      	movs	r3, #0
 80044a6:	b510      	push	{r4, lr}
 80044a8:	4604      	mov	r4, r0
 80044aa:	e9c0 3300 	strd	r3, r3, [r0]
 80044ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044b2:	6083      	str	r3, [r0, #8]
 80044b4:	8181      	strh	r1, [r0, #12]
 80044b6:	6643      	str	r3, [r0, #100]	; 0x64
 80044b8:	81c2      	strh	r2, [r0, #14]
 80044ba:	6183      	str	r3, [r0, #24]
 80044bc:	4619      	mov	r1, r3
 80044be:	2208      	movs	r2, #8
 80044c0:	305c      	adds	r0, #92	; 0x5c
 80044c2:	f7fd fb59 	bl	8001b78 <memset>
 80044c6:	4b05      	ldr	r3, [pc, #20]	; (80044dc <std+0x38>)
 80044c8:	6263      	str	r3, [r4, #36]	; 0x24
 80044ca:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <std+0x3c>)
 80044cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80044ce:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <std+0x40>)
 80044d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044d2:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <std+0x44>)
 80044d4:	6224      	str	r4, [r4, #32]
 80044d6:	6323      	str	r3, [r4, #48]	; 0x30
 80044d8:	bd10      	pop	{r4, pc}
 80044da:	bf00      	nop
 80044dc:	080047f9 	.word	0x080047f9
 80044e0:	0800481b 	.word	0x0800481b
 80044e4:	08004853 	.word	0x08004853
 80044e8:	08004877 	.word	0x08004877

080044ec <_cleanup_r>:
 80044ec:	4901      	ldr	r1, [pc, #4]	; (80044f4 <_cleanup_r+0x8>)
 80044ee:	f000 b8af 	b.w	8004650 <_fwalk_reent>
 80044f2:	bf00      	nop
 80044f4:	0800442d 	.word	0x0800442d

080044f8 <__sfmoreglue>:
 80044f8:	b570      	push	{r4, r5, r6, lr}
 80044fa:	2268      	movs	r2, #104	; 0x68
 80044fc:	1e4d      	subs	r5, r1, #1
 80044fe:	4355      	muls	r5, r2
 8004500:	460e      	mov	r6, r1
 8004502:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004506:	f7ff fa65 	bl	80039d4 <_malloc_r>
 800450a:	4604      	mov	r4, r0
 800450c:	b140      	cbz	r0, 8004520 <__sfmoreglue+0x28>
 800450e:	2100      	movs	r1, #0
 8004510:	e9c0 1600 	strd	r1, r6, [r0]
 8004514:	300c      	adds	r0, #12
 8004516:	60a0      	str	r0, [r4, #8]
 8004518:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800451c:	f7fd fb2c 	bl	8001b78 <memset>
 8004520:	4620      	mov	r0, r4
 8004522:	bd70      	pop	{r4, r5, r6, pc}

08004524 <__sfp_lock_acquire>:
 8004524:	4801      	ldr	r0, [pc, #4]	; (800452c <__sfp_lock_acquire+0x8>)
 8004526:	f000 b8b3 	b.w	8004690 <__retarget_lock_acquire_recursive>
 800452a:	bf00      	nop
 800452c:	20000319 	.word	0x20000319

08004530 <__sfp_lock_release>:
 8004530:	4801      	ldr	r0, [pc, #4]	; (8004538 <__sfp_lock_release+0x8>)
 8004532:	f000 b8ae 	b.w	8004692 <__retarget_lock_release_recursive>
 8004536:	bf00      	nop
 8004538:	20000319 	.word	0x20000319

0800453c <__sinit_lock_acquire>:
 800453c:	4801      	ldr	r0, [pc, #4]	; (8004544 <__sinit_lock_acquire+0x8>)
 800453e:	f000 b8a7 	b.w	8004690 <__retarget_lock_acquire_recursive>
 8004542:	bf00      	nop
 8004544:	2000031a 	.word	0x2000031a

08004548 <__sinit_lock_release>:
 8004548:	4801      	ldr	r0, [pc, #4]	; (8004550 <__sinit_lock_release+0x8>)
 800454a:	f000 b8a2 	b.w	8004692 <__retarget_lock_release_recursive>
 800454e:	bf00      	nop
 8004550:	2000031a 	.word	0x2000031a

08004554 <__sinit>:
 8004554:	b510      	push	{r4, lr}
 8004556:	4604      	mov	r4, r0
 8004558:	f7ff fff0 	bl	800453c <__sinit_lock_acquire>
 800455c:	69a3      	ldr	r3, [r4, #24]
 800455e:	b11b      	cbz	r3, 8004568 <__sinit+0x14>
 8004560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004564:	f7ff bff0 	b.w	8004548 <__sinit_lock_release>
 8004568:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800456c:	6523      	str	r3, [r4, #80]	; 0x50
 800456e:	4b13      	ldr	r3, [pc, #76]	; (80045bc <__sinit+0x68>)
 8004570:	4a13      	ldr	r2, [pc, #76]	; (80045c0 <__sinit+0x6c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	62a2      	str	r2, [r4, #40]	; 0x28
 8004576:	42a3      	cmp	r3, r4
 8004578:	bf04      	itt	eq
 800457a:	2301      	moveq	r3, #1
 800457c:	61a3      	streq	r3, [r4, #24]
 800457e:	4620      	mov	r0, r4
 8004580:	f000 f820 	bl	80045c4 <__sfp>
 8004584:	6060      	str	r0, [r4, #4]
 8004586:	4620      	mov	r0, r4
 8004588:	f000 f81c 	bl	80045c4 <__sfp>
 800458c:	60a0      	str	r0, [r4, #8]
 800458e:	4620      	mov	r0, r4
 8004590:	f000 f818 	bl	80045c4 <__sfp>
 8004594:	2200      	movs	r2, #0
 8004596:	60e0      	str	r0, [r4, #12]
 8004598:	2104      	movs	r1, #4
 800459a:	6860      	ldr	r0, [r4, #4]
 800459c:	f7ff ff82 	bl	80044a4 <std>
 80045a0:	68a0      	ldr	r0, [r4, #8]
 80045a2:	2201      	movs	r2, #1
 80045a4:	2109      	movs	r1, #9
 80045a6:	f7ff ff7d 	bl	80044a4 <std>
 80045aa:	68e0      	ldr	r0, [r4, #12]
 80045ac:	2202      	movs	r2, #2
 80045ae:	2112      	movs	r1, #18
 80045b0:	f7ff ff78 	bl	80044a4 <std>
 80045b4:	2301      	movs	r3, #1
 80045b6:	61a3      	str	r3, [r4, #24]
 80045b8:	e7d2      	b.n	8004560 <__sinit+0xc>
 80045ba:	bf00      	nop
 80045bc:	0800497c 	.word	0x0800497c
 80045c0:	080044ed 	.word	0x080044ed

080045c4 <__sfp>:
 80045c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c6:	4607      	mov	r7, r0
 80045c8:	f7ff ffac 	bl	8004524 <__sfp_lock_acquire>
 80045cc:	4b1e      	ldr	r3, [pc, #120]	; (8004648 <__sfp+0x84>)
 80045ce:	681e      	ldr	r6, [r3, #0]
 80045d0:	69b3      	ldr	r3, [r6, #24]
 80045d2:	b913      	cbnz	r3, 80045da <__sfp+0x16>
 80045d4:	4630      	mov	r0, r6
 80045d6:	f7ff ffbd 	bl	8004554 <__sinit>
 80045da:	3648      	adds	r6, #72	; 0x48
 80045dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	d503      	bpl.n	80045ec <__sfp+0x28>
 80045e4:	6833      	ldr	r3, [r6, #0]
 80045e6:	b30b      	cbz	r3, 800462c <__sfp+0x68>
 80045e8:	6836      	ldr	r6, [r6, #0]
 80045ea:	e7f7      	b.n	80045dc <__sfp+0x18>
 80045ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80045f0:	b9d5      	cbnz	r5, 8004628 <__sfp+0x64>
 80045f2:	4b16      	ldr	r3, [pc, #88]	; (800464c <__sfp+0x88>)
 80045f4:	60e3      	str	r3, [r4, #12]
 80045f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80045fa:	6665      	str	r5, [r4, #100]	; 0x64
 80045fc:	f000 f847 	bl	800468e <__retarget_lock_init_recursive>
 8004600:	f7ff ff96 	bl	8004530 <__sfp_lock_release>
 8004604:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004608:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800460c:	6025      	str	r5, [r4, #0]
 800460e:	61a5      	str	r5, [r4, #24]
 8004610:	2208      	movs	r2, #8
 8004612:	4629      	mov	r1, r5
 8004614:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004618:	f7fd faae 	bl	8001b78 <memset>
 800461c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004620:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004624:	4620      	mov	r0, r4
 8004626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004628:	3468      	adds	r4, #104	; 0x68
 800462a:	e7d9      	b.n	80045e0 <__sfp+0x1c>
 800462c:	2104      	movs	r1, #4
 800462e:	4638      	mov	r0, r7
 8004630:	f7ff ff62 	bl	80044f8 <__sfmoreglue>
 8004634:	4604      	mov	r4, r0
 8004636:	6030      	str	r0, [r6, #0]
 8004638:	2800      	cmp	r0, #0
 800463a:	d1d5      	bne.n	80045e8 <__sfp+0x24>
 800463c:	f7ff ff78 	bl	8004530 <__sfp_lock_release>
 8004640:	230c      	movs	r3, #12
 8004642:	603b      	str	r3, [r7, #0]
 8004644:	e7ee      	b.n	8004624 <__sfp+0x60>
 8004646:	bf00      	nop
 8004648:	0800497c 	.word	0x0800497c
 800464c:	ffff0001 	.word	0xffff0001

08004650 <_fwalk_reent>:
 8004650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004654:	4606      	mov	r6, r0
 8004656:	4688      	mov	r8, r1
 8004658:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800465c:	2700      	movs	r7, #0
 800465e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004662:	f1b9 0901 	subs.w	r9, r9, #1
 8004666:	d505      	bpl.n	8004674 <_fwalk_reent+0x24>
 8004668:	6824      	ldr	r4, [r4, #0]
 800466a:	2c00      	cmp	r4, #0
 800466c:	d1f7      	bne.n	800465e <_fwalk_reent+0xe>
 800466e:	4638      	mov	r0, r7
 8004670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004674:	89ab      	ldrh	r3, [r5, #12]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d907      	bls.n	800468a <_fwalk_reent+0x3a>
 800467a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800467e:	3301      	adds	r3, #1
 8004680:	d003      	beq.n	800468a <_fwalk_reent+0x3a>
 8004682:	4629      	mov	r1, r5
 8004684:	4630      	mov	r0, r6
 8004686:	47c0      	blx	r8
 8004688:	4307      	orrs	r7, r0
 800468a:	3568      	adds	r5, #104	; 0x68
 800468c:	e7e9      	b.n	8004662 <_fwalk_reent+0x12>

0800468e <__retarget_lock_init_recursive>:
 800468e:	4770      	bx	lr

08004690 <__retarget_lock_acquire_recursive>:
 8004690:	4770      	bx	lr

08004692 <__retarget_lock_release_recursive>:
 8004692:	4770      	bx	lr

08004694 <__swhatbuf_r>:
 8004694:	b570      	push	{r4, r5, r6, lr}
 8004696:	460e      	mov	r6, r1
 8004698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800469c:	2900      	cmp	r1, #0
 800469e:	b096      	sub	sp, #88	; 0x58
 80046a0:	4614      	mov	r4, r2
 80046a2:	461d      	mov	r5, r3
 80046a4:	da08      	bge.n	80046b8 <__swhatbuf_r+0x24>
 80046a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	602a      	str	r2, [r5, #0]
 80046ae:	061a      	lsls	r2, r3, #24
 80046b0:	d410      	bmi.n	80046d4 <__swhatbuf_r+0x40>
 80046b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046b6:	e00e      	b.n	80046d6 <__swhatbuf_r+0x42>
 80046b8:	466a      	mov	r2, sp
 80046ba:	f000 f903 	bl	80048c4 <_fstat_r>
 80046be:	2800      	cmp	r0, #0
 80046c0:	dbf1      	blt.n	80046a6 <__swhatbuf_r+0x12>
 80046c2:	9a01      	ldr	r2, [sp, #4]
 80046c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80046c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80046cc:	425a      	negs	r2, r3
 80046ce:	415a      	adcs	r2, r3
 80046d0:	602a      	str	r2, [r5, #0]
 80046d2:	e7ee      	b.n	80046b2 <__swhatbuf_r+0x1e>
 80046d4:	2340      	movs	r3, #64	; 0x40
 80046d6:	2000      	movs	r0, #0
 80046d8:	6023      	str	r3, [r4, #0]
 80046da:	b016      	add	sp, #88	; 0x58
 80046dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080046e0 <__smakebuf_r>:
 80046e0:	898b      	ldrh	r3, [r1, #12]
 80046e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80046e4:	079d      	lsls	r5, r3, #30
 80046e6:	4606      	mov	r6, r0
 80046e8:	460c      	mov	r4, r1
 80046ea:	d507      	bpl.n	80046fc <__smakebuf_r+0x1c>
 80046ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046f0:	6023      	str	r3, [r4, #0]
 80046f2:	6123      	str	r3, [r4, #16]
 80046f4:	2301      	movs	r3, #1
 80046f6:	6163      	str	r3, [r4, #20]
 80046f8:	b002      	add	sp, #8
 80046fa:	bd70      	pop	{r4, r5, r6, pc}
 80046fc:	ab01      	add	r3, sp, #4
 80046fe:	466a      	mov	r2, sp
 8004700:	f7ff ffc8 	bl	8004694 <__swhatbuf_r>
 8004704:	9900      	ldr	r1, [sp, #0]
 8004706:	4605      	mov	r5, r0
 8004708:	4630      	mov	r0, r6
 800470a:	f7ff f963 	bl	80039d4 <_malloc_r>
 800470e:	b948      	cbnz	r0, 8004724 <__smakebuf_r+0x44>
 8004710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004714:	059a      	lsls	r2, r3, #22
 8004716:	d4ef      	bmi.n	80046f8 <__smakebuf_r+0x18>
 8004718:	f023 0303 	bic.w	r3, r3, #3
 800471c:	f043 0302 	orr.w	r3, r3, #2
 8004720:	81a3      	strh	r3, [r4, #12]
 8004722:	e7e3      	b.n	80046ec <__smakebuf_r+0xc>
 8004724:	4b0d      	ldr	r3, [pc, #52]	; (800475c <__smakebuf_r+0x7c>)
 8004726:	62b3      	str	r3, [r6, #40]	; 0x28
 8004728:	89a3      	ldrh	r3, [r4, #12]
 800472a:	6020      	str	r0, [r4, #0]
 800472c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004730:	81a3      	strh	r3, [r4, #12]
 8004732:	9b00      	ldr	r3, [sp, #0]
 8004734:	6163      	str	r3, [r4, #20]
 8004736:	9b01      	ldr	r3, [sp, #4]
 8004738:	6120      	str	r0, [r4, #16]
 800473a:	b15b      	cbz	r3, 8004754 <__smakebuf_r+0x74>
 800473c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004740:	4630      	mov	r0, r6
 8004742:	f000 f8d1 	bl	80048e8 <_isatty_r>
 8004746:	b128      	cbz	r0, 8004754 <__smakebuf_r+0x74>
 8004748:	89a3      	ldrh	r3, [r4, #12]
 800474a:	f023 0303 	bic.w	r3, r3, #3
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	81a3      	strh	r3, [r4, #12]
 8004754:	89a0      	ldrh	r0, [r4, #12]
 8004756:	4305      	orrs	r5, r0
 8004758:	81a5      	strh	r5, [r4, #12]
 800475a:	e7cd      	b.n	80046f8 <__smakebuf_r+0x18>
 800475c:	080044ed 	.word	0x080044ed

08004760 <_malloc_usable_size_r>:
 8004760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004764:	1f18      	subs	r0, r3, #4
 8004766:	2b00      	cmp	r3, #0
 8004768:	bfbc      	itt	lt
 800476a:	580b      	ldrlt	r3, [r1, r0]
 800476c:	18c0      	addlt	r0, r0, r3
 800476e:	4770      	bx	lr

08004770 <_raise_r>:
 8004770:	291f      	cmp	r1, #31
 8004772:	b538      	push	{r3, r4, r5, lr}
 8004774:	4604      	mov	r4, r0
 8004776:	460d      	mov	r5, r1
 8004778:	d904      	bls.n	8004784 <_raise_r+0x14>
 800477a:	2316      	movs	r3, #22
 800477c:	6003      	str	r3, [r0, #0]
 800477e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004782:	bd38      	pop	{r3, r4, r5, pc}
 8004784:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004786:	b112      	cbz	r2, 800478e <_raise_r+0x1e>
 8004788:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800478c:	b94b      	cbnz	r3, 80047a2 <_raise_r+0x32>
 800478e:	4620      	mov	r0, r4
 8004790:	f000 f830 	bl	80047f4 <_getpid_r>
 8004794:	462a      	mov	r2, r5
 8004796:	4601      	mov	r1, r0
 8004798:	4620      	mov	r0, r4
 800479a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800479e:	f000 b817 	b.w	80047d0 <_kill_r>
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d00a      	beq.n	80047bc <_raise_r+0x4c>
 80047a6:	1c59      	adds	r1, r3, #1
 80047a8:	d103      	bne.n	80047b2 <_raise_r+0x42>
 80047aa:	2316      	movs	r3, #22
 80047ac:	6003      	str	r3, [r0, #0]
 80047ae:	2001      	movs	r0, #1
 80047b0:	e7e7      	b.n	8004782 <_raise_r+0x12>
 80047b2:	2400      	movs	r4, #0
 80047b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80047b8:	4628      	mov	r0, r5
 80047ba:	4798      	blx	r3
 80047bc:	2000      	movs	r0, #0
 80047be:	e7e0      	b.n	8004782 <_raise_r+0x12>

080047c0 <raise>:
 80047c0:	4b02      	ldr	r3, [pc, #8]	; (80047cc <raise+0xc>)
 80047c2:	4601      	mov	r1, r0
 80047c4:	6818      	ldr	r0, [r3, #0]
 80047c6:	f7ff bfd3 	b.w	8004770 <_raise_r>
 80047ca:	bf00      	nop
 80047cc:	20000044 	.word	0x20000044

080047d0 <_kill_r>:
 80047d0:	b538      	push	{r3, r4, r5, lr}
 80047d2:	4d07      	ldr	r5, [pc, #28]	; (80047f0 <_kill_r+0x20>)
 80047d4:	2300      	movs	r3, #0
 80047d6:	4604      	mov	r4, r0
 80047d8:	4608      	mov	r0, r1
 80047da:	4611      	mov	r1, r2
 80047dc:	602b      	str	r3, [r5, #0]
 80047de:	f7fc fbb1 	bl	8000f44 <_kill>
 80047e2:	1c43      	adds	r3, r0, #1
 80047e4:	d102      	bne.n	80047ec <_kill_r+0x1c>
 80047e6:	682b      	ldr	r3, [r5, #0]
 80047e8:	b103      	cbz	r3, 80047ec <_kill_r+0x1c>
 80047ea:	6023      	str	r3, [r4, #0]
 80047ec:	bd38      	pop	{r3, r4, r5, pc}
 80047ee:	bf00      	nop
 80047f0:	20000314 	.word	0x20000314

080047f4 <_getpid_r>:
 80047f4:	f7fc bb9e 	b.w	8000f34 <_getpid>

080047f8 <__sread>:
 80047f8:	b510      	push	{r4, lr}
 80047fa:	460c      	mov	r4, r1
 80047fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004800:	f000 f894 	bl	800492c <_read_r>
 8004804:	2800      	cmp	r0, #0
 8004806:	bfab      	itete	ge
 8004808:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800480a:	89a3      	ldrhlt	r3, [r4, #12]
 800480c:	181b      	addge	r3, r3, r0
 800480e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004812:	bfac      	ite	ge
 8004814:	6563      	strge	r3, [r4, #84]	; 0x54
 8004816:	81a3      	strhlt	r3, [r4, #12]
 8004818:	bd10      	pop	{r4, pc}

0800481a <__swrite>:
 800481a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800481e:	461f      	mov	r7, r3
 8004820:	898b      	ldrh	r3, [r1, #12]
 8004822:	05db      	lsls	r3, r3, #23
 8004824:	4605      	mov	r5, r0
 8004826:	460c      	mov	r4, r1
 8004828:	4616      	mov	r6, r2
 800482a:	d505      	bpl.n	8004838 <__swrite+0x1e>
 800482c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004830:	2302      	movs	r3, #2
 8004832:	2200      	movs	r2, #0
 8004834:	f000 f868 	bl	8004908 <_lseek_r>
 8004838:	89a3      	ldrh	r3, [r4, #12]
 800483a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800483e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004842:	81a3      	strh	r3, [r4, #12]
 8004844:	4632      	mov	r2, r6
 8004846:	463b      	mov	r3, r7
 8004848:	4628      	mov	r0, r5
 800484a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800484e:	f000 b817 	b.w	8004880 <_write_r>

08004852 <__sseek>:
 8004852:	b510      	push	{r4, lr}
 8004854:	460c      	mov	r4, r1
 8004856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800485a:	f000 f855 	bl	8004908 <_lseek_r>
 800485e:	1c43      	adds	r3, r0, #1
 8004860:	89a3      	ldrh	r3, [r4, #12]
 8004862:	bf15      	itete	ne
 8004864:	6560      	strne	r0, [r4, #84]	; 0x54
 8004866:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800486a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800486e:	81a3      	strheq	r3, [r4, #12]
 8004870:	bf18      	it	ne
 8004872:	81a3      	strhne	r3, [r4, #12]
 8004874:	bd10      	pop	{r4, pc}

08004876 <__sclose>:
 8004876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800487a:	f000 b813 	b.w	80048a4 <_close_r>
	...

08004880 <_write_r>:
 8004880:	b538      	push	{r3, r4, r5, lr}
 8004882:	4d07      	ldr	r5, [pc, #28]	; (80048a0 <_write_r+0x20>)
 8004884:	4604      	mov	r4, r0
 8004886:	4608      	mov	r0, r1
 8004888:	4611      	mov	r1, r2
 800488a:	2200      	movs	r2, #0
 800488c:	602a      	str	r2, [r5, #0]
 800488e:	461a      	mov	r2, r3
 8004890:	f7fc fb8f 	bl	8000fb2 <_write>
 8004894:	1c43      	adds	r3, r0, #1
 8004896:	d102      	bne.n	800489e <_write_r+0x1e>
 8004898:	682b      	ldr	r3, [r5, #0]
 800489a:	b103      	cbz	r3, 800489e <_write_r+0x1e>
 800489c:	6023      	str	r3, [r4, #0]
 800489e:	bd38      	pop	{r3, r4, r5, pc}
 80048a0:	20000314 	.word	0x20000314

080048a4 <_close_r>:
 80048a4:	b538      	push	{r3, r4, r5, lr}
 80048a6:	4d06      	ldr	r5, [pc, #24]	; (80048c0 <_close_r+0x1c>)
 80048a8:	2300      	movs	r3, #0
 80048aa:	4604      	mov	r4, r0
 80048ac:	4608      	mov	r0, r1
 80048ae:	602b      	str	r3, [r5, #0]
 80048b0:	f7fc fb9b 	bl	8000fea <_close>
 80048b4:	1c43      	adds	r3, r0, #1
 80048b6:	d102      	bne.n	80048be <_close_r+0x1a>
 80048b8:	682b      	ldr	r3, [r5, #0]
 80048ba:	b103      	cbz	r3, 80048be <_close_r+0x1a>
 80048bc:	6023      	str	r3, [r4, #0]
 80048be:	bd38      	pop	{r3, r4, r5, pc}
 80048c0:	20000314 	.word	0x20000314

080048c4 <_fstat_r>:
 80048c4:	b538      	push	{r3, r4, r5, lr}
 80048c6:	4d07      	ldr	r5, [pc, #28]	; (80048e4 <_fstat_r+0x20>)
 80048c8:	2300      	movs	r3, #0
 80048ca:	4604      	mov	r4, r0
 80048cc:	4608      	mov	r0, r1
 80048ce:	4611      	mov	r1, r2
 80048d0:	602b      	str	r3, [r5, #0]
 80048d2:	f7fc fb96 	bl	8001002 <_fstat>
 80048d6:	1c43      	adds	r3, r0, #1
 80048d8:	d102      	bne.n	80048e0 <_fstat_r+0x1c>
 80048da:	682b      	ldr	r3, [r5, #0]
 80048dc:	b103      	cbz	r3, 80048e0 <_fstat_r+0x1c>
 80048de:	6023      	str	r3, [r4, #0]
 80048e0:	bd38      	pop	{r3, r4, r5, pc}
 80048e2:	bf00      	nop
 80048e4:	20000314 	.word	0x20000314

080048e8 <_isatty_r>:
 80048e8:	b538      	push	{r3, r4, r5, lr}
 80048ea:	4d06      	ldr	r5, [pc, #24]	; (8004904 <_isatty_r+0x1c>)
 80048ec:	2300      	movs	r3, #0
 80048ee:	4604      	mov	r4, r0
 80048f0:	4608      	mov	r0, r1
 80048f2:	602b      	str	r3, [r5, #0]
 80048f4:	f7fc fb95 	bl	8001022 <_isatty>
 80048f8:	1c43      	adds	r3, r0, #1
 80048fa:	d102      	bne.n	8004902 <_isatty_r+0x1a>
 80048fc:	682b      	ldr	r3, [r5, #0]
 80048fe:	b103      	cbz	r3, 8004902 <_isatty_r+0x1a>
 8004900:	6023      	str	r3, [r4, #0]
 8004902:	bd38      	pop	{r3, r4, r5, pc}
 8004904:	20000314 	.word	0x20000314

08004908 <_lseek_r>:
 8004908:	b538      	push	{r3, r4, r5, lr}
 800490a:	4d07      	ldr	r5, [pc, #28]	; (8004928 <_lseek_r+0x20>)
 800490c:	4604      	mov	r4, r0
 800490e:	4608      	mov	r0, r1
 8004910:	4611      	mov	r1, r2
 8004912:	2200      	movs	r2, #0
 8004914:	602a      	str	r2, [r5, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	f7fc fb8e 	bl	8001038 <_lseek>
 800491c:	1c43      	adds	r3, r0, #1
 800491e:	d102      	bne.n	8004926 <_lseek_r+0x1e>
 8004920:	682b      	ldr	r3, [r5, #0]
 8004922:	b103      	cbz	r3, 8004926 <_lseek_r+0x1e>
 8004924:	6023      	str	r3, [r4, #0]
 8004926:	bd38      	pop	{r3, r4, r5, pc}
 8004928:	20000314 	.word	0x20000314

0800492c <_read_r>:
 800492c:	b538      	push	{r3, r4, r5, lr}
 800492e:	4d07      	ldr	r5, [pc, #28]	; (800494c <_read_r+0x20>)
 8004930:	4604      	mov	r4, r0
 8004932:	4608      	mov	r0, r1
 8004934:	4611      	mov	r1, r2
 8004936:	2200      	movs	r2, #0
 8004938:	602a      	str	r2, [r5, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	f7fc fb1c 	bl	8000f78 <_read>
 8004940:	1c43      	adds	r3, r0, #1
 8004942:	d102      	bne.n	800494a <_read_r+0x1e>
 8004944:	682b      	ldr	r3, [r5, #0]
 8004946:	b103      	cbz	r3, 800494a <_read_r+0x1e>
 8004948:	6023      	str	r3, [r4, #0]
 800494a:	bd38      	pop	{r3, r4, r5, pc}
 800494c:	20000314 	.word	0x20000314

08004950 <_init>:
 8004950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004952:	bf00      	nop
 8004954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004956:	bc08      	pop	{r3}
 8004958:	469e      	mov	lr, r3
 800495a:	4770      	bx	lr

0800495c <_fini>:
 800495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495e:	bf00      	nop
 8004960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004962:	bc08      	pop	{r3}
 8004964:	469e      	mov	lr, r3
 8004966:	4770      	bx	lr
