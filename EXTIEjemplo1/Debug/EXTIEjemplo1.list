
EXTIEjemplo1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f24  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080010bc  080010c4  000110c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080010bc  080010bc  000110c4  2**0
                  CONTENTS
  4 .ARM          00000000  080010bc  080010bc  000110c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010bc  080010c4  000110c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010bc  080010bc  000110bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010c0  080010c0  000110c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000110c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  20000000  080010c4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  080010c4  0002004c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000110c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001f4c  00000000  00000000  000110ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006f7  00000000  00000000  0001303a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  00013738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b0  00000000  00000000  00013930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f080  00000000  00000000  00013ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000208f  00000000  00000000  00022b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054bb1  00000000  00000000  00024bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000797a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000644  00000000  00000000  000797f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080010a4 	.word	0x080010a4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080010a4 	.word	0x080010a4

080001d8 <main>:

void initSystem(void);

// *************** // MAIN // *************** //
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
		// Inicializamos el sistema
		initSystem();
 80001dc:	f000 f80e 	bl	80001fc <initSystem>

	    /* Ciclo principal */
		while(1){
				if(counter == 1){
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <main+0x1c>)
 80001e2:	881b      	ldrh	r3, [r3, #0]
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d1fb      	bne.n	80001e0 <main+0x8>
				GPIO_WritePin(&handlerStateLED, RESET);
 80001e8:	2100      	movs	r1, #0
 80001ea:	4803      	ldr	r0, [pc, #12]	; (80001f8 <main+0x20>)
 80001ec:	f000 fdaa 	bl	8000d44 <GPIO_WritePin>
				if(counter == 1){
 80001f0:	e7f6      	b.n	80001e0 <main+0x8>
 80001f2:	bf00      	nop
 80001f4:	2000003c 	.word	0x2000003c
 80001f8:	2000001c 	.word	0x2000001c

080001fc <initSystem>:

//***********// InitSystem //***********//

// Función que define la configuración de todos los pines y periféricos

void initSystem(void){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0

	// Configuración el State LED
	handlerStateLED.pGPIOx								= GPIOA;
 8000200:	4b1b      	ldr	r3, [pc, #108]	; (8000270 <initSystem+0x74>)
 8000202:	4a1c      	ldr	r2, [pc, #112]	; (8000274 <initSystem+0x78>)
 8000204:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 8000206:	4b1a      	ldr	r3, [pc, #104]	; (8000270 <initSystem+0x74>)
 8000208:	2205      	movs	r2, #5
 800020a:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 800020c:	4b18      	ldr	r3, [pc, #96]	; (8000270 <initSystem+0x74>)
 800020e:	2201      	movs	r2, #1
 8000210:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 8000212:	4b17      	ldr	r3, [pc, #92]	; (8000270 <initSystem+0x74>)
 8000214:	2200      	movs	r2, #0
 8000216:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000218:	4b15      	ldr	r3, [pc, #84]	; (8000270 <initSystem+0x74>)
 800021a:	2200      	movs	r2, #0
 800021c:	71da      	strb	r2, [r3, #7]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 800021e:	4b14      	ldr	r3, [pc, #80]	; (8000270 <initSystem+0x74>)
 8000220:	2201      	movs	r2, #1
 8000222:	719a      	strb	r2, [r3, #6]

	//Cargamos la configuración
	GPIO_Config(&handlerStateLED);
 8000224:	4812      	ldr	r0, [pc, #72]	; (8000270 <initSystem+0x74>)
 8000226:	f000 fc65 	bl	8000af4 <GPIO_Config>

	// Configuración del timer2
	handlerTimer2.ptrTIMx								= TIM2;
 800022a:	4b13      	ldr	r3, [pc, #76]	; (8000278 <initSystem+0x7c>)
 800022c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000230:	601a      	str	r2, [r3, #0]
	handlerTimer2.timerConfig.Timer_mode				= TIMER_MODE_UP;
 8000232:	4b11      	ldr	r3, [pc, #68]	; (8000278 <initSystem+0x7c>)
 8000234:	2200      	movs	r2, #0
 8000236:	711a      	strb	r2, [r3, #4]
	handlerTimer2.timerConfig.Timer_speed				= TIMER_INCR_SPEED_1ms;
 8000238:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <initSystem+0x7c>)
 800023a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800023e:	80da      	strh	r2, [r3, #6]
	handlerTimer2.timerConfig.Timer_period				= 250;
 8000240:	4b0d      	ldr	r3, [pc, #52]	; (8000278 <initSystem+0x7c>)
 8000242:	22fa      	movs	r2, #250	; 0xfa
 8000244:	609a      	str	r2, [r3, #8]

	Timer_Config(&handlerTimer2);
 8000246:	480c      	ldr	r0, [pc, #48]	; (8000278 <initSystem+0x7c>)
 8000248:	f000 fe10 	bl	8000e6c <Timer_Config>

	// Configuración del EXTI0

	handlerEXTI0.port 		= GPIOA;
 800024c:	4b0b      	ldr	r3, [pc, #44]	; (800027c <initSystem+0x80>)
 800024e:	4a09      	ldr	r2, [pc, #36]	; (8000274 <initSystem+0x78>)
 8000250:	601a      	str	r2, [r3, #0]
	handlerEXTI0.pin		= PIN_0;
 8000252:	4b0a      	ldr	r3, [pc, #40]	; (800027c <initSystem+0x80>)
 8000254:	2200      	movs	r2, #0
 8000256:	711a      	strb	r2, [r3, #4]
	handlerEXTI0.trigger	= TRIGGER_FALLING;
 8000258:	4b08      	ldr	r3, [pc, #32]	; (800027c <initSystem+0x80>)
 800025a:	2200      	movs	r2, #0
 800025c:	715a      	strb	r2, [r3, #5]
	handlerEXTI0.PinControl	= GPIO_PUPDR_PULLUP;
 800025e:	4b07      	ldr	r3, [pc, #28]	; (800027c <initSystem+0x80>)
 8000260:	2201      	movs	r2, #1
 8000262:	719a      	strb	r2, [r3, #6]

	EXTI_Config(&handlerEXTI0);
 8000264:	4805      	ldr	r0, [pc, #20]	; (800027c <initSystem+0x80>)
 8000266:	f000 f879 	bl	800035c <EXTI_Config>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	2000001c 	.word	0x2000001c
 8000274:	40020000 	.word	0x40020000
 8000278:	20000028 	.word	0x20000028
 800027c:	20000034 	.word	0x20000034

08000280 <Timer2_Callback>:
//***********// CallBacks //***********//
void Timer2_Callback(void){
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	handlerStateLED.pGPIOx -> ODR ^= GPIO_ODR_OD5;		// Encendido y apagado StateLED
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <Timer2_Callback+0x1c>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	695a      	ldr	r2, [r3, #20]
 800028a:	4b04      	ldr	r3, [pc, #16]	; (800029c <Timer2_Callback+0x1c>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f082 0220 	eor.w	r2, r2, #32
 8000292:	615a      	str	r2, [r3, #20]
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr
 800029c:	2000001c 	.word	0x2000001c

080002a0 <EXTI0_Callback>:

void EXTI0_Callback(void){
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
	TIM2 -> DIER ^= TIM_DIER_UIE;
 80002a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002a8:	68db      	ldr	r3, [r3, #12]
 80002aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ae:	f083 0301 	eor.w	r3, r3, #1
 80002b2:	60d3      	str	r3, [r2, #12]
	counter ^= 1;
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <EXTI0_Callback+0x2c>)
 80002b6:	881b      	ldrh	r3, [r3, #0]
 80002b8:	f083 0301 	eor.w	r3, r3, #1
 80002bc:	b29a      	uxth	r2, r3
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <EXTI0_Callback+0x2c>)
 80002c0:	801a      	strh	r2, [r3, #0]
}
 80002c2:	bf00      	nop
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	2000003c 	.word	0x2000003c

080002d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d0:	480d      	ldr	r0, [pc, #52]	; (8000308 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d8:	480c      	ldr	r0, [pc, #48]	; (800030c <LoopForever+0x6>)
  ldr r1, =_edata
 80002da:	490d      	ldr	r1, [pc, #52]	; (8000310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002dc:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <LoopForever+0xe>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e0:	e002      	b.n	80002e8 <LoopCopyDataInit>

080002e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e6:	3304      	adds	r3, #4

080002e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ec:	d3f9      	bcc.n	80002e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f0:	4c0a      	ldr	r4, [pc, #40]	; (800031c <LoopForever+0x16>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f4:	e001      	b.n	80002fa <LoopFillZerobss>

080002f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f8:	3204      	adds	r2, #4

080002fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002fc:	d3fb      	bcc.n	80002f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fe:	f000 fead 	bl	800105c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000302:	f7ff ff69 	bl	80001d8 <main>

08000306 <LoopForever>:

LoopForever:
    b LoopForever
 8000306:	e7fe      	b.n	8000306 <LoopForever>
  ldr   r0, =_estack
 8000308:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800030c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000310:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000314:	080010c4 	.word	0x080010c4
  ldr r2, =_sbss
 8000318:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800031c:	2000004c 	.word	0x2000004c

08000320 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000320:	e7fe      	b.n	8000320 <ADC_IRQHandler>
	...

08000324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800032e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000332:	2b00      	cmp	r3, #0
 8000334:	db0b      	blt.n	800034e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	f003 021f 	and.w	r2, r3, #31
 800033c:	4906      	ldr	r1, [pc, #24]	; (8000358 <__NVIC_EnableIRQ+0x34>)
 800033e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000342:	095b      	lsrs	r3, r3, #5
 8000344:	2001      	movs	r0, #1
 8000346:	fa00 f202 	lsl.w	r2, r0, r2
 800034a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	e000e100 	.word	0xe000e100

0800035c <EXTI_Config>:
#include "EXTIxDriver.h"
#include "GPIOxDriver.h"

GPIO_Handler_t handlerEXTIxPin = {0};

void EXTI_Config(EXTI_Config_t *extiConfig){
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]

	/* 0. Activamos la señal del RCC al SYSCFG */

	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000364:	4b8c      	ldr	r3, [pc, #560]	; (8000598 <EXTI_Config+0x23c>)
 8000366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000368:	4a8b      	ldr	r2, [pc, #556]	; (8000598 <EXTI_Config+0x23c>)
 800036a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800036e:	6453      	str	r3, [r2, #68]	; 0x44

	/* 1. Configuramos el PinXY como entrada Digital */

	handlerEXTIxPin.pGPIOx = extiConfig -> port;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a89      	ldr	r2, [pc, #548]	; (800059c <EXTI_Config+0x240>)
 8000376:	6013      	str	r3, [r2, #0]
	handlerEXTIxPin.GPIO_PinConfig.GPIO_PinNumber = extiConfig -> pin;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	791a      	ldrb	r2, [r3, #4]
 800037c:	4b87      	ldr	r3, [pc, #540]	; (800059c <EXTI_Config+0x240>)
 800037e:	711a      	strb	r2, [r3, #4]
	handlerEXTIxPin.GPIO_PinConfig.GPIO_PinPuPdControl = extiConfig -> PinControl;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	799a      	ldrb	r2, [r3, #6]
 8000384:	4b85      	ldr	r3, [pc, #532]	; (800059c <EXTI_Config+0x240>)
 8000386:	71da      	strb	r2, [r3, #7]
	handlerEXTIxPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000388:	4b84      	ldr	r3, [pc, #528]	; (800059c <EXTI_Config+0x240>)
 800038a:	2200      	movs	r2, #0
 800038c:	715a      	strb	r2, [r3, #5]

	GPIO_Config(&handlerEXTIxPin);
 800038e:	4883      	ldr	r0, [pc, #524]	; (800059c <EXTI_Config+0x240>)
 8000390:	f000 fbb0 	bl	8000af4 <GPIO_Config>

	/* 2. Asignamos el Pin al EXTI */

	if((extiConfig -> pin)< 4){
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	791b      	ldrb	r3, [r3, #4]
 8000398:	2b03      	cmp	r3, #3
 800039a:	d85f      	bhi.n	800045c <EXTI_Config+0x100>
		if(extiConfig -> port == GPIOA){
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a7f      	ldr	r2, [pc, #508]	; (80005a0 <EXTI_Config+0x244>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d104      	bne.n	80003b0 <EXTI_Config+0x54>
			SYSCFG -> EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 80003a6:	4b7f      	ldr	r3, [pc, #508]	; (80005a4 <EXTI_Config+0x248>)
 80003a8:	4a7e      	ldr	r2, [pc, #504]	; (80005a4 <EXTI_Config+0x248>)
 80003aa:	689b      	ldr	r3, [r3, #8]
 80003ac:	6093      	str	r3, [r2, #8]
 80003ae:	e1aa      	b.n	8000706 <EXTI_Config+0x3aa>
		}
		else if(extiConfig -> port == GPIOB){
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a7c      	ldr	r2, [pc, #496]	; (80005a8 <EXTI_Config+0x24c>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d10b      	bne.n	80003d2 <EXTI_Config+0x76>
			SYSCFG -> EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB << (4 * (extiConfig -> pin)));			// Configuramos el pin PB0
 80003ba:	4b7a      	ldr	r3, [pc, #488]	; (80005a4 <EXTI_Config+0x248>)
 80003bc:	689a      	ldr	r2, [r3, #8]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	791b      	ldrb	r3, [r3, #4]
 80003c2:	009b      	lsls	r3, r3, #2
 80003c4:	2101      	movs	r1, #1
 80003c6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ca:	4976      	ldr	r1, [pc, #472]	; (80005a4 <EXTI_Config+0x248>)
 80003cc:	4313      	orrs	r3, r2
 80003ce:	608b      	str	r3, [r1, #8]
 80003d0:	e199      	b.n	8000706 <EXTI_Config+0x3aa>
		}
		else if(extiConfig -> port == GPIOC){
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4a75      	ldr	r2, [pc, #468]	; (80005ac <EXTI_Config+0x250>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d10b      	bne.n	80003f4 <EXTI_Config+0x98>
			SYSCFG -> EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 80003dc:	4b71      	ldr	r3, [pc, #452]	; (80005a4 <EXTI_Config+0x248>)
 80003de:	689a      	ldr	r2, [r3, #8]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	791b      	ldrb	r3, [r3, #4]
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	2102      	movs	r1, #2
 80003e8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ec:	496d      	ldr	r1, [pc, #436]	; (80005a4 <EXTI_Config+0x248>)
 80003ee:	4313      	orrs	r3, r2
 80003f0:	608b      	str	r3, [r1, #8]
 80003f2:	e188      	b.n	8000706 <EXTI_Config+0x3aa>
		}
		else if(extiConfig -> port == GPIOD){
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a6d      	ldr	r2, [pc, #436]	; (80005b0 <EXTI_Config+0x254>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d10b      	bne.n	8000416 <EXTI_Config+0xba>
			SYSCFG -> EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 80003fe:	4b69      	ldr	r3, [pc, #420]	; (80005a4 <EXTI_Config+0x248>)
 8000400:	689a      	ldr	r2, [r3, #8]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	791b      	ldrb	r3, [r3, #4]
 8000406:	009b      	lsls	r3, r3, #2
 8000408:	2103      	movs	r1, #3
 800040a:	fa01 f303 	lsl.w	r3, r1, r3
 800040e:	4965      	ldr	r1, [pc, #404]	; (80005a4 <EXTI_Config+0x248>)
 8000410:	4313      	orrs	r3, r2
 8000412:	608b      	str	r3, [r1, #8]
 8000414:	e177      	b.n	8000706 <EXTI_Config+0x3aa>
		}
		else if(extiConfig -> port == GPIOE){
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a66      	ldr	r2, [pc, #408]	; (80005b4 <EXTI_Config+0x258>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d10b      	bne.n	8000438 <EXTI_Config+0xdc>
			SYSCFG -> EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000420:	4b60      	ldr	r3, [pc, #384]	; (80005a4 <EXTI_Config+0x248>)
 8000422:	689a      	ldr	r2, [r3, #8]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	791b      	ldrb	r3, [r3, #4]
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	2104      	movs	r1, #4
 800042c:	fa01 f303 	lsl.w	r3, r1, r3
 8000430:	495c      	ldr	r1, [pc, #368]	; (80005a4 <EXTI_Config+0x248>)
 8000432:	4313      	orrs	r3, r2
 8000434:	608b      	str	r3, [r1, #8]
 8000436:	e166      	b.n	8000706 <EXTI_Config+0x3aa>
		}
		else if(extiConfig -> port == GPIOH){
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a5e      	ldr	r2, [pc, #376]	; (80005b8 <EXTI_Config+0x25c>)
 800043e:	4293      	cmp	r3, r2
 8000440:	f040 8161 	bne.w	8000706 <EXTI_Config+0x3aa>
			SYSCFG -> EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000444:	4b57      	ldr	r3, [pc, #348]	; (80005a4 <EXTI_Config+0x248>)
 8000446:	689a      	ldr	r2, [r3, #8]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	791b      	ldrb	r3, [r3, #4]
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	2107      	movs	r1, #7
 8000450:	fa01 f303 	lsl.w	r3, r1, r3
 8000454:	4953      	ldr	r1, [pc, #332]	; (80005a4 <EXTI_Config+0x248>)
 8000456:	4313      	orrs	r3, r2
 8000458:	608b      	str	r3, [r1, #8]
 800045a:	e154      	b.n	8000706 <EXTI_Config+0x3aa>
		}
	}
	else if(((extiConfig -> pin) > 3) && ((extiConfig -> pin) < 8)){
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	791b      	ldrb	r3, [r3, #4]
 8000460:	2b03      	cmp	r3, #3
 8000462:	d963      	bls.n	800052c <EXTI_Config+0x1d0>
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	791b      	ldrb	r3, [r3, #4]
 8000468:	2b07      	cmp	r3, #7
 800046a:	d85f      	bhi.n	800052c <EXTI_Config+0x1d0>
		if(extiConfig -> port == GPIOA){
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a4b      	ldr	r2, [pc, #300]	; (80005a0 <EXTI_Config+0x244>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d104      	bne.n	8000480 <EXTI_Config+0x124>
			SYSCFG -> EXTICR[1] |= (SYSCFG_EXTICR1_EXTI1_PA << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000476:	4b4b      	ldr	r3, [pc, #300]	; (80005a4 <EXTI_Config+0x248>)
 8000478:	4a4a      	ldr	r2, [pc, #296]	; (80005a4 <EXTI_Config+0x248>)
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	60d3      	str	r3, [r2, #12]
		if(extiConfig -> port == GPIOA){
 800047e:	e13f      	b.n	8000700 <EXTI_Config+0x3a4>
		}
		else if(extiConfig -> port == GPIOB){
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a48      	ldr	r2, [pc, #288]	; (80005a8 <EXTI_Config+0x24c>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d10b      	bne.n	80004a2 <EXTI_Config+0x146>
			SYSCFG -> EXTICR[1] |= (SYSCFG_EXTICR1_EXTI1_PB << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 800048a:	4b46      	ldr	r3, [pc, #280]	; (80005a4 <EXTI_Config+0x248>)
 800048c:	68da      	ldr	r2, [r3, #12]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	791b      	ldrb	r3, [r3, #4]
 8000492:	009b      	lsls	r3, r3, #2
 8000494:	2110      	movs	r1, #16
 8000496:	fa01 f303 	lsl.w	r3, r1, r3
 800049a:	4942      	ldr	r1, [pc, #264]	; (80005a4 <EXTI_Config+0x248>)
 800049c:	4313      	orrs	r3, r2
 800049e:	60cb      	str	r3, [r1, #12]
		if(extiConfig -> port == GPIOA){
 80004a0:	e12e      	b.n	8000700 <EXTI_Config+0x3a4>
		}
		else if(extiConfig -> port == GPIOC){
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a41      	ldr	r2, [pc, #260]	; (80005ac <EXTI_Config+0x250>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d10b      	bne.n	80004c4 <EXTI_Config+0x168>
			SYSCFG -> EXTICR[1] |= (SYSCFG_EXTICR1_EXTI1_PC << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 80004ac:	4b3d      	ldr	r3, [pc, #244]	; (80005a4 <EXTI_Config+0x248>)
 80004ae:	68da      	ldr	r2, [r3, #12]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	791b      	ldrb	r3, [r3, #4]
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	2120      	movs	r1, #32
 80004b8:	fa01 f303 	lsl.w	r3, r1, r3
 80004bc:	4939      	ldr	r1, [pc, #228]	; (80005a4 <EXTI_Config+0x248>)
 80004be:	4313      	orrs	r3, r2
 80004c0:	60cb      	str	r3, [r1, #12]
		if(extiConfig -> port == GPIOA){
 80004c2:	e11d      	b.n	8000700 <EXTI_Config+0x3a4>
		}
		else if(extiConfig -> port == GPIOD){
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a39      	ldr	r2, [pc, #228]	; (80005b0 <EXTI_Config+0x254>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d10b      	bne.n	80004e6 <EXTI_Config+0x18a>
			SYSCFG -> EXTICR[1] |= (SYSCFG_EXTICR1_EXTI1_PD << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 80004ce:	4b35      	ldr	r3, [pc, #212]	; (80005a4 <EXTI_Config+0x248>)
 80004d0:	68da      	ldr	r2, [r3, #12]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	791b      	ldrb	r3, [r3, #4]
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	2130      	movs	r1, #48	; 0x30
 80004da:	fa01 f303 	lsl.w	r3, r1, r3
 80004de:	4931      	ldr	r1, [pc, #196]	; (80005a4 <EXTI_Config+0x248>)
 80004e0:	4313      	orrs	r3, r2
 80004e2:	60cb      	str	r3, [r1, #12]
		if(extiConfig -> port == GPIOA){
 80004e4:	e10c      	b.n	8000700 <EXTI_Config+0x3a4>
		}
		else if(extiConfig -> port == GPIOE){
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a32      	ldr	r2, [pc, #200]	; (80005b4 <EXTI_Config+0x258>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d10b      	bne.n	8000508 <EXTI_Config+0x1ac>
			SYSCFG -> EXTICR[1] |= (SYSCFG_EXTICR1_EXTI1_PE << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 80004f0:	4b2c      	ldr	r3, [pc, #176]	; (80005a4 <EXTI_Config+0x248>)
 80004f2:	68da      	ldr	r2, [r3, #12]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	791b      	ldrb	r3, [r3, #4]
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	2140      	movs	r1, #64	; 0x40
 80004fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000500:	4928      	ldr	r1, [pc, #160]	; (80005a4 <EXTI_Config+0x248>)
 8000502:	4313      	orrs	r3, r2
 8000504:	60cb      	str	r3, [r1, #12]
		if(extiConfig -> port == GPIOA){
 8000506:	e0fb      	b.n	8000700 <EXTI_Config+0x3a4>
		}
		else if(extiConfig -> port == GPIOH){
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a2a      	ldr	r2, [pc, #168]	; (80005b8 <EXTI_Config+0x25c>)
 800050e:	4293      	cmp	r3, r2
 8000510:	f040 80f6 	bne.w	8000700 <EXTI_Config+0x3a4>
			SYSCFG -> EXTICR[1] |= (SYSCFG_EXTICR1_EXTI1_PH << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000514:	4b23      	ldr	r3, [pc, #140]	; (80005a4 <EXTI_Config+0x248>)
 8000516:	68da      	ldr	r2, [r3, #12]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	791b      	ldrb	r3, [r3, #4]
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	2170      	movs	r1, #112	; 0x70
 8000520:	fa01 f303 	lsl.w	r3, r1, r3
 8000524:	491f      	ldr	r1, [pc, #124]	; (80005a4 <EXTI_Config+0x248>)
 8000526:	4313      	orrs	r3, r2
 8000528:	60cb      	str	r3, [r1, #12]
		if(extiConfig -> port == GPIOA){
 800052a:	e0e9      	b.n	8000700 <EXTI_Config+0x3a4>
		}
	}
	else if(((extiConfig -> pin) > 7) && ((extiConfig -> pin) < 12)){
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	791b      	ldrb	r3, [r3, #4]
 8000530:	2b07      	cmp	r3, #7
 8000532:	d979      	bls.n	8000628 <EXTI_Config+0x2cc>
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	791b      	ldrb	r3, [r3, #4]
 8000538:	2b0b      	cmp	r3, #11
 800053a:	d875      	bhi.n	8000628 <EXTI_Config+0x2cc>
		if(extiConfig -> port == GPIOA){
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a17      	ldr	r2, [pc, #92]	; (80005a0 <EXTI_Config+0x244>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d104      	bne.n	8000550 <EXTI_Config+0x1f4>
			SYSCFG -> EXTICR[2] |= (SYSCFG_EXTICR1_EXTI2_PA << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000546:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <EXTI_Config+0x248>)
 8000548:	4a16      	ldr	r2, [pc, #88]	; (80005a4 <EXTI_Config+0x248>)
 800054a:	691b      	ldr	r3, [r3, #16]
 800054c:	6113      	str	r3, [r2, #16]
		if(extiConfig -> port == GPIOA){
 800054e:	e0d9      	b.n	8000704 <EXTI_Config+0x3a8>
		}
		else if(extiConfig -> port == GPIOB){
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a14      	ldr	r2, [pc, #80]	; (80005a8 <EXTI_Config+0x24c>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d10c      	bne.n	8000574 <EXTI_Config+0x218>
			SYSCFG -> EXTICR[2] |= (SYSCFG_EXTICR1_EXTI2_PB << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 800055a:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <EXTI_Config+0x248>)
 800055c:	691a      	ldr	r2, [r3, #16]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	791b      	ldrb	r3, [r3, #4]
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000568:	fa01 f303 	lsl.w	r3, r1, r3
 800056c:	490d      	ldr	r1, [pc, #52]	; (80005a4 <EXTI_Config+0x248>)
 800056e:	4313      	orrs	r3, r2
 8000570:	610b      	str	r3, [r1, #16]
		if(extiConfig -> port == GPIOA){
 8000572:	e0c7      	b.n	8000704 <EXTI_Config+0x3a8>
		}
		else if(extiConfig -> port == GPIOC){
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0c      	ldr	r2, [pc, #48]	; (80005ac <EXTI_Config+0x250>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d11e      	bne.n	80005bc <EXTI_Config+0x260>
			SYSCFG -> EXTICR[2] |= (SYSCFG_EXTICR1_EXTI2_PC << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <EXTI_Config+0x248>)
 8000580:	691a      	ldr	r2, [r3, #16]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	791b      	ldrb	r3, [r3, #4]
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	f44f 7100 	mov.w	r1, #512	; 0x200
 800058c:	fa01 f303 	lsl.w	r3, r1, r3
 8000590:	4904      	ldr	r1, [pc, #16]	; (80005a4 <EXTI_Config+0x248>)
 8000592:	4313      	orrs	r3, r2
 8000594:	610b      	str	r3, [r1, #16]
		if(extiConfig -> port == GPIOA){
 8000596:	e0b5      	b.n	8000704 <EXTI_Config+0x3a8>
 8000598:	40023800 	.word	0x40023800
 800059c:	20000040 	.word	0x20000040
 80005a0:	40020000 	.word	0x40020000
 80005a4:	40013800 	.word	0x40013800
 80005a8:	40020400 	.word	0x40020400
 80005ac:	40020800 	.word	0x40020800
 80005b0:	40020c00 	.word	0x40020c00
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40021c00 	.word	0x40021c00
		}
		else if(extiConfig -> port == GPIOD){
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a91      	ldr	r2, [pc, #580]	; (8000808 <EXTI_Config+0x4ac>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d10c      	bne.n	80005e0 <EXTI_Config+0x284>
			SYSCFG -> EXTICR[2] |= (SYSCFG_EXTICR1_EXTI2_PD << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 80005c6:	4b91      	ldr	r3, [pc, #580]	; (800080c <EXTI_Config+0x4b0>)
 80005c8:	691a      	ldr	r2, [r3, #16]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	791b      	ldrb	r3, [r3, #4]
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80005d4:	fa01 f303 	lsl.w	r3, r1, r3
 80005d8:	498c      	ldr	r1, [pc, #560]	; (800080c <EXTI_Config+0x4b0>)
 80005da:	4313      	orrs	r3, r2
 80005dc:	610b      	str	r3, [r1, #16]
		if(extiConfig -> port == GPIOA){
 80005de:	e091      	b.n	8000704 <EXTI_Config+0x3a8>
		}
		else if(extiConfig -> port == GPIOE){
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a8a      	ldr	r2, [pc, #552]	; (8000810 <EXTI_Config+0x4b4>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d10c      	bne.n	8000604 <EXTI_Config+0x2a8>
			SYSCFG -> EXTICR[2] |= (SYSCFG_EXTICR1_EXTI2_PE << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 80005ea:	4b88      	ldr	r3, [pc, #544]	; (800080c <EXTI_Config+0x4b0>)
 80005ec:	691a      	ldr	r2, [r3, #16]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	791b      	ldrb	r3, [r3, #4]
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f8:	fa01 f303 	lsl.w	r3, r1, r3
 80005fc:	4983      	ldr	r1, [pc, #524]	; (800080c <EXTI_Config+0x4b0>)
 80005fe:	4313      	orrs	r3, r2
 8000600:	610b      	str	r3, [r1, #16]
		if(extiConfig -> port == GPIOA){
 8000602:	e07f      	b.n	8000704 <EXTI_Config+0x3a8>
		}
		else if(extiConfig -> port == GPIOH){
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a82      	ldr	r2, [pc, #520]	; (8000814 <EXTI_Config+0x4b8>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d17a      	bne.n	8000704 <EXTI_Config+0x3a8>
			SYSCFG -> EXTICR[2] |= (SYSCFG_EXTICR1_EXTI2_PH << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 800060e:	4b7f      	ldr	r3, [pc, #508]	; (800080c <EXTI_Config+0x4b0>)
 8000610:	691a      	ldr	r2, [r3, #16]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800061c:	fa01 f303 	lsl.w	r3, r1, r3
 8000620:	497a      	ldr	r1, [pc, #488]	; (800080c <EXTI_Config+0x4b0>)
 8000622:	4313      	orrs	r3, r2
 8000624:	610b      	str	r3, [r1, #16]
		if(extiConfig -> port == GPIOA){
 8000626:	e06d      	b.n	8000704 <EXTI_Config+0x3a8>
		}
	}
	else if(((extiConfig -> pin) > 11) && ((extiConfig -> pin) < 16)){
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	2b0b      	cmp	r3, #11
 800062e:	d96a      	bls.n	8000706 <EXTI_Config+0x3aa>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	2b0f      	cmp	r3, #15
 8000636:	d866      	bhi.n	8000706 <EXTI_Config+0x3aa>
		if(extiConfig -> port == GPIOA){
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a76      	ldr	r2, [pc, #472]	; (8000818 <EXTI_Config+0x4bc>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d104      	bne.n	800064c <EXTI_Config+0x2f0>
			SYSCFG -> EXTICR[3] |= (SYSCFG_EXTICR1_EXTI3_PA << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000642:	4b72      	ldr	r3, [pc, #456]	; (800080c <EXTI_Config+0x4b0>)
 8000644:	4a71      	ldr	r2, [pc, #452]	; (800080c <EXTI_Config+0x4b0>)
 8000646:	695b      	ldr	r3, [r3, #20]
 8000648:	6153      	str	r3, [r2, #20]
 800064a:	e05c      	b.n	8000706 <EXTI_Config+0x3aa>
		}
		else if(extiConfig -> port == GPIOB){
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a72      	ldr	r2, [pc, #456]	; (800081c <EXTI_Config+0x4c0>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d10c      	bne.n	8000670 <EXTI_Config+0x314>
			SYSCFG -> EXTICR[3] |= (SYSCFG_EXTICR1_EXTI3_PB << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000656:	4b6d      	ldr	r3, [pc, #436]	; (800080c <EXTI_Config+0x4b0>)
 8000658:	695a      	ldr	r2, [r3, #20]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	791b      	ldrb	r3, [r3, #4]
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000664:	fa01 f303 	lsl.w	r3, r1, r3
 8000668:	4968      	ldr	r1, [pc, #416]	; (800080c <EXTI_Config+0x4b0>)
 800066a:	4313      	orrs	r3, r2
 800066c:	614b      	str	r3, [r1, #20]
 800066e:	e04a      	b.n	8000706 <EXTI_Config+0x3aa>
		}
		else if(extiConfig -> port == GPIOC){
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a6a      	ldr	r2, [pc, #424]	; (8000820 <EXTI_Config+0x4c4>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d10c      	bne.n	8000694 <EXTI_Config+0x338>
			SYSCFG -> EXTICR[3] |= (SYSCFG_EXTICR1_EXTI3_PC << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 800067a:	4b64      	ldr	r3, [pc, #400]	; (800080c <EXTI_Config+0x4b0>)
 800067c:	695a      	ldr	r2, [r3, #20]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	791b      	ldrb	r3, [r3, #4]
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000688:	fa01 f303 	lsl.w	r3, r1, r3
 800068c:	495f      	ldr	r1, [pc, #380]	; (800080c <EXTI_Config+0x4b0>)
 800068e:	4313      	orrs	r3, r2
 8000690:	614b      	str	r3, [r1, #20]
 8000692:	e038      	b.n	8000706 <EXTI_Config+0x3aa>
		}
		else if(extiConfig -> port == GPIOD){
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a5b      	ldr	r2, [pc, #364]	; (8000808 <EXTI_Config+0x4ac>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d10c      	bne.n	80006b8 <EXTI_Config+0x35c>
			SYSCFG -> EXTICR[3] |= (SYSCFG_EXTICR1_EXTI3_PD << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 800069e:	4b5b      	ldr	r3, [pc, #364]	; (800080c <EXTI_Config+0x4b0>)
 80006a0:	695a      	ldr	r2, [r3, #20]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	791b      	ldrb	r3, [r3, #4]
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80006ac:	fa01 f303 	lsl.w	r3, r1, r3
 80006b0:	4956      	ldr	r1, [pc, #344]	; (800080c <EXTI_Config+0x4b0>)
 80006b2:	4313      	orrs	r3, r2
 80006b4:	614b      	str	r3, [r1, #20]
 80006b6:	e026      	b.n	8000706 <EXTI_Config+0x3aa>
		}
		else if(extiConfig -> port == GPIOE){
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a54      	ldr	r2, [pc, #336]	; (8000810 <EXTI_Config+0x4b4>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d10c      	bne.n	80006dc <EXTI_Config+0x380>
			SYSCFG -> EXTICR[3] |= (SYSCFG_EXTICR1_EXTI3_PE << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 80006c2:	4b52      	ldr	r3, [pc, #328]	; (800080c <EXTI_Config+0x4b0>)
 80006c4:	695a      	ldr	r2, [r3, #20]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	791b      	ldrb	r3, [r3, #4]
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d0:	fa01 f303 	lsl.w	r3, r1, r3
 80006d4:	494d      	ldr	r1, [pc, #308]	; (800080c <EXTI_Config+0x4b0>)
 80006d6:	4313      	orrs	r3, r2
 80006d8:	614b      	str	r3, [r1, #20]
 80006da:	e014      	b.n	8000706 <EXTI_Config+0x3aa>
		}
		else if(extiConfig -> port == GPIOH){
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a4c      	ldr	r2, [pc, #304]	; (8000814 <EXTI_Config+0x4b8>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d10f      	bne.n	8000706 <EXTI_Config+0x3aa>
			SYSCFG -> EXTICR[3] |= (SYSCFG_EXTICR1_EXTI3_PH << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 80006e6:	4b49      	ldr	r3, [pc, #292]	; (800080c <EXTI_Config+0x4b0>)
 80006e8:	695a      	ldr	r2, [r3, #20]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	791b      	ldrb	r3, [r3, #4]
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80006f4:	fa01 f303 	lsl.w	r3, r1, r3
 80006f8:	4944      	ldr	r1, [pc, #272]	; (800080c <EXTI_Config+0x4b0>)
 80006fa:	4313      	orrs	r3, r2
 80006fc:	614b      	str	r3, [r1, #20]
 80006fe:	e002      	b.n	8000706 <EXTI_Config+0x3aa>
		if(extiConfig -> port == GPIOA){
 8000700:	bf00      	nop
 8000702:	e000      	b.n	8000706 <EXTI_Config+0x3aa>
		if(extiConfig -> port == GPIOA){
 8000704:	bf00      	nop
		}
	}
	/* 3. Configuramos el trigger EXTI_RTSR*/

	// Activamos la configuración para flanco de subida
	if((extiConfig -> trigger) == TRIGGER_RISING){
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	795b      	ldrb	r3, [r3, #5]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d10a      	bne.n	8000724 <EXTI_Config+0x3c8>
		EXTI -> RTSR |= (EXTI_RTSR_TR0 << (extiConfig -> pin));
 800070e:	4b45      	ldr	r3, [pc, #276]	; (8000824 <EXTI_Config+0x4c8>)
 8000710:	689a      	ldr	r2, [r3, #8]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	791b      	ldrb	r3, [r3, #4]
 8000716:	4619      	mov	r1, r3
 8000718:	2301      	movs	r3, #1
 800071a:	408b      	lsls	r3, r1
 800071c:	4941      	ldr	r1, [pc, #260]	; (8000824 <EXTI_Config+0x4c8>)
 800071e:	4313      	orrs	r3, r2
 8000720:	608b      	str	r3, [r1, #8]
 8000722:	e022      	b.n	800076a <EXTI_Config+0x40e>
	}
	// Activamos la configuración para el flanco de bajada
	else if((extiConfig -> trigger) == TRIGGER_RISING){
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	795b      	ldrb	r3, [r3, #5]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d10a      	bne.n	8000742 <EXTI_Config+0x3e6>
		EXTI -> FTSR |= (EXTI_FTSR_TR0 << (extiConfig -> pin));
 800072c:	4b3d      	ldr	r3, [pc, #244]	; (8000824 <EXTI_Config+0x4c8>)
 800072e:	68da      	ldr	r2, [r3, #12]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	791b      	ldrb	r3, [r3, #4]
 8000734:	4619      	mov	r1, r3
 8000736:	2301      	movs	r3, #1
 8000738:	408b      	lsls	r3, r1
 800073a:	493a      	ldr	r1, [pc, #232]	; (8000824 <EXTI_Config+0x4c8>)
 800073c:	4313      	orrs	r3, r2
 800073e:	60cb      	str	r3, [r1, #12]
 8000740:	e013      	b.n	800076a <EXTI_Config+0x40e>
	}
	// Activamos la configuración para los dos
	else{
		EXTI -> RTSR |= (EXTI_RTSR_TR0 << (extiConfig -> pin));
 8000742:	4b38      	ldr	r3, [pc, #224]	; (8000824 <EXTI_Config+0x4c8>)
 8000744:	689a      	ldr	r2, [r3, #8]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	791b      	ldrb	r3, [r3, #4]
 800074a:	4619      	mov	r1, r3
 800074c:	2301      	movs	r3, #1
 800074e:	408b      	lsls	r3, r1
 8000750:	4934      	ldr	r1, [pc, #208]	; (8000824 <EXTI_Config+0x4c8>)
 8000752:	4313      	orrs	r3, r2
 8000754:	608b      	str	r3, [r1, #8]
		EXTI -> RTSR |= (EXTI_FTSR_TR0 << (extiConfig -> pin));
 8000756:	4b33      	ldr	r3, [pc, #204]	; (8000824 <EXTI_Config+0x4c8>)
 8000758:	689a      	ldr	r2, [r3, #8]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	791b      	ldrb	r3, [r3, #4]
 800075e:	4619      	mov	r1, r3
 8000760:	2301      	movs	r3, #1
 8000762:	408b      	lsls	r3, r1
 8000764:	492f      	ldr	r1, [pc, #188]	; (8000824 <EXTI_Config+0x4c8>)
 8000766:	4313      	orrs	r3, r2
 8000768:	608b      	str	r3, [r1, #8]
	}

	/* 4. Configuramos el interrupt mask register */

	EXTI -> IMR |= (EXTI_IMR_MR0 << (extiConfig -> pin));
 800076a:	4b2e      	ldr	r3, [pc, #184]	; (8000824 <EXTI_Config+0x4c8>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	791b      	ldrb	r3, [r3, #4]
 8000772:	4619      	mov	r1, r3
 8000774:	2301      	movs	r3, #1
 8000776:	408b      	lsls	r3, r1
 8000778:	492a      	ldr	r1, [pc, #168]	; (8000824 <EXTI_Config+0x4c8>)
 800077a:	4313      	orrs	r3, r2
 800077c:	600b      	str	r3, [r1, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077e:	b672      	cpsid	i
}
 8000780:	bf00      	nop

	__disable_irq();

	/* 6. Matriculamos las interrupciones en el NVIC */

	switch(extiConfig->pin){
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	791b      	ldrb	r3, [r3, #4]
 8000786:	2b04      	cmp	r3, #4
 8000788:	d820      	bhi.n	80007cc <EXTI_Config+0x470>
 800078a:	a201      	add	r2, pc, #4	; (adr r2, 8000790 <EXTI_Config+0x434>)
 800078c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000790:	080007a5 	.word	0x080007a5
 8000794:	080007ad 	.word	0x080007ad
 8000798:	080007b5 	.word	0x080007b5
 800079c:	080007bd 	.word	0x080007bd
 80007a0:	080007c5 	.word	0x080007c5
		case PIN_0 :{
			__NVIC_EnableIRQ(EXTI0_IRQn);
 80007a4:	2006      	movs	r0, #6
 80007a6:	f7ff fdbd 	bl	8000324 <__NVIC_EnableIRQ>
			break;
 80007aa:	e010      	b.n	80007ce <EXTI_Config+0x472>
		}
		case PIN_1 :{
			__NVIC_EnableIRQ(EXTI1_IRQn);
 80007ac:	2007      	movs	r0, #7
 80007ae:	f7ff fdb9 	bl	8000324 <__NVIC_EnableIRQ>
			break;
 80007b2:	e00c      	b.n	80007ce <EXTI_Config+0x472>
		}
		case PIN_2 :{
			__NVIC_EnableIRQ(EXTI2_IRQn);
 80007b4:	2008      	movs	r0, #8
 80007b6:	f7ff fdb5 	bl	8000324 <__NVIC_EnableIRQ>
			break;
 80007ba:	e008      	b.n	80007ce <EXTI_Config+0x472>
		}
		case PIN_3 :{
			__NVIC_EnableIRQ(EXTI3_IRQn);
 80007bc:	2009      	movs	r0, #9
 80007be:	f7ff fdb1 	bl	8000324 <__NVIC_EnableIRQ>
			break;
 80007c2:	e004      	b.n	80007ce <EXTI_Config+0x472>
		}
		case PIN_4 :{
			__NVIC_EnableIRQ(EXTI4_IRQn);
 80007c4:	200a      	movs	r0, #10
 80007c6:	f7ff fdad 	bl	8000324 <__NVIC_EnableIRQ>
			break;
 80007ca:	e000      	b.n	80007ce <EXTI_Config+0x472>
		}
		default:{
			break;
 80007cc:	bf00      	nop
		}
		}

	if(((extiConfig -> pin) >= PIN_5) && ((extiConfig -> pin) <= PIN_9)) {
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	791b      	ldrb	r3, [r3, #4]
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	d906      	bls.n	80007e4 <EXTI_Config+0x488>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	791b      	ldrb	r3, [r3, #4]
 80007da:	2b09      	cmp	r3, #9
 80007dc:	d802      	bhi.n	80007e4 <EXTI_Config+0x488>
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007de:	2017      	movs	r0, #23
 80007e0:	f7ff fda0 	bl	8000324 <__NVIC_EnableIRQ>
	}

	if(((extiConfig -> pin) >= PIN_10) && ((extiConfig -> pin) <= PIN_15)) {
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	791b      	ldrb	r3, [r3, #4]
 80007e8:	2b09      	cmp	r3, #9
 80007ea:	d906      	bls.n	80007fa <EXTI_Config+0x49e>
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	2b0f      	cmp	r3, #15
 80007f2:	d802      	bhi.n	80007fa <EXTI_Config+0x49e>
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007f4:	2028      	movs	r0, #40	; 0x28
 80007f6:	f7ff fd95 	bl	8000324 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80007fa:	b662      	cpsie	i
}
 80007fc:	bf00      	nop
	}

	/* 7. Activamos las interrupciones globales */

	__enable_irq();
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40020c00 	.word	0x40020c00
 800080c:	40013800 	.word	0x40013800
 8000810:	40021000 	.word	0x40021000
 8000814:	40021c00 	.word	0x40021c00
 8000818:	40020000 	.word	0x40020000
 800081c:	40020400 	.word	0x40020400
 8000820:	40020800 	.word	0x40020800
 8000824:	40013c00 	.word	0x40013c00

08000828 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	// Bajamos la bandera
	EXTI -> PR |= (EXTI_PR_PR0);
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <EXTI0_IRQHandler+0x18>)
 800082e:	695b      	ldr	r3, [r3, #20]
 8000830:	4a03      	ldr	r2, [pc, #12]	; (8000840 <EXTI0_IRQHandler+0x18>)
 8000832:	f043 0301 	orr.w	r3, r3, #1
 8000836:	6153      	str	r3, [r2, #20]

	// Llamamos al callback
	EXTI0_Callback();
 8000838:	f7ff fd32 	bl	80002a0 <EXTI0_Callback>
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40013c00 	.word	0x40013c00

08000844 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	// Bajamos la bandera
	EXTI -> PR |= (EXTI_PR_PR1);
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <EXTI1_IRQHandler+0x18>)
 800084a:	695b      	ldr	r3, [r3, #20]
 800084c:	4a03      	ldr	r2, [pc, #12]	; (800085c <EXTI1_IRQHandler+0x18>)
 800084e:	f043 0302 	orr.w	r3, r3, #2
 8000852:	6153      	str	r3, [r2, #20]

	// Llamamos al callback
	EXTI1_Callback();
 8000854:	f000 f8e4 	bl	8000a20 <EXTI1_Callback>
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40013c00 	.word	0x40013c00

08000860 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	// Bajamos la bandera
	EXTI -> PR |= (EXTI_PR_PR2);
 8000864:	4b04      	ldr	r3, [pc, #16]	; (8000878 <EXTI2_IRQHandler+0x18>)
 8000866:	695b      	ldr	r3, [r3, #20]
 8000868:	4a03      	ldr	r2, [pc, #12]	; (8000878 <EXTI2_IRQHandler+0x18>)
 800086a:	f043 0304 	orr.w	r3, r3, #4
 800086e:	6153      	str	r3, [r2, #20]

	// Llamamos al callback
	EXTI2_Callback();
 8000870:	f000 f8dd 	bl	8000a2e <EXTI2_Callback>
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40013c00 	.word	0x40013c00

0800087c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	// Bajamos la bandera
	EXTI -> PR |= (EXTI_PR_PR3);
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <EXTI3_IRQHandler+0x18>)
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	4a03      	ldr	r2, [pc, #12]	; (8000894 <EXTI3_IRQHandler+0x18>)
 8000886:	f043 0308 	orr.w	r3, r3, #8
 800088a:	6153      	str	r3, [r2, #20]

	// Llamamos al callback
	EXTI3_Callback();
 800088c:	f000 f8d6 	bl	8000a3c <EXTI3_Callback>
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40013c00 	.word	0x40013c00

08000898 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	// Bajamos la bandera
	EXTI -> PR |= (EXTI_PR_PR4);
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <EXTI4_IRQHandler+0x18>)
 800089e:	695b      	ldr	r3, [r3, #20]
 80008a0:	4a03      	ldr	r2, [pc, #12]	; (80008b0 <EXTI4_IRQHandler+0x18>)
 80008a2:	f043 0310 	orr.w	r3, r3, #16
 80008a6:	6153      	str	r3, [r2, #20]

	// Llamamos al callback
	EXTI4_Callback();
 80008a8:	f000 f8cf 	bl	8000a4a <EXTI4_Callback>
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40013c00 	.word	0x40013c00

080008b4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	// Bajamos la bandera
	EXTI -> PR |= (EXTI_PR_PR0);
 80008b8:	4b28      	ldr	r3, [pc, #160]	; (800095c <EXTI9_5_IRQHandler+0xa8>)
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	4a27      	ldr	r2, [pc, #156]	; (800095c <EXTI9_5_IRQHandler+0xa8>)
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	6153      	str	r3, [r2, #20]

// Se verifica dónde se levantó la bandera
	// Se verifica para el PIN_5
	if(EXTI -> PR & (EXTI_PR_PR5)){
 80008c4:	4b25      	ldr	r3, [pc, #148]	; (800095c <EXTI9_5_IRQHandler+0xa8>)
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	f003 0320 	and.w	r3, r3, #32
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d008      	beq.n	80008e2 <EXTI9_5_IRQHandler+0x2e>

		// Se baja la bandera para el PIN_5
		EXTI -> PR |= EXTI_PR_PR5;
 80008d0:	4b22      	ldr	r3, [pc, #136]	; (800095c <EXTI9_5_IRQHandler+0xa8>)
 80008d2:	695b      	ldr	r3, [r3, #20]
 80008d4:	4a21      	ldr	r2, [pc, #132]	; (800095c <EXTI9_5_IRQHandler+0xa8>)
 80008d6:	f043 0320 	orr.w	r3, r3, #32
 80008da:	6153      	str	r3, [r2, #20]

		// Se hace el llamado al a función que se ejecutará en el main.
		EXTI5_Callback();
 80008dc:	f000 f8bc 	bl	8000a58 <EXTI5_Callback>
		EXTI -> PR |= EXTI_PR_PR9;

		// Se hace el llamado al a función que se ejecutará en el main.
		EXTI9_Callback();
	}
}
 80008e0:	e03a      	b.n	8000958 <EXTI9_5_IRQHandler+0xa4>
	else if(EXTI -> PR & (EXTI_PR_PR6)){
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <EXTI9_5_IRQHandler+0xa8>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d008      	beq.n	8000900 <EXTI9_5_IRQHandler+0x4c>
		EXTI -> PR |= EXTI_PR_PR6;
 80008ee:	4b1b      	ldr	r3, [pc, #108]	; (800095c <EXTI9_5_IRQHandler+0xa8>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	4a1a      	ldr	r2, [pc, #104]	; (800095c <EXTI9_5_IRQHandler+0xa8>)
 80008f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f8:	6153      	str	r3, [r2, #20]
		EXTI6_Callback();
 80008fa:	f000 f8b4 	bl	8000a66 <EXTI6_Callback>
}
 80008fe:	e02b      	b.n	8000958 <EXTI9_5_IRQHandler+0xa4>
	else if(EXTI -> PR & (EXTI_PR_PR7)){
 8000900:	4b16      	ldr	r3, [pc, #88]	; (800095c <EXTI9_5_IRQHandler+0xa8>)
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000908:	2b00      	cmp	r3, #0
 800090a:	d008      	beq.n	800091e <EXTI9_5_IRQHandler+0x6a>
		EXTI -> PR |= EXTI_PR_PR7;
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <EXTI9_5_IRQHandler+0xa8>)
 800090e:	695b      	ldr	r3, [r3, #20]
 8000910:	4a12      	ldr	r2, [pc, #72]	; (800095c <EXTI9_5_IRQHandler+0xa8>)
 8000912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000916:	6153      	str	r3, [r2, #20]
		EXTI7_Callback();
 8000918:	f000 f8ac 	bl	8000a74 <EXTI7_Callback>
}
 800091c:	e01c      	b.n	8000958 <EXTI9_5_IRQHandler+0xa4>
	else if(EXTI -> PR & (EXTI_PR_PR8)){
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <EXTI9_5_IRQHandler+0xa8>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000926:	2b00      	cmp	r3, #0
 8000928:	d008      	beq.n	800093c <EXTI9_5_IRQHandler+0x88>
		EXTI -> PR |= EXTI_PR_PR8;
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <EXTI9_5_IRQHandler+0xa8>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4a0b      	ldr	r2, [pc, #44]	; (800095c <EXTI9_5_IRQHandler+0xa8>)
 8000930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000934:	6153      	str	r3, [r2, #20]
		EXTI8_Callback();
 8000936:	f000 f8a4 	bl	8000a82 <EXTI8_Callback>
}
 800093a:	e00d      	b.n	8000958 <EXTI9_5_IRQHandler+0xa4>
	else if(EXTI -> PR & (EXTI_PR_PR9)){
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <EXTI9_5_IRQHandler+0xa8>)
 800093e:	695b      	ldr	r3, [r3, #20]
 8000940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000944:	2b00      	cmp	r3, #0
 8000946:	d007      	beq.n	8000958 <EXTI9_5_IRQHandler+0xa4>
		EXTI -> PR |= EXTI_PR_PR9;
 8000948:	4b04      	ldr	r3, [pc, #16]	; (800095c <EXTI9_5_IRQHandler+0xa8>)
 800094a:	695b      	ldr	r3, [r3, #20]
 800094c:	4a03      	ldr	r2, [pc, #12]	; (800095c <EXTI9_5_IRQHandler+0xa8>)
 800094e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000952:	6153      	str	r3, [r2, #20]
		EXTI9_Callback();
 8000954:	f000 f89c 	bl	8000a90 <EXTI9_Callback>
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40013c00 	.word	0x40013c00

08000960 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void){
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0

	// Se verifica dónde se levantó la bandera
	// Se verifica para el PIN_10
	if(EXTI -> PR & (EXTI_PR_PR10)){
 8000964:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <EXTI15_10_IRQHandler+0xbc>)
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800096c:	2b00      	cmp	r3, #0
 800096e:	d008      	beq.n	8000982 <EXTI15_10_IRQHandler+0x22>

		// Se baja la bandera para el PIN_10
		EXTI -> PR |= EXTI_PR_PR10;
 8000970:	4b2a      	ldr	r3, [pc, #168]	; (8000a1c <EXTI15_10_IRQHandler+0xbc>)
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	4a29      	ldr	r2, [pc, #164]	; (8000a1c <EXTI15_10_IRQHandler+0xbc>)
 8000976:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800097a:	6153      	str	r3, [r2, #20]

		// Se hace el llamado al a función que se ejecutará en el main.
		EXTI10_Callback();
 800097c:	f000 f88f 	bl	8000a9e <EXTI10_Callback>
		EXTI -> PR |= EXTI_PR_PR15;

		// Se hace el llamado al a función que se ejecutará en el main.
		EXTI15_Callback();
	}
}
 8000980:	e049      	b.n	8000a16 <EXTI15_10_IRQHandler+0xb6>
	else if(EXTI -> PR & (EXTI_PR_PR11)){
 8000982:	4b26      	ldr	r3, [pc, #152]	; (8000a1c <EXTI15_10_IRQHandler+0xbc>)
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800098a:	2b00      	cmp	r3, #0
 800098c:	d008      	beq.n	80009a0 <EXTI15_10_IRQHandler+0x40>
		EXTI -> PR |= EXTI_PR_PR11;
 800098e:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <EXTI15_10_IRQHandler+0xbc>)
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	4a22      	ldr	r2, [pc, #136]	; (8000a1c <EXTI15_10_IRQHandler+0xbc>)
 8000994:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000998:	6153      	str	r3, [r2, #20]
		EXTI11_Callback();
 800099a:	f000 f887 	bl	8000aac <EXTI11_Callback>
}
 800099e:	e03a      	b.n	8000a16 <EXTI15_10_IRQHandler+0xb6>
	else if(EXTI -> PR & (EXTI_PR_PR12)){
 80009a0:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <EXTI15_10_IRQHandler+0xbc>)
 80009a2:	695b      	ldr	r3, [r3, #20]
 80009a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d008      	beq.n	80009be <EXTI15_10_IRQHandler+0x5e>
		EXTI -> PR |= EXTI_PR_PR12;
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <EXTI15_10_IRQHandler+0xbc>)
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	4a1a      	ldr	r2, [pc, #104]	; (8000a1c <EXTI15_10_IRQHandler+0xbc>)
 80009b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009b6:	6153      	str	r3, [r2, #20]
		EXTI12_Callback();
 80009b8:	f000 f87f 	bl	8000aba <EXTI12_Callback>
}
 80009bc:	e02b      	b.n	8000a16 <EXTI15_10_IRQHandler+0xb6>
	else if(EXTI -> PR & (EXTI_PR_PR13)){
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <EXTI15_10_IRQHandler+0xbc>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d008      	beq.n	80009dc <EXTI15_10_IRQHandler+0x7c>
		EXTI -> PR |= EXTI_PR_PR13;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <EXTI15_10_IRQHandler+0xbc>)
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	4a13      	ldr	r2, [pc, #76]	; (8000a1c <EXTI15_10_IRQHandler+0xbc>)
 80009d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009d4:	6153      	str	r3, [r2, #20]
		EXTI13_Callback();
 80009d6:	f000 f877 	bl	8000ac8 <EXTI13_Callback>
}
 80009da:	e01c      	b.n	8000a16 <EXTI15_10_IRQHandler+0xb6>
	else if(EXTI -> PR & (EXTI_PR_PR14)){
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <EXTI15_10_IRQHandler+0xbc>)
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d008      	beq.n	80009fa <EXTI15_10_IRQHandler+0x9a>
		EXTI -> PR |= EXTI_PR_PR14;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <EXTI15_10_IRQHandler+0xbc>)
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	4a0b      	ldr	r2, [pc, #44]	; (8000a1c <EXTI15_10_IRQHandler+0xbc>)
 80009ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f2:	6153      	str	r3, [r2, #20]
		EXTI14_Callback();
 80009f4:	f000 f86f 	bl	8000ad6 <EXTI14_Callback>
}
 80009f8:	e00d      	b.n	8000a16 <EXTI15_10_IRQHandler+0xb6>
	else if(EXTI -> PR & (EXTI_PR_PR15)){
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <EXTI15_10_IRQHandler+0xbc>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d007      	beq.n	8000a16 <EXTI15_10_IRQHandler+0xb6>
		EXTI -> PR |= EXTI_PR_PR15;
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <EXTI15_10_IRQHandler+0xbc>)
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <EXTI15_10_IRQHandler+0xbc>)
 8000a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a10:	6153      	str	r3, [r2, #20]
		EXTI15_Callback();
 8000a12:	f000 f867 	bl	8000ae4 <EXTI15_Callback>
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40013c00 	.word	0x40013c00

08000a20 <EXTI1_Callback>:
/* Función débil, que debe ser sobreescrita en el main */
__attribute__((weak)) void EXTI0_Callback(void){
	__NOP();
}

__attribute__((weak)) void EXTI1_Callback(void){
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
	__NOP();
 8000a24:	bf00      	nop
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr

08000a2e <EXTI2_Callback>:

__attribute__((weak)) void EXTI2_Callback(void){
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
	__NOP();
 8000a32:	bf00      	nop
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <EXTI3_Callback>:

__attribute__((weak)) void EXTI3_Callback(void){
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
	__NOP();
 8000a40:	bf00      	nop
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr

08000a4a <EXTI4_Callback>:

__attribute__((weak)) void EXTI4_Callback(void){
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
	__NOP();
 8000a4e:	bf00      	nop
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <EXTI5_Callback>:

__attribute__((weak)) void EXTI5_Callback(void){
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
	__NOP();
 8000a5c:	bf00      	nop
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr

08000a66 <EXTI6_Callback>:

__attribute__((weak)) void EXTI6_Callback(void){
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
	__NOP();
 8000a6a:	bf00      	nop
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr

08000a74 <EXTI7_Callback>:

__attribute__((weak)) void EXTI7_Callback(void){
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
	__NOP();
 8000a78:	bf00      	nop
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr

08000a82 <EXTI8_Callback>:

__attribute__((weak)) void EXTI8_Callback(void){
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
	__NOP();
 8000a86:	bf00      	nop
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <EXTI9_Callback>:

__attribute__((weak)) void EXTI9_Callback(void){
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
	__NOP();
 8000a94:	bf00      	nop
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr

08000a9e <EXTI10_Callback>:

__attribute__((weak)) void EXTI10_Callback(void){
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
	__NOP();
 8000aa2:	bf00      	nop
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <EXTI11_Callback>:

__attribute__((weak)) void EXTI11_Callback(void){
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
	__NOP();
 8000ab0:	bf00      	nop
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr

08000aba <EXTI12_Callback>:

__attribute__((weak)) void EXTI12_Callback(void){
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
	__NOP();
 8000abe:	bf00      	nop
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <EXTI13_Callback>:

__attribute__((weak)) void EXTI13_Callback(void){
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
	__NOP();
 8000acc:	bf00      	nop
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr

08000ad6 <EXTI14_Callback>:

__attribute__((weak)) void EXTI14_Callback(void){
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
	__NOP();
 8000ada:	bf00      	nop
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <EXTI15_Callback>:

__attribute__((weak)) void EXTI15_Callback(void){
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
	__NOP();
 8000ae8:	bf00      	nop
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr
	...

08000af4 <GPIO_Config>:
orden estricto para poder que el sistema permita configurar el periférico X.
Lo primero y más importante es activar la señal del reloj principal hacia ese
elemento específico (relacionado con el periférico RCC), a esto llamaremos
simplemente "activar el periférico o activar la señal de reloj del periférico".
*/
void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periférico
	// Verificamos para GPIOA
	if (pGPIOHandler -> pGPIOx == GPIOA){
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a87      	ldr	r2, [pc, #540]	; (8000d28 <GPIO_Config+0x234>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d106      	bne.n	8000b1c <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOA
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 8000b0e:	4b87      	ldr	r3, [pc, #540]	; (8000d2c <GPIO_Config+0x238>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a86      	ldr	r2, [pc, #536]	; (8000d2c <GPIO_Config+0x238>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	e03a      	b.n	8000b92 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if (pGPIOHandler -> pGPIOx == GPIOB){
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a83      	ldr	r2, [pc, #524]	; (8000d30 <GPIO_Config+0x23c>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d106      	bne.n	8000b34 <GPIO_Config+0x40>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOB
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 8000b26:	4b81      	ldr	r3, [pc, #516]	; (8000d2c <GPIO_Config+0x238>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a80      	ldr	r2, [pc, #512]	; (8000d2c <GPIO_Config+0x238>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	e02e      	b.n	8000b92 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOC
	else if (pGPIOHandler -> pGPIOx == GPIOC){
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a7e      	ldr	r2, [pc, #504]	; (8000d34 <GPIO_Config+0x240>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d106      	bne.n	8000b4c <GPIO_Config+0x58>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOC
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8000b3e:	4b7b      	ldr	r3, [pc, #492]	; (8000d2c <GPIO_Config+0x238>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a7a      	ldr	r2, [pc, #488]	; (8000d2c <GPIO_Config+0x238>)
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	e022      	b.n	8000b92 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOD
	else if (pGPIOHandler -> pGPIOx == GPIOD){
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a79      	ldr	r2, [pc, #484]	; (8000d38 <GPIO_Config+0x244>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d106      	bne.n	8000b64 <GPIO_Config+0x70>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOD
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 8000b56:	4b75      	ldr	r3, [pc, #468]	; (8000d2c <GPIO_Config+0x238>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a74      	ldr	r2, [pc, #464]	; (8000d2c <GPIO_Config+0x238>)
 8000b5c:	f043 0308 	orr.w	r3, r3, #8
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	e016      	b.n	8000b92 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOE
	else if (pGPIOHandler -> pGPIOx == GPIOE){
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a74      	ldr	r2, [pc, #464]	; (8000d3c <GPIO_Config+0x248>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d106      	bne.n	8000b7c <GPIO_Config+0x88>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOE
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8000b6e:	4b6f      	ldr	r3, [pc, #444]	; (8000d2c <GPIO_Config+0x238>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a6e      	ldr	r2, [pc, #440]	; (8000d2c <GPIO_Config+0x238>)
 8000b74:	f043 0310 	orr.w	r3, r3, #16
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	e00a      	b.n	8000b92 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOH
	else if (pGPIOHandler -> pGPIOx == GPIOH){
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a6f      	ldr	r2, [pc, #444]	; (8000d40 <GPIO_Config+0x24c>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d105      	bne.n	8000b92 <GPIO_Config+0x9e>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOH
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 8000b86:	4b69      	ldr	r3, [pc, #420]	; (8000d2c <GPIO_Config+0x238>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a68      	ldr	r2, [pc, #416]	; (8000d2c <GPIO_Config+0x238>)
 8000b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
	// Después de activado, podemos comenzar a configurar.

	// 2) Configurando el registro GPIOx_MODER
	// Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y todo eso lo cargamos en la variable aux_Config
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	795b      	ldrb	r3, [r3, #5]
 8000b96:	461a      	mov	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	791b      	ldrb	r3, [r3, #4]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	60fb      	str	r3, [r7, #12]

	// Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (debemos escribir 0b00)
	// para lo cual aplicamos una máscara y una operación bitwise AND
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	791b      	ldrb	r3, [r3, #4]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	2103      	movs	r1, #3
 8000bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	4619      	mov	r1, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	400a      	ands	r2, r1
 8000bc0:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler -> pGPIOx -> MODER |= auxConfig;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	6819      	ldr	r1, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	68fa      	ldr	r2, [r7, #12]
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	601a      	str	r2, [r3, #0]

	// 3) Configurando el registro GPIOx_OTYPER
	// De nuevo, leemos y movemos el valor un número "PinNumber" de veces
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	7a1b      	ldrb	r3, [r3, #8]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	791b      	ldrb	r3, [r3, #4]
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler -> pGPIOx -> OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	685a      	ldr	r2, [r3, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	791b      	ldrb	r3, [r3, #4]
 8000bec:	4619      	mov	r1, r3
 8000bee:	2301      	movs	r3, #1
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	400a      	ands	r2, r1
 8000bfc:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OTYPER |= auxConfig;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	6859      	ldr	r1, [r3, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	799b      	ldrb	r3, [r3, #6]
 8000c12:	461a      	mov	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	791b      	ldrb	r3, [r3, #4]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler -> pGPIOx -> OSPEEDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	689a      	ldr	r2, [r3, #8]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	791b      	ldrb	r3, [r3, #4]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	2103      	movs	r1, #3
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	4619      	mov	r1, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	400a      	ands	r2, r1
 8000c3c:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OSPEEDR |= auxConfig;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	6899      	ldr	r1, [r3, #8]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante.
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	79db      	ldrb	r3, [r3, #7]
 8000c52:	461a      	mov	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	791b      	ldrb	r3, [r3, #4]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler -> pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	68da      	ldr	r2, [r3, #12]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	791b      	ldrb	r3, [r3, #4]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	2103      	movs	r1, #3
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	4619      	mov	r1, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	400a      	ands	r2, r1
 8000c7c:	60da      	str	r2, [r3, #12]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> PUPDR |= auxConfig;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	68d9      	ldr	r1, [r3, #12]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuración de las funciones alternativas... Se verá luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	795b      	ldrb	r3, [r3, #5]
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d143      	bne.n	8000d1e <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	791b      	ldrb	r3, [r3, #4]
 8000c9a:	2b07      	cmp	r3, #7
 8000c9c:	d81f      	bhi.n	8000cde <GPIO_Config+0x1ea>
			// Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	791b      	ldrb	r3, [r3, #4]
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	60bb      	str	r3, [r7, #8]

			// Limpiamos primero la posición del registro que deseamos escribir a continuación
			pGPIOHandler -> pGPIOx -> AFR[0] &= ~(0b1111 << auxPosition);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	6a1a      	ldr	r2, [r3, #32]
 8000cac:	210f      	movs	r1, #15
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	400a      	ands	r2, r1
 8000cbe:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posición seleccionada
			pGPIOHandler -> pGPIOx -> AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	6a1a      	ldr	r2, [r3, #32]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	7a5b      	ldrb	r3, [r3, #9]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurando en la posición seleccionada
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} // Fin del GPIO_Config
 8000cdc:	e01f      	b.n	8000d1e <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber -8);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	791b      	ldrb	r3, [r3, #4]
 8000ce2:	3b08      	subs	r3, #8
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx -> AFR[1] &= ~(0b1111 << auxPosition);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cee:	210f      	movs	r1, #15
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	400a      	ands	r2, r1
 8000d00:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	7a5b      	ldrb	r3, [r3, #9]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	fa01 f303 	lsl.w	r3, r1, r3
 8000d14:	4619      	mov	r1, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_Config
 8000d1e:	bf00      	nop
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	40020000 	.word	0x40020000
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020400 	.word	0x40020400
 8000d34:	40020800 	.word	0x40020800
 8000d38:	40020c00 	.word	0x40020c00
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40021c00 	.word	0x40021c00

08000d44 <GPIO_WritePin>:
 *
 *
Función utilizada para cambiar de estado el pin entregado en el handler, asignando
el valor entregado en la variable newState
*/
void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	70fb      	strb	r3, [r7, #3]
	// Limpiamos la posición que deseamos
	// pPinHandler -> pGPIOx -> ODR &= ~(SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
	if(newState == SET){
 8000d50:	78fb      	ldrb	r3, [r7, #3]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d10d      	bne.n	8000d72 <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler -> pGPIOx -> BSRR |= (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	699a      	ldr	r2, [r3, #24]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	791b      	ldrb	r3, [r3, #4]
 8000d60:	4619      	mov	r1, r3
 8000d62:	2301      	movs	r3, #1
 8000d64:	408b      	lsls	r3, r1
 8000d66:	4619      	mov	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	619a      	str	r2, [r3, #24]
	}
	else{
		// Trabajando con la parte alta del registro
		pPinHandler -> pGPIOx -> BSRR |= (SET << (pPinHandler -> GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8000d70:	e00d      	b.n	8000d8e <GPIO_WritePin+0x4a>
		pPinHandler -> pGPIOx -> BSRR |= (SET << (pPinHandler -> GPIO_PinConfig.GPIO_PinNumber + 16));
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	699a      	ldr	r2, [r3, #24]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	791b      	ldrb	r3, [r3, #4]
 8000d7c:	3310      	adds	r3, #16
 8000d7e:	2101      	movs	r1, #1
 8000d80:	fa01 f303 	lsl.w	r3, r1, r3
 8000d84:	4619      	mov	r1, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	619a      	str	r2, [r3, #24]
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <__NVIC_EnableIRQ>:
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db0b      	blt.n	8000dc2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	f003 021f 	and.w	r2, r3, #31
 8000db0:	4906      	ldr	r1, [pc, #24]	; (8000dcc <__NVIC_EnableIRQ+0x34>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	095b      	lsrs	r3, r3, #5
 8000db8:	2001      	movs	r0, #1
 8000dba:	fa00 f202 	lsl.w	r2, r0, r2
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	e000e100 	.word	0xe000e100

08000dd0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	db12      	blt.n	8000e08 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	f003 021f 	and.w	r2, r3, #31
 8000de8:	490a      	ldr	r1, [pc, #40]	; (8000e14 <__NVIC_DisableIRQ+0x44>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	095b      	lsrs	r3, r3, #5
 8000df0:	2001      	movs	r0, #1
 8000df2:	fa00 f202 	lsl.w	r2, r0, r2
 8000df6:	3320      	adds	r3, #32
 8000df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dfc:	f3bf 8f4f 	dsb	sy
}
 8000e00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e02:	f3bf 8f6f 	isb	sy
}
 8000e06:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000e100 	.word	0xe000e100

08000e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db0a      	blt.n	8000e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	490c      	ldr	r1, [pc, #48]	; (8000e64 <__NVIC_SetPriority+0x4c>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e40:	e00a      	b.n	8000e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4908      	ldr	r1, [pc, #32]	; (8000e68 <__NVIC_SetPriority+0x50>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	3b04      	subs	r3, #4
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	440b      	add	r3, r1
 8000e56:	761a      	strb	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <Timer_Config>:
 *
 * */

//NOTA: Hay que desactivar las interrupciones globales y luego volver a activarlas

void Timer_Config(TIMER_Handler_t *ptrTimerConfig){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
	/* 0. Desactivamos las interrupciones globales */

	__disable_irq();

	/* 1. Activamos la señal de reloj para el periférico específico */
	if(ptrTimerConfig -> ptrTIMx == TIM2){
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e80:	d106      	bne.n	8000e90 <Timer_Config+0x24>
		// Activamos la señal de reloj del TIM2
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000e82:	4b4b      	ldr	r3, [pc, #300]	; (8000fb0 <Timer_Config+0x144>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	4a4a      	ldr	r2, [pc, #296]	; (8000fb0 <Timer_Config+0x144>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	e022      	b.n	8000ed6 <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM3){
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a47      	ldr	r2, [pc, #284]	; (8000fb4 <Timer_Config+0x148>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d106      	bne.n	8000ea8 <Timer_Config+0x3c>
		// Activamos la señal de reloj del TIM3
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000e9a:	4b45      	ldr	r3, [pc, #276]	; (8000fb0 <Timer_Config+0x144>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	4a44      	ldr	r2, [pc, #272]	; (8000fb0 <Timer_Config+0x144>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea6:	e016      	b.n	8000ed6 <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM4){
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a42      	ldr	r2, [pc, #264]	; (8000fb8 <Timer_Config+0x14c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d106      	bne.n	8000ec0 <Timer_Config+0x54>
		// Activamos la señal de reloj del TIM4
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000eb2:	4b3f      	ldr	r3, [pc, #252]	; (8000fb0 <Timer_Config+0x144>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	4a3e      	ldr	r2, [pc, #248]	; (8000fb0 <Timer_Config+0x144>)
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebe:	e00a      	b.n	8000ed6 <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM5){
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a3d      	ldr	r2, [pc, #244]	; (8000fbc <Timer_Config+0x150>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d105      	bne.n	8000ed6 <Timer_Config+0x6a>
		// Activamos la señal de reloj del TIM5
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8000eca:	4b39      	ldr	r3, [pc, #228]	; (8000fb0 <Timer_Config+0x144>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	4a38      	ldr	r2, [pc, #224]	; (8000fb0 <Timer_Config+0x144>)
 8000ed0:	f043 0308 	orr.w	r3, r3, #8
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuración del modo del timer (UP or DOWN) */

	if(ptrTimerConfig -> timerConfig.Timer_mode == TIMER_MODE_UP){
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	791b      	ldrb	r3, [r3, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10c      	bne.n	8000ef8 <Timer_Config+0x8c>
		// Configuramos el timer en modo UP
		ptrTimerConfig -> ptrTIMx -> CR1 &= ~(TIM_CR1_DIR);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f022 0210 	bic.w	r2, r2, #16
 8000eec:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) en cero.
		ptrTimerConfig -> ptrTIMx -> CNT = 0;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	625a      	str	r2, [r3, #36]	; 0x24
 8000ef6:	e00d      	b.n	8000f14 <Timer_Config+0xa8>

	}
	else{
		// Configuramos el timer en modo DOWN
		ptrTimerConfig -> ptrTIMx -> CR1 |= ~(TIM_CR1_DIR);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f062 0210 	orn	r2, r2, #16
 8000f06:	601a      	str	r2, [r3, #0]

		// Ponemos en el contador (CNT) el valor del periodo
		ptrTimerConfig -> ptrTIMx -> CNT = ptrTimerConfig -> timerConfig.Timer_period -1;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	3a01      	subs	r2, #1
 8000f12:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuración del Prescaler */
	ptrTimerConfig -> ptrTIMx -> PSC = ptrTimerConfig -> timerConfig.Timer_speed -1;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	88db      	ldrh	r3, [r3, #6]
 8000f18:	1e5a      	subs	r2, r3, #1
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo de las interrupciones */
	ptrTimerConfig -> ptrTIMx -> ARR = ptrTimerConfig -> timerConfig.Timer_period -1;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	3a01      	subs	r2, #1
 8000f2a:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse  */
	ptrTimerConfig -> ptrTIMx -> CR1 |= TIM_CR1_CEN;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f042 0201 	orr.w	r2, r2, #1
 8000f3a:	601a      	str	r2, [r3, #0]

	/* 6. Activamos la interrupción debida a un "update event" */
	if(ptrTimerConfig -> ptrTIMx != TIM3){
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <Timer_Config+0x148>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d007      	beq.n	8000f56 <Timer_Config+0xea>
		ptrTimerConfig -> ptrTIMx -> DIER |= TIM_DIER_UIE;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f042 0201 	orr.w	r2, r2, #1
 8000f54:	60da      	str	r2, [r3, #12]
	}

	/* 7. Activamos la señal de la interrupcuón en el NVIC */

	if(ptrTimerConfig -> ptrTIMx == TIM2){
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f5e:	d107      	bne.n	8000f70 <Timer_Config+0x104>
		// Activamos la IRQ del TIM2
		__NVIC_EnableIRQ(TIM2_IRQn);
 8000f60:	201c      	movs	r0, #28
 8000f62:	f7ff ff19 	bl	8000d98 <__NVIC_EnableIRQ>

		// Establecemos la prioridad del timer
		__NVIC_SetPriority(TIM2_IRQn,3);
 8000f66:	2103      	movs	r1, #3
 8000f68:	201c      	movs	r0, #28
 8000f6a:	f7ff ff55 	bl	8000e18 <__NVIC_SetPriority>
 8000f6e:	e019      	b.n	8000fa4 <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM3){
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0f      	ldr	r2, [pc, #60]	; (8000fb4 <Timer_Config+0x148>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d103      	bne.n	8000f82 <Timer_Config+0x116>
		// Activamos la IRQ del TIM3
		__NVIC_DisableIRQ(TIM3_IRQn);
 8000f7a:	201d      	movs	r0, #29
 8000f7c:	f7ff ff28 	bl	8000dd0 <__NVIC_DisableIRQ>
 8000f80:	e010      	b.n	8000fa4 <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM4){
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a0c      	ldr	r2, [pc, #48]	; (8000fb8 <Timer_Config+0x14c>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d103      	bne.n	8000f94 <Timer_Config+0x128>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM4_IRQn);
 8000f8c:	201e      	movs	r0, #30
 8000f8e:	f7ff ff03 	bl	8000d98 <__NVIC_EnableIRQ>
 8000f92:	e007      	b.n	8000fa4 <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM5){
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a08      	ldr	r2, [pc, #32]	; (8000fbc <Timer_Config+0x150>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d102      	bne.n	8000fa4 <Timer_Config+0x138>
		// Activamos la IRQ del TIM5
		__NVIC_EnableIRQ(TIM5_IRQn);
 8000f9e:	2032      	movs	r0, #50	; 0x32
 8000fa0:	f7ff fefa 	bl	8000d98 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000fa4:	b662      	cpsie	i
}
 8000fa6:	bf00      	nop
	}


	/* 8. Activamos de nuevo todas las interrupciones. */
	__enable_irq();
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40000400 	.word	0x40000400
 8000fb8:	40000800 	.word	0x40000800
 8000fbc:	40000c00 	.word	0x40000c00

08000fc0 <Timer3_Callback>:
__attribute__((weak)) void Timer2_Callback(void){
	__NOP();
}

// Callback Timer3
__attribute__((weak)) void Timer3_Callback(void){
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
	__NOP();
 8000fc4:	bf00      	nop
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr

08000fce <Timer4_Callback>:

// Callback Timer4
__attribute__((weak)) void Timer4_Callback(void){
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
	__NOP();
 8000fd2:	bf00      	nop
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <Timer5_Callback>:

// Callback Timer5
__attribute__((weak)) void Timer5_Callback(void){
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
	__NOP();
 8000fe0:	bf00      	nop
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr

08000fea <TIM2_IRQHandler>:

// Hay que hacer dos cosas: 1) Atender la interrupción. 2) Llamamos al Callback
/* Rutina de atención a la interrupción del TIM2 */

void TIM2_IRQHandler(void){
 8000fea:	b580      	push	{r7, lr}
 8000fec:	af00      	add	r7, sp, #0
	TIM2 -> SR &= ~(TIM_SR_UIF);
 8000fee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ff8:	f023 0301 	bic.w	r3, r3, #1
 8000ffc:	6113      	str	r3, [r2, #16]
	Timer2_Callback();
 8000ffe:	f7ff f93f 	bl	8000280 <Timer2_Callback>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	TIM3 -> SR &= ~(TIM_SR_UIF);
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <TIM3_IRQHandler+0x18>)
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	4a03      	ldr	r2, [pc, #12]	; (8001020 <TIM3_IRQHandler+0x18>)
 8001012:	f023 0301 	bic.w	r3, r3, #1
 8001016:	6113      	str	r3, [r2, #16]
	Timer3_Callback();
 8001018:	f7ff ffd2 	bl	8000fc0 <Timer3_Callback>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40000400 	.word	0x40000400

08001024 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	TIM4 -> SR &= ~(TIM_SR_UIF);
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <TIM4_IRQHandler+0x18>)
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	4a03      	ldr	r2, [pc, #12]	; (800103c <TIM4_IRQHandler+0x18>)
 800102e:	f023 0301 	bic.w	r3, r3, #1
 8001032:	6113      	str	r3, [r2, #16]
	Timer4_Callback();
 8001034:	f7ff ffcb 	bl	8000fce <Timer4_Callback>
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40000800 	.word	0x40000800

08001040 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	TIM5 -> SR &= ~(TIM_SR_UIF);
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <TIM5_IRQHandler+0x18>)
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	4a03      	ldr	r2, [pc, #12]	; (8001058 <TIM5_IRQHandler+0x18>)
 800104a:	f023 0301 	bic.w	r3, r3, #1
 800104e:	6113      	str	r3, [r2, #16]
	Timer5_Callback();
 8001050:	f7ff ffc4 	bl	8000fdc <Timer5_Callback>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40000c00 	.word	0x40000c00

0800105c <__libc_init_array>:
 800105c:	b570      	push	{r4, r5, r6, lr}
 800105e:	4d0d      	ldr	r5, [pc, #52]	; (8001094 <__libc_init_array+0x38>)
 8001060:	4c0d      	ldr	r4, [pc, #52]	; (8001098 <__libc_init_array+0x3c>)
 8001062:	1b64      	subs	r4, r4, r5
 8001064:	10a4      	asrs	r4, r4, #2
 8001066:	2600      	movs	r6, #0
 8001068:	42a6      	cmp	r6, r4
 800106a:	d109      	bne.n	8001080 <__libc_init_array+0x24>
 800106c:	4d0b      	ldr	r5, [pc, #44]	; (800109c <__libc_init_array+0x40>)
 800106e:	4c0c      	ldr	r4, [pc, #48]	; (80010a0 <__libc_init_array+0x44>)
 8001070:	f000 f818 	bl	80010a4 <_init>
 8001074:	1b64      	subs	r4, r4, r5
 8001076:	10a4      	asrs	r4, r4, #2
 8001078:	2600      	movs	r6, #0
 800107a:	42a6      	cmp	r6, r4
 800107c:	d105      	bne.n	800108a <__libc_init_array+0x2e>
 800107e:	bd70      	pop	{r4, r5, r6, pc}
 8001080:	f855 3b04 	ldr.w	r3, [r5], #4
 8001084:	4798      	blx	r3
 8001086:	3601      	adds	r6, #1
 8001088:	e7ee      	b.n	8001068 <__libc_init_array+0xc>
 800108a:	f855 3b04 	ldr.w	r3, [r5], #4
 800108e:	4798      	blx	r3
 8001090:	3601      	adds	r6, #1
 8001092:	e7f2      	b.n	800107a <__libc_init_array+0x1e>
 8001094:	080010bc 	.word	0x080010bc
 8001098:	080010bc 	.word	0x080010bc
 800109c:	080010bc 	.word	0x080010bc
 80010a0:	080010c0 	.word	0x080010c0

080010a4 <_init>:
 80010a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a6:	bf00      	nop
 80010a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010aa:	bc08      	pop	{r3}
 80010ac:	469e      	mov	lr, r3
 80010ae:	4770      	bx	lr

080010b0 <_fini>:
 80010b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010b2:	bf00      	nop
 80010b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010b6:	bc08      	pop	{r3}
 80010b8:	469e      	mov	lr, r3
 80010ba:	4770      	bx	lr
