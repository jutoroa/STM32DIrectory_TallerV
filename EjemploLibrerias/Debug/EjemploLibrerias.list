
EjemploLibrerias.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b9c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001d3c  08001d3c  00011d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d80  08001d80  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001d80  08001d80  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d80  08001d80  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d80  08001d80  00011d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d84  08001d84  00011d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000064  08001dec  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08001dec  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002dd0  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a26  00000000  00000000  00022e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000228  00000000  00000000  00023888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001c0  00000000  00000000  00023ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f63c  00000000  00000000  00023c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002d74  00000000  00000000  000332ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055184  00000000  00000000  00036020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008b1a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000aa8  00000000  00000000  0008b1f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001d24 	.word	0x08001d24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08001d24 	.word	0x08001d24

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:

void initSystem(void);

// *************** // MAIN // *************** //
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
		// Inicializamos el sistema
		initSystem();
 8000284:	f000 f84e 	bl	8000324 <initSystem>

	    /* Ciclo principal */
		while(1){

			// Hacemos un "eco" con el valor que nos llega por el serial
			if((rxData != '\0')){
 8000288:	4b1e      	ldr	r3, [pc, #120]	; (8000304 <main+0x84>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d01e      	beq.n	80002ce <main+0x4e>
				writeChar(&handlerUsart2, rxData);
 8000290:	4b1c      	ldr	r3, [pc, #112]	; (8000304 <main+0x84>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	4619      	mov	r1, r3
 8000296:	481c      	ldr	r0, [pc, #112]	; (8000308 <main+0x88>)
 8000298:	f001 f87e 	bl	8001398 <writeChar>

				if(rxData == 's'){
 800029c:	4b19      	ldr	r3, [pc, #100]	; (8000304 <main+0x84>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2b73      	cmp	r3, #115	; 0x73
 80002a2:	d101      	bne.n	80002a8 <main+0x28>
					//Lanzamos una nueva conversión ADC de un sólo valor
					startSingleADC();
 80002a4:	f000 fa88 	bl	80007b8 <startSingleADC>
				}
				if(rxData == 'c'){
 80002a8:	4b16      	ldr	r3, [pc, #88]	; (8000304 <main+0x84>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	2b63      	cmp	r3, #99	; 0x63
 80002ae:	d102      	bne.n	80002b6 <main+0x36>
					// Conversión de modo continua
					//startContinuousADC();
					startTimer(&handlerTimer3);
 80002b0:	4816      	ldr	r0, [pc, #88]	; (800030c <main+0x8c>)
 80002b2:	f000 fda9 	bl	8000e08 <startTimer>
				}
				if(rxData == 'p'){
 80002b6:	4b13      	ldr	r3, [pc, #76]	; (8000304 <main+0x84>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	2b70      	cmp	r3, #112	; 0x70
 80002bc:	d104      	bne.n	80002c8 <main+0x48>
					stopContinousADC();
 80002be:	f000 fa89 	bl	80007d4 <stopContinousADC>
					stopTimer(&handlerTimer3);
 80002c2:	4812      	ldr	r0, [pc, #72]	; (800030c <main+0x8c>)
 80002c4:	f000 fdb3 	bl	8000e2e <stopTimer>
				}
				// Limpiamos el valor de la variable que guarda los datos del RX
				rxData = '\0';
 80002c8:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <main+0x84>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	701a      	strb	r2, [r3, #0]
			}

			if(adcIsComplete == true){
 80002ce:	4b10      	ldr	r3, [pc, #64]	; (8000310 <main+0x90>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d1d8      	bne.n	8000288 <main+0x8>

				sprintf(bufferData, "ADC = %u, %u \n\r",(unsigned int ) adcData,(unsigned int )counter);
 80002d6:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <main+0x94>)
 80002d8:	881b      	ldrh	r3, [r3, #0]
 80002da:	461a      	mov	r2, r3
 80002dc:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <main+0x98>)
 80002de:	881b      	ldrh	r3, [r3, #0]
 80002e0:	490e      	ldr	r1, [pc, #56]	; (800031c <main+0x9c>)
 80002e2:	480f      	ldr	r0, [pc, #60]	; (8000320 <main+0xa0>)
 80002e4:	f001 f8b2 	bl	800144c <siprintf>
				// WriteMsg(&handlerCommTerminal,"Hola mundo!");
				writeMsg(&handlerUsart2, bufferData);
 80002e8:	490d      	ldr	r1, [pc, #52]	; (8000320 <main+0xa0>)
 80002ea:	4807      	ldr	r0, [pc, #28]	; (8000308 <main+0x88>)
 80002ec:	f001 f86c 	bl	80013c8 <writeMsg>
				//writeChar(&handlerUsart2, 'a');
				counter++;
 80002f0:	4b09      	ldr	r3, [pc, #36]	; (8000318 <main+0x98>)
 80002f2:	881b      	ldrh	r3, [r3, #0]
 80002f4:	3301      	adds	r3, #1
 80002f6:	b29a      	uxth	r2, r3
 80002f8:	4b07      	ldr	r3, [pc, #28]	; (8000318 <main+0x98>)
 80002fa:	801a      	strh	r2, [r3, #0]
				adcIsComplete = false;
 80002fc:	4b04      	ldr	r3, [pc, #16]	; (8000310 <main+0x90>)
 80002fe:	2200      	movs	r2, #0
 8000300:	701a      	strb	r2, [r3, #0]
			if((rxData != '\0')){
 8000302:	e7c1      	b.n	8000288 <main+0x8>
 8000304:	20000150 	.word	0x20000150
 8000308:	200000c4 	.word	0x200000c4
 800030c:	200000a0 	.word	0x200000a0
 8000310:	20000151 	.word	0x20000151
 8000314:	20000152 	.word	0x20000152
 8000318:	20000154 	.word	0x20000154
 800031c:	08001d3c 	.word	0x08001d3c
 8000320:	20000158 	.word	0x20000158

08000324 <initSystem>:

//***********// InitSystem //***********//

// Función que define la configuración de todos los pines y periféricos

void initSystem(void){
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0

	// Configuración el State LED
	handlerStateLED.pGPIOx								= GPIOA;
 8000328:	4b47      	ldr	r3, [pc, #284]	; (8000448 <initSystem+0x124>)
 800032a:	4a48      	ldr	r2, [pc, #288]	; (800044c <initSystem+0x128>)
 800032c:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 800032e:	4b46      	ldr	r3, [pc, #280]	; (8000448 <initSystem+0x124>)
 8000330:	2205      	movs	r2, #5
 8000332:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 8000334:	4b44      	ldr	r3, [pc, #272]	; (8000448 <initSystem+0x124>)
 8000336:	2201      	movs	r2, #1
 8000338:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 800033a:	4b43      	ldr	r3, [pc, #268]	; (8000448 <initSystem+0x124>)
 800033c:	2200      	movs	r2, #0
 800033e:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000340:	4b41      	ldr	r3, [pc, #260]	; (8000448 <initSystem+0x124>)
 8000342:	2200      	movs	r2, #0
 8000344:	71da      	strb	r2, [r3, #7]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 8000346:	4b40      	ldr	r3, [pc, #256]	; (8000448 <initSystem+0x124>)
 8000348:	2201      	movs	r2, #1
 800034a:	719a      	strb	r2, [r3, #6]

	// Configuración del ADC1

	configADC.channel									= ADC_CHANNEL_0;
 800034c:	4b40      	ldr	r3, [pc, #256]	; (8000450 <initSystem+0x12c>)
 800034e:	2200      	movs	r2, #0
 8000350:	701a      	strb	r2, [r3, #0]
	configADC.resolution								= ADC_RESOLUTION_12_BIT;
 8000352:	4b3f      	ldr	r3, [pc, #252]	; (8000450 <initSystem+0x12c>)
 8000354:	2200      	movs	r2, #0
 8000356:	705a      	strb	r2, [r3, #1]
	configADC.samplingPeriod							= ADC_SAMPLING_PERIOD_144_CYCLES;
 8000358:	4b3d      	ldr	r3, [pc, #244]	; (8000450 <initSystem+0x12c>)
 800035a:	2206      	movs	r2, #6
 800035c:	805a      	strh	r2, [r3, #2]
	configADC.dataAlignment								= ADC_ALIGNMENT_RIGHT;
 800035e:	4b3c      	ldr	r3, [pc, #240]	; (8000450 <initSystem+0x12c>)
 8000360:	2200      	movs	r2, #0
 8000362:	711a      	strb	r2, [r3, #4]


	// Configuración del pin PA3 USB RX
	handlerUSBRX.pGPIOx									= GPIOA;
 8000364:	4b3b      	ldr	r3, [pc, #236]	; (8000454 <initSystem+0x130>)
 8000366:	4a39      	ldr	r2, [pc, #228]	; (800044c <initSystem+0x128>)
 8000368:	601a      	str	r2, [r3, #0]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinNumber			= PIN_3;
 800036a:	4b3a      	ldr	r3, [pc, #232]	; (8000454 <initSystem+0x130>)
 800036c:	2203      	movs	r2, #3
 800036e:	711a      	strb	r2, [r3, #4]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 8000370:	4b38      	ldr	r3, [pc, #224]	; (8000454 <initSystem+0x130>)
 8000372:	2202      	movs	r2, #2
 8000374:	715a      	strb	r2, [r3, #5]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 8000376:	4b37      	ldr	r3, [pc, #220]	; (8000454 <initSystem+0x130>)
 8000378:	2200      	movs	r2, #0
 800037a:	721a      	strb	r2, [r3, #8]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 800037c:	4b35      	ldr	r3, [pc, #212]	; (8000454 <initSystem+0x130>)
 800037e:	2200      	movs	r2, #0
 8000380:	71da      	strb	r2, [r3, #7]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_MEDIUM;
 8000382:	4b34      	ldr	r3, [pc, #208]	; (8000454 <initSystem+0x130>)
 8000384:	2201      	movs	r2, #1
 8000386:	719a      	strb	r2, [r3, #6]
	handlerUSBRX.GPIO_PinConfig.GPIO_PinAltFunMode 		= AF7;
 8000388:	4b32      	ldr	r3, [pc, #200]	; (8000454 <initSystem+0x130>)
 800038a:	2207      	movs	r2, #7
 800038c:	725a      	strb	r2, [r3, #9]

	// Configuración del pin PA2 USB TX
	handlerUSBTX.pGPIOx									= GPIOA;
 800038e:	4b32      	ldr	r3, [pc, #200]	; (8000458 <initSystem+0x134>)
 8000390:	4a2e      	ldr	r2, [pc, #184]	; (800044c <initSystem+0x128>)
 8000392:	601a      	str	r2, [r3, #0]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinNumber			= PIN_2;
 8000394:	4b30      	ldr	r3, [pc, #192]	; (8000458 <initSystem+0x134>)
 8000396:	2202      	movs	r2, #2
 8000398:	711a      	strb	r2, [r3, #4]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 800039a:	4b2f      	ldr	r3, [pc, #188]	; (8000458 <initSystem+0x134>)
 800039c:	2202      	movs	r2, #2
 800039e:	715a      	strb	r2, [r3, #5]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 80003a0:	4b2d      	ldr	r3, [pc, #180]	; (8000458 <initSystem+0x134>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	721a      	strb	r2, [r3, #8]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 80003a6:	4b2c      	ldr	r3, [pc, #176]	; (8000458 <initSystem+0x134>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	71da      	strb	r2, [r3, #7]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_MEDIUM;
 80003ac:	4b2a      	ldr	r3, [pc, #168]	; (8000458 <initSystem+0x134>)
 80003ae:	2201      	movs	r2, #1
 80003b0:	719a      	strb	r2, [r3, #6]
	handlerUSBTX.GPIO_PinConfig.GPIO_PinAltFunMode 		= AF7;
 80003b2:	4b29      	ldr	r3, [pc, #164]	; (8000458 <initSystem+0x134>)
 80003b4:	2207      	movs	r2, #7
 80003b6:	725a      	strb	r2, [r3, #9]

	// Configuración del USART del USB para RXTX
	handlerUsart2.ptrUSARTx								= USART2;
 80003b8:	4b28      	ldr	r3, [pc, #160]	; (800045c <initSystem+0x138>)
 80003ba:	4a29      	ldr	r2, [pc, #164]	; (8000460 <initSystem+0x13c>)
 80003bc:	601a      	str	r2, [r3, #0]
	handlerUsart2.USART_Config.USART_mode				= USART_MODE_RXTX;
 80003be:	4b27      	ldr	r3, [pc, #156]	; (800045c <initSystem+0x138>)
 80003c0:	2202      	movs	r2, #2
 80003c2:	711a      	strb	r2, [r3, #4]
	handlerUsart2.USART_Config.USART_baudrate			= USART_BAUDRATE_19200;
 80003c4:	4b25      	ldr	r3, [pc, #148]	; (800045c <initSystem+0x138>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	715a      	strb	r2, [r3, #5]
	handlerUsart2.USART_Config.USART_datasize			= USART_DATASIZE_8BIT;
 80003ca:	4b24      	ldr	r3, [pc, #144]	; (800045c <initSystem+0x138>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	719a      	strb	r2, [r3, #6]
	handlerUsart2.USART_Config.USART_parity				= USART_PARITY_ODD;
 80003d0:	4b22      	ldr	r3, [pc, #136]	; (800045c <initSystem+0x138>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	71da      	strb	r2, [r3, #7]
	handlerUsart2.USART_Config.USART_stopbits			= USART_STOPBIT_1;
 80003d6:	4b21      	ldr	r3, [pc, #132]	; (800045c <initSystem+0x138>)
 80003d8:	2200      	movs	r2, #0
 80003da:	721a      	strb	r2, [r3, #8]
	handlerUsart2.USART_Config.USART_interrupt 			= USART_INTERRUPT_RX_ENABLE;
 80003dc:	4b1f      	ldr	r3, [pc, #124]	; (800045c <initSystem+0x138>)
 80003de:	2200      	movs	r2, #0
 80003e0:	725a      	strb	r2, [r3, #9]


	// Configuración del timer2
	handlerTimer2.ptrTIMx								= TIM2;
 80003e2:	4b20      	ldr	r3, [pc, #128]	; (8000464 <initSystem+0x140>)
 80003e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003e8:	601a      	str	r2, [r3, #0]
	handlerTimer2.timerConfig.Timer_mode				= TIMER_MODE_UP;
 80003ea:	4b1e      	ldr	r3, [pc, #120]	; (8000464 <initSystem+0x140>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	711a      	strb	r2, [r3, #4]
	handlerTimer2.timerConfig.Timer_speed				= TIMER_INCR_SPEED_1ms;
 80003f0:	4b1c      	ldr	r3, [pc, #112]	; (8000464 <initSystem+0x140>)
 80003f2:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80003f6:	80da      	strh	r2, [r3, #6]
	handlerTimer2.timerConfig.Timer_period				= 250;
 80003f8:	4b1a      	ldr	r3, [pc, #104]	; (8000464 <initSystem+0x140>)
 80003fa:	22fa      	movs	r2, #250	; 0xfa
 80003fc:	609a      	str	r2, [r3, #8]

	// Configuración del timer3
	handlerTimer3.ptrTIMx								= TIM3;
 80003fe:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <initSystem+0x144>)
 8000400:	4a1a      	ldr	r2, [pc, #104]	; (800046c <initSystem+0x148>)
 8000402:	601a      	str	r2, [r3, #0]
	handlerTimer3.timerConfig.Timer_mode				= TIMER_MODE_UP;
 8000404:	4b18      	ldr	r3, [pc, #96]	; (8000468 <initSystem+0x144>)
 8000406:	2200      	movs	r2, #0
 8000408:	711a      	strb	r2, [r3, #4]
	handlerTimer3.timerConfig.Timer_speed				= TIMER_INCR_SPEED_1ms;
 800040a:	4b17      	ldr	r3, [pc, #92]	; (8000468 <initSystem+0x144>)
 800040c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000410:	80da      	strh	r2, [r3, #6]
	handlerTimer3.timerConfig.Timer_period				= 500;
 8000412:	4b15      	ldr	r3, [pc, #84]	; (8000468 <initSystem+0x144>)
 8000414:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000418:	609a      	str	r2, [r3, #8]

	//Cargamos la configuración
	GPIO_Config(&handlerStateLED);
 800041a:	480b      	ldr	r0, [pc, #44]	; (8000448 <initSystem+0x124>)
 800041c:	f000 fab8 	bl	8000990 <GPIO_Config>
	adc_Config(&configADC);
 8000420:	480b      	ldr	r0, [pc, #44]	; (8000450 <initSystem+0x12c>)
 8000422:	f000 f8ff 	bl	8000624 <adc_Config>
	GPIO_Config(&handlerUSBRX);
 8000426:	480b      	ldr	r0, [pc, #44]	; (8000454 <initSystem+0x130>)
 8000428:	f000 fab2 	bl	8000990 <GPIO_Config>
	GPIO_Config(&handlerUSBTX);
 800042c:	480a      	ldr	r0, [pc, #40]	; (8000458 <initSystem+0x134>)
 800042e:	f000 faaf 	bl	8000990 <GPIO_Config>
	USART_Config(&handlerUsart2);
 8000432:	480a      	ldr	r0, [pc, #40]	; (800045c <initSystem+0x138>)
 8000434:	f000 fd70 	bl	8000f18 <USART_Config>
	Timer_Config(&handlerTimer2);
 8000438:	480a      	ldr	r0, [pc, #40]	; (8000464 <initSystem+0x140>)
 800043a:	f000 fc3b 	bl	8000cb4 <Timer_Config>
	Timer_Config(&handlerTimer3);
 800043e:	480a      	ldr	r0, [pc, #40]	; (8000468 <initSystem+0x144>)
 8000440:	f000 fc38 	bl	8000cb4 <Timer_Config>
}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}
 8000448:	20000080 	.word	0x20000080
 800044c:	40020000 	.word	0x40020000
 8000450:	2000008c 	.word	0x2000008c
 8000454:	200000ac 	.word	0x200000ac
 8000458:	200000b8 	.word	0x200000b8
 800045c:	200000c4 	.word	0x200000c4
 8000460:	40004400 	.word	0x40004400
 8000464:	20000094 	.word	0x20000094
 8000468:	200000a0 	.word	0x200000a0
 800046c:	40000400 	.word	0x40000400

08000470 <Timer2_Callback>:
//***********// CallBacks //***********//
void Timer2_Callback(void){
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
	handlerStateLED.pGPIOx -> ODR ^= GPIO_ODR_OD5;		// Encendido y apagado StateLED
 8000474:	4b05      	ldr	r3, [pc, #20]	; (800048c <Timer2_Callback+0x1c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	695a      	ldr	r2, [r3, #20]
 800047a:	4b04      	ldr	r3, [pc, #16]	; (800048c <Timer2_Callback+0x1c>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f082 0220 	eor.w	r2, r2, #32
 8000482:	615a      	str	r2, [r3, #20]
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr
 800048c:	20000080 	.word	0x20000080

08000490 <Timer3_Callback>:

void Timer3_Callback(void){
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	startSingleADC();									// Lanzamos la conversión ADC
 8000494:	f000 f990 	bl	80007b8 <startSingleADC>
}
 8000498:	bf00      	nop
 800049a:	bd80      	pop	{r7, pc}

0800049c <USART2_Callback>:

void USART2_Callback(void){
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	// Lectura de los datos recibidos
	rxData = returnData();
 80004a0:	f000 ff70 	bl	8001384 <returnData>
 80004a4:	4603      	mov	r3, r0
 80004a6:	461a      	mov	r2, r3
 80004a8:	4b01      	ldr	r3, [pc, #4]	; (80004b0 <USART2_Callback+0x14>)
 80004aa:	701a      	strb	r2, [r3, #0]
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000150 	.word	0x20000150

080004b4 <adc_Complete_Callback>:

void adc_Complete_Callback(void){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	// Cambiamos el valor de adcIsComplete
	adcData = getADC();
 80004b8:	f000 f99a 	bl	80007f0 <getADC>
 80004bc:	4603      	mov	r3, r0
 80004be:	461a      	mov	r2, r3
 80004c0:	4b03      	ldr	r3, [pc, #12]	; (80004d0 <adc_Complete_Callback+0x1c>)
 80004c2:	801a      	strh	r2, [r3, #0]
	adcIsComplete = true;
 80004c4:	4b03      	ldr	r3, [pc, #12]	; (80004d4 <adc_Complete_Callback+0x20>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	701a      	strb	r2, [r3, #0]
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000152 	.word	0x20000152
 80004d4:	20000151 	.word	0x20000151

080004d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004e0:	4a14      	ldr	r2, [pc, #80]	; (8000534 <_sbrk+0x5c>)
 80004e2:	4b15      	ldr	r3, [pc, #84]	; (8000538 <_sbrk+0x60>)
 80004e4:	1ad3      	subs	r3, r2, r3
 80004e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004ec:	4b13      	ldr	r3, [pc, #76]	; (800053c <_sbrk+0x64>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d102      	bne.n	80004fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <_sbrk+0x64>)
 80004f6:	4a12      	ldr	r2, [pc, #72]	; (8000540 <_sbrk+0x68>)
 80004f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004fa:	4b10      	ldr	r3, [pc, #64]	; (800053c <_sbrk+0x64>)
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4413      	add	r3, r2
 8000502:	693a      	ldr	r2, [r7, #16]
 8000504:	429a      	cmp	r2, r3
 8000506:	d207      	bcs.n	8000518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000508:	f000 ff76 	bl	80013f8 <__errno>
 800050c:	4603      	mov	r3, r0
 800050e:	220c      	movs	r2, #12
 8000510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000512:	f04f 33ff 	mov.w	r3, #4294967295
 8000516:	e009      	b.n	800052c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <_sbrk+0x64>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800051e:	4b07      	ldr	r3, [pc, #28]	; (800053c <_sbrk+0x64>)
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4413      	add	r3, r2
 8000526:	4a05      	ldr	r2, [pc, #20]	; (800053c <_sbrk+0x64>)
 8000528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800052a:	68fb      	ldr	r3, [r7, #12]
}
 800052c:	4618      	mov	r0, r3
 800052e:	3718      	adds	r7, #24
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20020000 	.word	0x20020000
 8000538:	00000400 	.word	0x00000400
 800053c:	20000198 	.word	0x20000198
 8000540:	200001c0 	.word	0x200001c0

08000544 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000544:	480d      	ldr	r0, [pc, #52]	; (800057c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000546:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000548:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800054c:	480c      	ldr	r0, [pc, #48]	; (8000580 <LoopForever+0x6>)
  ldr r1, =_edata
 800054e:	490d      	ldr	r1, [pc, #52]	; (8000584 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000550:	4a0d      	ldr	r2, [pc, #52]	; (8000588 <LoopForever+0xe>)
  movs r3, #0
 8000552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000554:	e002      	b.n	800055c <LoopCopyDataInit>

08000556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800055a:	3304      	adds	r3, #4

0800055c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800055c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800055e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000560:	d3f9      	bcc.n	8000556 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000562:	4a0a      	ldr	r2, [pc, #40]	; (800058c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000564:	4c0a      	ldr	r4, [pc, #40]	; (8000590 <LoopForever+0x16>)
  movs r3, #0
 8000566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000568:	e001      	b.n	800056e <LoopFillZerobss>

0800056a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800056a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800056c:	3204      	adds	r2, #4

0800056e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800056e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000570:	d3fb      	bcc.n	800056a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000572:	f000 ff47 	bl	8001404 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000576:	f7ff fe83 	bl	8000280 <main>

0800057a <LoopForever>:

LoopForever:
    b LoopForever
 800057a:	e7fe      	b.n	800057a <LoopForever>
  ldr   r0, =_estack
 800057c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000584:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000588:	08001d88 	.word	0x08001d88
  ldr r2, =_sbss
 800058c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000590:	200001bc 	.word	0x200001bc

08000594 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000594:	e7fe      	b.n	8000594 <BusFault_Handler>
	...

08000598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	db0b      	blt.n	80005c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	f003 021f 	and.w	r2, r3, #31
 80005b0:	4906      	ldr	r1, [pc, #24]	; (80005cc <__NVIC_EnableIRQ+0x34>)
 80005b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b6:	095b      	lsrs	r3, r3, #5
 80005b8:	2001      	movs	r0, #1
 80005ba:	fa00 f202 	lsl.w	r2, r0, r2
 80005be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	e000e100 	.word	0xe000e100

080005d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	6039      	str	r1, [r7, #0]
 80005da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	db0a      	blt.n	80005fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	490c      	ldr	r1, [pc, #48]	; (800061c <__NVIC_SetPriority+0x4c>)
 80005ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ee:	0112      	lsls	r2, r2, #4
 80005f0:	b2d2      	uxtb	r2, r2
 80005f2:	440b      	add	r3, r1
 80005f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005f8:	e00a      	b.n	8000610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4908      	ldr	r1, [pc, #32]	; (8000620 <__NVIC_SetPriority+0x50>)
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	f003 030f 	and.w	r3, r3, #15
 8000606:	3b04      	subs	r3, #4
 8000608:	0112      	lsls	r2, r2, #4
 800060a:	b2d2      	uxtb	r2, r2
 800060c:	440b      	add	r3, r1
 800060e:	761a      	strb	r2, [r3, #24]
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	e000e100 	.word	0xe000e100
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <adc_Config>:
#include "GPIOxDriver.h"

GPIO_Handler_t handlerAdcPin = {0};
uint16_t 		adcRawData 	 = {0};

void adc_Config(ADC_Config_t *adcConfig){
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800062c:	b672      	cpsid	i
}
 800062e:	bf00      	nop

	__disable_irq();


	/* 1. Configuramos el PinX para que cumpla la función de canal análogo deseado. */
	configAnalogPin(adcConfig -> channel);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	4618      	mov	r0, r3
 8000636:	f000 f8fb 	bl	8000830 <configAnalogPin>

	/* 2. Activamos la señal de reloj para el periférico ADC1 (bus APB2) */
	RCC -> APB2ENR |= RCC_APB2ENR_ADC1EN;
 800063a:	4b5c      	ldr	r3, [pc, #368]	; (80007ac <adc_Config+0x188>)
 800063c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800063e:	4a5b      	ldr	r2, [pc, #364]	; (80007ac <adc_Config+0x188>)
 8000640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000644:	6453      	str	r3, [r2, #68]	; 0x44

	// Limpiamos los registros antes de comenzar a configurar
	ADC1 -> CR1 = 0;
 8000646:	4b5a      	ldr	r3, [pc, #360]	; (80007b0 <adc_Config+0x18c>)
 8000648:	2200      	movs	r2, #0
 800064a:	605a      	str	r2, [r3, #4]
	ADC1 -> CR2 = 0;
 800064c:	4b58      	ldr	r3, [pc, #352]	; (80007b0 <adc_Config+0x18c>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]

	/* Comenzamos la configuración del ADC1 */
	/* 3. Resolución del ADC */
	switch(adcConfig -> resolution){
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	785b      	ldrb	r3, [r3, #1]
 8000656:	2b03      	cmp	r3, #3
 8000658:	d83e      	bhi.n	80006d8 <adc_Config+0xb4>
 800065a:	a201      	add	r2, pc, #4	; (adr r2, 8000660 <adc_Config+0x3c>)
 800065c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000660:	08000671 	.word	0x08000671
 8000664:	0800068b 	.word	0x0800068b
 8000668:	080006a5 	.word	0x080006a5
 800066c:	080006bf 	.word	0x080006bf
	case ADC_RESOLUTION_12_BIT:
	{
		ADC1 -> CR1 &= ~ADC_CR1_RES_0;
 8000670:	4b4f      	ldr	r3, [pc, #316]	; (80007b0 <adc_Config+0x18c>)
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	4a4e      	ldr	r2, [pc, #312]	; (80007b0 <adc_Config+0x18c>)
 8000676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800067a:	6053      	str	r3, [r2, #4]
		ADC1 -> CR1 &= ~ADC_CR1_RES_1;
 800067c:	4b4c      	ldr	r3, [pc, #304]	; (80007b0 <adc_Config+0x18c>)
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	4a4b      	ldr	r2, [pc, #300]	; (80007b0 <adc_Config+0x18c>)
 8000682:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000686:	6053      	str	r3, [r2, #4]
		break;
 8000688:	e027      	b.n	80006da <adc_Config+0xb6>
	}

	case ADC_RESOLUTION_10_BIT:
	{
		ADC1 -> CR1 |= ADC_CR1_RES_0;
 800068a:	4b49      	ldr	r3, [pc, #292]	; (80007b0 <adc_Config+0x18c>)
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	4a48      	ldr	r2, [pc, #288]	; (80007b0 <adc_Config+0x18c>)
 8000690:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000694:	6053      	str	r3, [r2, #4]
		ADC1 -> CR1 &= ~ADC_CR1_RES_1;
 8000696:	4b46      	ldr	r3, [pc, #280]	; (80007b0 <adc_Config+0x18c>)
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	4a45      	ldr	r2, [pc, #276]	; (80007b0 <adc_Config+0x18c>)
 800069c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80006a0:	6053      	str	r3, [r2, #4]
		break;
 80006a2:	e01a      	b.n	80006da <adc_Config+0xb6>
	}

	case ADC_RESOLUTION_8_BIT:
	{
		ADC1 -> CR1 &= ~ADC_CR1_RES_0;
 80006a4:	4b42      	ldr	r3, [pc, #264]	; (80007b0 <adc_Config+0x18c>)
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	4a41      	ldr	r2, [pc, #260]	; (80007b0 <adc_Config+0x18c>)
 80006aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80006ae:	6053      	str	r3, [r2, #4]
		ADC1 -> CR1 |= ADC_CR1_RES_1;
 80006b0:	4b3f      	ldr	r3, [pc, #252]	; (80007b0 <adc_Config+0x18c>)
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	4a3e      	ldr	r2, [pc, #248]	; (80007b0 <adc_Config+0x18c>)
 80006b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ba:	6053      	str	r3, [r2, #4]
		break;
 80006bc:	e00d      	b.n	80006da <adc_Config+0xb6>
	}
	case ADC_RESOLUTION_6_BIT:
	{
		ADC1 -> CR1 |= ADC_CR1_RES_0;
 80006be:	4b3c      	ldr	r3, [pc, #240]	; (80007b0 <adc_Config+0x18c>)
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	4a3b      	ldr	r2, [pc, #236]	; (80007b0 <adc_Config+0x18c>)
 80006c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006c8:	6053      	str	r3, [r2, #4]
		ADC1 -> CR1 |= ADC_CR1_RES_1;
 80006ca:	4b39      	ldr	r3, [pc, #228]	; (80007b0 <adc_Config+0x18c>)
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	4a38      	ldr	r2, [pc, #224]	; (80007b0 <adc_Config+0x18c>)
 80006d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006d4:	6053      	str	r3, [r2, #4]
		break;
 80006d6:	e000      	b.n	80006da <adc_Config+0xb6>
	}

	default:
	{
		break;
 80006d8:	bf00      	nop
	}
	}

	/* 4. Configuramos el modo Scan como desactivado */
	ADC1 -> CR1 &= ~(ADC_CR1_SCAN);
 80006da:	4b35      	ldr	r3, [pc, #212]	; (80007b0 <adc_Config+0x18c>)
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	4a34      	ldr	r2, [pc, #208]	; (80007b0 <adc_Config+0x18c>)
 80006e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006e4:	6053      	str	r3, [r2, #4]

	/* 5. Configuramos la alineación de los datos (derecha o izquierda) */
	if(adcConfig -> dataAlignment == ADC_ALIGNMENT_RIGHT){
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	791b      	ldrb	r3, [r3, #4]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d106      	bne.n	80006fc <adc_Config+0xd8>
		// Alineación a la derecha (esta es la forma "natural")
		ADC1 -> CR2 &= ~(ADC_CR2_ALIGN);
 80006ee:	4b30      	ldr	r3, [pc, #192]	; (80007b0 <adc_Config+0x18c>)
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	4a2f      	ldr	r2, [pc, #188]	; (80007b0 <adc_Config+0x18c>)
 80006f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006f8:	6093      	str	r3, [r2, #8]
 80006fa:	e005      	b.n	8000708 <adc_Config+0xe4>
	}
	else{

		// Alineación a la izquierda (para algunos cálculos matemáticos).
		ADC1 -> CR2 |= ADC_CR2_ALIGN;
 80006fc:	4b2c      	ldr	r3, [pc, #176]	; (80007b0 <adc_Config+0x18c>)
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	4a2b      	ldr	r2, [pc, #172]	; (80007b0 <adc_Config+0x18c>)
 8000702:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000706:	6093      	str	r3, [r2, #8]
	}

	/* 6. Desactivamos el "continuos mode" */
	ADC1 -> CR2 &= ~(ADC_CR2_CONT);
 8000708:	4b29      	ldr	r3, [pc, #164]	; (80007b0 <adc_Config+0x18c>)
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	4a28      	ldr	r2, [pc, #160]	; (80007b0 <adc_Config+0x18c>)
 800070e:	f023 0302 	bic.w	r3, r3, #2
 8000712:	6093      	str	r3, [r2, #8]

	/* 7. Acá se debería configurar el sampling */
	if(adcConfig -> channel < ADC_CHANNEL_9){
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b08      	cmp	r3, #8
 800071a:	d810      	bhi.n	800073e <adc_Config+0x11a>
		ADC1 -> SMPR2 |= (adcConfig -> samplingPeriod << (3 * (adcConfig -> channel)));
 800071c:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <adc_Config+0x18c>)
 800071e:	691a      	ldr	r2, [r3, #16]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	885b      	ldrh	r3, [r3, #2]
 8000724:	4618      	mov	r0, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	4619      	mov	r1, r3
 800072c:	460b      	mov	r3, r1
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	440b      	add	r3, r1
 8000732:	fa00 f303 	lsl.w	r3, r0, r3
 8000736:	491e      	ldr	r1, [pc, #120]	; (80007b0 <adc_Config+0x18c>)
 8000738:	4313      	orrs	r3, r2
 800073a:	610b      	str	r3, [r1, #16]
 800073c:	e00f      	b.n	800075e <adc_Config+0x13a>
	}
	else{
		ADC1 -> SMPR1 |= (adcConfig -> samplingPeriod << (3 * (adcConfig -> channel)));
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <adc_Config+0x18c>)
 8000740:	68da      	ldr	r2, [r3, #12]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	885b      	ldrh	r3, [r3, #2]
 8000746:	4618      	mov	r0, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4619      	mov	r1, r3
 800074e:	460b      	mov	r3, r1
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	440b      	add	r3, r1
 8000754:	fa00 f303 	lsl.w	r3, r0, r3
 8000758:	4915      	ldr	r1, [pc, #84]	; (80007b0 <adc_Config+0x18c>)
 800075a:	4313      	orrs	r3, r2
 800075c:	60cb      	str	r3, [r1, #12]
	}

	/* 8. Configuramos la secuencia y cuantos elementos hay en la secuencia */
	// Al hacerlo todo 0, estamos seleccionando solo 1 elemento en el conteo de la secuencia
	ADC1 -> SQR1 = 0;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <adc_Config+0x18c>)
 8000760:	2200      	movs	r2, #0
 8000762:	62da      	str	r2, [r3, #44]	; 0x2c

	// Asignamos el canal de la conversión a la primera posición en la secuencia
	ADC1 -> SQR3 |= (adcConfig -> channel << 0);
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <adc_Config+0x18c>)
 8000766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	7812      	ldrb	r2, [r2, #0]
 800076c:	4611      	mov	r1, r2
 800076e:	4a10      	ldr	r2, [pc, #64]	; (80007b0 <adc_Config+0x18c>)
 8000770:	430b      	orrs	r3, r1
 8000772:	6353      	str	r3, [r2, #52]	; 0x34

	/* 9. Configuramos el preescaler del ADC en 2:1 (el más rápido que se puede tener) */
	ADC -> CCR = 0;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <adc_Config+0x190>)
 8000776:	2200      	movs	r2, #0
 8000778:	605a      	str	r2, [r3, #4]

	/* 10. Desactivamos las interrupciones */

	ADC1 -> CR1 |= ADC_CR1_EOCIE;
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <adc_Config+0x18c>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	4a0c      	ldr	r2, [pc, #48]	; (80007b0 <adc_Config+0x18c>)
 8000780:	f043 0320 	orr.w	r3, r3, #32
 8000784:	6053      	str	r3, [r2, #4]

	/* 11a. Matriculamos la interrupción en el NVIC */
	__NVIC_EnableIRQ(ADC_IRQn);
 8000786:	2012      	movs	r0, #18
 8000788:	f7ff ff06 	bl	8000598 <__NVIC_EnableIRQ>

	/* 11.b Establecemos la importancia de la interrupción */

	__NVIC_SetPriority(ADC_IRQn,4);
 800078c:	2104      	movs	r1, #4
 800078e:	2012      	movs	r0, #18
 8000790:	f7ff ff1e 	bl	80005d0 <__NVIC_SetPriority>

	/* 12. Activamos el modulo ADC */
	ADC1 -> CR2 |= ADC_CR2_ADON;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <adc_Config+0x18c>)
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <adc_Config+0x18c>)
 800079a:	f043 0301 	orr.w	r3, r3, #1
 800079e:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80007a0:	b662      	cpsie	i
}
 80007a2:	bf00      	nop

	/* 13. Activamos las interrupciones globales */
	__enable_irq();
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40012000 	.word	0x40012000
 80007b4:	40012300 	.word	0x40012300

080007b8 <startSingleADC>:

/**/

void startSingleADC(void){
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
	/* Iniciamos un ciclo de conversión ADC */
	ADC1 -> CR2 |= ADC_CR2_SWSTART;
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <startSingleADC+0x18>)
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	4a03      	ldr	r2, [pc, #12]	; (80007d0 <startSingleADC+0x18>)
 80007c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80007c6:	6093      	str	r3, [r2, #8]
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	40012000 	.word	0x40012000

080007d4 <stopContinousADC>:
	ADC1 -> CR2 |= (ADC_CR2_CONT);
	/* Iniciamos un ciclo de conversión ADC */
	ADC1 -> CR2 |= ADC_CR2_SWSTART;
}

void stopContinousADC(void){
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
	ADC1 -> CR2 &= ~(ADC_CR2_SWSTART);
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <stopContinousADC+0x18>)
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	4a03      	ldr	r2, [pc, #12]	; (80007ec <stopContinousADC+0x18>)
 80007de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80007e2:	6093      	str	r3, [r2, #8]
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	40012000 	.word	0x40012000

080007f0 <getADC>:

/* Función que me retorna el último dato adquirido por la ADC */
uint16_t getADC(void){
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
	return adcRawData;
 80007f4:	4b02      	ldr	r3, [pc, #8]	; (8000800 <getADC+0x10>)
 80007f6:	881b      	ldrh	r3, [r3, #0]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	200001a8 	.word	0x200001a8

08000804 <ADC_IRQHandler>:

/* Esta es la ISR de la interrupción por conversión ADC */
void ADC_IRQHandler(void){
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	if(ADC1 -> SR & ADC_SR_EOC){
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <ADC_IRQHandler+0x24>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f003 0302 	and.w	r3, r3, #2
 8000810:	2b00      	cmp	r3, #0
 8000812:	d006      	beq.n	8000822 <ADC_IRQHandler+0x1e>
		// Leemos el resultado de la conversión ADC y lo cargamos en un valor auxiliar
		adcRawData = ADC1 -> DR;
 8000814:	4b04      	ldr	r3, [pc, #16]	; (8000828 <ADC_IRQHandler+0x24>)
 8000816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000818:	b29a      	uxth	r2, r3
 800081a:	4b04      	ldr	r3, [pc, #16]	; (800082c <ADC_IRQHandler+0x28>)
 800081c:	801a      	strh	r2, [r3, #0]

		// Hacemos el llamado a la función que se ejecutará en el main
		adc_Complete_Callback();
 800081e:	f7ff fe49 	bl	80004b4 <adc_Complete_Callback>
	}
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40012000 	.word	0x40012000
 800082c:	200001a8 	.word	0x200001a8

08000830 <configAnalogPin>:
__attribute__((weak)) void adc_Complete_Callback(void){
	__NOP();
}

/* Con esta función configuramos que pin deseamos que funcione como ADC */
void configAnalogPin(uint8_t adcChannel){
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]

	// Con este switch seleccionamos el canal y lo configuramos como analogo.
	switch(adcChannel){
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2b0f      	cmp	r3, #15
 800083e:	f200 8093 	bhi.w	8000968 <configAnalogPin+0x138>
 8000842:	a201      	add	r2, pc, #4	; (adr r2, 8000848 <configAnalogPin+0x18>)
 8000844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000848:	08000889 	.word	0x08000889
 800084c:	08000897 	.word	0x08000897
 8000850:	080008a5 	.word	0x080008a5
 8000854:	080008b3 	.word	0x080008b3
 8000858:	080008c1 	.word	0x080008c1
 800085c:	080008cf 	.word	0x080008cf
 8000860:	080008dd 	.word	0x080008dd
 8000864:	080008eb 	.word	0x080008eb
 8000868:	080008f9 	.word	0x080008f9
 800086c:	08000907 	.word	0x08000907
 8000870:	08000915 	.word	0x08000915
 8000874:	08000923 	.word	0x08000923
 8000878:	08000931 	.word	0x08000931
 800087c:	0800093f 	.word	0x0800093f
 8000880:	0800094d 	.word	0x0800094d
 8000884:	0800095b 	.word	0x0800095b

	case ADC_CHANNEL_0:
	{
		// Es el pin PA0
		handlerAdcPin.pGPIOx						= GPIOA;
 8000888:	4b3d      	ldr	r3, [pc, #244]	; (8000980 <configAnalogPin+0x150>)
 800088a:	4a3e      	ldr	r2, [pc, #248]	; (8000984 <configAnalogPin+0x154>)
 800088c:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 800088e:	4b3c      	ldr	r3, [pc, #240]	; (8000980 <configAnalogPin+0x150>)
 8000890:	2200      	movs	r2, #0
 8000892:	711a      	strb	r2, [r3, #4]
		break;
 8000894:	e069      	b.n	800096a <configAnalogPin+0x13a>

	// Configuración ADC1_1
	case ADC_CHANNEL_1:
	{
		// Es el pin PA1.
		handlerAdcPin.pGPIOx = GPIOA;
 8000896:	4b3a      	ldr	r3, [pc, #232]	; (8000980 <configAnalogPin+0x150>)
 8000898:	4a3a      	ldr	r2, [pc, #232]	; (8000984 <configAnalogPin+0x154>)
 800089a:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 800089c:	4b38      	ldr	r3, [pc, #224]	; (8000980 <configAnalogPin+0x150>)
 800089e:	2201      	movs	r2, #1
 80008a0:	711a      	strb	r2, [r3, #4]
		break;
 80008a2:	e062      	b.n	800096a <configAnalogPin+0x13a>

	// Configuración ADC1_2
	case ADC_CHANNEL_2:
	{
		// Es el pin PA2.
		handlerAdcPin.pGPIOx = GPIOA;
 80008a4:	4b36      	ldr	r3, [pc, #216]	; (8000980 <configAnalogPin+0x150>)
 80008a6:	4a37      	ldr	r2, [pc, #220]	; (8000984 <configAnalogPin+0x154>)
 80008a8:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 80008aa:	4b35      	ldr	r3, [pc, #212]	; (8000980 <configAnalogPin+0x150>)
 80008ac:	2202      	movs	r2, #2
 80008ae:	711a      	strb	r2, [r3, #4]
		break;
 80008b0:	e05b      	b.n	800096a <configAnalogPin+0x13a>

	// Configuración ADC1_3
	case ADC_CHANNEL_3:
	{
		// Es el pin PA3.
		handlerAdcPin.pGPIOx = GPIOA;
 80008b2:	4b33      	ldr	r3, [pc, #204]	; (8000980 <configAnalogPin+0x150>)
 80008b4:	4a33      	ldr	r2, [pc, #204]	; (8000984 <configAnalogPin+0x154>)
 80008b6:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 80008b8:	4b31      	ldr	r3, [pc, #196]	; (8000980 <configAnalogPin+0x150>)
 80008ba:	2203      	movs	r2, #3
 80008bc:	711a      	strb	r2, [r3, #4]
		break;
 80008be:	e054      	b.n	800096a <configAnalogPin+0x13a>

	// Configuración ADC1_4
	case ADC_CHANNEL_4:
	{
		// Es el pin PA4.
		handlerAdcPin.pGPIOx = GPIOA;
 80008c0:	4b2f      	ldr	r3, [pc, #188]	; (8000980 <configAnalogPin+0x150>)
 80008c2:	4a30      	ldr	r2, [pc, #192]	; (8000984 <configAnalogPin+0x154>)
 80008c4:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 80008c6:	4b2e      	ldr	r3, [pc, #184]	; (8000980 <configAnalogPin+0x150>)
 80008c8:	2204      	movs	r2, #4
 80008ca:	711a      	strb	r2, [r3, #4]
		break;
 80008cc:	e04d      	b.n	800096a <configAnalogPin+0x13a>

	// Configuración ADC1_5
	case ADC_CHANNEL_5:
	{
		// Es el pin PA5.
		handlerAdcPin.pGPIOx = GPIOA;
 80008ce:	4b2c      	ldr	r3, [pc, #176]	; (8000980 <configAnalogPin+0x150>)
 80008d0:	4a2c      	ldr	r2, [pc, #176]	; (8000984 <configAnalogPin+0x154>)
 80008d2:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 80008d4:	4b2a      	ldr	r3, [pc, #168]	; (8000980 <configAnalogPin+0x150>)
 80008d6:	2205      	movs	r2, #5
 80008d8:	711a      	strb	r2, [r3, #4]
		break;
 80008da:	e046      	b.n	800096a <configAnalogPin+0x13a>

	// Configuración ADC1_6
	case ADC_CHANNEL_6:
	{
		// Es el pin PA6.
		handlerAdcPin.pGPIOx = GPIOA;
 80008dc:	4b28      	ldr	r3, [pc, #160]	; (8000980 <configAnalogPin+0x150>)
 80008de:	4a29      	ldr	r2, [pc, #164]	; (8000984 <configAnalogPin+0x154>)
 80008e0:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_6;
 80008e2:	4b27      	ldr	r3, [pc, #156]	; (8000980 <configAnalogPin+0x150>)
 80008e4:	2206      	movs	r2, #6
 80008e6:	711a      	strb	r2, [r3, #4]
		break;
 80008e8:	e03f      	b.n	800096a <configAnalogPin+0x13a>

	// Configuración ADC1_7
	case ADC_CHANNEL_7:
	{
		// Es el pin PA7.
		handlerAdcPin.pGPIOx = GPIOA;
 80008ea:	4b25      	ldr	r3, [pc, #148]	; (8000980 <configAnalogPin+0x150>)
 80008ec:	4a25      	ldr	r2, [pc, #148]	; (8000984 <configAnalogPin+0x154>)
 80008ee:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_7;
 80008f0:	4b23      	ldr	r3, [pc, #140]	; (8000980 <configAnalogPin+0x150>)
 80008f2:	2207      	movs	r2, #7
 80008f4:	711a      	strb	r2, [r3, #4]
		break;
 80008f6:	e038      	b.n	800096a <configAnalogPin+0x13a>

	// Configuración ADC1_8
	case ADC_CHANNEL_8:
	{
		// Es el pin PB0.
		handlerAdcPin.pGPIOx = GPIOB;
 80008f8:	4b21      	ldr	r3, [pc, #132]	; (8000980 <configAnalogPin+0x150>)
 80008fa:	4a23      	ldr	r2, [pc, #140]	; (8000988 <configAnalogPin+0x158>)
 80008fc:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 80008fe:	4b20      	ldr	r3, [pc, #128]	; (8000980 <configAnalogPin+0x150>)
 8000900:	2200      	movs	r2, #0
 8000902:	711a      	strb	r2, [r3, #4]
		break;
 8000904:	e031      	b.n	800096a <configAnalogPin+0x13a>

	// Configuración ADC1_9
	case ADC_CHANNEL_9:
	{
		// Es el pin PB1.
		handlerAdcPin.pGPIOx = GPIOB;
 8000906:	4b1e      	ldr	r3, [pc, #120]	; (8000980 <configAnalogPin+0x150>)
 8000908:	4a1f      	ldr	r2, [pc, #124]	; (8000988 <configAnalogPin+0x158>)
 800090a:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 800090c:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <configAnalogPin+0x150>)
 800090e:	2201      	movs	r2, #1
 8000910:	711a      	strb	r2, [r3, #4]
		break;
 8000912:	e02a      	b.n	800096a <configAnalogPin+0x13a>

	// Configuración ADC1_10
	case ADC_CHANNEL_10:
	{
		// Es el pin PC0.
		handlerAdcPin.pGPIOx = GPIOC;
 8000914:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <configAnalogPin+0x150>)
 8000916:	4a1d      	ldr	r2, [pc, #116]	; (800098c <configAnalogPin+0x15c>)
 8000918:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 800091a:	4b19      	ldr	r3, [pc, #100]	; (8000980 <configAnalogPin+0x150>)
 800091c:	2200      	movs	r2, #0
 800091e:	711a      	strb	r2, [r3, #4]
		break;
 8000920:	e023      	b.n	800096a <configAnalogPin+0x13a>

	// Configuración ADC1_11
	case ADC_CHANNEL_11:
	{
		// Es el pin PC1.
		handlerAdcPin.pGPIOx = GPIOC;
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <configAnalogPin+0x150>)
 8000924:	4a19      	ldr	r2, [pc, #100]	; (800098c <configAnalogPin+0x15c>)
 8000926:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8000928:	4b15      	ldr	r3, [pc, #84]	; (8000980 <configAnalogPin+0x150>)
 800092a:	2201      	movs	r2, #1
 800092c:	711a      	strb	r2, [r3, #4]
		break;
 800092e:	e01c      	b.n	800096a <configAnalogPin+0x13a>

	// Configuración ADC1_12
	case ADC_CHANNEL_12:
	{
		// Es el pin PC2.
		handlerAdcPin.pGPIOx = GPIOC;
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <configAnalogPin+0x150>)
 8000932:	4a16      	ldr	r2, [pc, #88]	; (800098c <configAnalogPin+0x15c>)
 8000934:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <configAnalogPin+0x150>)
 8000938:	2202      	movs	r2, #2
 800093a:	711a      	strb	r2, [r3, #4]
		break;
 800093c:	e015      	b.n	800096a <configAnalogPin+0x13a>

	// Configuración ADC1_13
	case ADC_CHANNEL_13:
	{
		// Es el pin PC3.
		handlerAdcPin.pGPIOx = GPIOC;
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <configAnalogPin+0x150>)
 8000940:	4a12      	ldr	r2, [pc, #72]	; (800098c <configAnalogPin+0x15c>)
 8000942:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <configAnalogPin+0x150>)
 8000946:	2203      	movs	r2, #3
 8000948:	711a      	strb	r2, [r3, #4]
		break;
 800094a:	e00e      	b.n	800096a <configAnalogPin+0x13a>

	// Configuración ADC1_14
	case ADC_CHANNEL_14:
	{
		// Es el pin PC4.
		handlerAdcPin.pGPIOx = GPIOC;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <configAnalogPin+0x150>)
 800094e:	4a0f      	ldr	r2, [pc, #60]	; (800098c <configAnalogPin+0x15c>)
 8000950:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <configAnalogPin+0x150>)
 8000954:	2204      	movs	r2, #4
 8000956:	711a      	strb	r2, [r3, #4]
		break;
 8000958:	e007      	b.n	800096a <configAnalogPin+0x13a>

	// Configuración ADC1_15
	case ADC_CHANNEL_15:
	{
		// Es el pin PC5.
		handlerAdcPin.pGPIOx = GPIOC;
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <configAnalogPin+0x150>)
 800095c:	4a0b      	ldr	r2, [pc, #44]	; (800098c <configAnalogPin+0x15c>)
 800095e:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <configAnalogPin+0x150>)
 8000962:	2205      	movs	r2, #5
 8000964:	711a      	strb	r2, [r3, #4]
		break;
 8000966:	e000      	b.n	800096a <configAnalogPin+0x13a>
	}

	default:
	{
		// Se termina el ciclo por defecto.
		break;
 8000968:	bf00      	nop
	}
	}

	// Se configura el pin en modo análogo.
	handlerAdcPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <configAnalogPin+0x150>)
 800096c:	2203      	movs	r2, #3
 800096e:	715a      	strb	r2, [r3, #5]
	GPIO_Config(&handlerAdcPin);
 8000970:	4803      	ldr	r0, [pc, #12]	; (8000980 <configAnalogPin+0x150>)
 8000972:	f000 f80d 	bl	8000990 <GPIO_Config>
	}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	2000019c 	.word	0x2000019c
 8000984:	40020000 	.word	0x40020000
 8000988:	40020400 	.word	0x40020400
 800098c:	40020800 	.word	0x40020800

08000990 <GPIO_Config>:
orden estricto para poder que el sistema permita configurar el periférico X.
Lo primero y más importante es activar la señal del reloj principal hacia ese
elemento específico (relacionado con el periférico RCC), a esto llamaremos
simplemente "activar el periférico o activar la señal de reloj del periférico".
*/
void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periférico
	// Verificamos para GPIOA
	if (pGPIOHandler -> pGPIOx == GPIOA){
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a87      	ldr	r2, [pc, #540]	; (8000bc4 <GPIO_Config+0x234>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d106      	bne.n	80009b8 <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOA
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 80009aa:	4b87      	ldr	r3, [pc, #540]	; (8000bc8 <GPIO_Config+0x238>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a86      	ldr	r2, [pc, #536]	; (8000bc8 <GPIO_Config+0x238>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	e03a      	b.n	8000a2e <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if (pGPIOHandler -> pGPIOx == GPIOB){
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a83      	ldr	r2, [pc, #524]	; (8000bcc <GPIO_Config+0x23c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d106      	bne.n	80009d0 <GPIO_Config+0x40>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOB
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 80009c2:	4b81      	ldr	r3, [pc, #516]	; (8000bc8 <GPIO_Config+0x238>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a80      	ldr	r2, [pc, #512]	; (8000bc8 <GPIO_Config+0x238>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	e02e      	b.n	8000a2e <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOC
	else if (pGPIOHandler -> pGPIOx == GPIOC){
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a7e      	ldr	r2, [pc, #504]	; (8000bd0 <GPIO_Config+0x240>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d106      	bne.n	80009e8 <GPIO_Config+0x58>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOC
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 80009da:	4b7b      	ldr	r3, [pc, #492]	; (8000bc8 <GPIO_Config+0x238>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a7a      	ldr	r2, [pc, #488]	; (8000bc8 <GPIO_Config+0x238>)
 80009e0:	f043 0304 	orr.w	r3, r3, #4
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	e022      	b.n	8000a2e <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOD
	else if (pGPIOHandler -> pGPIOx == GPIOD){
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a79      	ldr	r2, [pc, #484]	; (8000bd4 <GPIO_Config+0x244>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d106      	bne.n	8000a00 <GPIO_Config+0x70>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOD
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 80009f2:	4b75      	ldr	r3, [pc, #468]	; (8000bc8 <GPIO_Config+0x238>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a74      	ldr	r2, [pc, #464]	; (8000bc8 <GPIO_Config+0x238>)
 80009f8:	f043 0308 	orr.w	r3, r3, #8
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	e016      	b.n	8000a2e <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOE
	else if (pGPIOHandler -> pGPIOx == GPIOE){
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a74      	ldr	r2, [pc, #464]	; (8000bd8 <GPIO_Config+0x248>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d106      	bne.n	8000a18 <GPIO_Config+0x88>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOE
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8000a0a:	4b6f      	ldr	r3, [pc, #444]	; (8000bc8 <GPIO_Config+0x238>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a6e      	ldr	r2, [pc, #440]	; (8000bc8 <GPIO_Config+0x238>)
 8000a10:	f043 0310 	orr.w	r3, r3, #16
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	e00a      	b.n	8000a2e <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOH
	else if (pGPIOHandler -> pGPIOx == GPIOH){
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a6f      	ldr	r2, [pc, #444]	; (8000bdc <GPIO_Config+0x24c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d105      	bne.n	8000a2e <GPIO_Config+0x9e>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOH
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 8000a22:	4b69      	ldr	r3, [pc, #420]	; (8000bc8 <GPIO_Config+0x238>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a68      	ldr	r2, [pc, #416]	; (8000bc8 <GPIO_Config+0x238>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
	// Después de activado, podemos comenzar a configurar.

	// 2) Configurando el registro GPIOx_MODER
	// Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y todo eso lo cargamos en la variable aux_Config
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	795b      	ldrb	r3, [r3, #5]
 8000a32:	461a      	mov	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	791b      	ldrb	r3, [r3, #4]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	60fb      	str	r3, [r7, #12]

	// Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (debemos escribir 0b00)
	// para lo cual aplicamos una máscara y una operación bitwise AND
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	791b      	ldrb	r3, [r3, #4]
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	2103      	movs	r1, #3
 8000a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	4619      	mov	r1, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	400a      	ands	r2, r1
 8000a5c:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler -> pGPIOx -> MODER |= auxConfig;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	6819      	ldr	r1, [r3, #0]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	68fa      	ldr	r2, [r7, #12]
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	601a      	str	r2, [r3, #0]

	// 3) Configurando el registro GPIOx_OTYPER
	// De nuevo, leemos y movemos el valor un número "PinNumber" de veces
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	7a1b      	ldrb	r3, [r3, #8]
 8000a72:	461a      	mov	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	791b      	ldrb	r3, [r3, #4]
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler -> pGPIOx -> OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	685a      	ldr	r2, [r3, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	791b      	ldrb	r3, [r3, #4]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	408b      	lsls	r3, r1
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	4619      	mov	r1, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	400a      	ands	r2, r1
 8000a98:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OTYPER |= auxConfig;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	6859      	ldr	r1, [r3, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	68fa      	ldr	r2, [r7, #12]
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	799b      	ldrb	r3, [r3, #6]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	791b      	ldrb	r3, [r3, #4]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler -> pGPIOx -> OSPEEDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	689a      	ldr	r2, [r3, #8]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	791b      	ldrb	r3, [r3, #4]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	2103      	movs	r1, #3
 8000aca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	400a      	ands	r2, r1
 8000ad8:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OSPEEDR |= auxConfig;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	6899      	ldr	r1, [r3, #8]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante.
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	79db      	ldrb	r3, [r3, #7]
 8000aee:	461a      	mov	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	791b      	ldrb	r3, [r3, #4]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler -> pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	68da      	ldr	r2, [r3, #12]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	791b      	ldrb	r3, [r3, #4]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	2103      	movs	r1, #3
 8000b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	4619      	mov	r1, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	400a      	ands	r2, r1
 8000b18:	60da      	str	r2, [r3, #12]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> PUPDR |= auxConfig;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	68d9      	ldr	r1, [r3, #12]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	430a      	orrs	r2, r1
 8000b28:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuración de las funciones alternativas... Se verá luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	795b      	ldrb	r3, [r3, #5]
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d143      	bne.n	8000bba <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	791b      	ldrb	r3, [r3, #4]
 8000b36:	2b07      	cmp	r3, #7
 8000b38:	d81f      	bhi.n	8000b7a <GPIO_Config+0x1ea>
			// Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	791b      	ldrb	r3, [r3, #4]
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	60bb      	str	r3, [r7, #8]

			// Limpiamos primero la posición del registro que deseamos escribir a continuación
			pGPIOHandler -> pGPIOx -> AFR[0] &= ~(0b1111 << auxPosition);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	6a1a      	ldr	r2, [r3, #32]
 8000b48:	210f      	movs	r1, #15
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	4619      	mov	r1, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	400a      	ands	r2, r1
 8000b5a:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posición seleccionada
			pGPIOHandler -> pGPIOx -> AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	6a1a      	ldr	r2, [r3, #32]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	7a5b      	ldrb	r3, [r3, #9]
 8000b66:	4619      	mov	r1, r3
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6e:	4619      	mov	r1, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	430a      	orrs	r2, r1
 8000b76:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurando en la posición seleccionada
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} // Fin del GPIO_Config
 8000b78:	e01f      	b.n	8000bba <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber -8);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	791b      	ldrb	r3, [r3, #4]
 8000b7e:	3b08      	subs	r3, #8
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx -> AFR[1] &= ~(0b1111 << auxPosition);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b92:	43db      	mvns	r3, r3
 8000b94:	4619      	mov	r1, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	400a      	ands	r2, r1
 8000b9c:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	7a5b      	ldrb	r3, [r3, #9]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_Config
 8000bba:	bf00      	nop
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	40020000 	.word	0x40020000
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020400 	.word	0x40020400
 8000bd0:	40020800 	.word	0x40020800
 8000bd4:	40020c00 	.word	0x40020c00
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40021c00 	.word	0x40021c00

08000be0 <__NVIC_EnableIRQ>:
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	db0b      	blt.n	8000c0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	f003 021f 	and.w	r2, r3, #31
 8000bf8:	4906      	ldr	r1, [pc, #24]	; (8000c14 <__NVIC_EnableIRQ+0x34>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	095b      	lsrs	r3, r3, #5
 8000c00:	2001      	movs	r0, #1
 8000c02:	fa00 f202 	lsl.w	r2, r0, r2
 8000c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_DisableIRQ>:
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db12      	blt.n	8000c50 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	f003 021f 	and.w	r2, r3, #31
 8000c30:	490a      	ldr	r1, [pc, #40]	; (8000c5c <__NVIC_DisableIRQ+0x44>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	095b      	lsrs	r3, r3, #5
 8000c38:	2001      	movs	r0, #1
 8000c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3e:	3320      	adds	r3, #32
 8000c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c44:	f3bf 8f4f 	dsb	sy
}
 8000c48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c4a:	f3bf 8f6f 	isb	sy
}
 8000c4e:	bf00      	nop
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000e100 	.word	0xe000e100

08000c60 <__NVIC_SetPriority>:
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	db0a      	blt.n	8000c8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	490c      	ldr	r1, [pc, #48]	; (8000cac <__NVIC_SetPriority+0x4c>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	0112      	lsls	r2, r2, #4
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	440b      	add	r3, r1
 8000c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c88:	e00a      	b.n	8000ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4908      	ldr	r1, [pc, #32]	; (8000cb0 <__NVIC_SetPriority+0x50>)
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	f003 030f 	and.w	r3, r3, #15
 8000c96:	3b04      	subs	r3, #4
 8000c98:	0112      	lsls	r2, r2, #4
 8000c9a:	b2d2      	uxtb	r2, r2
 8000c9c:	440b      	add	r3, r1
 8000c9e:	761a      	strb	r2, [r3, #24]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000e100 	.word	0xe000e100
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <Timer_Config>:
 *
 * */

//NOTA: Hay que desactivar las interrupciones globales y luego volver a activarlas

void Timer_Config(TIMER_Handler_t *ptrTimerConfig){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
	/* 0. Desactivamos las interrupciones globales */

	__disable_irq();

	/* 1. Activamos la señal de reloj para el periférico específico */
	if(ptrTimerConfig -> ptrTIMx == TIM2){
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cc8:	d106      	bne.n	8000cd8 <Timer_Config+0x24>
		// Activamos la señal de reloj del TIM2
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000cca:	4b4b      	ldr	r3, [pc, #300]	; (8000df8 <Timer_Config+0x144>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	4a4a      	ldr	r2, [pc, #296]	; (8000df8 <Timer_Config+0x144>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	e022      	b.n	8000d1e <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM3){
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a47      	ldr	r2, [pc, #284]	; (8000dfc <Timer_Config+0x148>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d106      	bne.n	8000cf0 <Timer_Config+0x3c>
		// Activamos la señal de reloj del TIM3
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000ce2:	4b45      	ldr	r3, [pc, #276]	; (8000df8 <Timer_Config+0x144>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	4a44      	ldr	r2, [pc, #272]	; (8000df8 <Timer_Config+0x144>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	6413      	str	r3, [r2, #64]	; 0x40
 8000cee:	e016      	b.n	8000d1e <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM4){
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a42      	ldr	r2, [pc, #264]	; (8000e00 <Timer_Config+0x14c>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d106      	bne.n	8000d08 <Timer_Config+0x54>
		// Activamos la señal de reloj del TIM4
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000cfa:	4b3f      	ldr	r3, [pc, #252]	; (8000df8 <Timer_Config+0x144>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	4a3e      	ldr	r2, [pc, #248]	; (8000df8 <Timer_Config+0x144>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	6413      	str	r3, [r2, #64]	; 0x40
 8000d06:	e00a      	b.n	8000d1e <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM5){
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a3d      	ldr	r2, [pc, #244]	; (8000e04 <Timer_Config+0x150>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d105      	bne.n	8000d1e <Timer_Config+0x6a>
		// Activamos la señal de reloj del TIM5
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8000d12:	4b39      	ldr	r3, [pc, #228]	; (8000df8 <Timer_Config+0x144>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	4a38      	ldr	r2, [pc, #224]	; (8000df8 <Timer_Config+0x144>)
 8000d18:	f043 0308 	orr.w	r3, r3, #8
 8000d1c:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuración del modo del timer (UP or DOWN) */

	if(ptrTimerConfig -> timerConfig.Timer_mode == TIMER_MODE_UP){
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	791b      	ldrb	r3, [r3, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d10c      	bne.n	8000d40 <Timer_Config+0x8c>
		// Configuramos el timer en modo UP
		ptrTimerConfig -> ptrTIMx -> CR1 &= ~(TIM_CR1_DIR);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f022 0210 	bic.w	r2, r2, #16
 8000d34:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) en cero.
		ptrTimerConfig -> ptrTIMx -> CNT = 0;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
 8000d3e:	e00d      	b.n	8000d5c <Timer_Config+0xa8>

	}
	else{
		// Configuramos el timer en modo DOWN
		ptrTimerConfig -> ptrTIMx -> CR1 |= ~(TIM_CR1_DIR);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f062 0210 	orn	r2, r2, #16
 8000d4e:	601a      	str	r2, [r3, #0]

		// Ponemos en el contador (CNT) el valor del periodo
		ptrTimerConfig -> ptrTIMx -> CNT = ptrTimerConfig -> timerConfig.Timer_period -1;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	3a01      	subs	r2, #1
 8000d5a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuración del Prescaler */
	ptrTimerConfig -> ptrTIMx -> PSC = ptrTimerConfig -> timerConfig.Timer_speed -1;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	88db      	ldrh	r3, [r3, #6]
 8000d60:	1e5a      	subs	r2, r3, #1
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo de las interrupciones */
	ptrTimerConfig -> ptrTIMx -> ARR = ptrTimerConfig -> timerConfig.Timer_period -1;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	689a      	ldr	r2, [r3, #8]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	3a01      	subs	r2, #1
 8000d72:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse  */
	ptrTimerConfig -> ptrTIMx -> CR1 |= TIM_CR1_CEN;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f042 0201 	orr.w	r2, r2, #1
 8000d82:	601a      	str	r2, [r3, #0]

	/* 6. Activamos la interrupción debida a un "update event" */
	if(ptrTimerConfig -> ptrTIMx != TIM3){
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a1c      	ldr	r2, [pc, #112]	; (8000dfc <Timer_Config+0x148>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d007      	beq.n	8000d9e <Timer_Config+0xea>
		ptrTimerConfig -> ptrTIMx -> DIER |= TIM_DIER_UIE;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	68da      	ldr	r2, [r3, #12]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f042 0201 	orr.w	r2, r2, #1
 8000d9c:	60da      	str	r2, [r3, #12]
	}

	/* 7. Activamos la señal de la interrupcuón en el NVIC */

	if(ptrTimerConfig -> ptrTIMx == TIM2){
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000da6:	d107      	bne.n	8000db8 <Timer_Config+0x104>
		// Activamos la IRQ del TIM2
		__NVIC_EnableIRQ(TIM2_IRQn);
 8000da8:	201c      	movs	r0, #28
 8000daa:	f7ff ff19 	bl	8000be0 <__NVIC_EnableIRQ>

		// Establecemos la prioridad del timer
		__NVIC_SetPriority(TIM2_IRQn,3);
 8000dae:	2103      	movs	r1, #3
 8000db0:	201c      	movs	r0, #28
 8000db2:	f7ff ff55 	bl	8000c60 <__NVIC_SetPriority>
 8000db6:	e019      	b.n	8000dec <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM3){
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0f      	ldr	r2, [pc, #60]	; (8000dfc <Timer_Config+0x148>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d103      	bne.n	8000dca <Timer_Config+0x116>
		// Activamos la IRQ del TIM3
		__NVIC_DisableIRQ(TIM3_IRQn);
 8000dc2:	201d      	movs	r0, #29
 8000dc4:	f7ff ff28 	bl	8000c18 <__NVIC_DisableIRQ>
 8000dc8:	e010      	b.n	8000dec <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM4){
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a0c      	ldr	r2, [pc, #48]	; (8000e00 <Timer_Config+0x14c>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d103      	bne.n	8000ddc <Timer_Config+0x128>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM4_IRQn);
 8000dd4:	201e      	movs	r0, #30
 8000dd6:	f7ff ff03 	bl	8000be0 <__NVIC_EnableIRQ>
 8000dda:	e007      	b.n	8000dec <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM5){
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <Timer_Config+0x150>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d102      	bne.n	8000dec <Timer_Config+0x138>
		// Activamos la IRQ del TIM5
		__NVIC_EnableIRQ(TIM5_IRQn);
 8000de6:	2032      	movs	r0, #50	; 0x32
 8000de8:	f7ff fefa 	bl	8000be0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000dec:	b662      	cpsie	i
}
 8000dee:	bf00      	nop
	}


	/* 8. Activamos de nuevo todas las interrupciones. */
	__enable_irq();
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40000400 	.word	0x40000400
 8000e00:	40000800 	.word	0x40000800
 8000e04:	40000c00 	.word	0x40000c00

08000e08 <startTimer>:

void startTimer(TIMER_Handler_t *ptrTimerConfig){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	ptrTimerConfig -> ptrTIMx -> DIER |= TIM_DIER_UIE;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	68da      	ldr	r2, [r3, #12]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f042 0201 	orr.w	r2, r2, #1
 8000e1e:	60da      	str	r2, [r3, #12]


	__NVIC_EnableIRQ(TIM3_IRQn);
 8000e20:	201d      	movs	r0, #29
 8000e22:	f7ff fedd 	bl	8000be0 <__NVIC_EnableIRQ>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <stopTimer>:

void stopTimer(TIMER_Handler_t *ptrTimerConfig){
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
	ptrTimerConfig -> ptrTIMx -> DIER &= ~TIM_DIER_UIE;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	68da      	ldr	r2, [r3, #12]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f022 0201 	bic.w	r2, r2, #1
 8000e44:	60da      	str	r2, [r3, #12]
	__NVIC_DisableIRQ(TIM3_IRQn);
 8000e46:	201d      	movs	r0, #29
 8000e48:	f7ff fee6 	bl	8000c18 <__NVIC_DisableIRQ>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <Timer4_Callback>:
__attribute__((weak)) void Timer3_Callback(void){
	__NOP();
}

// Callback Timer4
__attribute__((weak)) void Timer4_Callback(void){
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
	__NOP();
 8000e58:	bf00      	nop
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr

08000e62 <Timer5_Callback>:

// Callback Timer5
__attribute__((weak)) void Timer5_Callback(void){
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
	__NOP();
 8000e66:	bf00      	nop
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <TIM2_IRQHandler>:

// Hay que hacer dos cosas: 1) Atender la interrupción. 2) Llamamos al Callback
/* Rutina de atención a la interrupción del TIM2 */

void TIM2_IRQHandler(void){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	TIM2 -> SR &= ~(TIM_SR_UIF);
 8000e74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e78:	691b      	ldr	r3, [r3, #16]
 8000e7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e7e:	f023 0301 	bic.w	r3, r3, #1
 8000e82:	6113      	str	r3, [r2, #16]
	Timer2_Callback();
 8000e84:	f7ff faf4 	bl	8000470 <Timer2_Callback>
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	TIM3 -> SR &= ~(TIM_SR_UIF);
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <TIM3_IRQHandler+0x18>)
 8000e92:	691b      	ldr	r3, [r3, #16]
 8000e94:	4a03      	ldr	r2, [pc, #12]	; (8000ea4 <TIM3_IRQHandler+0x18>)
 8000e96:	f023 0301 	bic.w	r3, r3, #1
 8000e9a:	6113      	str	r3, [r2, #16]
	Timer3_Callback();
 8000e9c:	f7ff faf8 	bl	8000490 <Timer3_Callback>
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40000400 	.word	0x40000400

08000ea8 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	TIM4 -> SR &= ~(TIM_SR_UIF);
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <TIM4_IRQHandler+0x18>)
 8000eae:	691b      	ldr	r3, [r3, #16]
 8000eb0:	4a03      	ldr	r2, [pc, #12]	; (8000ec0 <TIM4_IRQHandler+0x18>)
 8000eb2:	f023 0301 	bic.w	r3, r3, #1
 8000eb6:	6113      	str	r3, [r2, #16]
	Timer4_Callback();
 8000eb8:	f7ff ffcc 	bl	8000e54 <Timer4_Callback>
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40000800 	.word	0x40000800

08000ec4 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	TIM5 -> SR &= ~(TIM_SR_UIF);
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <TIM5_IRQHandler+0x18>)
 8000eca:	691b      	ldr	r3, [r3, #16]
 8000ecc:	4a03      	ldr	r2, [pc, #12]	; (8000edc <TIM5_IRQHandler+0x18>)
 8000ece:	f023 0301 	bic.w	r3, r3, #1
 8000ed2:	6113      	str	r3, [r2, #16]
	Timer5_Callback();
 8000ed4:	f7ff ffc5 	bl	8000e62 <Timer5_Callback>
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40000c00 	.word	0x40000c00

08000ee0 <__NVIC_EnableIRQ>:
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	db0b      	blt.n	8000f0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	f003 021f 	and.w	r2, r3, #31
 8000ef8:	4906      	ldr	r1, [pc, #24]	; (8000f14 <__NVIC_EnableIRQ+0x34>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	095b      	lsrs	r3, r3, #5
 8000f00:	2001      	movs	r0, #1
 8000f02:	fa00 f202 	lsl.w	r2, r0, r2
 8000f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	e000e100 	.word	0xe000e100

08000f18 <USART_Config>:
 * del periférico que se está utilizando.
 */

uint8_t data;

void USART_Config(USART_Handler_t *ptrUsartHandler){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f20:	b672      	cpsid	i
}
 8000f22:	bf00      	nop

	/* 1. Activamos la señal de reloj que viene desde el bus al que pertenece el periférico.
	 * Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6)
	 */
	/*1.1 Configuramos el USART1*/
	if(ptrUsartHandler -> ptrUSARTx == USART1){
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a8c      	ldr	r2, [pc, #560]	; (800115c <USART_Config+0x244>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d106      	bne.n	8000f3c <USART_Config+0x24>
		// Escribimos 1 (SET) en la posición correspondiente al USART1
		RCC -> APB2ENR |= (RCC_APB2ENR_USART1EN);
 8000f2e:	4b8c      	ldr	r3, [pc, #560]	; (8001160 <USART_Config+0x248>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	4a8b      	ldr	r2, [pc, #556]	; (8001160 <USART_Config+0x248>)
 8000f34:	f043 0310 	orr.w	r3, r3, #16
 8000f38:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3a:	e016      	b.n	8000f6a <USART_Config+0x52>
	}
	/*1.2 Configuramos el USART2*/
	else if(ptrUsartHandler -> ptrUSARTx == USART2){
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a88      	ldr	r2, [pc, #544]	; (8001164 <USART_Config+0x24c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d106      	bne.n	8000f54 <USART_Config+0x3c>
		// Escribimos 1 (SET) en la posición correspondiente al USART1
		RCC -> APB1ENR |= (RCC_APB1ENR_USART2EN);
 8000f46:	4b86      	ldr	r3, [pc, #536]	; (8001160 <USART_Config+0x248>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	4a85      	ldr	r2, [pc, #532]	; (8001160 <USART_Config+0x248>)
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f50:	6413      	str	r3, [r2, #64]	; 0x40
 8000f52:	e00a      	b.n	8000f6a <USART_Config+0x52>
	}
	/*1.3 Configuramos el USART6*/
	else if(ptrUsartHandler -> ptrUSARTx == USART6){
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a83      	ldr	r2, [pc, #524]	; (8001168 <USART_Config+0x250>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d105      	bne.n	8000f6a <USART_Config+0x52>
		// Escribimos 1 (SET) en la posición correspondiente al USART1
		RCC -> APB2ENR |= (RCC_APB2ENR_USART6EN);
 8000f5e:	4b80      	ldr	r3, [pc, #512]	; (8001160 <USART_Config+0x248>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	4a7f      	ldr	r2, [pc, #508]	; (8001160 <USART_Config+0x248>)
 8000f64:	f043 0320 	orr.w	r3, r3, #32
 8000f68:	6453      	str	r3, [r2, #68]	; 0x44
	 * Configuramos el modo: only TX, only RX, o RXTX
	 * Por último activamos el modulo USART cuando todo está correctamente configurado
	 * */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero.
	ptrUsartHandler -> ptrUSARTx -> CR1 = 0;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
	ptrUsartHandler -> ptrUSARTx -> CR2 = 0;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]

	// 2.2 Configuración del Parity:
	// Verificamos si el parity está activado o no
	if(ptrUsartHandler -> USART_Config.USART_parity != USART_PARITY_NONE){
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	79db      	ldrb	r3, [r3, #7]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d02b      	beq.n	8000fda <USART_Config+0xc2>

		// Verificamos si se ha seleccionado ODD or EVEN

		//Se selecciona EVEN
		if(ptrUsartHandler -> USART_Config.USART_parity == USART_PARITY_EVEN){
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	79db      	ldrb	r3, [r3, #7]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d113      	bne.n	8000fb2 <USART_Config+0x9a>
			//Ponemos 0b0 en la posicion 9 del registo CR1 para escoger Even
			ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_PS);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f98:	60da      	str	r2, [r3, #12]

			// Además, se seleccionan 9 bits.
			ptrUsartHandler -> USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	719a      	strb	r2, [r3, #6]
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	68da      	ldr	r2, [r3, #12]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	e01b      	b.n	8000fea <USART_Config+0xd2>
		}
		//Se selecciona ODD
		else{
			//Ponemos 0b1 en la posicion 9 del registo CR1 para escoger Even
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_PS);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	68da      	ldr	r2, [r3, #12]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fc0:	60da      	str	r2, [r3, #12]

			// Además, se seleccionan 9 bits.
			ptrUsartHandler -> USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	719a      	strb	r2, [r3, #6]
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	68da      	ldr	r2, [r3, #12]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	e007      	b.n	8000fea <USART_Config+0xd2>
		}
	}
	//No deseamos activar el parity-check
	else{
		//Ponemos 0b0 en la posicion 10 del registro CR1 para desactivar el Parity
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_PCE);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68da      	ldr	r2, [r3, #12]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fe8:	60da      	str	r2, [r3, #12]

	// 2.3 Configuramos el tamaño del dato:

	//Verificamos si va a ser de 8 o 9 bits

	if(ptrUsartHandler -> USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	799b      	ldrb	r3, [r3, #6]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d108      	bne.n	8001004 <USART_Config+0xec>
		//Ponemos 0b0 en la posicion 12 del registro CR1 para escoger 8 bits
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_M);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	e007      	b.n	8001014 <USART_Config+0xfc>
	}else{
		//Ponemos 0b1 en la posicion 12 del registro CR1 para escoger 9 bits
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	68da      	ldr	r2, [r3, #12]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001012:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)

	switch(ptrUsartHandler -> USART_Config.USART_stopbits){
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7a1b      	ldrb	r3, [r3, #8]
 8001018:	2b03      	cmp	r3, #3
 800101a:	d847      	bhi.n	80010ac <USART_Config+0x194>
 800101c:	a201      	add	r2, pc, #4	; (adr r2, 8001024 <USART_Config+0x10c>)
 800101e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001022:	bf00      	nop
 8001024:	08001035 	.word	0x08001035
 8001028:	08001047 	.word	0x08001047
 800102c:	08001069 	.word	0x08001069
 8001030:	0800108b 	.word	0x0800108b
	case USART_STOPBIT_1: {
		//Cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	691a      	ldr	r2, [r3, #16]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001042:	611a      	str	r2, [r3, #16]
		break;
 8001044:	e03b      	b.n	80010be <USART_Config+0x1a6>
	}
	case USART_STOPBIT_0_5:{
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	691a      	ldr	r2, [r3, #16]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001054:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b01 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP_0);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	691a      	ldr	r2, [r3, #16]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001064:	611a      	str	r2, [r3, #16]
		break;
 8001066:	e02a      	b.n	80010be <USART_Config+0x1a6>
	}
	case USART_STOPBIT_2:{
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	691a      	ldr	r2, [r3, #16]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001076:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b10 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP_1);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	691a      	ldr	r2, [r3, #16]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001086:	611a      	str	r2, [r3, #16]
		break;
 8001088:	e019      	b.n	80010be <USART_Config+0x1a6>
	}
	case USART_STOPBIT_1_5: {
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	691a      	ldr	r2, [r3, #16]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001098:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b11 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	691a      	ldr	r2, [r3, #16]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80010a8:	611a      	str	r2, [r3, #16]
		break;
 80010aa:	e008      	b.n	80010be <USART_Config+0x1a6>
	}
	default:{
		//Cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	691a      	ldr	r2, [r3, #16]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80010ba:	611a      	str	r2, [r3, #16]
		break;
 80010bc:	bf00      	nop
	}
	}

	// 2.4 Configuración del Baudrate (SFR USART_BRR)
	// Ver tabla de valores (Tabla 75), Frec = 16MHz, overr = 0;
	if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	795b      	ldrb	r3, [r3, #5]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d105      	bne.n	80010d2 <USART_Config+0x1ba>
		// El valor a cargar es 104.1875 -> Mantiza = 104, fraction = 0.1875
		// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
		// Valor a cargar 0x683
		// Configurando el Baudrate generator para una velocidad de 9600bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0683;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f240 6283 	movw	r2, #1667	; 0x683
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	e011      	b.n	80010f6 <USART_Config+0x1de>
	}

	else if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_19200){
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	795b      	ldrb	r3, [r3, #5]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d105      	bne.n	80010e6 <USART_Config+0x1ce>
		// El valor a cargar es 52.0625 -> Mantiza = 52, fraction = 0.0625
		// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
		// Valor a cargar 0x0341
		// Configurando el Baudrate generator para una velocidad de 19200bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0341;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f240 3241 	movw	r2, #833	; 0x341
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	e007      	b.n	80010f6 <USART_Config+0x1de>
	}

	else if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_115200){	//**************************************DUDAAAAAA
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	795b      	ldrb	r3, [r3, #5]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d103      	bne.n	80010f6 <USART_Config+0x1de>
		// El valor a cargar es 8.6875 -> Mantiza = 8, fraction = 0.6875
		// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11
		// Valor a cargar 0x0081
		// Configurando el Baudrate generator para una velocidad de 115200bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0081;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2281      	movs	r2, #129	; 0x81
 80010f4:	609a      	str	r2, [r3, #8]
	}

	// 2.5 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler -> USART_Config.USART_mode){
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	791b      	ldrb	r3, [r3, #4]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d847      	bhi.n	800118e <USART_Config+0x276>
 80010fe:	a201      	add	r2, pc, #4	; (adr r2, 8001104 <USART_Config+0x1ec>)
 8001100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001104:	08001115 	.word	0x08001115
 8001108:	08001127 	.word	0x08001127
 800110c:	08001139 	.word	0x08001139
 8001110:	0800116d 	.word	0x0800116d
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		//Cargamos el valor 0b1 en el bit TE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TE);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	68da      	ldr	r2, [r3, #12]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 0208 	orr.w	r2, r2, #8
 8001122:	60da      	str	r2, [r3, #12]
		break;
 8001124:	e044      	b.n	80011b0 <USART_Config+0x298>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		//Cargamos el valor 0b1 en el bit RE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RE);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f042 0204 	orr.w	r2, r2, #4
 8001134:	60da      	str	r2, [r3, #12]
		break;
 8001136:	e03b      	b.n	80011b0 <USART_Config+0x298>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmisión como recepción
		//Cargamos el valor 0b1 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TE);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	68da      	ldr	r2, [r3, #12]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f042 0208 	orr.w	r2, r2, #8
 8001146:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RE);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68da      	ldr	r2, [r3, #12]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 0204 	orr.w	r2, r2, #4
 8001156:	60da      	str	r2, [r3, #12]
		break;
 8001158:	e02a      	b.n	80011b0 <USART_Config+0x298>
 800115a:	bf00      	nop
 800115c:	40011000 	.word	0x40011000
 8001160:	40023800 	.word	0x40023800
 8001164:	40004400 	.word	0x40004400
 8001168:	40011400 	.word	0x40011400
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		//Cargamos el valor 0b0 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TE);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	68da      	ldr	r2, [r3, #12]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f022 0208 	bic.w	r2, r2, #8
 800117a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RE);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0204 	bic.w	r2, r2, #4
 800118a:	60da      	str	r2, [r3, #12]
		break;
 800118c:	e010      	b.n	80011b0 <USART_Config+0x298>
	}
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		//Cargamos el valor 0b0 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TE);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68da      	ldr	r2, [r3, #12]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0208 	bic.w	r2, r2, #8
 800119c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RE);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68da      	ldr	r2, [r3, #12]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0204 	bic.w	r2, r2, #4
 80011ac:	60da      	str	r2, [r3, #12]
		break;
 80011ae:	bf00      	nop
	}
	}

	// 2.6 Activamos el modulo serial.

	if(ptrUsartHandler -> USART_Config.USART_mode != USART_MODE_DISABLE){
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	791b      	ldrb	r3, [r3, #4]
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d007      	beq.n	80011c8 <USART_Config+0x2b0>
		//Cargamos el valor de 0b1 en el bit UE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_UE);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68da      	ldr	r2, [r3, #12]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80011c6:	60da      	str	r2, [r3, #12]
	}

	// 3. Activamos la interrupción para el USART

	switch(ptrUsartHandler -> USART_Config.USART_interrupt){
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7a5b      	ldrb	r3, [r3, #9]
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d84f      	bhi.n	8001270 <USART_Config+0x358>
 80011d0:	a201      	add	r2, pc, #4	; (adr r2, 80011d8 <USART_Config+0x2c0>)
 80011d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d6:	bf00      	nop
 80011d8:	080011e9 	.word	0x080011e9
 80011dc:	0800120b 	.word	0x0800120b
 80011e0:	0800122d 	.word	0x0800122d
 80011e4:	0800124f 	.word	0x0800124f
	// Analizamos los
	case USART_INTERRUPT_RX_ENABLE:
	{
		// Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RXNEIE);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f042 0220 	orr.w	r2, r2, #32
 80011f6:	60da      	str	r2, [r3, #12]
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001206:	60da      	str	r2, [r3, #12]
		break;
 8001208:	e043      	b.n	8001292 <USART_Config+0x37a>
	}
	case USART_INTERRUPT_TX_ENABLE:
	{
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68da      	ldr	r2, [r3, #12]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001218:	60da      	str	r2, [r3, #12]
		// NO Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RXNEIE);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68da      	ldr	r2, [r3, #12]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 0220 	bic.w	r2, r2, #32
 8001228:	60da      	str	r2, [r3, #12]
		break;
 800122a:	e032      	b.n	8001292 <USART_Config+0x37a>

	}
	case USART_INTERRUPT_RXTX_ENABLE:
	{
		// Activamos las dos interrupciones tanto del RX como del TX
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TXEIE);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68da      	ldr	r2, [r3, #12]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800123a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800124a:	60da      	str	r2, [r3, #12]
		break;
 800124c:	e021      	b.n	8001292 <USART_Config+0x37a>
	}
	case USART_INTERRUPT_RXTX_DISABLE:
	{
		// Activamos las dos interrupciones tanto del RX como del TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	68da      	ldr	r2, [r3, #12]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800125c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800126c:	60da      	str	r2, [r3, #12]
		break;
 800126e:	e010      	b.n	8001292 <USART_Config+0x37a>
	}

	default:
	{
		// NO Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RXNEIE);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68da      	ldr	r2, [r3, #12]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0220 	bic.w	r2, r2, #32
 800127e:	60da      	str	r2, [r3, #12]
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	68da      	ldr	r2, [r3, #12]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800128e:	60da      	str	r2, [r3, #12]
		break;
 8001290:	bf00      	nop
	}
	}

	// 4. Activamos la señal de la interrupción en el NVIC

	if((ptrUsartHandler -> USART_Config.USART_interrupt == USART_INTERRUPT_RX_ENABLE) | (ptrUsartHandler -> USART_Config.USART_interrupt == USART_INTERRUPT_TX_ENABLE))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	7a5b      	ldrb	r3, [r3, #9]
 8001296:	2b00      	cmp	r3, #0
 8001298:	bf0c      	ite	eq
 800129a:	2301      	moveq	r3, #1
 800129c:	2300      	movne	r3, #0
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	7a5b      	ldrb	r3, [r3, #9]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	bf0c      	ite	eq
 80012a8:	2301      	moveq	r3, #1
 80012aa:	2300      	movne	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	4313      	orrs	r3, r2
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d019      	beq.n	80012ea <USART_Config+0x3d2>
	{

		if(ptrUsartHandler -> ptrUSARTx == USART1){
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <USART_Config+0x3e0>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d103      	bne.n	80012c8 <USART_Config+0x3b0>
			// Activamos la IRQ del USART1
			__NVIC_EnableIRQ(USART1_IRQn);
 80012c0:	2025      	movs	r0, #37	; 0x25
 80012c2:	f7ff fe0d 	bl	8000ee0 <__NVIC_EnableIRQ>
 80012c6:	e010      	b.n	80012ea <USART_Config+0x3d2>

		}else if(ptrUsartHandler -> ptrUSARTx == USART2){
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <USART_Config+0x3e4>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d103      	bne.n	80012da <USART_Config+0x3c2>
			// Activamos la IRQ del USART2
			__NVIC_EnableIRQ(USART2_IRQn);
 80012d2:	2026      	movs	r0, #38	; 0x26
 80012d4:	f7ff fe04 	bl	8000ee0 <__NVIC_EnableIRQ>
 80012d8:	e007      	b.n	80012ea <USART_Config+0x3d2>

		}else if(ptrUsartHandler -> ptrUSARTx == USART6){
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a08      	ldr	r2, [pc, #32]	; (8001300 <USART_Config+0x3e8>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d102      	bne.n	80012ea <USART_Config+0x3d2>
			// Activamos la IRQ del USART6
			__NVIC_EnableIRQ(USART6_IRQn);
 80012e4:	2047      	movs	r0, #71	; 0x47
 80012e6:	f7ff fdfb 	bl	8000ee0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80012ea:	b662      	cpsie	i
}
 80012ec:	bf00      	nop
		}

	// 5. Activamos de nuevo todas las interrupciones

	__enable_irq();
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40011000 	.word	0x40011000
 80012fc:	40004400 	.word	0x40004400
 8001300:	40011400 	.word	0x40011400

08001304 <USART1_Callback>:

//**********//  CallBacks //**********//

// Callback USART1
__attribute__((weak)) void USART1_Callback(void){
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
	__NOP();
 8001308:	bf00      	nop
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr

08001312 <USART6_Callback>:
__attribute__((weak)) void USART2_Callback(void){
	__NOP();
}

// Callback USART6
__attribute__((weak)) void USART6_Callback(void){
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
	__NOP();
 8001316:	bf00      	nop
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <USART1_IRQHandler>:

// Hay que hacer dos cosas: 1) Atender la interrupción. 2) Llamamos al Callback
/* Rutina de atención a la interrupción del USART */

void USART1_IRQHandler(void){
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0

	USART1 -> SR &= ~(USART_SR_RXNE);		// Bajamos la bandera manualmente
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <USART1_IRQHandler+0x18>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a03      	ldr	r2, [pc, #12]	; (8001338 <USART1_IRQHandler+0x18>)
 800132a:	f023 0320 	bic.w	r3, r3, #32
 800132e:	6013      	str	r3, [r2, #0]

	USART1_Callback();
 8001330:	f7ff ffe8 	bl	8001304 <USART1_Callback>
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40011000 	.word	0x40011000

0800133c <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	USART2 -> SR &= ~(USART_SR_RXNE);		// Desactivamos la bandera manualmente para el RX
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <USART2_IRQHandler+0x24>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a06      	ldr	r2, [pc, #24]	; (8001360 <USART2_IRQHandler+0x24>)
 8001346:	f023 0320 	bic.w	r3, r3, #32
 800134a:	6013      	str	r3, [r2, #0]

	data = (USART2 -> DR);
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <USART2_IRQHandler+0x24>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b04      	ldr	r3, [pc, #16]	; (8001364 <USART2_IRQHandler+0x28>)
 8001354:	701a      	strb	r2, [r3, #0]

	USART2_Callback();
 8001356:	f7ff f8a1 	bl	800049c <USART2_Callback>

	//USART2 -> SR &= ~(USART_SR_TXE);		// Desactivamos la bandera para el TX
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40004400 	.word	0x40004400
 8001364:	200001aa 	.word	0x200001aa

08001368 <USART6_IRQHandler>:

void USART6_IRQHandler(void){
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	USART6 -> SR &= ~(USART_SR_RXNE);
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <USART6_IRQHandler+0x18>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a03      	ldr	r2, [pc, #12]	; (8001380 <USART6_IRQHandler+0x18>)
 8001372:	f023 0320 	bic.w	r3, r3, #32
 8001376:	6013      	str	r3, [r2, #0]
	USART6_Callback();
 8001378:	f7ff ffcb 	bl	8001312 <USART6_Callback>
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40011400 	.word	0x40011400

08001384 <returnData>:
	dataToRead = ((char) (ptrUsartHandler -> ptrUSARTx -> DR));
	return dataToRead;

}

uint8_t returnData(void){
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
	return data;				// Devolvemos el valor
 8001388:	4b02      	ldr	r3, [pc, #8]	; (8001394 <returnData+0x10>)
 800138a:	781b      	ldrb	r3, [r3, #0]
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	200001aa 	.word	0x200001aa

08001398 <writeChar>:

//**********// Función para escribir un solo char //**********//

int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend){
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
	while(!(ptrUsartHandler -> ptrUSARTx -> SR & USART_SR_TXE)){
 80013a2:	e000      	b.n	80013a6 <writeChar+0xe>
		__NOP();
 80013a4:	bf00      	nop
	while(!(ptrUsartHandler -> ptrUSARTx -> SR & USART_SR_TXE)){
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0f7      	beq.n	80013a4 <writeChar+0xc>
	// Permitimos la bandera del TX para el USART2
	//ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TXEIE);
	//USART2 -> SR |= (USART_SR_TXE);

	//Cargamos el valor de dataToSend en el USER DATA Register
	ptrUsartHandler -> ptrUSARTx -> DR = (dataToSend);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	605a      	str	r2, [r3, #4]

	//ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
	//USART2 -> SR &= ~(USART_SR_TXE);		// Desactivamos la bandera para el TX
	return dataToSend;
 80013bc:	683b      	ldr	r3, [r7, #0]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <writeMsg>:

/* Función para escribir un mensaje */

void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
	while(*msgToSend != '\0'){
 80013d2:	e008      	b.n	80013e6 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ffdc 	bl	8001398 <writeChar>
		msgToSend++;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	3301      	adds	r3, #1
 80013e4:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f2      	bne.n	80013d4 <writeMsg+0xc>
	}
}
 80013ee:	bf00      	nop
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <__errno>:
 80013f8:	4b01      	ldr	r3, [pc, #4]	; (8001400 <__errno+0x8>)
 80013fa:	6818      	ldr	r0, [r3, #0]
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000000 	.word	0x20000000

08001404 <__libc_init_array>:
 8001404:	b570      	push	{r4, r5, r6, lr}
 8001406:	4d0d      	ldr	r5, [pc, #52]	; (800143c <__libc_init_array+0x38>)
 8001408:	4c0d      	ldr	r4, [pc, #52]	; (8001440 <__libc_init_array+0x3c>)
 800140a:	1b64      	subs	r4, r4, r5
 800140c:	10a4      	asrs	r4, r4, #2
 800140e:	2600      	movs	r6, #0
 8001410:	42a6      	cmp	r6, r4
 8001412:	d109      	bne.n	8001428 <__libc_init_array+0x24>
 8001414:	4d0b      	ldr	r5, [pc, #44]	; (8001444 <__libc_init_array+0x40>)
 8001416:	4c0c      	ldr	r4, [pc, #48]	; (8001448 <__libc_init_array+0x44>)
 8001418:	f000 fc84 	bl	8001d24 <_init>
 800141c:	1b64      	subs	r4, r4, r5
 800141e:	10a4      	asrs	r4, r4, #2
 8001420:	2600      	movs	r6, #0
 8001422:	42a6      	cmp	r6, r4
 8001424:	d105      	bne.n	8001432 <__libc_init_array+0x2e>
 8001426:	bd70      	pop	{r4, r5, r6, pc}
 8001428:	f855 3b04 	ldr.w	r3, [r5], #4
 800142c:	4798      	blx	r3
 800142e:	3601      	adds	r6, #1
 8001430:	e7ee      	b.n	8001410 <__libc_init_array+0xc>
 8001432:	f855 3b04 	ldr.w	r3, [r5], #4
 8001436:	4798      	blx	r3
 8001438:	3601      	adds	r6, #1
 800143a:	e7f2      	b.n	8001422 <__libc_init_array+0x1e>
 800143c:	08001d80 	.word	0x08001d80
 8001440:	08001d80 	.word	0x08001d80
 8001444:	08001d80 	.word	0x08001d80
 8001448:	08001d84 	.word	0x08001d84

0800144c <siprintf>:
 800144c:	b40e      	push	{r1, r2, r3}
 800144e:	b500      	push	{lr}
 8001450:	b09c      	sub	sp, #112	; 0x70
 8001452:	ab1d      	add	r3, sp, #116	; 0x74
 8001454:	9002      	str	r0, [sp, #8]
 8001456:	9006      	str	r0, [sp, #24]
 8001458:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800145c:	4809      	ldr	r0, [pc, #36]	; (8001484 <siprintf+0x38>)
 800145e:	9107      	str	r1, [sp, #28]
 8001460:	9104      	str	r1, [sp, #16]
 8001462:	4909      	ldr	r1, [pc, #36]	; (8001488 <siprintf+0x3c>)
 8001464:	f853 2b04 	ldr.w	r2, [r3], #4
 8001468:	9105      	str	r1, [sp, #20]
 800146a:	6800      	ldr	r0, [r0, #0]
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	a902      	add	r1, sp, #8
 8001470:	f000 f868 	bl	8001544 <_svfiprintf_r>
 8001474:	9b02      	ldr	r3, [sp, #8]
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
 800147a:	b01c      	add	sp, #112	; 0x70
 800147c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001480:	b003      	add	sp, #12
 8001482:	4770      	bx	lr
 8001484:	20000000 	.word	0x20000000
 8001488:	ffff0208 	.word	0xffff0208

0800148c <__ssputs_r>:
 800148c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001490:	688e      	ldr	r6, [r1, #8]
 8001492:	429e      	cmp	r6, r3
 8001494:	4682      	mov	sl, r0
 8001496:	460c      	mov	r4, r1
 8001498:	4690      	mov	r8, r2
 800149a:	461f      	mov	r7, r3
 800149c:	d838      	bhi.n	8001510 <__ssputs_r+0x84>
 800149e:	898a      	ldrh	r2, [r1, #12]
 80014a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80014a4:	d032      	beq.n	800150c <__ssputs_r+0x80>
 80014a6:	6825      	ldr	r5, [r4, #0]
 80014a8:	6909      	ldr	r1, [r1, #16]
 80014aa:	eba5 0901 	sub.w	r9, r5, r1
 80014ae:	6965      	ldr	r5, [r4, #20]
 80014b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80014b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80014b8:	3301      	adds	r3, #1
 80014ba:	444b      	add	r3, r9
 80014bc:	106d      	asrs	r5, r5, #1
 80014be:	429d      	cmp	r5, r3
 80014c0:	bf38      	it	cc
 80014c2:	461d      	movcc	r5, r3
 80014c4:	0553      	lsls	r3, r2, #21
 80014c6:	d531      	bpl.n	800152c <__ssputs_r+0xa0>
 80014c8:	4629      	mov	r1, r5
 80014ca:	f000 fb61 	bl	8001b90 <_malloc_r>
 80014ce:	4606      	mov	r6, r0
 80014d0:	b950      	cbnz	r0, 80014e8 <__ssputs_r+0x5c>
 80014d2:	230c      	movs	r3, #12
 80014d4:	f8ca 3000 	str.w	r3, [sl]
 80014d8:	89a3      	ldrh	r3, [r4, #12]
 80014da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014de:	81a3      	strh	r3, [r4, #12]
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014e8:	6921      	ldr	r1, [r4, #16]
 80014ea:	464a      	mov	r2, r9
 80014ec:	f000 fabe 	bl	8001a6c <memcpy>
 80014f0:	89a3      	ldrh	r3, [r4, #12]
 80014f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80014f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014fa:	81a3      	strh	r3, [r4, #12]
 80014fc:	6126      	str	r6, [r4, #16]
 80014fe:	6165      	str	r5, [r4, #20]
 8001500:	444e      	add	r6, r9
 8001502:	eba5 0509 	sub.w	r5, r5, r9
 8001506:	6026      	str	r6, [r4, #0]
 8001508:	60a5      	str	r5, [r4, #8]
 800150a:	463e      	mov	r6, r7
 800150c:	42be      	cmp	r6, r7
 800150e:	d900      	bls.n	8001512 <__ssputs_r+0x86>
 8001510:	463e      	mov	r6, r7
 8001512:	6820      	ldr	r0, [r4, #0]
 8001514:	4632      	mov	r2, r6
 8001516:	4641      	mov	r1, r8
 8001518:	f000 fab6 	bl	8001a88 <memmove>
 800151c:	68a3      	ldr	r3, [r4, #8]
 800151e:	1b9b      	subs	r3, r3, r6
 8001520:	60a3      	str	r3, [r4, #8]
 8001522:	6823      	ldr	r3, [r4, #0]
 8001524:	4433      	add	r3, r6
 8001526:	6023      	str	r3, [r4, #0]
 8001528:	2000      	movs	r0, #0
 800152a:	e7db      	b.n	80014e4 <__ssputs_r+0x58>
 800152c:	462a      	mov	r2, r5
 800152e:	f000 fba3 	bl	8001c78 <_realloc_r>
 8001532:	4606      	mov	r6, r0
 8001534:	2800      	cmp	r0, #0
 8001536:	d1e1      	bne.n	80014fc <__ssputs_r+0x70>
 8001538:	6921      	ldr	r1, [r4, #16]
 800153a:	4650      	mov	r0, sl
 800153c:	f000 fabe 	bl	8001abc <_free_r>
 8001540:	e7c7      	b.n	80014d2 <__ssputs_r+0x46>
	...

08001544 <_svfiprintf_r>:
 8001544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001548:	4698      	mov	r8, r3
 800154a:	898b      	ldrh	r3, [r1, #12]
 800154c:	061b      	lsls	r3, r3, #24
 800154e:	b09d      	sub	sp, #116	; 0x74
 8001550:	4607      	mov	r7, r0
 8001552:	460d      	mov	r5, r1
 8001554:	4614      	mov	r4, r2
 8001556:	d50e      	bpl.n	8001576 <_svfiprintf_r+0x32>
 8001558:	690b      	ldr	r3, [r1, #16]
 800155a:	b963      	cbnz	r3, 8001576 <_svfiprintf_r+0x32>
 800155c:	2140      	movs	r1, #64	; 0x40
 800155e:	f000 fb17 	bl	8001b90 <_malloc_r>
 8001562:	6028      	str	r0, [r5, #0]
 8001564:	6128      	str	r0, [r5, #16]
 8001566:	b920      	cbnz	r0, 8001572 <_svfiprintf_r+0x2e>
 8001568:	230c      	movs	r3, #12
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	f04f 30ff 	mov.w	r0, #4294967295
 8001570:	e0d1      	b.n	8001716 <_svfiprintf_r+0x1d2>
 8001572:	2340      	movs	r3, #64	; 0x40
 8001574:	616b      	str	r3, [r5, #20]
 8001576:	2300      	movs	r3, #0
 8001578:	9309      	str	r3, [sp, #36]	; 0x24
 800157a:	2320      	movs	r3, #32
 800157c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001580:	f8cd 800c 	str.w	r8, [sp, #12]
 8001584:	2330      	movs	r3, #48	; 0x30
 8001586:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001730 <_svfiprintf_r+0x1ec>
 800158a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800158e:	f04f 0901 	mov.w	r9, #1
 8001592:	4623      	mov	r3, r4
 8001594:	469a      	mov	sl, r3
 8001596:	f813 2b01 	ldrb.w	r2, [r3], #1
 800159a:	b10a      	cbz	r2, 80015a0 <_svfiprintf_r+0x5c>
 800159c:	2a25      	cmp	r2, #37	; 0x25
 800159e:	d1f9      	bne.n	8001594 <_svfiprintf_r+0x50>
 80015a0:	ebba 0b04 	subs.w	fp, sl, r4
 80015a4:	d00b      	beq.n	80015be <_svfiprintf_r+0x7a>
 80015a6:	465b      	mov	r3, fp
 80015a8:	4622      	mov	r2, r4
 80015aa:	4629      	mov	r1, r5
 80015ac:	4638      	mov	r0, r7
 80015ae:	f7ff ff6d 	bl	800148c <__ssputs_r>
 80015b2:	3001      	adds	r0, #1
 80015b4:	f000 80aa 	beq.w	800170c <_svfiprintf_r+0x1c8>
 80015b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80015ba:	445a      	add	r2, fp
 80015bc:	9209      	str	r2, [sp, #36]	; 0x24
 80015be:	f89a 3000 	ldrb.w	r3, [sl]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 80a2 	beq.w	800170c <_svfiprintf_r+0x1c8>
 80015c8:	2300      	movs	r3, #0
 80015ca:	f04f 32ff 	mov.w	r2, #4294967295
 80015ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80015d2:	f10a 0a01 	add.w	sl, sl, #1
 80015d6:	9304      	str	r3, [sp, #16]
 80015d8:	9307      	str	r3, [sp, #28]
 80015da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80015de:	931a      	str	r3, [sp, #104]	; 0x68
 80015e0:	4654      	mov	r4, sl
 80015e2:	2205      	movs	r2, #5
 80015e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015e8:	4851      	ldr	r0, [pc, #324]	; (8001730 <_svfiprintf_r+0x1ec>)
 80015ea:	f7fe fdf9 	bl	80001e0 <memchr>
 80015ee:	9a04      	ldr	r2, [sp, #16]
 80015f0:	b9d8      	cbnz	r0, 800162a <_svfiprintf_r+0xe6>
 80015f2:	06d0      	lsls	r0, r2, #27
 80015f4:	bf44      	itt	mi
 80015f6:	2320      	movmi	r3, #32
 80015f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80015fc:	0711      	lsls	r1, r2, #28
 80015fe:	bf44      	itt	mi
 8001600:	232b      	movmi	r3, #43	; 0x2b
 8001602:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001606:	f89a 3000 	ldrb.w	r3, [sl]
 800160a:	2b2a      	cmp	r3, #42	; 0x2a
 800160c:	d015      	beq.n	800163a <_svfiprintf_r+0xf6>
 800160e:	9a07      	ldr	r2, [sp, #28]
 8001610:	4654      	mov	r4, sl
 8001612:	2000      	movs	r0, #0
 8001614:	f04f 0c0a 	mov.w	ip, #10
 8001618:	4621      	mov	r1, r4
 800161a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800161e:	3b30      	subs	r3, #48	; 0x30
 8001620:	2b09      	cmp	r3, #9
 8001622:	d94e      	bls.n	80016c2 <_svfiprintf_r+0x17e>
 8001624:	b1b0      	cbz	r0, 8001654 <_svfiprintf_r+0x110>
 8001626:	9207      	str	r2, [sp, #28]
 8001628:	e014      	b.n	8001654 <_svfiprintf_r+0x110>
 800162a:	eba0 0308 	sub.w	r3, r0, r8
 800162e:	fa09 f303 	lsl.w	r3, r9, r3
 8001632:	4313      	orrs	r3, r2
 8001634:	9304      	str	r3, [sp, #16]
 8001636:	46a2      	mov	sl, r4
 8001638:	e7d2      	b.n	80015e0 <_svfiprintf_r+0x9c>
 800163a:	9b03      	ldr	r3, [sp, #12]
 800163c:	1d19      	adds	r1, r3, #4
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	9103      	str	r1, [sp, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	bfbb      	ittet	lt
 8001646:	425b      	neglt	r3, r3
 8001648:	f042 0202 	orrlt.w	r2, r2, #2
 800164c:	9307      	strge	r3, [sp, #28]
 800164e:	9307      	strlt	r3, [sp, #28]
 8001650:	bfb8      	it	lt
 8001652:	9204      	strlt	r2, [sp, #16]
 8001654:	7823      	ldrb	r3, [r4, #0]
 8001656:	2b2e      	cmp	r3, #46	; 0x2e
 8001658:	d10c      	bne.n	8001674 <_svfiprintf_r+0x130>
 800165a:	7863      	ldrb	r3, [r4, #1]
 800165c:	2b2a      	cmp	r3, #42	; 0x2a
 800165e:	d135      	bne.n	80016cc <_svfiprintf_r+0x188>
 8001660:	9b03      	ldr	r3, [sp, #12]
 8001662:	1d1a      	adds	r2, r3, #4
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	9203      	str	r2, [sp, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	bfb8      	it	lt
 800166c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001670:	3402      	adds	r4, #2
 8001672:	9305      	str	r3, [sp, #20]
 8001674:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001734 <_svfiprintf_r+0x1f0>
 8001678:	7821      	ldrb	r1, [r4, #0]
 800167a:	2203      	movs	r2, #3
 800167c:	4650      	mov	r0, sl
 800167e:	f7fe fdaf 	bl	80001e0 <memchr>
 8001682:	b140      	cbz	r0, 8001696 <_svfiprintf_r+0x152>
 8001684:	2340      	movs	r3, #64	; 0x40
 8001686:	eba0 000a 	sub.w	r0, r0, sl
 800168a:	fa03 f000 	lsl.w	r0, r3, r0
 800168e:	9b04      	ldr	r3, [sp, #16]
 8001690:	4303      	orrs	r3, r0
 8001692:	3401      	adds	r4, #1
 8001694:	9304      	str	r3, [sp, #16]
 8001696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800169a:	4827      	ldr	r0, [pc, #156]	; (8001738 <_svfiprintf_r+0x1f4>)
 800169c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80016a0:	2206      	movs	r2, #6
 80016a2:	f7fe fd9d 	bl	80001e0 <memchr>
 80016a6:	2800      	cmp	r0, #0
 80016a8:	d038      	beq.n	800171c <_svfiprintf_r+0x1d8>
 80016aa:	4b24      	ldr	r3, [pc, #144]	; (800173c <_svfiprintf_r+0x1f8>)
 80016ac:	bb1b      	cbnz	r3, 80016f6 <_svfiprintf_r+0x1b2>
 80016ae:	9b03      	ldr	r3, [sp, #12]
 80016b0:	3307      	adds	r3, #7
 80016b2:	f023 0307 	bic.w	r3, r3, #7
 80016b6:	3308      	adds	r3, #8
 80016b8:	9303      	str	r3, [sp, #12]
 80016ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016bc:	4433      	add	r3, r6
 80016be:	9309      	str	r3, [sp, #36]	; 0x24
 80016c0:	e767      	b.n	8001592 <_svfiprintf_r+0x4e>
 80016c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80016c6:	460c      	mov	r4, r1
 80016c8:	2001      	movs	r0, #1
 80016ca:	e7a5      	b.n	8001618 <_svfiprintf_r+0xd4>
 80016cc:	2300      	movs	r3, #0
 80016ce:	3401      	adds	r4, #1
 80016d0:	9305      	str	r3, [sp, #20]
 80016d2:	4619      	mov	r1, r3
 80016d4:	f04f 0c0a 	mov.w	ip, #10
 80016d8:	4620      	mov	r0, r4
 80016da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80016de:	3a30      	subs	r2, #48	; 0x30
 80016e0:	2a09      	cmp	r2, #9
 80016e2:	d903      	bls.n	80016ec <_svfiprintf_r+0x1a8>
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0c5      	beq.n	8001674 <_svfiprintf_r+0x130>
 80016e8:	9105      	str	r1, [sp, #20]
 80016ea:	e7c3      	b.n	8001674 <_svfiprintf_r+0x130>
 80016ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80016f0:	4604      	mov	r4, r0
 80016f2:	2301      	movs	r3, #1
 80016f4:	e7f0      	b.n	80016d8 <_svfiprintf_r+0x194>
 80016f6:	ab03      	add	r3, sp, #12
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	462a      	mov	r2, r5
 80016fc:	4b10      	ldr	r3, [pc, #64]	; (8001740 <_svfiprintf_r+0x1fc>)
 80016fe:	a904      	add	r1, sp, #16
 8001700:	4638      	mov	r0, r7
 8001702:	f3af 8000 	nop.w
 8001706:	1c42      	adds	r2, r0, #1
 8001708:	4606      	mov	r6, r0
 800170a:	d1d6      	bne.n	80016ba <_svfiprintf_r+0x176>
 800170c:	89ab      	ldrh	r3, [r5, #12]
 800170e:	065b      	lsls	r3, r3, #25
 8001710:	f53f af2c 	bmi.w	800156c <_svfiprintf_r+0x28>
 8001714:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001716:	b01d      	add	sp, #116	; 0x74
 8001718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800171c:	ab03      	add	r3, sp, #12
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	462a      	mov	r2, r5
 8001722:	4b07      	ldr	r3, [pc, #28]	; (8001740 <_svfiprintf_r+0x1fc>)
 8001724:	a904      	add	r1, sp, #16
 8001726:	4638      	mov	r0, r7
 8001728:	f000 f87a 	bl	8001820 <_printf_i>
 800172c:	e7eb      	b.n	8001706 <_svfiprintf_r+0x1c2>
 800172e:	bf00      	nop
 8001730:	08001d4c 	.word	0x08001d4c
 8001734:	08001d52 	.word	0x08001d52
 8001738:	08001d56 	.word	0x08001d56
 800173c:	00000000 	.word	0x00000000
 8001740:	0800148d 	.word	0x0800148d

08001744 <_printf_common>:
 8001744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001748:	4616      	mov	r6, r2
 800174a:	4699      	mov	r9, r3
 800174c:	688a      	ldr	r2, [r1, #8]
 800174e:	690b      	ldr	r3, [r1, #16]
 8001750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001754:	4293      	cmp	r3, r2
 8001756:	bfb8      	it	lt
 8001758:	4613      	movlt	r3, r2
 800175a:	6033      	str	r3, [r6, #0]
 800175c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001760:	4607      	mov	r7, r0
 8001762:	460c      	mov	r4, r1
 8001764:	b10a      	cbz	r2, 800176a <_printf_common+0x26>
 8001766:	3301      	adds	r3, #1
 8001768:	6033      	str	r3, [r6, #0]
 800176a:	6823      	ldr	r3, [r4, #0]
 800176c:	0699      	lsls	r1, r3, #26
 800176e:	bf42      	ittt	mi
 8001770:	6833      	ldrmi	r3, [r6, #0]
 8001772:	3302      	addmi	r3, #2
 8001774:	6033      	strmi	r3, [r6, #0]
 8001776:	6825      	ldr	r5, [r4, #0]
 8001778:	f015 0506 	ands.w	r5, r5, #6
 800177c:	d106      	bne.n	800178c <_printf_common+0x48>
 800177e:	f104 0a19 	add.w	sl, r4, #25
 8001782:	68e3      	ldr	r3, [r4, #12]
 8001784:	6832      	ldr	r2, [r6, #0]
 8001786:	1a9b      	subs	r3, r3, r2
 8001788:	42ab      	cmp	r3, r5
 800178a:	dc26      	bgt.n	80017da <_printf_common+0x96>
 800178c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001790:	1e13      	subs	r3, r2, #0
 8001792:	6822      	ldr	r2, [r4, #0]
 8001794:	bf18      	it	ne
 8001796:	2301      	movne	r3, #1
 8001798:	0692      	lsls	r2, r2, #26
 800179a:	d42b      	bmi.n	80017f4 <_printf_common+0xb0>
 800179c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80017a0:	4649      	mov	r1, r9
 80017a2:	4638      	mov	r0, r7
 80017a4:	47c0      	blx	r8
 80017a6:	3001      	adds	r0, #1
 80017a8:	d01e      	beq.n	80017e8 <_printf_common+0xa4>
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	68e5      	ldr	r5, [r4, #12]
 80017ae:	6832      	ldr	r2, [r6, #0]
 80017b0:	f003 0306 	and.w	r3, r3, #6
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	bf08      	it	eq
 80017b8:	1aad      	subeq	r5, r5, r2
 80017ba:	68a3      	ldr	r3, [r4, #8]
 80017bc:	6922      	ldr	r2, [r4, #16]
 80017be:	bf0c      	ite	eq
 80017c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80017c4:	2500      	movne	r5, #0
 80017c6:	4293      	cmp	r3, r2
 80017c8:	bfc4      	itt	gt
 80017ca:	1a9b      	subgt	r3, r3, r2
 80017cc:	18ed      	addgt	r5, r5, r3
 80017ce:	2600      	movs	r6, #0
 80017d0:	341a      	adds	r4, #26
 80017d2:	42b5      	cmp	r5, r6
 80017d4:	d11a      	bne.n	800180c <_printf_common+0xc8>
 80017d6:	2000      	movs	r0, #0
 80017d8:	e008      	b.n	80017ec <_printf_common+0xa8>
 80017da:	2301      	movs	r3, #1
 80017dc:	4652      	mov	r2, sl
 80017de:	4649      	mov	r1, r9
 80017e0:	4638      	mov	r0, r7
 80017e2:	47c0      	blx	r8
 80017e4:	3001      	adds	r0, #1
 80017e6:	d103      	bne.n	80017f0 <_printf_common+0xac>
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017f0:	3501      	adds	r5, #1
 80017f2:	e7c6      	b.n	8001782 <_printf_common+0x3e>
 80017f4:	18e1      	adds	r1, r4, r3
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	2030      	movs	r0, #48	; 0x30
 80017fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80017fe:	4422      	add	r2, r4
 8001800:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001804:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001808:	3302      	adds	r3, #2
 800180a:	e7c7      	b.n	800179c <_printf_common+0x58>
 800180c:	2301      	movs	r3, #1
 800180e:	4622      	mov	r2, r4
 8001810:	4649      	mov	r1, r9
 8001812:	4638      	mov	r0, r7
 8001814:	47c0      	blx	r8
 8001816:	3001      	adds	r0, #1
 8001818:	d0e6      	beq.n	80017e8 <_printf_common+0xa4>
 800181a:	3601      	adds	r6, #1
 800181c:	e7d9      	b.n	80017d2 <_printf_common+0x8e>
	...

08001820 <_printf_i>:
 8001820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001824:	7e0f      	ldrb	r7, [r1, #24]
 8001826:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001828:	2f78      	cmp	r7, #120	; 0x78
 800182a:	4691      	mov	r9, r2
 800182c:	4680      	mov	r8, r0
 800182e:	460c      	mov	r4, r1
 8001830:	469a      	mov	sl, r3
 8001832:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001836:	d807      	bhi.n	8001848 <_printf_i+0x28>
 8001838:	2f62      	cmp	r7, #98	; 0x62
 800183a:	d80a      	bhi.n	8001852 <_printf_i+0x32>
 800183c:	2f00      	cmp	r7, #0
 800183e:	f000 80d8 	beq.w	80019f2 <_printf_i+0x1d2>
 8001842:	2f58      	cmp	r7, #88	; 0x58
 8001844:	f000 80a3 	beq.w	800198e <_printf_i+0x16e>
 8001848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800184c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001850:	e03a      	b.n	80018c8 <_printf_i+0xa8>
 8001852:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001856:	2b15      	cmp	r3, #21
 8001858:	d8f6      	bhi.n	8001848 <_printf_i+0x28>
 800185a:	a101      	add	r1, pc, #4	; (adr r1, 8001860 <_printf_i+0x40>)
 800185c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001860:	080018b9 	.word	0x080018b9
 8001864:	080018cd 	.word	0x080018cd
 8001868:	08001849 	.word	0x08001849
 800186c:	08001849 	.word	0x08001849
 8001870:	08001849 	.word	0x08001849
 8001874:	08001849 	.word	0x08001849
 8001878:	080018cd 	.word	0x080018cd
 800187c:	08001849 	.word	0x08001849
 8001880:	08001849 	.word	0x08001849
 8001884:	08001849 	.word	0x08001849
 8001888:	08001849 	.word	0x08001849
 800188c:	080019d9 	.word	0x080019d9
 8001890:	080018fd 	.word	0x080018fd
 8001894:	080019bb 	.word	0x080019bb
 8001898:	08001849 	.word	0x08001849
 800189c:	08001849 	.word	0x08001849
 80018a0:	080019fb 	.word	0x080019fb
 80018a4:	08001849 	.word	0x08001849
 80018a8:	080018fd 	.word	0x080018fd
 80018ac:	08001849 	.word	0x08001849
 80018b0:	08001849 	.word	0x08001849
 80018b4:	080019c3 	.word	0x080019c3
 80018b8:	682b      	ldr	r3, [r5, #0]
 80018ba:	1d1a      	adds	r2, r3, #4
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	602a      	str	r2, [r5, #0]
 80018c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80018c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80018c8:	2301      	movs	r3, #1
 80018ca:	e0a3      	b.n	8001a14 <_printf_i+0x1f4>
 80018cc:	6820      	ldr	r0, [r4, #0]
 80018ce:	6829      	ldr	r1, [r5, #0]
 80018d0:	0606      	lsls	r6, r0, #24
 80018d2:	f101 0304 	add.w	r3, r1, #4
 80018d6:	d50a      	bpl.n	80018ee <_printf_i+0xce>
 80018d8:	680e      	ldr	r6, [r1, #0]
 80018da:	602b      	str	r3, [r5, #0]
 80018dc:	2e00      	cmp	r6, #0
 80018de:	da03      	bge.n	80018e8 <_printf_i+0xc8>
 80018e0:	232d      	movs	r3, #45	; 0x2d
 80018e2:	4276      	negs	r6, r6
 80018e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80018e8:	485e      	ldr	r0, [pc, #376]	; (8001a64 <_printf_i+0x244>)
 80018ea:	230a      	movs	r3, #10
 80018ec:	e019      	b.n	8001922 <_printf_i+0x102>
 80018ee:	680e      	ldr	r6, [r1, #0]
 80018f0:	602b      	str	r3, [r5, #0]
 80018f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80018f6:	bf18      	it	ne
 80018f8:	b236      	sxthne	r6, r6
 80018fa:	e7ef      	b.n	80018dc <_printf_i+0xbc>
 80018fc:	682b      	ldr	r3, [r5, #0]
 80018fe:	6820      	ldr	r0, [r4, #0]
 8001900:	1d19      	adds	r1, r3, #4
 8001902:	6029      	str	r1, [r5, #0]
 8001904:	0601      	lsls	r1, r0, #24
 8001906:	d501      	bpl.n	800190c <_printf_i+0xec>
 8001908:	681e      	ldr	r6, [r3, #0]
 800190a:	e002      	b.n	8001912 <_printf_i+0xf2>
 800190c:	0646      	lsls	r6, r0, #25
 800190e:	d5fb      	bpl.n	8001908 <_printf_i+0xe8>
 8001910:	881e      	ldrh	r6, [r3, #0]
 8001912:	4854      	ldr	r0, [pc, #336]	; (8001a64 <_printf_i+0x244>)
 8001914:	2f6f      	cmp	r7, #111	; 0x6f
 8001916:	bf0c      	ite	eq
 8001918:	2308      	moveq	r3, #8
 800191a:	230a      	movne	r3, #10
 800191c:	2100      	movs	r1, #0
 800191e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001922:	6865      	ldr	r5, [r4, #4]
 8001924:	60a5      	str	r5, [r4, #8]
 8001926:	2d00      	cmp	r5, #0
 8001928:	bfa2      	ittt	ge
 800192a:	6821      	ldrge	r1, [r4, #0]
 800192c:	f021 0104 	bicge.w	r1, r1, #4
 8001930:	6021      	strge	r1, [r4, #0]
 8001932:	b90e      	cbnz	r6, 8001938 <_printf_i+0x118>
 8001934:	2d00      	cmp	r5, #0
 8001936:	d04d      	beq.n	80019d4 <_printf_i+0x1b4>
 8001938:	4615      	mov	r5, r2
 800193a:	fbb6 f1f3 	udiv	r1, r6, r3
 800193e:	fb03 6711 	mls	r7, r3, r1, r6
 8001942:	5dc7      	ldrb	r7, [r0, r7]
 8001944:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001948:	4637      	mov	r7, r6
 800194a:	42bb      	cmp	r3, r7
 800194c:	460e      	mov	r6, r1
 800194e:	d9f4      	bls.n	800193a <_printf_i+0x11a>
 8001950:	2b08      	cmp	r3, #8
 8001952:	d10b      	bne.n	800196c <_printf_i+0x14c>
 8001954:	6823      	ldr	r3, [r4, #0]
 8001956:	07de      	lsls	r6, r3, #31
 8001958:	d508      	bpl.n	800196c <_printf_i+0x14c>
 800195a:	6923      	ldr	r3, [r4, #16]
 800195c:	6861      	ldr	r1, [r4, #4]
 800195e:	4299      	cmp	r1, r3
 8001960:	bfde      	ittt	le
 8001962:	2330      	movle	r3, #48	; 0x30
 8001964:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001968:	f105 35ff 	addle.w	r5, r5, #4294967295
 800196c:	1b52      	subs	r2, r2, r5
 800196e:	6122      	str	r2, [r4, #16]
 8001970:	f8cd a000 	str.w	sl, [sp]
 8001974:	464b      	mov	r3, r9
 8001976:	aa03      	add	r2, sp, #12
 8001978:	4621      	mov	r1, r4
 800197a:	4640      	mov	r0, r8
 800197c:	f7ff fee2 	bl	8001744 <_printf_common>
 8001980:	3001      	adds	r0, #1
 8001982:	d14c      	bne.n	8001a1e <_printf_i+0x1fe>
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	b004      	add	sp, #16
 800198a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800198e:	4835      	ldr	r0, [pc, #212]	; (8001a64 <_printf_i+0x244>)
 8001990:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001994:	6829      	ldr	r1, [r5, #0]
 8001996:	6823      	ldr	r3, [r4, #0]
 8001998:	f851 6b04 	ldr.w	r6, [r1], #4
 800199c:	6029      	str	r1, [r5, #0]
 800199e:	061d      	lsls	r5, r3, #24
 80019a0:	d514      	bpl.n	80019cc <_printf_i+0x1ac>
 80019a2:	07df      	lsls	r7, r3, #31
 80019a4:	bf44      	itt	mi
 80019a6:	f043 0320 	orrmi.w	r3, r3, #32
 80019aa:	6023      	strmi	r3, [r4, #0]
 80019ac:	b91e      	cbnz	r6, 80019b6 <_printf_i+0x196>
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	f023 0320 	bic.w	r3, r3, #32
 80019b4:	6023      	str	r3, [r4, #0]
 80019b6:	2310      	movs	r3, #16
 80019b8:	e7b0      	b.n	800191c <_printf_i+0xfc>
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	f043 0320 	orr.w	r3, r3, #32
 80019c0:	6023      	str	r3, [r4, #0]
 80019c2:	2378      	movs	r3, #120	; 0x78
 80019c4:	4828      	ldr	r0, [pc, #160]	; (8001a68 <_printf_i+0x248>)
 80019c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80019ca:	e7e3      	b.n	8001994 <_printf_i+0x174>
 80019cc:	0659      	lsls	r1, r3, #25
 80019ce:	bf48      	it	mi
 80019d0:	b2b6      	uxthmi	r6, r6
 80019d2:	e7e6      	b.n	80019a2 <_printf_i+0x182>
 80019d4:	4615      	mov	r5, r2
 80019d6:	e7bb      	b.n	8001950 <_printf_i+0x130>
 80019d8:	682b      	ldr	r3, [r5, #0]
 80019da:	6826      	ldr	r6, [r4, #0]
 80019dc:	6961      	ldr	r1, [r4, #20]
 80019de:	1d18      	adds	r0, r3, #4
 80019e0:	6028      	str	r0, [r5, #0]
 80019e2:	0635      	lsls	r5, r6, #24
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	d501      	bpl.n	80019ec <_printf_i+0x1cc>
 80019e8:	6019      	str	r1, [r3, #0]
 80019ea:	e002      	b.n	80019f2 <_printf_i+0x1d2>
 80019ec:	0670      	lsls	r0, r6, #25
 80019ee:	d5fb      	bpl.n	80019e8 <_printf_i+0x1c8>
 80019f0:	8019      	strh	r1, [r3, #0]
 80019f2:	2300      	movs	r3, #0
 80019f4:	6123      	str	r3, [r4, #16]
 80019f6:	4615      	mov	r5, r2
 80019f8:	e7ba      	b.n	8001970 <_printf_i+0x150>
 80019fa:	682b      	ldr	r3, [r5, #0]
 80019fc:	1d1a      	adds	r2, r3, #4
 80019fe:	602a      	str	r2, [r5, #0]
 8001a00:	681d      	ldr	r5, [r3, #0]
 8001a02:	6862      	ldr	r2, [r4, #4]
 8001a04:	2100      	movs	r1, #0
 8001a06:	4628      	mov	r0, r5
 8001a08:	f7fe fbea 	bl	80001e0 <memchr>
 8001a0c:	b108      	cbz	r0, 8001a12 <_printf_i+0x1f2>
 8001a0e:	1b40      	subs	r0, r0, r5
 8001a10:	6060      	str	r0, [r4, #4]
 8001a12:	6863      	ldr	r3, [r4, #4]
 8001a14:	6123      	str	r3, [r4, #16]
 8001a16:	2300      	movs	r3, #0
 8001a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a1c:	e7a8      	b.n	8001970 <_printf_i+0x150>
 8001a1e:	6923      	ldr	r3, [r4, #16]
 8001a20:	462a      	mov	r2, r5
 8001a22:	4649      	mov	r1, r9
 8001a24:	4640      	mov	r0, r8
 8001a26:	47d0      	blx	sl
 8001a28:	3001      	adds	r0, #1
 8001a2a:	d0ab      	beq.n	8001984 <_printf_i+0x164>
 8001a2c:	6823      	ldr	r3, [r4, #0]
 8001a2e:	079b      	lsls	r3, r3, #30
 8001a30:	d413      	bmi.n	8001a5a <_printf_i+0x23a>
 8001a32:	68e0      	ldr	r0, [r4, #12]
 8001a34:	9b03      	ldr	r3, [sp, #12]
 8001a36:	4298      	cmp	r0, r3
 8001a38:	bfb8      	it	lt
 8001a3a:	4618      	movlt	r0, r3
 8001a3c:	e7a4      	b.n	8001988 <_printf_i+0x168>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	4632      	mov	r2, r6
 8001a42:	4649      	mov	r1, r9
 8001a44:	4640      	mov	r0, r8
 8001a46:	47d0      	blx	sl
 8001a48:	3001      	adds	r0, #1
 8001a4a:	d09b      	beq.n	8001984 <_printf_i+0x164>
 8001a4c:	3501      	adds	r5, #1
 8001a4e:	68e3      	ldr	r3, [r4, #12]
 8001a50:	9903      	ldr	r1, [sp, #12]
 8001a52:	1a5b      	subs	r3, r3, r1
 8001a54:	42ab      	cmp	r3, r5
 8001a56:	dcf2      	bgt.n	8001a3e <_printf_i+0x21e>
 8001a58:	e7eb      	b.n	8001a32 <_printf_i+0x212>
 8001a5a:	2500      	movs	r5, #0
 8001a5c:	f104 0619 	add.w	r6, r4, #25
 8001a60:	e7f5      	b.n	8001a4e <_printf_i+0x22e>
 8001a62:	bf00      	nop
 8001a64:	08001d5d 	.word	0x08001d5d
 8001a68:	08001d6e 	.word	0x08001d6e

08001a6c <memcpy>:
 8001a6c:	440a      	add	r2, r1
 8001a6e:	4291      	cmp	r1, r2
 8001a70:	f100 33ff 	add.w	r3, r0, #4294967295
 8001a74:	d100      	bne.n	8001a78 <memcpy+0xc>
 8001a76:	4770      	bx	lr
 8001a78:	b510      	push	{r4, lr}
 8001a7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001a7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001a82:	4291      	cmp	r1, r2
 8001a84:	d1f9      	bne.n	8001a7a <memcpy+0xe>
 8001a86:	bd10      	pop	{r4, pc}

08001a88 <memmove>:
 8001a88:	4288      	cmp	r0, r1
 8001a8a:	b510      	push	{r4, lr}
 8001a8c:	eb01 0402 	add.w	r4, r1, r2
 8001a90:	d902      	bls.n	8001a98 <memmove+0x10>
 8001a92:	4284      	cmp	r4, r0
 8001a94:	4623      	mov	r3, r4
 8001a96:	d807      	bhi.n	8001aa8 <memmove+0x20>
 8001a98:	1e43      	subs	r3, r0, #1
 8001a9a:	42a1      	cmp	r1, r4
 8001a9c:	d008      	beq.n	8001ab0 <memmove+0x28>
 8001a9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001aa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001aa6:	e7f8      	b.n	8001a9a <memmove+0x12>
 8001aa8:	4402      	add	r2, r0
 8001aaa:	4601      	mov	r1, r0
 8001aac:	428a      	cmp	r2, r1
 8001aae:	d100      	bne.n	8001ab2 <memmove+0x2a>
 8001ab0:	bd10      	pop	{r4, pc}
 8001ab2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001ab6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001aba:	e7f7      	b.n	8001aac <memmove+0x24>

08001abc <_free_r>:
 8001abc:	b538      	push	{r3, r4, r5, lr}
 8001abe:	4605      	mov	r5, r0
 8001ac0:	2900      	cmp	r1, #0
 8001ac2:	d041      	beq.n	8001b48 <_free_r+0x8c>
 8001ac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ac8:	1f0c      	subs	r4, r1, #4
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	bfb8      	it	lt
 8001ace:	18e4      	addlt	r4, r4, r3
 8001ad0:	f000 f912 	bl	8001cf8 <__malloc_lock>
 8001ad4:	4a1d      	ldr	r2, [pc, #116]	; (8001b4c <_free_r+0x90>)
 8001ad6:	6813      	ldr	r3, [r2, #0]
 8001ad8:	b933      	cbnz	r3, 8001ae8 <_free_r+0x2c>
 8001ada:	6063      	str	r3, [r4, #4]
 8001adc:	6014      	str	r4, [r2, #0]
 8001ade:	4628      	mov	r0, r5
 8001ae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ae4:	f000 b90e 	b.w	8001d04 <__malloc_unlock>
 8001ae8:	42a3      	cmp	r3, r4
 8001aea:	d908      	bls.n	8001afe <_free_r+0x42>
 8001aec:	6820      	ldr	r0, [r4, #0]
 8001aee:	1821      	adds	r1, r4, r0
 8001af0:	428b      	cmp	r3, r1
 8001af2:	bf01      	itttt	eq
 8001af4:	6819      	ldreq	r1, [r3, #0]
 8001af6:	685b      	ldreq	r3, [r3, #4]
 8001af8:	1809      	addeq	r1, r1, r0
 8001afa:	6021      	streq	r1, [r4, #0]
 8001afc:	e7ed      	b.n	8001ada <_free_r+0x1e>
 8001afe:	461a      	mov	r2, r3
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	b10b      	cbz	r3, 8001b08 <_free_r+0x4c>
 8001b04:	42a3      	cmp	r3, r4
 8001b06:	d9fa      	bls.n	8001afe <_free_r+0x42>
 8001b08:	6811      	ldr	r1, [r2, #0]
 8001b0a:	1850      	adds	r0, r2, r1
 8001b0c:	42a0      	cmp	r0, r4
 8001b0e:	d10b      	bne.n	8001b28 <_free_r+0x6c>
 8001b10:	6820      	ldr	r0, [r4, #0]
 8001b12:	4401      	add	r1, r0
 8001b14:	1850      	adds	r0, r2, r1
 8001b16:	4283      	cmp	r3, r0
 8001b18:	6011      	str	r1, [r2, #0]
 8001b1a:	d1e0      	bne.n	8001ade <_free_r+0x22>
 8001b1c:	6818      	ldr	r0, [r3, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	6053      	str	r3, [r2, #4]
 8001b22:	4401      	add	r1, r0
 8001b24:	6011      	str	r1, [r2, #0]
 8001b26:	e7da      	b.n	8001ade <_free_r+0x22>
 8001b28:	d902      	bls.n	8001b30 <_free_r+0x74>
 8001b2a:	230c      	movs	r3, #12
 8001b2c:	602b      	str	r3, [r5, #0]
 8001b2e:	e7d6      	b.n	8001ade <_free_r+0x22>
 8001b30:	6820      	ldr	r0, [r4, #0]
 8001b32:	1821      	adds	r1, r4, r0
 8001b34:	428b      	cmp	r3, r1
 8001b36:	bf04      	itt	eq
 8001b38:	6819      	ldreq	r1, [r3, #0]
 8001b3a:	685b      	ldreq	r3, [r3, #4]
 8001b3c:	6063      	str	r3, [r4, #4]
 8001b3e:	bf04      	itt	eq
 8001b40:	1809      	addeq	r1, r1, r0
 8001b42:	6021      	streq	r1, [r4, #0]
 8001b44:	6054      	str	r4, [r2, #4]
 8001b46:	e7ca      	b.n	8001ade <_free_r+0x22>
 8001b48:	bd38      	pop	{r3, r4, r5, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200001ac 	.word	0x200001ac

08001b50 <sbrk_aligned>:
 8001b50:	b570      	push	{r4, r5, r6, lr}
 8001b52:	4e0e      	ldr	r6, [pc, #56]	; (8001b8c <sbrk_aligned+0x3c>)
 8001b54:	460c      	mov	r4, r1
 8001b56:	6831      	ldr	r1, [r6, #0]
 8001b58:	4605      	mov	r5, r0
 8001b5a:	b911      	cbnz	r1, 8001b62 <sbrk_aligned+0x12>
 8001b5c:	f000 f8bc 	bl	8001cd8 <_sbrk_r>
 8001b60:	6030      	str	r0, [r6, #0]
 8001b62:	4621      	mov	r1, r4
 8001b64:	4628      	mov	r0, r5
 8001b66:	f000 f8b7 	bl	8001cd8 <_sbrk_r>
 8001b6a:	1c43      	adds	r3, r0, #1
 8001b6c:	d00a      	beq.n	8001b84 <sbrk_aligned+0x34>
 8001b6e:	1cc4      	adds	r4, r0, #3
 8001b70:	f024 0403 	bic.w	r4, r4, #3
 8001b74:	42a0      	cmp	r0, r4
 8001b76:	d007      	beq.n	8001b88 <sbrk_aligned+0x38>
 8001b78:	1a21      	subs	r1, r4, r0
 8001b7a:	4628      	mov	r0, r5
 8001b7c:	f000 f8ac 	bl	8001cd8 <_sbrk_r>
 8001b80:	3001      	adds	r0, #1
 8001b82:	d101      	bne.n	8001b88 <sbrk_aligned+0x38>
 8001b84:	f04f 34ff 	mov.w	r4, #4294967295
 8001b88:	4620      	mov	r0, r4
 8001b8a:	bd70      	pop	{r4, r5, r6, pc}
 8001b8c:	200001b0 	.word	0x200001b0

08001b90 <_malloc_r>:
 8001b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b94:	1ccd      	adds	r5, r1, #3
 8001b96:	f025 0503 	bic.w	r5, r5, #3
 8001b9a:	3508      	adds	r5, #8
 8001b9c:	2d0c      	cmp	r5, #12
 8001b9e:	bf38      	it	cc
 8001ba0:	250c      	movcc	r5, #12
 8001ba2:	2d00      	cmp	r5, #0
 8001ba4:	4607      	mov	r7, r0
 8001ba6:	db01      	blt.n	8001bac <_malloc_r+0x1c>
 8001ba8:	42a9      	cmp	r1, r5
 8001baa:	d905      	bls.n	8001bb8 <_malloc_r+0x28>
 8001bac:	230c      	movs	r3, #12
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	2600      	movs	r6, #0
 8001bb2:	4630      	mov	r0, r6
 8001bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bb8:	4e2e      	ldr	r6, [pc, #184]	; (8001c74 <_malloc_r+0xe4>)
 8001bba:	f000 f89d 	bl	8001cf8 <__malloc_lock>
 8001bbe:	6833      	ldr	r3, [r6, #0]
 8001bc0:	461c      	mov	r4, r3
 8001bc2:	bb34      	cbnz	r4, 8001c12 <_malloc_r+0x82>
 8001bc4:	4629      	mov	r1, r5
 8001bc6:	4638      	mov	r0, r7
 8001bc8:	f7ff ffc2 	bl	8001b50 <sbrk_aligned>
 8001bcc:	1c43      	adds	r3, r0, #1
 8001bce:	4604      	mov	r4, r0
 8001bd0:	d14d      	bne.n	8001c6e <_malloc_r+0xde>
 8001bd2:	6834      	ldr	r4, [r6, #0]
 8001bd4:	4626      	mov	r6, r4
 8001bd6:	2e00      	cmp	r6, #0
 8001bd8:	d140      	bne.n	8001c5c <_malloc_r+0xcc>
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	4631      	mov	r1, r6
 8001bde:	4638      	mov	r0, r7
 8001be0:	eb04 0803 	add.w	r8, r4, r3
 8001be4:	f000 f878 	bl	8001cd8 <_sbrk_r>
 8001be8:	4580      	cmp	r8, r0
 8001bea:	d13a      	bne.n	8001c62 <_malloc_r+0xd2>
 8001bec:	6821      	ldr	r1, [r4, #0]
 8001bee:	3503      	adds	r5, #3
 8001bf0:	1a6d      	subs	r5, r5, r1
 8001bf2:	f025 0503 	bic.w	r5, r5, #3
 8001bf6:	3508      	adds	r5, #8
 8001bf8:	2d0c      	cmp	r5, #12
 8001bfa:	bf38      	it	cc
 8001bfc:	250c      	movcc	r5, #12
 8001bfe:	4629      	mov	r1, r5
 8001c00:	4638      	mov	r0, r7
 8001c02:	f7ff ffa5 	bl	8001b50 <sbrk_aligned>
 8001c06:	3001      	adds	r0, #1
 8001c08:	d02b      	beq.n	8001c62 <_malloc_r+0xd2>
 8001c0a:	6823      	ldr	r3, [r4, #0]
 8001c0c:	442b      	add	r3, r5
 8001c0e:	6023      	str	r3, [r4, #0]
 8001c10:	e00e      	b.n	8001c30 <_malloc_r+0xa0>
 8001c12:	6822      	ldr	r2, [r4, #0]
 8001c14:	1b52      	subs	r2, r2, r5
 8001c16:	d41e      	bmi.n	8001c56 <_malloc_r+0xc6>
 8001c18:	2a0b      	cmp	r2, #11
 8001c1a:	d916      	bls.n	8001c4a <_malloc_r+0xba>
 8001c1c:	1961      	adds	r1, r4, r5
 8001c1e:	42a3      	cmp	r3, r4
 8001c20:	6025      	str	r5, [r4, #0]
 8001c22:	bf18      	it	ne
 8001c24:	6059      	strne	r1, [r3, #4]
 8001c26:	6863      	ldr	r3, [r4, #4]
 8001c28:	bf08      	it	eq
 8001c2a:	6031      	streq	r1, [r6, #0]
 8001c2c:	5162      	str	r2, [r4, r5]
 8001c2e:	604b      	str	r3, [r1, #4]
 8001c30:	4638      	mov	r0, r7
 8001c32:	f104 060b 	add.w	r6, r4, #11
 8001c36:	f000 f865 	bl	8001d04 <__malloc_unlock>
 8001c3a:	f026 0607 	bic.w	r6, r6, #7
 8001c3e:	1d23      	adds	r3, r4, #4
 8001c40:	1af2      	subs	r2, r6, r3
 8001c42:	d0b6      	beq.n	8001bb2 <_malloc_r+0x22>
 8001c44:	1b9b      	subs	r3, r3, r6
 8001c46:	50a3      	str	r3, [r4, r2]
 8001c48:	e7b3      	b.n	8001bb2 <_malloc_r+0x22>
 8001c4a:	6862      	ldr	r2, [r4, #4]
 8001c4c:	42a3      	cmp	r3, r4
 8001c4e:	bf0c      	ite	eq
 8001c50:	6032      	streq	r2, [r6, #0]
 8001c52:	605a      	strne	r2, [r3, #4]
 8001c54:	e7ec      	b.n	8001c30 <_malloc_r+0xa0>
 8001c56:	4623      	mov	r3, r4
 8001c58:	6864      	ldr	r4, [r4, #4]
 8001c5a:	e7b2      	b.n	8001bc2 <_malloc_r+0x32>
 8001c5c:	4634      	mov	r4, r6
 8001c5e:	6876      	ldr	r6, [r6, #4]
 8001c60:	e7b9      	b.n	8001bd6 <_malloc_r+0x46>
 8001c62:	230c      	movs	r3, #12
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	4638      	mov	r0, r7
 8001c68:	f000 f84c 	bl	8001d04 <__malloc_unlock>
 8001c6c:	e7a1      	b.n	8001bb2 <_malloc_r+0x22>
 8001c6e:	6025      	str	r5, [r4, #0]
 8001c70:	e7de      	b.n	8001c30 <_malloc_r+0xa0>
 8001c72:	bf00      	nop
 8001c74:	200001ac 	.word	0x200001ac

08001c78 <_realloc_r>:
 8001c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c7c:	4680      	mov	r8, r0
 8001c7e:	4614      	mov	r4, r2
 8001c80:	460e      	mov	r6, r1
 8001c82:	b921      	cbnz	r1, 8001c8e <_realloc_r+0x16>
 8001c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c88:	4611      	mov	r1, r2
 8001c8a:	f7ff bf81 	b.w	8001b90 <_malloc_r>
 8001c8e:	b92a      	cbnz	r2, 8001c9c <_realloc_r+0x24>
 8001c90:	f7ff ff14 	bl	8001abc <_free_r>
 8001c94:	4625      	mov	r5, r4
 8001c96:	4628      	mov	r0, r5
 8001c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c9c:	f000 f838 	bl	8001d10 <_malloc_usable_size_r>
 8001ca0:	4284      	cmp	r4, r0
 8001ca2:	4607      	mov	r7, r0
 8001ca4:	d802      	bhi.n	8001cac <_realloc_r+0x34>
 8001ca6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001caa:	d812      	bhi.n	8001cd2 <_realloc_r+0x5a>
 8001cac:	4621      	mov	r1, r4
 8001cae:	4640      	mov	r0, r8
 8001cb0:	f7ff ff6e 	bl	8001b90 <_malloc_r>
 8001cb4:	4605      	mov	r5, r0
 8001cb6:	2800      	cmp	r0, #0
 8001cb8:	d0ed      	beq.n	8001c96 <_realloc_r+0x1e>
 8001cba:	42bc      	cmp	r4, r7
 8001cbc:	4622      	mov	r2, r4
 8001cbe:	4631      	mov	r1, r6
 8001cc0:	bf28      	it	cs
 8001cc2:	463a      	movcs	r2, r7
 8001cc4:	f7ff fed2 	bl	8001a6c <memcpy>
 8001cc8:	4631      	mov	r1, r6
 8001cca:	4640      	mov	r0, r8
 8001ccc:	f7ff fef6 	bl	8001abc <_free_r>
 8001cd0:	e7e1      	b.n	8001c96 <_realloc_r+0x1e>
 8001cd2:	4635      	mov	r5, r6
 8001cd4:	e7df      	b.n	8001c96 <_realloc_r+0x1e>
	...

08001cd8 <_sbrk_r>:
 8001cd8:	b538      	push	{r3, r4, r5, lr}
 8001cda:	4d06      	ldr	r5, [pc, #24]	; (8001cf4 <_sbrk_r+0x1c>)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	4604      	mov	r4, r0
 8001ce0:	4608      	mov	r0, r1
 8001ce2:	602b      	str	r3, [r5, #0]
 8001ce4:	f7fe fbf8 	bl	80004d8 <_sbrk>
 8001ce8:	1c43      	adds	r3, r0, #1
 8001cea:	d102      	bne.n	8001cf2 <_sbrk_r+0x1a>
 8001cec:	682b      	ldr	r3, [r5, #0]
 8001cee:	b103      	cbz	r3, 8001cf2 <_sbrk_r+0x1a>
 8001cf0:	6023      	str	r3, [r4, #0]
 8001cf2:	bd38      	pop	{r3, r4, r5, pc}
 8001cf4:	200001b4 	.word	0x200001b4

08001cf8 <__malloc_lock>:
 8001cf8:	4801      	ldr	r0, [pc, #4]	; (8001d00 <__malloc_lock+0x8>)
 8001cfa:	f000 b811 	b.w	8001d20 <__retarget_lock_acquire_recursive>
 8001cfe:	bf00      	nop
 8001d00:	200001b8 	.word	0x200001b8

08001d04 <__malloc_unlock>:
 8001d04:	4801      	ldr	r0, [pc, #4]	; (8001d0c <__malloc_unlock+0x8>)
 8001d06:	f000 b80c 	b.w	8001d22 <__retarget_lock_release_recursive>
 8001d0a:	bf00      	nop
 8001d0c:	200001b8 	.word	0x200001b8

08001d10 <_malloc_usable_size_r>:
 8001d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d14:	1f18      	subs	r0, r3, #4
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	bfbc      	itt	lt
 8001d1a:	580b      	ldrlt	r3, [r1, r0]
 8001d1c:	18c0      	addlt	r0, r0, r3
 8001d1e:	4770      	bx	lr

08001d20 <__retarget_lock_acquire_recursive>:
 8001d20:	4770      	bx	lr

08001d22 <__retarget_lock_release_recursive>:
 8001d22:	4770      	bx	lr

08001d24 <_init>:
 8001d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d26:	bf00      	nop
 8001d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d2a:	bc08      	pop	{r3}
 8001d2c:	469e      	mov	lr, r3
 8001d2e:	4770      	bx	lr

08001d30 <_fini>:
 8001d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d32:	bf00      	nop
 8001d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d36:	bc08      	pop	{r3}
 8001d38:	469e      	mov	lr, r3
 8001d3a:	4770      	bx	lr
