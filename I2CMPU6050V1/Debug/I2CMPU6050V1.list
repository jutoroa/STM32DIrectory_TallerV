
I2CMPU6050V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ce8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08001e88  08001e88  00011e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ef0  08001ef0  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08001ef0  08001ef0  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ef0  08001ef0  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ef0  08001ef0  00011ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ef4  08001ef4  00011ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08001ef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200000a8  08001f9c  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08001f9c  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002dc4  00000000  00000000  000200ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b36  00000000  00000000  00022e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000218  00000000  00000000  000239c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a0  00000000  00000000  00023be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fa5b  00000000  00000000  00023d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000324f  00000000  00000000  000337db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055557  00000000  00000000  00036a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008bf81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a2c  00000000  00000000  0008bfd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a8 	.word	0x200000a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001e70 	.word	0x08001e70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ac 	.word	0x200000ac
 80001dc:	08001e70 	.word	0x08001e70

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:

void initSystem(void);

// *************** // MAIN // *************** //
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
	// Inicializamos el sistema
	initSystem();
 8000286:	f000 f8d7 	bl	8000438 <initSystem>
	writeMsg(&handlerCommTerminal, bufferData);
 800028a:	4963      	ldr	r1, [pc, #396]	; (8000418 <main+0x198>)
 800028c:	4863      	ldr	r0, [pc, #396]	; (800041c <main+0x19c>)
 800028e:	f001 f941 	bl	8001514 <writeMsg>
	/* Main Loop */
	while(1){

		// Hacemos un "eco" con el valor que nos llega por el serial
		if(rxData != '\0'){
 8000292:	4b63      	ldr	r3, [pc, #396]	; (8000420 <main+0x1a0>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d0fb      	beq.n	8000292 <main+0x12>
			writeChar(&handlerCommTerminal, rxData);
 800029a:	4b61      	ldr	r3, [pc, #388]	; (8000420 <main+0x1a0>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	4619      	mov	r1, r3
 80002a0:	485e      	ldr	r0, [pc, #376]	; (800041c <main+0x19c>)
 80002a2:	f001 f91f 	bl	80014e4 <writeChar>

			if(rxData == 'd'){
 80002a6:	4b5e      	ldr	r3, [pc, #376]	; (8000420 <main+0x1a0>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	2b64      	cmp	r3, #100	; 0x64
 80002ac:	d116      	bne.n	80002dc <main+0x5c>
				// Devolvemos la direcci√≥n que posee el sensor
				i2cBuffer = I2C_readByte(&handlerAccelerometer, WHO_AM_I);
 80002ae:	2175      	movs	r1, #117	; 0x75
 80002b0:	485c      	ldr	r0, [pc, #368]	; (8000424 <main+0x1a4>)
 80002b2:	f000 fbf5 	bl	8000aa0 <I2C_readByte>
 80002b6:	4603      	mov	r3, r0
 80002b8:	461a      	mov	r2, r3
 80002ba:	4b5b      	ldr	r3, [pc, #364]	; (8000428 <main+0x1a8>)
 80002bc:	701a      	strb	r2, [r3, #0]
				sprintf(bufferData, "dataRead = 0x%2x \n", (unsigned int) i2cBuffer);
 80002be:	4b5a      	ldr	r3, [pc, #360]	; (8000428 <main+0x1a8>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	461a      	mov	r2, r3
 80002c4:	4959      	ldr	r1, [pc, #356]	; (800042c <main+0x1ac>)
 80002c6:	4854      	ldr	r0, [pc, #336]	; (8000418 <main+0x198>)
 80002c8:	f001 f966 	bl	8001598 <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 80002cc:	4952      	ldr	r1, [pc, #328]	; (8000418 <main+0x198>)
 80002ce:	4853      	ldr	r0, [pc, #332]	; (800041c <main+0x19c>)
 80002d0:	f001 f920 	bl	8001514 <writeMsg>
				rxData = '\0';
 80002d4:	4b52      	ldr	r3, [pc, #328]	; (8000420 <main+0x1a0>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	701a      	strb	r2, [r3, #0]
 80002da:	e7da      	b.n	8000292 <main+0x12>
			}
			else if(rxData == 'p'){
 80002dc:	4b50      	ldr	r3, [pc, #320]	; (8000420 <main+0x1a0>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b70      	cmp	r3, #112	; 0x70
 80002e2:	d116      	bne.n	8000312 <main+0x92>
				i2cBuffer = I2C_readByte(&handlerAccelerometer, PWR_MGMT_1);
 80002e4:	216b      	movs	r1, #107	; 0x6b
 80002e6:	484f      	ldr	r0, [pc, #316]	; (8000424 <main+0x1a4>)
 80002e8:	f000 fbda 	bl	8000aa0 <I2C_readByte>
 80002ec:	4603      	mov	r3, r0
 80002ee:	461a      	mov	r2, r3
 80002f0:	4b4d      	ldr	r3, [pc, #308]	; (8000428 <main+0x1a8>)
 80002f2:	701a      	strb	r2, [r3, #0]
				sprintf(bufferData, "dataRead = 0x%2x \n", (unsigned int) i2cBuffer);
 80002f4:	4b4c      	ldr	r3, [pc, #304]	; (8000428 <main+0x1a8>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	461a      	mov	r2, r3
 80002fa:	494c      	ldr	r1, [pc, #304]	; (800042c <main+0x1ac>)
 80002fc:	4846      	ldr	r0, [pc, #280]	; (8000418 <main+0x198>)
 80002fe:	f001 f94b 	bl	8001598 <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 8000302:	4945      	ldr	r1, [pc, #276]	; (8000418 <main+0x198>)
 8000304:	4845      	ldr	r0, [pc, #276]	; (800041c <main+0x19c>)
 8000306:	f001 f905 	bl	8001514 <writeMsg>
				rxData = '\0';
 800030a:	4b45      	ldr	r3, [pc, #276]	; (8000420 <main+0x1a0>)
 800030c:	2200      	movs	r2, #0
 800030e:	701a      	strb	r2, [r3, #0]
 8000310:	e7bf      	b.n	8000292 <main+0x12>
			}
			else if(rxData == 'r'){
 8000312:	4b43      	ldr	r3, [pc, #268]	; (8000420 <main+0x1a0>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	2b72      	cmp	r3, #114	; 0x72
 8000318:	d108      	bne.n	800032c <main+0xac>
				I2C_writeByte(&handlerAccelerometer, PWR_MGMT_1, 0x00);
 800031a:	2200      	movs	r2, #0
 800031c:	216b      	movs	r1, #107	; 0x6b
 800031e:	4841      	ldr	r0, [pc, #260]	; (8000424 <main+0x1a4>)
 8000320:	f000 fc54 	bl	8000bcc <I2C_writeByte>
				rxData = '\0';
 8000324:	4b3e      	ldr	r3, [pc, #248]	; (8000420 <main+0x1a0>)
 8000326:	2200      	movs	r2, #0
 8000328:	701a      	strb	r2, [r3, #0]
 800032a:	e7b2      	b.n	8000292 <main+0x12>
			}
			else if(rxData == 'x'){
 800032c:	4b3c      	ldr	r3, [pc, #240]	; (8000420 <main+0x1a0>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b78      	cmp	r3, #120	; 0x78
 8000332:	d121      	bne.n	8000378 <main+0xf8>
				uint8_t AccelX_low = I2C_readByte(&handlerAccelerometer, ACCEL_XOUT_L);
 8000334:	213c      	movs	r1, #60	; 0x3c
 8000336:	483b      	ldr	r0, [pc, #236]	; (8000424 <main+0x1a4>)
 8000338:	f000 fbb2 	bl	8000aa0 <I2C_readByte>
 800033c:	4603      	mov	r3, r0
 800033e:	71fb      	strb	r3, [r7, #7]
				uint8_t AccelX_high = I2C_readByte(&handlerAccelerometer, ACCEL_XOUT_H);
 8000340:	213b      	movs	r1, #59	; 0x3b
 8000342:	4838      	ldr	r0, [pc, #224]	; (8000424 <main+0x1a4>)
 8000344:	f000 fbac 	bl	8000aa0 <I2C_readByte>
 8000348:	4603      	mov	r3, r0
 800034a:	71bb      	strb	r3, [r7, #6]
				int16_t AccelX = (AccelX_high << 8) | AccelX_low;
 800034c:	79bb      	ldrb	r3, [r7, #6]
 800034e:	021b      	lsls	r3, r3, #8
 8000350:	b21a      	sxth	r2, r3
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	b21b      	sxth	r3, r3
 8000356:	4313      	orrs	r3, r2
 8000358:	80bb      	strh	r3, [r7, #4]
				sprintf(bufferData, "AccelX = %d \n",(int) AccelX);
 800035a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800035e:	461a      	mov	r2, r3
 8000360:	4933      	ldr	r1, [pc, #204]	; (8000430 <main+0x1b0>)
 8000362:	482d      	ldr	r0, [pc, #180]	; (8000418 <main+0x198>)
 8000364:	f001 f918 	bl	8001598 <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 8000368:	492b      	ldr	r1, [pc, #172]	; (8000418 <main+0x198>)
 800036a:	482c      	ldr	r0, [pc, #176]	; (800041c <main+0x19c>)
 800036c:	f001 f8d2 	bl	8001514 <writeMsg>
				rxData = '\0';
 8000370:	4b2b      	ldr	r3, [pc, #172]	; (8000420 <main+0x1a0>)
 8000372:	2200      	movs	r2, #0
 8000374:	701a      	strb	r2, [r3, #0]
 8000376:	e78c      	b.n	8000292 <main+0x12>
			}
			else if(rxData == 'y'){
 8000378:	4b29      	ldr	r3, [pc, #164]	; (8000420 <main+0x1a0>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b79      	cmp	r3, #121	; 0x79
 800037e:	d121      	bne.n	80003c4 <main+0x144>
				uint8_t AccelY_low = I2C_readByte(&handlerAccelerometer, ACCEL_YOUT_L);
 8000380:	213e      	movs	r1, #62	; 0x3e
 8000382:	4828      	ldr	r0, [pc, #160]	; (8000424 <main+0x1a4>)
 8000384:	f000 fb8c 	bl	8000aa0 <I2C_readByte>
 8000388:	4603      	mov	r3, r0
 800038a:	72fb      	strb	r3, [r7, #11]
				uint8_t AccelY_high = I2C_readByte(&handlerAccelerometer, ACCEL_YOUT_H);
 800038c:	213d      	movs	r1, #61	; 0x3d
 800038e:	4825      	ldr	r0, [pc, #148]	; (8000424 <main+0x1a4>)
 8000390:	f000 fb86 	bl	8000aa0 <I2C_readByte>
 8000394:	4603      	mov	r3, r0
 8000396:	72bb      	strb	r3, [r7, #10]
				int16_t AccelY = AccelY_high << 8 | AccelY_low;
 8000398:	7abb      	ldrb	r3, [r7, #10]
 800039a:	021b      	lsls	r3, r3, #8
 800039c:	b21a      	sxth	r2, r3
 800039e:	7afb      	ldrb	r3, [r7, #11]
 80003a0:	b21b      	sxth	r3, r3
 80003a2:	4313      	orrs	r3, r2
 80003a4:	813b      	strh	r3, [r7, #8]
				sprintf(bufferData, "AccelY = %d \n",(int) AccelY);
 80003a6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80003aa:	461a      	mov	r2, r3
 80003ac:	4921      	ldr	r1, [pc, #132]	; (8000434 <main+0x1b4>)
 80003ae:	481a      	ldr	r0, [pc, #104]	; (8000418 <main+0x198>)
 80003b0:	f001 f8f2 	bl	8001598 <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 80003b4:	4918      	ldr	r1, [pc, #96]	; (8000418 <main+0x198>)
 80003b6:	4819      	ldr	r0, [pc, #100]	; (800041c <main+0x19c>)
 80003b8:	f001 f8ac 	bl	8001514 <writeMsg>
				rxData = '\0';
 80003bc:	4b18      	ldr	r3, [pc, #96]	; (8000420 <main+0x1a0>)
 80003be:	2200      	movs	r2, #0
 80003c0:	701a      	strb	r2, [r3, #0]
 80003c2:	e766      	b.n	8000292 <main+0x12>
			}
			else if(rxData == 'z'){
 80003c4:	4b16      	ldr	r3, [pc, #88]	; (8000420 <main+0x1a0>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b7a      	cmp	r3, #122	; 0x7a
 80003ca:	d121      	bne.n	8000410 <main+0x190>
				uint8_t AccelZ_low  = I2C_readByte(&handlerAccelerometer, ACCEL_ZOUT_L);
 80003cc:	2140      	movs	r1, #64	; 0x40
 80003ce:	4815      	ldr	r0, [pc, #84]	; (8000424 <main+0x1a4>)
 80003d0:	f000 fb66 	bl	8000aa0 <I2C_readByte>
 80003d4:	4603      	mov	r3, r0
 80003d6:	73fb      	strb	r3, [r7, #15]
				uint8_t AccelZ_high = I2C_readByte(&handlerAccelerometer, ACCEL_ZOUT_H);
 80003d8:	213f      	movs	r1, #63	; 0x3f
 80003da:	4812      	ldr	r0, [pc, #72]	; (8000424 <main+0x1a4>)
 80003dc:	f000 fb60 	bl	8000aa0 <I2C_readByte>
 80003e0:	4603      	mov	r3, r0
 80003e2:	73bb      	strb	r3, [r7, #14]
				int16_t AccelZ = AccelZ_high << 8 | AccelZ_low;
 80003e4:	7bbb      	ldrb	r3, [r7, #14]
 80003e6:	021b      	lsls	r3, r3, #8
 80003e8:	b21a      	sxth	r2, r3
 80003ea:	7bfb      	ldrb	r3, [r7, #15]
 80003ec:	b21b      	sxth	r3, r3
 80003ee:	4313      	orrs	r3, r2
 80003f0:	81bb      	strh	r3, [r7, #12]
				sprintf(bufferData, "AccelY = %d \n",(int) AccelZ);
 80003f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80003f6:	461a      	mov	r2, r3
 80003f8:	490e      	ldr	r1, [pc, #56]	; (8000434 <main+0x1b4>)
 80003fa:	4807      	ldr	r0, [pc, #28]	; (8000418 <main+0x198>)
 80003fc:	f001 f8cc 	bl	8001598 <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 8000400:	4905      	ldr	r1, [pc, #20]	; (8000418 <main+0x198>)
 8000402:	4806      	ldr	r0, [pc, #24]	; (800041c <main+0x19c>)
 8000404:	f001 f886 	bl	8001514 <writeMsg>
				rxData = '\0';
 8000408:	4b05      	ldr	r3, [pc, #20]	; (8000420 <main+0x1a0>)
 800040a:	2200      	movs	r2, #0
 800040c:	701a      	strb	r2, [r3, #0]
 800040e:	e740      	b.n	8000292 <main+0x12>
			}
			else{
				rxData = '\0';
 8000410:	4b03      	ldr	r3, [pc, #12]	; (8000420 <main+0x1a0>)
 8000412:	2200      	movs	r2, #0
 8000414:	701a      	strb	r2, [r3, #0]
		if(rxData != '\0'){
 8000416:	e73c      	b.n	8000292 <main+0x12>
 8000418:	20000000 	.word	0x20000000
 800041c:	200000f4 	.word	0x200000f4
 8000420:	200001a0 	.word	0x200001a0
 8000424:	20000198 	.word	0x20000198
 8000428:	200001a1 	.word	0x200001a1
 800042c:	08001e88 	.word	0x08001e88
 8000430:	08001e9c 	.word	0x08001e9c
 8000434:	08001eac 	.word	0x08001eac

08000438 <initSystem>:

//***********// InitSystem //***********//

// Funci√≥n que define la configuraci√≥n de todos los pines y perif√©ricos

void initSystem(void){
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0

	// Configuraci√≥n el State LED
	handlerStateLED.pGPIOx								= GPIOA;
 800043c:	4b58      	ldr	r3, [pc, #352]	; (80005a0 <initSystem+0x168>)
 800043e:	4a59      	ldr	r2, [pc, #356]	; (80005a4 <initSystem+0x16c>)
 8000440:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 8000442:	4b57      	ldr	r3, [pc, #348]	; (80005a0 <initSystem+0x168>)
 8000444:	2205      	movs	r2, #5
 8000446:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 8000448:	4b55      	ldr	r3, [pc, #340]	; (80005a0 <initSystem+0x168>)
 800044a:	2201      	movs	r2, #1
 800044c:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 800044e:	4b54      	ldr	r3, [pc, #336]	; (80005a0 <initSystem+0x168>)
 8000450:	2200      	movs	r2, #0
 8000452:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000454:	4b52      	ldr	r3, [pc, #328]	; (80005a0 <initSystem+0x168>)
 8000456:	2200      	movs	r2, #0
 8000458:	71da      	strb	r2, [r3, #7]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_FAST;
 800045a:	4b51      	ldr	r3, [pc, #324]	; (80005a0 <initSystem+0x168>)
 800045c:	2202      	movs	r2, #2
 800045e:	719a      	strb	r2, [r3, #6]

	//Cargamos la configuraci√≥n
	GPIO_Config(&handlerStateLED);
 8000460:	484f      	ldr	r0, [pc, #316]	; (80005a0 <initSystem+0x168>)
 8000462:	f000 f931 	bl	80006c8 <GPIO_Config>

	// Prendemos el LED
	GPIO_WritePin(&handlerStateLED, SET);
 8000466:	2101      	movs	r1, #1
 8000468:	484d      	ldr	r0, [pc, #308]	; (80005a0 <initSystem+0x168>)
 800046a:	f000 fa55 	bl	8000918 <GPIO_WritePin>

	/* Configurando los pines sobre los que funciona el USART */
	handlerPinTX.pGPIOx									= GPIOA;
 800046e:	4b4e      	ldr	r3, [pc, #312]	; (80005a8 <initSystem+0x170>)
 8000470:	4a4c      	ldr	r2, [pc, #304]	; (80005a4 <initSystem+0x16c>)
 8000472:	601a      	str	r2, [r3, #0]
	handlerPinTX.GPIO_PinConfig.GPIO_PinNumber			= PIN_2;
 8000474:	4b4c      	ldr	r3, [pc, #304]	; (80005a8 <initSystem+0x170>)
 8000476:	2202      	movs	r2, #2
 8000478:	711a      	strb	r2, [r3, #4]
	handlerPinTX.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 800047a:	4b4b      	ldr	r3, [pc, #300]	; (80005a8 <initSystem+0x170>)
 800047c:	2202      	movs	r2, #2
 800047e:	715a      	strb	r2, [r3, #5]
	handlerPinTX.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 8000480:	4b49      	ldr	r3, [pc, #292]	; (80005a8 <initSystem+0x170>)
 8000482:	2200      	movs	r2, #0
 8000484:	721a      	strb	r2, [r3, #8]
	handlerPinTX.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 8000486:	4b48      	ldr	r3, [pc, #288]	; (80005a8 <initSystem+0x170>)
 8000488:	2200      	movs	r2, #0
 800048a:	71da      	strb	r2, [r3, #7]
	handlerPinTX.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_FAST;
 800048c:	4b46      	ldr	r3, [pc, #280]	; (80005a8 <initSystem+0x170>)
 800048e:	2202      	movs	r2, #2
 8000490:	719a      	strb	r2, [r3, #6]
	handlerPinTX.GPIO_PinConfig.GPIO_PinAltFunMode		= AF7;
 8000492:	4b45      	ldr	r3, [pc, #276]	; (80005a8 <initSystem+0x170>)
 8000494:	2207      	movs	r2, #7
 8000496:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&handlerPinTX);
 8000498:	4843      	ldr	r0, [pc, #268]	; (80005a8 <initSystem+0x170>)
 800049a:	f000 f915 	bl	80006c8 <GPIO_Config>

	handlerPinRX.pGPIOx									= GPIOA;
 800049e:	4b43      	ldr	r3, [pc, #268]	; (80005ac <initSystem+0x174>)
 80004a0:	4a40      	ldr	r2, [pc, #256]	; (80005a4 <initSystem+0x16c>)
 80004a2:	601a      	str	r2, [r3, #0]
	handlerPinRX.GPIO_PinConfig.GPIO_PinNumber			= PIN_3;
 80004a4:	4b41      	ldr	r3, [pc, #260]	; (80005ac <initSystem+0x174>)
 80004a6:	2203      	movs	r2, #3
 80004a8:	711a      	strb	r2, [r3, #4]
	handlerPinRX.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 80004aa:	4b40      	ldr	r3, [pc, #256]	; (80005ac <initSystem+0x174>)
 80004ac:	2202      	movs	r2, #2
 80004ae:	715a      	strb	r2, [r3, #5]
	handlerPinRX.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 80004b0:	4b3e      	ldr	r3, [pc, #248]	; (80005ac <initSystem+0x174>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	721a      	strb	r2, [r3, #8]
	handlerPinRX.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 80004b6:	4b3d      	ldr	r3, [pc, #244]	; (80005ac <initSystem+0x174>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	71da      	strb	r2, [r3, #7]
	handlerPinRX.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_FAST;
 80004bc:	4b3b      	ldr	r3, [pc, #236]	; (80005ac <initSystem+0x174>)
 80004be:	2202      	movs	r2, #2
 80004c0:	719a      	strb	r2, [r3, #6]
	handlerPinRX.GPIO_PinConfig.GPIO_PinAltFunMode		= AF7;
 80004c2:	4b3a      	ldr	r3, [pc, #232]	; (80005ac <initSystem+0x174>)
 80004c4:	2207      	movs	r2, #7
 80004c6:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&handlerPinRX);
 80004c8:	4838      	ldr	r0, [pc, #224]	; (80005ac <initSystem+0x174>)
 80004ca:	f000 f8fd 	bl	80006c8 <GPIO_Config>

	// Configuraci√≥n del USART del USB para RX
	handlerCommTerminal.ptrUSARTx							= USART2;
 80004ce:	4b38      	ldr	r3, [pc, #224]	; (80005b0 <initSystem+0x178>)
 80004d0:	4a38      	ldr	r2, [pc, #224]	; (80005b4 <initSystem+0x17c>)
 80004d2:	601a      	str	r2, [r3, #0]
	handlerCommTerminal.USART_Config.USART_mode				= USART_MODE_RXTX;
 80004d4:	4b36      	ldr	r3, [pc, #216]	; (80005b0 <initSystem+0x178>)
 80004d6:	2202      	movs	r2, #2
 80004d8:	711a      	strb	r2, [r3, #4]
	handlerCommTerminal.USART_Config.USART_baudrate			= USART_BAUDRATE_19200;
 80004da:	4b35      	ldr	r3, [pc, #212]	; (80005b0 <initSystem+0x178>)
 80004dc:	2201      	movs	r2, #1
 80004de:	715a      	strb	r2, [r3, #5]
	handlerCommTerminal.USART_Config.USART_datasize			= USART_DATASIZE_8BIT;
 80004e0:	4b33      	ldr	r3, [pc, #204]	; (80005b0 <initSystem+0x178>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	719a      	strb	r2, [r3, #6]
	handlerCommTerminal.USART_Config.USART_parity			= USART_PARITY_ODD;
 80004e6:	4b32      	ldr	r3, [pc, #200]	; (80005b0 <initSystem+0x178>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	71da      	strb	r2, [r3, #7]
	handlerCommTerminal.USART_Config.USART_stopbits			= USART_STOPBIT_1;
 80004ec:	4b30      	ldr	r3, [pc, #192]	; (80005b0 <initSystem+0x178>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	721a      	strb	r2, [r3, #8]
	handlerCommTerminal.USART_Config.USART_interrupt		= USART_INTERRUPT_RX_ENABLE;
 80004f2:	4b2f      	ldr	r3, [pc, #188]	; (80005b0 <initSystem+0x178>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	725a      	strb	r2, [r3, #9]

	USART_Config(&handlerCommTerminal);
 80004f8:	482d      	ldr	r0, [pc, #180]	; (80005b0 <initSystem+0x178>)
 80004fa:	f000 fdb3 	bl	8001064 <USART_Config>

	// Configuraci√≥n del timer2
	handlerTimer2.ptrTIMx								= TIM2;
 80004fe:	4b2e      	ldr	r3, [pc, #184]	; (80005b8 <initSystem+0x180>)
 8000500:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000504:	601a      	str	r2, [r3, #0]
	handlerTimer2.timerConfig.Timer_mode				= TIMER_MODE_UP;
 8000506:	4b2c      	ldr	r3, [pc, #176]	; (80005b8 <initSystem+0x180>)
 8000508:	2200      	movs	r2, #0
 800050a:	711a      	strb	r2, [r3, #4]
	handlerTimer2.timerConfig.Timer_speed				= TIMER_INCR_SPEED_1ms;
 800050c:	4b2a      	ldr	r3, [pc, #168]	; (80005b8 <initSystem+0x180>)
 800050e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000512:	80da      	strh	r2, [r3, #6]
	handlerTimer2.timerConfig.Timer_period				= 250;
 8000514:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <initSystem+0x180>)
 8000516:	22fa      	movs	r2, #250	; 0xfa
 8000518:	609a      	str	r2, [r3, #8]

	Timer_Config(&handlerTimer2);
 800051a:	4827      	ldr	r0, [pc, #156]	; (80005b8 <initSystem+0x180>)
 800051c:	f000 fc8e 	bl	8000e3c <Timer_Config>

	// Llamamos la funci√≥n para configurar y activar el SysTick

	config_SysTickMs();
 8000520:	f000 fbd2 	bl	8000cc8 <config_SysTickMs>

	// Configuramos los pines para el I2C SCL
	handlerI2CSCL.pGPIOx								= GPIOB;
 8000524:	4b25      	ldr	r3, [pc, #148]	; (80005bc <initSystem+0x184>)
 8000526:	4a26      	ldr	r2, [pc, #152]	; (80005c0 <initSystem+0x188>)
 8000528:	601a      	str	r2, [r3, #0]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinNumber			= PIN_6;
 800052a:	4b24      	ldr	r3, [pc, #144]	; (80005bc <initSystem+0x184>)
 800052c:	2206      	movs	r2, #6
 800052e:	711a      	strb	r2, [r3, #4]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 8000530:	4b22      	ldr	r3, [pc, #136]	; (80005bc <initSystem+0x184>)
 8000532:	2202      	movs	r2, #2
 8000534:	715a      	strb	r2, [r3, #5]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_OPENDRAIN;
 8000536:	4b21      	ldr	r3, [pc, #132]	; (80005bc <initSystem+0x184>)
 8000538:	2201      	movs	r2, #1
 800053a:	721a      	strb	r2, [r3, #8]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_PULLUP;
 800053c:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <initSystem+0x184>)
 800053e:	2201      	movs	r2, #1
 8000540:	71da      	strb	r2, [r3, #7]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_FAST;
 8000542:	4b1e      	ldr	r3, [pc, #120]	; (80005bc <initSystem+0x184>)
 8000544:	2202      	movs	r2, #2
 8000546:	719a      	strb	r2, [r3, #6]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinAltFunMode		= AF4;
 8000548:	4b1c      	ldr	r3, [pc, #112]	; (80005bc <initSystem+0x184>)
 800054a:	2204      	movs	r2, #4
 800054c:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&handlerI2CSCL);
 800054e:	481b      	ldr	r0, [pc, #108]	; (80005bc <initSystem+0x184>)
 8000550:	f000 f8ba 	bl	80006c8 <GPIO_Config>

	// Configuramos los pines para el I2C SDA
	handlerI2CSDA.pGPIOx								= GPIOB;
 8000554:	4b1b      	ldr	r3, [pc, #108]	; (80005c4 <initSystem+0x18c>)
 8000556:	4a1a      	ldr	r2, [pc, #104]	; (80005c0 <initSystem+0x188>)
 8000558:	601a      	str	r2, [r3, #0]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinNumber			= PIN_7;
 800055a:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <initSystem+0x18c>)
 800055c:	2207      	movs	r2, #7
 800055e:	711a      	strb	r2, [r3, #4]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 8000560:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <initSystem+0x18c>)
 8000562:	2202      	movs	r2, #2
 8000564:	715a      	strb	r2, [r3, #5]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_OPENDRAIN;
 8000566:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <initSystem+0x18c>)
 8000568:	2201      	movs	r2, #1
 800056a:	721a      	strb	r2, [r3, #8]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_PULLUP;
 800056c:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <initSystem+0x18c>)
 800056e:	2201      	movs	r2, #1
 8000570:	71da      	strb	r2, [r3, #7]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_FAST;
 8000572:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <initSystem+0x18c>)
 8000574:	2202      	movs	r2, #2
 8000576:	719a      	strb	r2, [r3, #6]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinAltFunMode		= AF4;
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <initSystem+0x18c>)
 800057a:	2204      	movs	r2, #4
 800057c:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&handlerI2CSDA);
 800057e:	4811      	ldr	r0, [pc, #68]	; (80005c4 <initSystem+0x18c>)
 8000580:	f000 f8a2 	bl	80006c8 <GPIO_Config>

	handlerAccelerometer.ptrI2Cx		= I2C1;
 8000584:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <initSystem+0x190>)
 8000586:	4a11      	ldr	r2, [pc, #68]	; (80005cc <initSystem+0x194>)
 8000588:	601a      	str	r2, [r3, #0]
	handlerAccelerometer.modeI2C		= I2C_MODE_FM;
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <initSystem+0x190>)
 800058c:	2201      	movs	r2, #1
 800058e:	715a      	strb	r2, [r3, #5]
	handlerAccelerometer.slaveAddress	= 0b1101000;		// Direcci√≥n del Accel con Logic 0 (0x68)
 8000590:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <initSystem+0x190>)
 8000592:	2268      	movs	r2, #104	; 0x68
 8000594:	711a      	strb	r2, [r3, #4]

	I2C_Config(&handlerAccelerometer);
 8000596:	480c      	ldr	r0, [pc, #48]	; (80005c8 <initSystem+0x190>)
 8000598:	f000 f9e8 	bl	800096c <I2C_Config>

}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	200000c4 	.word	0x200000c4
 80005a4:	40020000 	.word	0x40020000
 80005a8:	200000d0 	.word	0x200000d0
 80005ac:	200000dc 	.word	0x200000dc
 80005b0:	200000f4 	.word	0x200000f4
 80005b4:	40004400 	.word	0x40004400
 80005b8:	200000e8 	.word	0x200000e8
 80005bc:	2000018c 	.word	0x2000018c
 80005c0:	40020400 	.word	0x40020400
 80005c4:	20000180 	.word	0x20000180
 80005c8:	20000198 	.word	0x20000198
 80005cc:	40005400 	.word	0x40005400

080005d0 <USART2_Callback>:

//***********// CallBacks //***********//

void USART2_Callback(void){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	// Lectura de los datos recibidos
	rxData = returnData();
 80005d4:	f000 ff7c 	bl	80014d0 <returnData>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	4b01      	ldr	r3, [pc, #4]	; (80005e4 <USART2_Callback+0x14>)
 80005de:	701a      	strb	r2, [r3, #0]
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	200001a0 	.word	0x200001a0

080005e8 <Timer2_Callback>:
// Timer encargado del StateLED
void Timer2_Callback(void){
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
	handlerStateLED.pGPIOx -> ODR ^= GPIO_ODR_OD5;		// Encendido y apagado StateLED
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <Timer2_Callback+0x1c>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	695a      	ldr	r2, [r3, #20]
 80005f2:	4b04      	ldr	r3, [pc, #16]	; (8000604 <Timer2_Callback+0x1c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f082 0220 	eor.w	r2, r2, #32
 80005fa:	615a      	str	r2, [r3, #20]
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	200000c4 	.word	0x200000c4

08000608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000610:	4a14      	ldr	r2, [pc, #80]	; (8000664 <_sbrk+0x5c>)
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <_sbrk+0x60>)
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800061c:	4b13      	ldr	r3, [pc, #76]	; (800066c <_sbrk+0x64>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d102      	bne.n	800062a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <_sbrk+0x64>)
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <_sbrk+0x68>)
 8000628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <_sbrk+0x64>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4413      	add	r3, r2
 8000632:	693a      	ldr	r2, [r7, #16]
 8000634:	429a      	cmp	r2, r3
 8000636:	d207      	bcs.n	8000648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000638:	f000 ff84 	bl	8001544 <__errno>
 800063c:	4603      	mov	r3, r0
 800063e:	220c      	movs	r2, #12
 8000640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000646:	e009      	b.n	800065c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <_sbrk+0x64>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800064e:	4b07      	ldr	r3, [pc, #28]	; (800066c <_sbrk+0x64>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <_sbrk+0x64>)
 8000658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800065a:	68fb      	ldr	r3, [r7, #12]
}
 800065c:	4618      	mov	r0, r3
 800065e:	3718      	adds	r7, #24
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20020000 	.word	0x20020000
 8000668:	00000400 	.word	0x00000400
 800066c:	200001a4 	.word	0x200001a4
 8000670:	200001c8 	.word	0x200001c8

08000674 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000674:	480d      	ldr	r0, [pc, #52]	; (80006ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000676:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000678:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800067c:	480c      	ldr	r0, [pc, #48]	; (80006b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800067e:	490d      	ldr	r1, [pc, #52]	; (80006b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000680:	4a0d      	ldr	r2, [pc, #52]	; (80006b8 <LoopForever+0xe>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000684:	e002      	b.n	800068c <LoopCopyDataInit>

08000686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068a:	3304      	adds	r3, #4

0800068c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800068c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000690:	d3f9      	bcc.n	8000686 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000692:	4a0a      	ldr	r2, [pc, #40]	; (80006bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000694:	4c0a      	ldr	r4, [pc, #40]	; (80006c0 <LoopForever+0x16>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000698:	e001      	b.n	800069e <LoopFillZerobss>

0800069a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800069c:	3204      	adds	r2, #4

0800069e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a0:	d3fb      	bcc.n	800069a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006a2:	f000 ff55 	bl	8001550 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006a6:	f7ff fdeb 	bl	8000280 <main>

080006aa <LoopForever>:

LoopForever:
    b LoopForever
 80006aa:	e7fe      	b.n	80006aa <LoopForever>
  ldr   r0, =_estack
 80006ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b4:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80006b8:	08001ef8 	.word	0x08001ef8
  ldr r2, =_sbss
 80006bc:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80006c0:	200001c4 	.word	0x200001c4

080006c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c4:	e7fe      	b.n	80006c4 <ADC_IRQHandler>
	...

080006c8 <GPIO_Config>:
orden estricto para poder que el sistema permita configurar el perif√©rico X.
Lo primero y m√°s importante es activar la se√±al del reloj principal hacia ese
elemento espec√≠fico (relacionado con el perif√©rico RCC), a esto llamaremos
simplemente "activar el perif√©rico o activar la se√±al de reloj del perif√©rico".
*/
void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]

	// 1) Activar el perif√©rico
	// Verificamos para GPIOA
	if (pGPIOHandler -> pGPIOx == GPIOA){
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a87      	ldr	r2, [pc, #540]	; (80008fc <GPIO_Config+0x234>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d106      	bne.n	80006f0 <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posici√≥n correspondiente al GPIOA
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 80006e2:	4b87      	ldr	r3, [pc, #540]	; (8000900 <GPIO_Config+0x238>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a86      	ldr	r2, [pc, #536]	; (8000900 <GPIO_Config+0x238>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	e03a      	b.n	8000766 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if (pGPIOHandler -> pGPIOx == GPIOB){
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a83      	ldr	r2, [pc, #524]	; (8000904 <GPIO_Config+0x23c>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d106      	bne.n	8000708 <GPIO_Config+0x40>
		// Escribimos 1 (SET) en la posici√≥n correspondiente al GPIOB
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 80006fa:	4b81      	ldr	r3, [pc, #516]	; (8000900 <GPIO_Config+0x238>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a80      	ldr	r2, [pc, #512]	; (8000900 <GPIO_Config+0x238>)
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	e02e      	b.n	8000766 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOC
	else if (pGPIOHandler -> pGPIOx == GPIOC){
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a7e      	ldr	r2, [pc, #504]	; (8000908 <GPIO_Config+0x240>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d106      	bne.n	8000720 <GPIO_Config+0x58>
		// Escribimos 1 (SET) en la posici√≥n correspondiente al GPIOC
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8000712:	4b7b      	ldr	r3, [pc, #492]	; (8000900 <GPIO_Config+0x238>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a7a      	ldr	r2, [pc, #488]	; (8000900 <GPIO_Config+0x238>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	e022      	b.n	8000766 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOD
	else if (pGPIOHandler -> pGPIOx == GPIOD){
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a79      	ldr	r2, [pc, #484]	; (800090c <GPIO_Config+0x244>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d106      	bne.n	8000738 <GPIO_Config+0x70>
		// Escribimos 1 (SET) en la posici√≥n correspondiente al GPIOD
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 800072a:	4b75      	ldr	r3, [pc, #468]	; (8000900 <GPIO_Config+0x238>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a74      	ldr	r2, [pc, #464]	; (8000900 <GPIO_Config+0x238>)
 8000730:	f043 0308 	orr.w	r3, r3, #8
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	e016      	b.n	8000766 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOE
	else if (pGPIOHandler -> pGPIOx == GPIOE){
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a74      	ldr	r2, [pc, #464]	; (8000910 <GPIO_Config+0x248>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d106      	bne.n	8000750 <GPIO_Config+0x88>
		// Escribimos 1 (SET) en la posici√≥n correspondiente al GPIOE
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8000742:	4b6f      	ldr	r3, [pc, #444]	; (8000900 <GPIO_Config+0x238>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a6e      	ldr	r2, [pc, #440]	; (8000900 <GPIO_Config+0x238>)
 8000748:	f043 0310 	orr.w	r3, r3, #16
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	e00a      	b.n	8000766 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOH
	else if (pGPIOHandler -> pGPIOx == GPIOH){
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a6f      	ldr	r2, [pc, #444]	; (8000914 <GPIO_Config+0x24c>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d105      	bne.n	8000766 <GPIO_Config+0x9e>
		// Escribimos 1 (SET) en la posici√≥n correspondiente al GPIOH
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 800075a:	4b69      	ldr	r3, [pc, #420]	; (8000900 <GPIO_Config+0x238>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a68      	ldr	r2, [pc, #416]	; (8000900 <GPIO_Config+0x238>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
	// Despu√©s de activado, podemos comenzar a configurar.

	// 2) Configurando el registro GPIOx_MODER
	// Ac√° estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y todo eso lo cargamos en la variable aux_Config
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	795b      	ldrb	r3, [r3, #5]
 800076a:	461a      	mov	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	791b      	ldrb	r3, [r3, #4]
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	fa02 f303 	lsl.w	r3, r2, r3
 8000776:	60fb      	str	r3, [r7, #12]

	// Antes de cargar el nuevo valor, limpiamos los bits espec√≠ficos de ese registro (debemos escribir 0b00)
	// para lo cual aplicamos una m√°scara y una operaci√≥n bitwise AND
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	791b      	ldrb	r3, [r3, #4]
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	2103      	movs	r1, #3
 8000786:	fa01 f303 	lsl.w	r3, r1, r3
 800078a:	43db      	mvns	r3, r3
 800078c:	4619      	mov	r1, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	400a      	ands	r2, r1
 8000794:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler -> pGPIOx -> MODER |= auxConfig;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	6819      	ldr	r1, [r3, #0]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	68fa      	ldr	r2, [r7, #12]
 80007a2:	430a      	orrs	r2, r1
 80007a4:	601a      	str	r2, [r3, #0]

	// 3) Configurando el registro GPIOx_OTYPER
	// De nuevo, leemos y movemos el valor un n√∫mero "PinNumber" de veces
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	7a1b      	ldrb	r3, [r3, #8]
 80007aa:	461a      	mov	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	791b      	ldrb	r3, [r3, #4]
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler -> pGPIOx -> OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	685a      	ldr	r2, [r3, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	791b      	ldrb	r3, [r3, #4]
 80007c0:	4619      	mov	r1, r3
 80007c2:	2301      	movs	r3, #1
 80007c4:	408b      	lsls	r3, r1
 80007c6:	43db      	mvns	r3, r3
 80007c8:	4619      	mov	r1, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	400a      	ands	r2, r1
 80007d0:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OTYPER |= auxConfig;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	6859      	ldr	r1, [r3, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	68fa      	ldr	r2, [r7, #12]
 80007de:	430a      	orrs	r2, r1
 80007e0:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	799b      	ldrb	r3, [r3, #6]
 80007e6:	461a      	mov	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	791b      	ldrb	r3, [r3, #4]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	60fb      	str	r3, [r7, #12]

	// Limpiando la posici√≥n antes de cargar la nueva configuraci√≥n
	pGPIOHandler -> pGPIOx -> OSPEEDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	689a      	ldr	r2, [r3, #8]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	2103      	movs	r1, #3
 8000802:	fa01 f303 	lsl.w	r3, r1, r3
 8000806:	43db      	mvns	r3, r3
 8000808:	4619      	mov	r1, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	400a      	ands	r2, r1
 8000810:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OSPEEDR |= auxConfig;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	6899      	ldr	r1, [r3, #8]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	68fa      	ldr	r2, [r7, #12]
 800081e:	430a      	orrs	r2, r1
 8000820:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante.
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	79db      	ldrb	r3, [r3, #7]
 8000826:	461a      	mov	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	791b      	ldrb	r3, [r3, #4]
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	60fb      	str	r3, [r7, #12]

	// Limpiando la posici√≥n antes de cargar la nueva configuraci√≥n
	pGPIOHandler -> pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	68da      	ldr	r2, [r3, #12]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	791b      	ldrb	r3, [r3, #4]
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	2103      	movs	r1, #3
 8000842:	fa01 f303 	lsl.w	r3, r1, r3
 8000846:	43db      	mvns	r3, r3
 8000848:	4619      	mov	r1, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	400a      	ands	r2, r1
 8000850:	60da      	str	r2, [r3, #12]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> PUPDR |= auxConfig;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	68d9      	ldr	r1, [r3, #12]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	68fa      	ldr	r2, [r7, #12]
 800085e:	430a      	orrs	r2, r1
 8000860:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuraci√≥n de las funciones alternativas... Se ver√° luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	795b      	ldrb	r3, [r3, #5]
 8000866:	2b02      	cmp	r3, #2
 8000868:	d143      	bne.n	80008f2 <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	791b      	ldrb	r3, [r3, #4]
 800086e:	2b07      	cmp	r3, #7
 8000870:	d81f      	bhi.n	80008b2 <GPIO_Config+0x1ea>
			// Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	791b      	ldrb	r3, [r3, #4]
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	60bb      	str	r3, [r7, #8]

			// Limpiamos primero la posici√≥n del registro que deseamos escribir a continuaci√≥n
			pGPIOHandler -> pGPIOx -> AFR[0] &= ~(0b1111 << auxPosition);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	6a1a      	ldr	r2, [r3, #32]
 8000880:	210f      	movs	r1, #15
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	fa01 f303 	lsl.w	r3, r1, r3
 8000888:	43db      	mvns	r3, r3
 800088a:	4619      	mov	r1, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	400a      	ands	r2, r1
 8000892:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posici√≥n seleccionada
			pGPIOHandler -> pGPIOx -> AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	6a1a      	ldr	r2, [r3, #32]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	7a5b      	ldrb	r3, [r3, #9]
 800089e:	4619      	mov	r1, r3
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	4619      	mov	r1, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	430a      	orrs	r2, r1
 80008ae:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurando en la posici√≥n seleccionada
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} // Fin del GPIO_Config
 80008b0:	e01f      	b.n	80008f2 <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber -8);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	791b      	ldrb	r3, [r3, #4]
 80008b6:	3b08      	subs	r3, #8
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx -> AFR[1] &= ~(0b1111 << auxPosition);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008c2:	210f      	movs	r1, #15
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ca:	43db      	mvns	r3, r3
 80008cc:	4619      	mov	r1, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	400a      	ands	r2, r1
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	7a5b      	ldrb	r3, [r3, #9]
 80008e0:	4619      	mov	r1, r3
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	fa01 f303 	lsl.w	r3, r1, r3
 80008e8:	4619      	mov	r1, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	430a      	orrs	r2, r1
 80008f0:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_Config
 80008f2:	bf00      	nop
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	40020000 	.word	0x40020000
 8000900:	40023800 	.word	0x40023800
 8000904:	40020400 	.word	0x40020400
 8000908:	40020800 	.word	0x40020800
 800090c:	40020c00 	.word	0x40020c00
 8000910:	40021000 	.word	0x40021000
 8000914:	40021c00 	.word	0x40021c00

08000918 <GPIO_WritePin>:
 *
 *
Funci√≥n utilizada para cambiar de estado el pin entregado en el handler, asignando
el valor entregado en la variable newState
*/
void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	70fb      	strb	r3, [r7, #3]
	// Limpiamos la posici√≥n que deseamos
	// pPinHandler -> pGPIOx -> ODR &= ~(SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
	if(newState == SET){
 8000924:	78fb      	ldrb	r3, [r7, #3]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d10d      	bne.n	8000946 <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler -> pGPIOx -> BSRR |= (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	699a      	ldr	r2, [r3, #24]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	791b      	ldrb	r3, [r3, #4]
 8000934:	4619      	mov	r1, r3
 8000936:	2301      	movs	r3, #1
 8000938:	408b      	lsls	r3, r1
 800093a:	4619      	mov	r1, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	430a      	orrs	r2, r1
 8000942:	619a      	str	r2, [r3, #24]
	}
	else{
		// Trabajando con la parte alta del registro
		pPinHandler -> pGPIOx -> BSRR |= (SET << (pPinHandler -> GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8000944:	e00d      	b.n	8000962 <GPIO_WritePin+0x4a>
		pPinHandler -> pGPIOx -> BSRR |= (SET << (pPinHandler -> GPIO_PinConfig.GPIO_PinNumber + 16));
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	699a      	ldr	r2, [r3, #24]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	791b      	ldrb	r3, [r3, #4]
 8000950:	3310      	adds	r3, #16
 8000952:	2101      	movs	r1, #1
 8000954:	fa01 f303 	lsl.w	r3, r1, r3
 8000958:	4619      	mov	r1, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	430a      	orrs	r2, r1
 8000960:	619a      	str	r2, [r3, #24]
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr

0800096c <I2C_Config>:
 * y con la resistencia en modo pull - up.
 * */

// Funci√≥n de configuraci√≥n para el I2C

void I2C_Config(I2C_Handler_t *ptrHandlerI2C){
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]

	/* 1. Activar la se√±al de reloj para el I2C y los PGIOs */

	if(ptrHandlerI2C -> ptrI2Cx == I2C1){
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a45      	ldr	r2, [pc, #276]	; (8000a90 <I2C_Config+0x124>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d106      	bne.n	800098c <I2C_Config+0x20>
		// Activaci√≥n RCC para el I2C1
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 800097e:	4b45      	ldr	r3, [pc, #276]	; (8000a94 <I2C_Config+0x128>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a44      	ldr	r2, [pc, #272]	; (8000a94 <I2C_Config+0x128>)
 8000984:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	e016      	b.n	80009ba <I2C_Config+0x4e>
	}
	else if(ptrHandlerI2C -> ptrI2Cx == I2C2){
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a41      	ldr	r2, [pc, #260]	; (8000a98 <I2C_Config+0x12c>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d106      	bne.n	80009a4 <I2C_Config+0x38>
		// Activaci√≥n RCC para el I2C2
		RCC -> APB1ENR |= RCC_APB1ENR_I2C2EN ;
 8000996:	4b3f      	ldr	r3, [pc, #252]	; (8000a94 <I2C_Config+0x128>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	4a3e      	ldr	r2, [pc, #248]	; (8000a94 <I2C_Config+0x128>)
 800099c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009a0:	6413      	str	r3, [r2, #64]	; 0x40
 80009a2:	e00a      	b.n	80009ba <I2C_Config+0x4e>
	}
	else if(ptrHandlerI2C -> ptrI2Cx == I2C3){
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a3c      	ldr	r2, [pc, #240]	; (8000a9c <I2C_Config+0x130>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d105      	bne.n	80009ba <I2C_Config+0x4e>
		// Activaci√≥n RCC para el I2C3
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 80009ae:	4b39      	ldr	r3, [pc, #228]	; (8000a94 <I2C_Config+0x128>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	4a38      	ldr	r2, [pc, #224]	; (8000a94 <I2C_Config+0x128>)
 80009b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009b8:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Limpiamos los registros del I2C. Reiniciamos el periferico
	 *  de forma que inicia en un estado conocido */

	ptrHandlerI2C -> ptrI2Cx -> CR1 |= I2C_CR1_SWRST;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80009c8:	601a      	str	r2, [r3, #0]
	__NOP();
 80009ca:	bf00      	nop
	ptrHandlerI2C -> ptrI2Cx -> CR1 &= ~I2C_CR1_SWRST;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80009da:	601a      	str	r2, [r3, #0]
	 * Indicamos cual es la velocidad del reloj principal, que es la se√±al utilizada por el perif√©rico
	 * para generar la se√±al de reloj para el bus I2C
	 * */
	// PLCK1 FRECUENCY in MHz

	ptrHandlerI2C -> ptrI2Cx -> CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuraci√≥n actual
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	685a      	ldr	r2, [r3, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80009ea:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C -> ptrI2Cx -> CR2 |= (MAIN_CLOCK_16_MHz_I2C << I2C_CR2_FREQ_Pos);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	685a      	ldr	r2, [r3, #4]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f042 0210 	orr.w	r2, r2, #16
 80009fa:	605a      	str	r2, [r3, #4]
	 * En esta configuraci√≥n tambi√©n se incluye la velocidad del reloj
	 * y el tiempo m√°ximo para el cambio de la se√±al (T-Rise).
	 * Todo comienza con los dos registros en 0
	 * */

	ptrHandlerI2C -> ptrI2Cx -> CCR = 0;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2200      	movs	r2, #0
 8000a02:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C -> ptrI2Cx -> TRISE = 0;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C -> modeI2C == I2C_MODE_SM){
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	795b      	ldrb	r3, [r3, #5]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d118      	bne.n	8000a46 <I2C_Config+0xda>

		// Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C -> ptrI2Cx -> CCR &= ~I2C_CCR_FS;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	69da      	ldr	r2, [r3, #28]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000a22:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que se encarga de generar la se√±al del reloj
		ptrHandlerI2C -> ptrI2Cx -> CCR |= (I2C_MODE_SM_SPEED_100KHz << I2C_CCR_CCR_Pos);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	69da      	ldr	r2, [r3, #28]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8000a32:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T - Rise m√°ximo
		ptrHandlerI2C -> ptrI2Cx -> TRISE |= I2C_MAX_RISE_TIME_SM;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	6a1a      	ldr	r2, [r3, #32]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f042 0211 	orr.w	r2, r2, #17
 8000a42:	621a      	str	r2, [r3, #32]
 8000a44:	e017      	b.n	8000a76 <I2C_Config+0x10a>
	}
	else{
		// Estamos en modo "Fast" (FM Mode)
		// Seleccionamos el modo Fast
		ptrHandlerI2C -> ptrI2Cx -> CCR |= I2C_CCR_FS;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	69da      	ldr	r2, [r3, #28]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a54:	61da      	str	r2, [r3, #28]

		// COnfiguramos el registro que se encarga de generar la se√±al del reloj
		ptrHandlerI2C -> ptrI2Cx -> CCR |= (I2C_MODE_FM_SPEED_400Khz << I2C_CCR_CCR_Pos);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	69da      	ldr	r2, [r3, #28]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f042 020e 	orr.w	r2, r2, #14
 8000a64:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T - Rise m√°ximo
		ptrHandlerI2C -> ptrI2Cx -> TRISE |= I2C_MAX_RISE_TIME_FM;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	6a1a      	ldr	r2, [r3, #32]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f042 0206 	orr.w	r2, r2, #6
 8000a74:	621a      	str	r2, [r3, #32]
	}

	/* 5. Activamos el I2C Peripheral (M√≥dulo I2C).*/

	ptrHandlerI2C -> ptrI2Cx -> CR1 |= I2C_CR1_PE;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f042 0201 	orr.w	r2, r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr
 8000a90:	40005400 	.word	0x40005400
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40005800 	.word	0x40005800
 8000a9c:	40005c00 	.word	0x40005c00

08000aa0 <I2C_readByte>:

uint8_t I2C_readByte(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	70fb      	strb	r3, [r7, #3]

	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;	// Para no generar warning

	/* 1. Verificamos que la l√≠nea no est√° ocupada - bit "busy" en I2C_CR2 */
	while(ptrHandlerI2C -> ptrI2Cx -> SR2 & I2C_SR2_BUSY){
 8000ab0:	e000      	b.n	8000ab4 <I2C_readByte+0x14>
		__NOP();
 8000ab2:	bf00      	nop
	while(ptrHandlerI2C -> ptrI2Cx -> SR2 & I2C_SR2_BUSY){
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d1f7      	bne.n	8000ab2 <I2C_readByte+0x12>
	}

	/* 2. Generamos la se√±al "start" */
	ptrHandlerI2C -> ptrI2Cx -> CR1 |= I2C_CR1_START;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ad0:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "Start" se levante */
	/* Mientras esperamos, el valor de SB es 0, entonces la negaci√≥n (!) es 1 */
	while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_SB)){
 8000ad2:	e000      	b.n	8000ad6 <I2C_readByte+0x36>
		__NOP();
 8000ad4:	bf00      	nop
	while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_SB)){
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	695b      	ldr	r3, [r3, #20]
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d0f7      	beq.n	8000ad4 <I2C_readByte+0x34>
	}

	/* 3. Enviamos la direcci√≥n del Slave y el bit que indica que deseamos escribir (0)
	 * (en el siguiente paso se env√≠a la direcci√≥n de memoria que se desea leer */

	ptrHandlerI2C -> ptrI2Cx -> DR = (ptrHandlerI2C -> slaveAddress << 1)	| I2C_WRITE_DATA;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	791b      	ldrb	r3, [r3, #4]
 8000ae8:	005a      	lsls	r2, r3, #1
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	611a      	str	r2, [r3, #16]

	 /* 3.1 Esperemos hasta que la bandera del evento "addr" se levante
	  * (esto nos indica que la direcci√≥n fue enviada satisfactoriamente */
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_ADDR)){
 8000af0:	e000      	b.n	8000af4 <I2C_readByte+0x54>
		__NOP();
 8000af2:	bf00      	nop
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_ADDR)){
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d0f7      	beq.n	8000af2 <I2C_readByte+0x52>
	 }

	 /* 3.2 Debemos limpiar la bandera de la recepci√≥n de ACK de la "addr", para lo cual
	  * debemos leer en secuencia primero el I2C_SR1 y luego I2C_SR2 */
	 auxByte = ptrHandlerI2C -> ptrI2Cx -> SR1;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	695b      	ldr	r3, [r3, #20]
 8000b08:	73fb      	strb	r3, [r7, #15]
	 auxByte = ptrHandlerI2C -> ptrI2Cx -> SR2;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	73fb      	strb	r3, [r7, #15]

	 /* 4. Enviamos la direcci√≥n de memoria que deseamos leer */
	 ptrHandlerI2C -> ptrI2Cx -> DR = memAddr;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	78fa      	ldrb	r2, [r7, #3]
 8000b18:	611a      	str	r2, [r3, #16]

	 /* 4.1 Esperamos hasta que el byte sea transmitido */
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_TXE)){
 8000b1a:	e000      	b.n	8000b1e <I2C_readByte+0x7e>
		 __NOP();
 8000b1c:	bf00      	nop
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_TXE)){
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	695b      	ldr	r3, [r3, #20]
 8000b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d0f7      	beq.n	8000b1c <I2C_readByte+0x7c>
	 }

	 /* 5. Debemos generar una se√±al de RESTART, o sea, enviar un nuevo START */
	 ptrHandlerI2C -> ptrI2Cx -> CR1 |= I2C_CR1_START;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b3a:	601a      	str	r2, [r3, #0]

	 /* 5.1 Esperamos a que la bandera del evento "start" se levante */
	 /* Mientras esperamos, el valor de SB es 0, entonces la negaci√≥n (!) es 1*/
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_SB)){
 8000b3c:	e000      	b.n	8000b40 <I2C_readByte+0xa0>
		 __NOP();
 8000b3e:	bf00      	nop
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_SB)){
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d0f7      	beq.n	8000b3e <I2C_readByte+0x9e>
	 }

	 /* 6. Enviamos la direcci√≥n del Slave, pero ahora con la indicaci√≥n de leer */
	 ptrHandlerI2C -> ptrI2Cx -> DR = (ptrHandlerI2C -> slaveAddress << 1) | I2C_READ_DATA;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	791b      	ldrb	r3, [r3, #4]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	f043 0201 	orr.w	r2, r3, #1
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	611a      	str	r2, [r3, #16]

	 /* 6.1 Esperamos hasat que la bandera del evento "addr" se levante
	  * (esto nos indica que la direcci√≥n fue enviada satisfactoriamente
	  */
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_ADDR)){
 8000b5e:	e000      	b.n	8000b62 <I2C_readByte+0xc2>
		 __NOP();
 8000b60:	bf00      	nop
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_ADDR)){
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	695b      	ldr	r3, [r3, #20]
 8000b68:	f003 0302 	and.w	r3, r3, #2
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d0f7      	beq.n	8000b60 <I2C_readByte+0xc0>
	 }

	 /* 6.2 Debemos limpiar la bandera de la recepci√≥n de ACK de la "addr", para lo cual
	  * debemos leer en secuencia primero el I2C_SR1 y luego I2C_SR2 */

	 auxByte = ptrHandlerI2C -> ptrI2Cx -> SR1;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	73fb      	strb	r3, [r7, #15]
	 auxByte = ptrHandlerI2C -> ptrI2Cx -> SR2;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	73fb      	strb	r3, [r7, #15]

	 /* 7. Activamos la indicaci√≥n para no ACK (indicaci√≥n para el Slave de terminar)
	  * (Debemos escribir cero en la posici√≥n ACK del registro de control 1)
	  */
	 ptrHandlerI2C -> ptrI2Cx -> CR1 &= ~I2C_CR1_ACK;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b8e:	601a      	str	r2, [r3, #0]

	 /* 8. Genereamos la condici√≥n de stop */
	 ptrHandlerI2C -> ptrI2Cx -> CR1 |= I2C_CR1_STOP;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b9e:	601a      	str	r2, [r3, #0]

	 /* 9. Esperamos hasta que el byte entrante sea recibido */
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_RXNE)){
 8000ba0:	e000      	b.n	8000ba4 <I2C_readByte+0x104>
		 __NOP();
 8000ba2:	bf00      	nop
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_RXNE)){
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d0f7      	beq.n	8000ba2 <I2C_readByte+0x102>
	 }

	 ptrHandlerI2C -> dataI2C = ptrHandlerI2C -> ptrI2Cx -> DR;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	691b      	ldr	r3, [r3, #16]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	719a      	strb	r2, [r3, #6]

	 return ptrHandlerI2C -> dataI2C;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	799b      	ldrb	r3, [r3, #6]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <I2C_writeByte>:

void I2C_writeByte(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr, uint8_t dataToWrite){
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	70fb      	strb	r3, [r7, #3]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	70bb      	strb	r3, [r7, #2]

	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

/* 1. Verificamos que la l√≠nea no est√° ocupada - bit "busy" en I2C_CR2 */
	while(ptrHandlerI2C -> ptrI2Cx -> SR2 & I2C_SR2_BUSY){
 8000be0:	e000      	b.n	8000be4 <I2C_writeByte+0x18>
		__NOP();
 8000be2:	bf00      	nop
	while(ptrHandlerI2C -> ptrI2Cx -> SR2 & I2C_SR2_BUSY){
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1f7      	bne.n	8000be2 <I2C_writeByte+0x16>
	}

	/* 2. Generamos la se√±al "start" */
	ptrHandlerI2C -> ptrI2Cx -> CR1 |= I2C_CR1_START;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c00:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "Start" se levante */
	/* Mientras esperamos, el valor de SB es 0, entonces la negaci√≥n (!) es 1 */
	while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_SB)){
 8000c02:	e000      	b.n	8000c06 <I2C_writeByte+0x3a>
		__NOP();
 8000c04:	bf00      	nop
	while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_SB)){
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	695b      	ldr	r3, [r3, #20]
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d0f7      	beq.n	8000c04 <I2C_writeByte+0x38>
	}

	/* 3. Enviamos la direcci√≥n del Slave y el bit que indica que deseamos escribir (0)
	 * (en el siguiente paso se env√≠a la direcci√≥n de memoria que se desea leer */
	ptrHandlerI2C -> ptrI2Cx -> DR = (ptrHandlerI2C -> slaveAddress << 1)	| I2C_WRITE_DATA;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	791b      	ldrb	r3, [r3, #4]
 8000c18:	005a      	lsls	r2, r3, #1
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	611a      	str	r2, [r3, #16]

	 /* 3.1 Esperemos hasta que la bandera del evento "addr" se levante
	  * (esto nos indica que la direcci√≥n fue enviada satisfactoriamente */
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_ADDR)){
 8000c20:	e000      	b.n	8000c24 <I2C_writeByte+0x58>
		__NOP();
 8000c22:	bf00      	nop
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_ADDR)){
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0f7      	beq.n	8000c22 <I2C_writeByte+0x56>
	 }

	 /* 3.2 Debemos limpiar la bandera de la recepci√≥n de ACK de la "addr", para lo cual
	  * debemos leer en secuencia primero el I2C_SR1 y luego I2C_SR2 */
	 auxByte = ptrHandlerI2C -> ptrI2Cx -> SR1;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	73fb      	strb	r3, [r7, #15]
	 auxByte = ptrHandlerI2C -> ptrI2Cx -> SR2;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	73fb      	strb	r3, [r7, #15]

	 /* 4. Enviamos la direcci√≥n de memoria que deseamos leer */
	 ptrHandlerI2C -> ptrI2Cx -> DR = memAddr;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	78fa      	ldrb	r2, [r7, #3]
 8000c48:	611a      	str	r2, [r3, #16]

	 /* 4.1 Esperamos hasta que el byte sea transmitido */
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_TXE)){
 8000c4a:	e000      	b.n	8000c4e <I2C_writeByte+0x82>
		 __NOP();
 8000c4c:	bf00      	nop
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_TXE)){
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	695b      	ldr	r3, [r3, #20]
 8000c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d0f7      	beq.n	8000c4c <I2C_writeByte+0x80>
	 }

	 /* 5. Crgamos el valor que deseamos escribir */

	 ptrHandlerI2C -> ptrI2Cx -> DR = dataToWrite;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	78ba      	ldrb	r2, [r7, #2]
 8000c62:	611a      	str	r2, [r3, #16]

	 /* 6. Esperamos hasta que el bit sea transmitido */

	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_BTF)){
 8000c64:	e000      	b.n	8000c68 <I2C_writeByte+0x9c>
	 		 __NOP();
 8000c66:	bf00      	nop
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_BTF)){
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d0f7      	beq.n	8000c66 <I2C_writeByte+0x9a>
	 	 }

	 /* 7. Generamos la condici√≥n de stop */
	 ptrHandlerI2C -> ptrI2Cx -> CR1 |= I2C_CR1_STOP;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c84:	601a      	str	r2, [r3, #0]
}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	db0b      	blt.n	8000cba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	f003 021f 	and.w	r2, r3, #31
 8000ca8:	4906      	ldr	r1, [pc, #24]	; (8000cc4 <__NVIC_EnableIRQ+0x34>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	095b      	lsrs	r3, r3, #5
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <config_SysTickMs>:

uint64_t ticks;

/**/

void config_SysTickMs(void){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	// Reiniciamos el valor de la variable que cuenta tiempo
	ticks = 0;
 8000ccc:	4914      	ldr	r1, [pc, #80]	; (8000d20 <config_SysTickMs+0x58>)
 8000cce:	f04f 0200 	mov.w	r2, #0
 8000cd2:	f04f 0300 	mov.w	r3, #0
 8000cd6:	e9c1 2300 	strd	r2, r3, [r1]

	//Cargando el valor del limite de incrementos que representan 1ms.
	SysTick -> LOAD = SYSTICK_LOAD_VALUE;
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <config_SysTickMs+0x5c>)
 8000cdc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000ce0:	605a      	str	r2, [r3, #4]

	// Limpiamos el valor actual del SysTick
	SysTick -> VAL = 0;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <config_SysTickMs+0x5c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]

	// Configuramos el reloj interno como el reloj para el Timer
	SysTick -> CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <config_SysTickMs+0x5c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <config_SysTickMs+0x5c>)
 8000cee:	f043 0304 	orr.w	r3, r3, #4
 8000cf2:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
}
 8000cf6:	bf00      	nop

	// Desactivamos las interrupciones globales
	__disable_irq();

	// Activamos la interrupci√≥n debida al conteo a ceo del SysTick
	SysTick -> CTRL |= SysTick_CTRL_TICKINT_Msk;
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <config_SysTickMs+0x5c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a09      	ldr	r2, [pc, #36]	; (8000d24 <config_SysTickMs+0x5c>)
 8000cfe:	f043 0302 	orr.w	r3, r3, #2
 8000d02:	6013      	str	r3, [r2, #0]

	//Matriculamos la interrupci√≥n en el NVIC
	__NVIC_EnableIRQ(SysTick_IRQn);
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d08:	f7ff ffc2 	bl	8000c90 <__NVIC_EnableIRQ>

	// Activamos el Timer
	SysTick -> CTRL |= SysTick_CTRL_ENABLE_Msk;
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <config_SysTickMs+0x5c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <config_SysTickMs+0x5c>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000d18:	b662      	cpsie	i
}
 8000d1a:	bf00      	nop

	// Activamos de nuevo las interrupciones globales
	__enable_irq();
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200001a8 	.word	0x200001a8
 8000d24:	e000e010 	.word	0xe000e010

08000d28 <SysTick_Handler>:
	return ticks;
}

/**/

void SysTick_Handler(void){
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

	// Verificamos que la interrupci√≥n se lanza
	if(SysTick -> CTRL & SysTick_CTRL_COUNTFLAG_Msk){
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <SysTick_Handler+0x38>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d00e      	beq.n	8000d56 <SysTick_Handler+0x2e>

		// Limpiamos la bandera
		SysTick -> CTRL &= ~SysTick_CTRL_COUNTFLAG_Msk;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <SysTick_Handler+0x38>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <SysTick_Handler+0x38>)
 8000d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d42:	6013      	str	r3, [r2, #0]

		// Incrementamos en 1 el contador.
		ticks++;
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <SysTick_Handler+0x3c>)
 8000d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d4a:	1c50      	adds	r0, r2, #1
 8000d4c:	f143 0100 	adc.w	r1, r3, #0
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <SysTick_Handler+0x3c>)
 8000d52:	e9c3 0100 	strd	r0, r1, [r3]
	}
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000e010 	.word	0xe000e010
 8000d64:	200001a8 	.word	0x200001a8

08000d68 <__NVIC_EnableIRQ>:
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	db0b      	blt.n	8000d92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	f003 021f 	and.w	r2, r3, #31
 8000d80:	4906      	ldr	r1, [pc, #24]	; (8000d9c <__NVIC_EnableIRQ+0x34>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	095b      	lsrs	r3, r3, #5
 8000d88:	2001      	movs	r0, #1
 8000d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	e000e100 	.word	0xe000e100

08000da0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	db12      	blt.n	8000dd8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f003 021f 	and.w	r2, r3, #31
 8000db8:	490a      	ldr	r1, [pc, #40]	; (8000de4 <__NVIC_DisableIRQ+0x44>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	095b      	lsrs	r3, r3, #5
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc6:	3320      	adds	r3, #32
 8000dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dcc:	f3bf 8f4f 	dsb	sy
}
 8000dd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dd2:	f3bf 8f6f 	isb	sy
}
 8000dd6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	; (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <Timer_Config>:
 *
 * */

//NOTA: Hay que desactivar las interrupciones globales y luego volver a activarlas

void Timer_Config(TIMER_Handler_t *ptrTimerConfig){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000e44:	b672      	cpsid	i
}
 8000e46:	bf00      	nop
	/* 0. Desactivamos las interrupciones globales */

	__disable_irq();

	/* 1. Activamos la se√±al de reloj para el perif√©rico espec√≠fico */
	if(ptrTimerConfig -> ptrTIMx == TIM2){
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e50:	d106      	bne.n	8000e60 <Timer_Config+0x24>
		// Activamos la se√±al de reloj del TIM2
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000e52:	4b4b      	ldr	r3, [pc, #300]	; (8000f80 <Timer_Config+0x144>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a4a      	ldr	r2, [pc, #296]	; (8000f80 <Timer_Config+0x144>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	e022      	b.n	8000ea6 <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM3){
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a47      	ldr	r2, [pc, #284]	; (8000f84 <Timer_Config+0x148>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d106      	bne.n	8000e78 <Timer_Config+0x3c>
		// Activamos la se√±al de reloj del TIM3
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000e6a:	4b45      	ldr	r3, [pc, #276]	; (8000f80 <Timer_Config+0x144>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a44      	ldr	r2, [pc, #272]	; (8000f80 <Timer_Config+0x144>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	e016      	b.n	8000ea6 <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM4){
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a42      	ldr	r2, [pc, #264]	; (8000f88 <Timer_Config+0x14c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d106      	bne.n	8000e90 <Timer_Config+0x54>
		// Activamos la se√±al de reloj del TIM4
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000e82:	4b3f      	ldr	r3, [pc, #252]	; (8000f80 <Timer_Config+0x144>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	4a3e      	ldr	r2, [pc, #248]	; (8000f80 <Timer_Config+0x144>)
 8000e88:	f043 0304 	orr.w	r3, r3, #4
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	e00a      	b.n	8000ea6 <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM5){
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a3d      	ldr	r2, [pc, #244]	; (8000f8c <Timer_Config+0x150>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d105      	bne.n	8000ea6 <Timer_Config+0x6a>
		// Activamos la se√±al de reloj del TIM5
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8000e9a:	4b39      	ldr	r3, [pc, #228]	; (8000f80 <Timer_Config+0x144>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	4a38      	ldr	r2, [pc, #224]	; (8000f80 <Timer_Config+0x144>)
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuraci√≥n del modo del timer (UP or DOWN) */

	if(ptrTimerConfig -> timerConfig.Timer_mode == TIMER_MODE_UP){
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	791b      	ldrb	r3, [r3, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d10c      	bne.n	8000ec8 <Timer_Config+0x8c>
		// Configuramos el timer en modo UP
		ptrTimerConfig -> ptrTIMx -> CR1 &= ~(TIM_CR1_DIR);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 0210 	bic.w	r2, r2, #16
 8000ebc:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) en cero.
		ptrTimerConfig -> ptrTIMx -> CNT = 0;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
 8000ec6:	e00d      	b.n	8000ee4 <Timer_Config+0xa8>

	}
	else{
		// Configuramos el timer en modo DOWN
		ptrTimerConfig -> ptrTIMx -> CR1 |= ~(TIM_CR1_DIR);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f062 0210 	orn	r2, r2, #16
 8000ed6:	601a      	str	r2, [r3, #0]

		// Ponemos en el contador (CNT) el valor del periodo
		ptrTimerConfig -> ptrTIMx -> CNT = ptrTimerConfig -> timerConfig.Timer_period -1;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	3a01      	subs	r2, #1
 8000ee2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuraci√≥n del Prescaler */
	ptrTimerConfig -> ptrTIMx -> PSC = ptrTimerConfig -> timerConfig.Timer_speed -1;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	88db      	ldrh	r3, [r3, #6]
 8000ee8:	1e5a      	subs	r2, r3, #1
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo de las interrupciones */
	ptrTimerConfig -> ptrTIMx -> ARR = ptrTimerConfig -> timerConfig.Timer_period -1;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	3a01      	subs	r2, #1
 8000efa:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse  */
	ptrTimerConfig -> ptrTIMx -> CR1 |= TIM_CR1_CEN;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f042 0201 	orr.w	r2, r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]

	/* 6. Activamos la interrupci√≥n debida a un "update event" */
	if(ptrTimerConfig -> ptrTIMx != TIM3){
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a1c      	ldr	r2, [pc, #112]	; (8000f84 <Timer_Config+0x148>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d007      	beq.n	8000f26 <Timer_Config+0xea>
		ptrTimerConfig -> ptrTIMx -> DIER |= TIM_DIER_UIE;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f042 0201 	orr.w	r2, r2, #1
 8000f24:	60da      	str	r2, [r3, #12]
	}

	/* 7. Activamos la se√±al de la interrupcu√≥n en el NVIC */

	if(ptrTimerConfig -> ptrTIMx == TIM2){
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f2e:	d107      	bne.n	8000f40 <Timer_Config+0x104>
		// Activamos la IRQ del TIM2
		__NVIC_EnableIRQ(TIM2_IRQn);
 8000f30:	201c      	movs	r0, #28
 8000f32:	f7ff ff19 	bl	8000d68 <__NVIC_EnableIRQ>

		// Establecemos la prioridad del timer
		__NVIC_SetPriority(TIM2_IRQn,3);
 8000f36:	2103      	movs	r1, #3
 8000f38:	201c      	movs	r0, #28
 8000f3a:	f7ff ff55 	bl	8000de8 <__NVIC_SetPriority>
 8000f3e:	e019      	b.n	8000f74 <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM3){
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0f      	ldr	r2, [pc, #60]	; (8000f84 <Timer_Config+0x148>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d103      	bne.n	8000f52 <Timer_Config+0x116>
		// Activamos la IRQ del TIM3
		__NVIC_DisableIRQ(TIM3_IRQn);
 8000f4a:	201d      	movs	r0, #29
 8000f4c:	f7ff ff28 	bl	8000da0 <__NVIC_DisableIRQ>
 8000f50:	e010      	b.n	8000f74 <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM4){
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a0c      	ldr	r2, [pc, #48]	; (8000f88 <Timer_Config+0x14c>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d103      	bne.n	8000f64 <Timer_Config+0x128>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM4_IRQn);
 8000f5c:	201e      	movs	r0, #30
 8000f5e:	f7ff ff03 	bl	8000d68 <__NVIC_EnableIRQ>
 8000f62:	e007      	b.n	8000f74 <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM5){
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <Timer_Config+0x150>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d102      	bne.n	8000f74 <Timer_Config+0x138>
		// Activamos la IRQ del TIM5
		__NVIC_EnableIRQ(TIM5_IRQn);
 8000f6e:	2032      	movs	r0, #50	; 0x32
 8000f70:	f7ff fefa 	bl	8000d68 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f74:	b662      	cpsie	i
}
 8000f76:	bf00      	nop
	}


	/* 8. Activamos de nuevo todas las interrupciones. */
	__enable_irq();
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40000400 	.word	0x40000400
 8000f88:	40000800 	.word	0x40000800
 8000f8c:	40000c00 	.word	0x40000c00

08000f90 <Timer3_Callback>:
__attribute__((weak)) void Timer2_Callback(void){
	__NOP();
}

// Callback Timer3
__attribute__((weak)) void Timer3_Callback(void){
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
	__NOP();
 8000f94:	bf00      	nop
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr

08000f9e <Timer4_Callback>:

// Callback Timer4
__attribute__((weak)) void Timer4_Callback(void){
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
	__NOP();
 8000fa2:	bf00      	nop
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr

08000fac <Timer5_Callback>:

// Callback Timer5
__attribute__((weak)) void Timer5_Callback(void){
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
	__NOP();
 8000fb0:	bf00      	nop
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr

08000fba <TIM2_IRQHandler>:

// Hay que hacer dos cosas: 1) Atender la interrupci√≥n. 2) Llamamos al Callback
/* Rutina de atenci√≥n a la interrupci√≥n del TIM2 */

void TIM2_IRQHandler(void){
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	af00      	add	r7, sp, #0
	TIM2 -> SR &= ~(TIM_SR_UIF);
 8000fbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fc8:	f023 0301 	bic.w	r3, r3, #1
 8000fcc:	6113      	str	r3, [r2, #16]
	Timer2_Callback();
 8000fce:	f7ff fb0b 	bl	80005e8 <Timer2_Callback>
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	TIM3 -> SR &= ~(TIM_SR_UIF);
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <TIM3_IRQHandler+0x18>)
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	4a03      	ldr	r2, [pc, #12]	; (8000ff0 <TIM3_IRQHandler+0x18>)
 8000fe2:	f023 0301 	bic.w	r3, r3, #1
 8000fe6:	6113      	str	r3, [r2, #16]
	Timer3_Callback();
 8000fe8:	f7ff ffd2 	bl	8000f90 <Timer3_Callback>
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40000400 	.word	0x40000400

08000ff4 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	TIM4 -> SR &= ~(TIM_SR_UIF);
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <TIM4_IRQHandler+0x18>)
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	4a03      	ldr	r2, [pc, #12]	; (800100c <TIM4_IRQHandler+0x18>)
 8000ffe:	f023 0301 	bic.w	r3, r3, #1
 8001002:	6113      	str	r3, [r2, #16]
	Timer4_Callback();
 8001004:	f7ff ffcb 	bl	8000f9e <Timer4_Callback>
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40000800 	.word	0x40000800

08001010 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	TIM5 -> SR &= ~(TIM_SR_UIF);
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <TIM5_IRQHandler+0x18>)
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	4a03      	ldr	r2, [pc, #12]	; (8001028 <TIM5_IRQHandler+0x18>)
 800101a:	f023 0301 	bic.w	r3, r3, #1
 800101e:	6113      	str	r3, [r2, #16]
	Timer5_Callback();
 8001020:	f7ff ffc4 	bl	8000fac <Timer5_Callback>
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40000c00 	.word	0x40000c00

0800102c <__NVIC_EnableIRQ>:
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	2b00      	cmp	r3, #0
 800103c:	db0b      	blt.n	8001056 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f003 021f 	and.w	r2, r3, #31
 8001044:	4906      	ldr	r1, [pc, #24]	; (8001060 <__NVIC_EnableIRQ+0x34>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	095b      	lsrs	r3, r3, #5
 800104c:	2001      	movs	r0, #1
 800104e:	fa00 f202 	lsl.w	r2, r0, r2
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	e000e100 	.word	0xe000e100

08001064 <USART_Config>:
 * del perif√©rico que se est√° utilizando.
 */

uint8_t data;

void USART_Config(USART_Handler_t *ptrUsartHandler){
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	bf00      	nop

	/* 1. Activamos la se√±al de reloj que viene desde el bus al que pertenece el perif√©rico.
	 * Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6)
	 */
	/*1.1 Configuramos el USART1*/
	if(ptrUsartHandler -> ptrUSARTx == USART1){
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a8c      	ldr	r2, [pc, #560]	; (80012a8 <USART_Config+0x244>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d106      	bne.n	8001088 <USART_Config+0x24>
		// Escribimos 1 (SET) en la posici√≥n correspondiente al USART1
		RCC -> APB2ENR |= (RCC_APB2ENR_USART1EN);
 800107a:	4b8c      	ldr	r3, [pc, #560]	; (80012ac <USART_Config+0x248>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	4a8b      	ldr	r2, [pc, #556]	; (80012ac <USART_Config+0x248>)
 8001080:	f043 0310 	orr.w	r3, r3, #16
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	e016      	b.n	80010b6 <USART_Config+0x52>
	}
	/*1.2 Configuramos el USART2*/
	else if(ptrUsartHandler -> ptrUSARTx == USART2){
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a88      	ldr	r2, [pc, #544]	; (80012b0 <USART_Config+0x24c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d106      	bne.n	80010a0 <USART_Config+0x3c>
		// Escribimos 1 (SET) en la posici√≥n correspondiente al USART1
		RCC -> APB1ENR |= (RCC_APB1ENR_USART2EN);
 8001092:	4b86      	ldr	r3, [pc, #536]	; (80012ac <USART_Config+0x248>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	4a85      	ldr	r2, [pc, #532]	; (80012ac <USART_Config+0x248>)
 8001098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109c:	6413      	str	r3, [r2, #64]	; 0x40
 800109e:	e00a      	b.n	80010b6 <USART_Config+0x52>
	}
	/*1.3 Configuramos el USART6*/
	else if(ptrUsartHandler -> ptrUSARTx == USART6){
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a83      	ldr	r2, [pc, #524]	; (80012b4 <USART_Config+0x250>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d105      	bne.n	80010b6 <USART_Config+0x52>
		// Escribimos 1 (SET) en la posici√≥n correspondiente al USART1
		RCC -> APB2ENR |= (RCC_APB2ENR_USART6EN);
 80010aa:	4b80      	ldr	r3, [pc, #512]	; (80012ac <USART_Config+0x248>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	4a7f      	ldr	r2, [pc, #508]	; (80012ac <USART_Config+0x248>)
 80010b0:	f043 0320 	orr.w	r3, r3, #32
 80010b4:	6453      	str	r3, [r2, #68]	; 0x44
	 * Configuramos el modo: only TX, only RX, o RXTX
	 * Por √∫ltimo activamos el modulo USART cuando todo est√° correctamente configurado
	 * */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuraci√≥n desde cero.
	ptrUsartHandler -> ptrUSARTx -> CR1 = 0;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
	ptrUsartHandler -> ptrUSARTx -> CR2 = 0;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]

	// 2.2 Configuraci√≥n del Parity:
	// Verificamos si el parity est√° activado o no
	if(ptrUsartHandler -> USART_Config.USART_parity != USART_PARITY_NONE){
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	79db      	ldrb	r3, [r3, #7]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d02b      	beq.n	8001126 <USART_Config+0xc2>

		// Verificamos si se ha seleccionado ODD or EVEN

		//Se selecciona EVEN
		if(ptrUsartHandler -> USART_Config.USART_parity == USART_PARITY_EVEN){
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	79db      	ldrb	r3, [r3, #7]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d113      	bne.n	80010fe <USART_Config+0x9a>
			//Ponemos 0b0 en la posicion 9 del registo CR1 para escoger Even
			ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_PS);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68da      	ldr	r2, [r3, #12]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010e4:	60da      	str	r2, [r3, #12]

			// Adem√°s, se seleccionan 9 bits.
			ptrUsartHandler -> USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2201      	movs	r2, #1
 80010ea:	719a      	strb	r2, [r3, #6]
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	e01b      	b.n	8001136 <USART_Config+0xd2>
		}
		//Se selecciona ODD
		else{
			//Ponemos 0b1 en la posicion 9 del registo CR1 para escoger Even
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_PS);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68da      	ldr	r2, [r3, #12]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800110c:	60da      	str	r2, [r3, #12]

			// Adem√°s, se seleccionan 9 bits.
			ptrUsartHandler -> USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2201      	movs	r2, #1
 8001112:	719a      	strb	r2, [r3, #6]
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	68da      	ldr	r2, [r3, #12]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	e007      	b.n	8001136 <USART_Config+0xd2>
		}
	}
	//No deseamos activar el parity-check
	else{
		//Ponemos 0b0 en la posicion 10 del registro CR1 para desactivar el Parity
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_PCE);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001134:	60da      	str	r2, [r3, #12]

	// 2.3 Configuramos el tama√±o del dato:

	//Verificamos si va a ser de 8 o 9 bits

	if(ptrUsartHandler -> USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	799b      	ldrb	r3, [r3, #6]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d108      	bne.n	8001150 <USART_Config+0xec>
		//Ponemos 0b0 en la posicion 12 del registro CR1 para escoger 8 bits
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_M);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	e007      	b.n	8001160 <USART_Config+0xfc>
	}else{
		//Ponemos 0b1 en la posicion 12 del registro CR1 para escoger 9 bits
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800115e:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)

	switch(ptrUsartHandler -> USART_Config.USART_stopbits){
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7a1b      	ldrb	r3, [r3, #8]
 8001164:	2b03      	cmp	r3, #3
 8001166:	d847      	bhi.n	80011f8 <USART_Config+0x194>
 8001168:	a201      	add	r2, pc, #4	; (adr r2, 8001170 <USART_Config+0x10c>)
 800116a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116e:	bf00      	nop
 8001170:	08001181 	.word	0x08001181
 8001174:	08001193 	.word	0x08001193
 8001178:	080011b5 	.word	0x080011b5
 800117c:	080011d7 	.word	0x080011d7
	case USART_STOPBIT_1: {
		//Cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	691a      	ldr	r2, [r3, #16]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800118e:	611a      	str	r2, [r3, #16]
		break;
 8001190:	e03b      	b.n	800120a <USART_Config+0x1a6>
	}
	case USART_STOPBIT_0_5:{
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	691a      	ldr	r2, [r3, #16]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80011a0:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b01 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP_0);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	691a      	ldr	r2, [r3, #16]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011b0:	611a      	str	r2, [r3, #16]
		break;
 80011b2:	e02a      	b.n	800120a <USART_Config+0x1a6>
	}
	case USART_STOPBIT_2:{
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	691a      	ldr	r2, [r3, #16]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80011c2:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b10 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP_1);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	691a      	ldr	r2, [r3, #16]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80011d2:	611a      	str	r2, [r3, #16]
		break;
 80011d4:	e019      	b.n	800120a <USART_Config+0x1a6>
	}
	case USART_STOPBIT_1_5: {
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	691a      	ldr	r2, [r3, #16]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80011e4:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b11 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	691a      	ldr	r2, [r3, #16]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80011f4:	611a      	str	r2, [r3, #16]
		break;
 80011f6:	e008      	b.n	800120a <USART_Config+0x1a6>
	}
	default:{
		//Cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	691a      	ldr	r2, [r3, #16]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001206:	611a      	str	r2, [r3, #16]
		break;
 8001208:	bf00      	nop
	}
	}

	// 2.4 Configuraci√≥n del Baudrate (SFR USART_BRR)
	// Ver tabla de valores (Tabla 75), Frec = 16MHz, overr = 0;
	if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	795b      	ldrb	r3, [r3, #5]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d105      	bne.n	800121e <USART_Config+0x1ba>
		// El valor a cargar es 104.1875 -> Mantiza = 104, fraction = 0.1875
		// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
		// Valor a cargar 0x683
		// Configurando el Baudrate generator para una velocidad de 9600bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0683;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f240 6283 	movw	r2, #1667	; 0x683
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	e011      	b.n	8001242 <USART_Config+0x1de>
	}

	else if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_19200){
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	795b      	ldrb	r3, [r3, #5]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d105      	bne.n	8001232 <USART_Config+0x1ce>
		// El valor a cargar es 52.0625 -> Mantiza = 52, fraction = 0.0625
		// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
		// Valor a cargar 0x0341
		// Configurando el Baudrate generator para una velocidad de 19200bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0341;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f240 3241 	movw	r2, #833	; 0x341
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	e007      	b.n	8001242 <USART_Config+0x1de>
	}

	else if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_115200){	//**************************************DUDAAAAAA
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	795b      	ldrb	r3, [r3, #5]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d103      	bne.n	8001242 <USART_Config+0x1de>
		// El valor a cargar es 8.6875 -> Mantiza = 8, fraction = 0.6875
		// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11
		// Valor a cargar 0x0081
		// Configurando el Baudrate generator para una velocidad de 115200bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x08B;//0x0081;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	228b      	movs	r2, #139	; 0x8b
 8001240:	609a      	str	r2, [r3, #8]
	}

	// 2.5 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler -> USART_Config.USART_mode){
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	791b      	ldrb	r3, [r3, #4]
 8001246:	2b03      	cmp	r3, #3
 8001248:	d847      	bhi.n	80012da <USART_Config+0x276>
 800124a:	a201      	add	r2, pc, #4	; (adr r2, 8001250 <USART_Config+0x1ec>)
 800124c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001250:	08001261 	.word	0x08001261
 8001254:	08001273 	.word	0x08001273
 8001258:	08001285 	.word	0x08001285
 800125c:	080012b9 	.word	0x080012b9
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		//Cargamos el valor 0b1 en el bit TE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TE);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	68da      	ldr	r2, [r3, #12]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 0208 	orr.w	r2, r2, #8
 800126e:	60da      	str	r2, [r3, #12]
		break;
 8001270:	e044      	b.n	80012fc <USART_Config+0x298>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		//Cargamos el valor 0b1 en el bit RE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RE);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f042 0204 	orr.w	r2, r2, #4
 8001280:	60da      	str	r2, [r3, #12]
		break;
 8001282:	e03b      	b.n	80012fc <USART_Config+0x298>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmisi√≥n como recepci√≥n
		//Cargamos el valor 0b1 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TE);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68da      	ldr	r2, [r3, #12]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 0208 	orr.w	r2, r2, #8
 8001292:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RE);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 0204 	orr.w	r2, r2, #4
 80012a2:	60da      	str	r2, [r3, #12]
		break;
 80012a4:	e02a      	b.n	80012fc <USART_Config+0x298>
 80012a6:	bf00      	nop
 80012a8:	40011000 	.word	0x40011000
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40004400 	.word	0x40004400
 80012b4:	40011400 	.word	0x40011400
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		//Cargamos el valor 0b0 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TE);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0208 	bic.w	r2, r2, #8
 80012c6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RE);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	68da      	ldr	r2, [r3, #12]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0204 	bic.w	r2, r2, #4
 80012d6:	60da      	str	r2, [r3, #12]
		break;
 80012d8:	e010      	b.n	80012fc <USART_Config+0x298>
	}
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		//Cargamos el valor 0b0 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TE);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0208 	bic.w	r2, r2, #8
 80012e8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RE);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68da      	ldr	r2, [r3, #12]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 0204 	bic.w	r2, r2, #4
 80012f8:	60da      	str	r2, [r3, #12]
		break;
 80012fa:	bf00      	nop
	}
	}

	// 2.6 Activamos el modulo serial.

	if(ptrUsartHandler -> USART_Config.USART_mode != USART_MODE_DISABLE){
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	791b      	ldrb	r3, [r3, #4]
 8001300:	2b03      	cmp	r3, #3
 8001302:	d007      	beq.n	8001314 <USART_Config+0x2b0>
		//Cargamos el valor de 0b1 en el bit UE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_UE);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68da      	ldr	r2, [r3, #12]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001312:	60da      	str	r2, [r3, #12]
	}

	// 3. Activamos la interrupci√≥n para el USART

	switch(ptrUsartHandler -> USART_Config.USART_interrupt){
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	7a5b      	ldrb	r3, [r3, #9]
 8001318:	2b03      	cmp	r3, #3
 800131a:	d84f      	bhi.n	80013bc <USART_Config+0x358>
 800131c:	a201      	add	r2, pc, #4	; (adr r2, 8001324 <USART_Config+0x2c0>)
 800131e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001322:	bf00      	nop
 8001324:	08001335 	.word	0x08001335
 8001328:	08001357 	.word	0x08001357
 800132c:	08001379 	.word	0x08001379
 8001330:	0800139b 	.word	0x0800139b
	// Analizamos los
	case USART_INTERRUPT_RX_ENABLE:
	{
		// Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RXNEIE);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f042 0220 	orr.w	r2, r2, #32
 8001342:	60da      	str	r2, [r3, #12]
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001352:	60da      	str	r2, [r3, #12]
		break;
 8001354:	e043      	b.n	80013de <USART_Config+0x37a>
	}
	case USART_INTERRUPT_TX_ENABLE:
	{
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68da      	ldr	r2, [r3, #12]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001364:	60da      	str	r2, [r3, #12]
		// NO Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RXNEIE);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68da      	ldr	r2, [r3, #12]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 0220 	bic.w	r2, r2, #32
 8001374:	60da      	str	r2, [r3, #12]
		break;
 8001376:	e032      	b.n	80013de <USART_Config+0x37a>

	}
	case USART_INTERRUPT_RXTX_ENABLE:
	{
		// Activamos las dos interrupciones tanto del RX como del TX
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TXEIE);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	68da      	ldr	r2, [r3, #12]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001386:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001396:	60da      	str	r2, [r3, #12]
		break;
 8001398:	e021      	b.n	80013de <USART_Config+0x37a>
	}
	case USART_INTERRUPT_RXTX_DISABLE:
	{
		// Activamos las dos interrupciones tanto del RX como del TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68da      	ldr	r2, [r3, #12]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013a8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68da      	ldr	r2, [r3, #12]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013b8:	60da      	str	r2, [r3, #12]
		break;
 80013ba:	e010      	b.n	80013de <USART_Config+0x37a>
	}

	default:
	{
		// NO Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RXNEIE);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68da      	ldr	r2, [r3, #12]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0220 	bic.w	r2, r2, #32
 80013ca:	60da      	str	r2, [r3, #12]
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013da:	60da      	str	r2, [r3, #12]
		break;
 80013dc:	bf00      	nop
	}
	}

	// 4. Activamos la se√±al de la interrupci√≥n en el NVIC

	if((ptrUsartHandler -> USART_Config.USART_interrupt == USART_INTERRUPT_RX_ENABLE) | (ptrUsartHandler -> USART_Config.USART_interrupt == USART_INTERRUPT_TX_ENABLE))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	7a5b      	ldrb	r3, [r3, #9]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	bf0c      	ite	eq
 80013e6:	2301      	moveq	r3, #1
 80013e8:	2300      	movne	r3, #0
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7a5b      	ldrb	r3, [r3, #9]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	bf0c      	ite	eq
 80013f4:	2301      	moveq	r3, #1
 80013f6:	2300      	movne	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d019      	beq.n	8001436 <USART_Config+0x3d2>
	{

		if(ptrUsartHandler -> ptrUSARTx == USART1){
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a0f      	ldr	r2, [pc, #60]	; (8001444 <USART_Config+0x3e0>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d103      	bne.n	8001414 <USART_Config+0x3b0>
			// Activamos la IRQ del USART1
			__NVIC_EnableIRQ(USART1_IRQn);
 800140c:	2025      	movs	r0, #37	; 0x25
 800140e:	f7ff fe0d 	bl	800102c <__NVIC_EnableIRQ>
 8001412:	e010      	b.n	8001436 <USART_Config+0x3d2>

		}else if(ptrUsartHandler -> ptrUSARTx == USART2){
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0b      	ldr	r2, [pc, #44]	; (8001448 <USART_Config+0x3e4>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d103      	bne.n	8001426 <USART_Config+0x3c2>
			// Activamos la IRQ del USART2
			__NVIC_EnableIRQ(USART2_IRQn);
 800141e:	2026      	movs	r0, #38	; 0x26
 8001420:	f7ff fe04 	bl	800102c <__NVIC_EnableIRQ>
 8001424:	e007      	b.n	8001436 <USART_Config+0x3d2>

		}else if(ptrUsartHandler -> ptrUSARTx == USART6){
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a08      	ldr	r2, [pc, #32]	; (800144c <USART_Config+0x3e8>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d102      	bne.n	8001436 <USART_Config+0x3d2>
			// Activamos la IRQ del USART6
			__NVIC_EnableIRQ(USART6_IRQn);
 8001430:	2047      	movs	r0, #71	; 0x47
 8001432:	f7ff fdfb 	bl	800102c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001436:	b662      	cpsie	i
}
 8001438:	bf00      	nop
		}

	// 5. Activamos de nuevo todas las interrupciones

	__enable_irq();
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40011000 	.word	0x40011000
 8001448:	40004400 	.word	0x40004400
 800144c:	40011400 	.word	0x40011400

08001450 <USART1_Callback>:

//**********//  CallBacks //**********//

// Callback USART1
__attribute__((weak)) void USART1_Callback(void){
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
	__NOP();
 8001454:	bf00      	nop
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <USART6_Callback>:
__attribute__((weak)) void USART2_Callback(void){
	__NOP();
}

// Callback USART6
__attribute__((weak)) void USART6_Callback(void){
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
	__NOP();
 8001462:	bf00      	nop
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <USART1_IRQHandler>:

// Hay que hacer dos cosas: 1) Atender la interrupci√≥n. 2) Llamamos al Callback
/* Rutina de atenci√≥n a la interrupci√≥n del USART */

void USART1_IRQHandler(void){
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0

	USART1 -> SR &= ~(USART_SR_RXNE);		// Bajamos la bandera manualmente
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <USART1_IRQHandler+0x18>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a03      	ldr	r2, [pc, #12]	; (8001484 <USART1_IRQHandler+0x18>)
 8001476:	f023 0320 	bic.w	r3, r3, #32
 800147a:	6013      	str	r3, [r2, #0]

	USART1_Callback();
 800147c:	f7ff ffe8 	bl	8001450 <USART1_Callback>
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40011000 	.word	0x40011000

08001488 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	USART2 -> SR &= ~(USART_SR_RXNE);		// Desactivamos la bandera manualmente para el RX
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <USART2_IRQHandler+0x24>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a06      	ldr	r2, [pc, #24]	; (80014ac <USART2_IRQHandler+0x24>)
 8001492:	f023 0320 	bic.w	r3, r3, #32
 8001496:	6013      	str	r3, [r2, #0]

	data = (USART2 -> DR);
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <USART2_IRQHandler+0x24>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <USART2_IRQHandler+0x28>)
 80014a0:	701a      	strb	r2, [r3, #0]

	USART2_Callback();
 80014a2:	f7ff f895 	bl	80005d0 <USART2_Callback>

	//USART2 -> SR &= ~(USART_SR_TXE);		// Desactivamos la bandera para el TX
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40004400 	.word	0x40004400
 80014b0:	200001b0 	.word	0x200001b0

080014b4 <USART6_IRQHandler>:

void USART6_IRQHandler(void){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	USART6 -> SR &= ~(USART_SR_RXNE);
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <USART6_IRQHandler+0x18>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a03      	ldr	r2, [pc, #12]	; (80014cc <USART6_IRQHandler+0x18>)
 80014be:	f023 0320 	bic.w	r3, r3, #32
 80014c2:	6013      	str	r3, [r2, #0]
	USART6_Callback();
 80014c4:	f7ff ffcb 	bl	800145e <USART6_Callback>
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40011400 	.word	0x40011400

080014d0 <returnData>:
	dataToRead = ((char) (ptrUsartHandler -> ptrUSARTx -> DR));
	return dataToRead;

}

uint8_t returnData(void){
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
	return data;				// Devolvemos el valor
 80014d4:	4b02      	ldr	r3, [pc, #8]	; (80014e0 <returnData+0x10>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	200001b0 	.word	0x200001b0

080014e4 <writeChar>:

//**********// Funci√≥n para escribir un solo char //**********//

int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend){
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
	while(!(ptrUsartHandler -> ptrUSARTx -> SR & USART_SR_TXE)){
 80014ee:	e000      	b.n	80014f2 <writeChar+0xe>
		__NOP();
 80014f0:	bf00      	nop
	while(!(ptrUsartHandler -> ptrUSARTx -> SR & USART_SR_TXE)){
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0f7      	beq.n	80014f0 <writeChar+0xc>
	// Permitimos la bandera del TX para el USART2
	//ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TXEIE);
	//USART2 -> SR |= (USART_SR_TXE);

	//Cargamos el valor de dataToSend en el USER DATA Register
	ptrUsartHandler -> ptrUSARTx -> DR = (dataToSend);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	605a      	str	r2, [r3, #4]

	//ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
	//USART2 -> SR &= ~(USART_SR_TXE);		// Desactivamos la bandera para el TX
	return dataToSend;
 8001508:	683b      	ldr	r3, [r7, #0]
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr

08001514 <writeMsg>:

/* Funci√≥n para escribir un mensaje */

void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
	while(*msgToSend != '\0'){
 800151e:	e008      	b.n	8001532 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff ffdc 	bl	80014e4 <writeChar>
		msgToSend++;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	3301      	adds	r3, #1
 8001530:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f2      	bne.n	8001520 <writeMsg+0xc>
	}
}
 800153a:	bf00      	nop
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <__errno>:
 8001544:	4b01      	ldr	r3, [pc, #4]	; (800154c <__errno+0x8>)
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000040 	.word	0x20000040

08001550 <__libc_init_array>:
 8001550:	b570      	push	{r4, r5, r6, lr}
 8001552:	4d0d      	ldr	r5, [pc, #52]	; (8001588 <__libc_init_array+0x38>)
 8001554:	4c0d      	ldr	r4, [pc, #52]	; (800158c <__libc_init_array+0x3c>)
 8001556:	1b64      	subs	r4, r4, r5
 8001558:	10a4      	asrs	r4, r4, #2
 800155a:	2600      	movs	r6, #0
 800155c:	42a6      	cmp	r6, r4
 800155e:	d109      	bne.n	8001574 <__libc_init_array+0x24>
 8001560:	4d0b      	ldr	r5, [pc, #44]	; (8001590 <__libc_init_array+0x40>)
 8001562:	4c0c      	ldr	r4, [pc, #48]	; (8001594 <__libc_init_array+0x44>)
 8001564:	f000 fc84 	bl	8001e70 <_init>
 8001568:	1b64      	subs	r4, r4, r5
 800156a:	10a4      	asrs	r4, r4, #2
 800156c:	2600      	movs	r6, #0
 800156e:	42a6      	cmp	r6, r4
 8001570:	d105      	bne.n	800157e <__libc_init_array+0x2e>
 8001572:	bd70      	pop	{r4, r5, r6, pc}
 8001574:	f855 3b04 	ldr.w	r3, [r5], #4
 8001578:	4798      	blx	r3
 800157a:	3601      	adds	r6, #1
 800157c:	e7ee      	b.n	800155c <__libc_init_array+0xc>
 800157e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001582:	4798      	blx	r3
 8001584:	3601      	adds	r6, #1
 8001586:	e7f2      	b.n	800156e <__libc_init_array+0x1e>
 8001588:	08001ef0 	.word	0x08001ef0
 800158c:	08001ef0 	.word	0x08001ef0
 8001590:	08001ef0 	.word	0x08001ef0
 8001594:	08001ef4 	.word	0x08001ef4

08001598 <siprintf>:
 8001598:	b40e      	push	{r1, r2, r3}
 800159a:	b500      	push	{lr}
 800159c:	b09c      	sub	sp, #112	; 0x70
 800159e:	ab1d      	add	r3, sp, #116	; 0x74
 80015a0:	9002      	str	r0, [sp, #8]
 80015a2:	9006      	str	r0, [sp, #24]
 80015a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80015a8:	4809      	ldr	r0, [pc, #36]	; (80015d0 <siprintf+0x38>)
 80015aa:	9107      	str	r1, [sp, #28]
 80015ac:	9104      	str	r1, [sp, #16]
 80015ae:	4909      	ldr	r1, [pc, #36]	; (80015d4 <siprintf+0x3c>)
 80015b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80015b4:	9105      	str	r1, [sp, #20]
 80015b6:	6800      	ldr	r0, [r0, #0]
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	a902      	add	r1, sp, #8
 80015bc:	f000 f868 	bl	8001690 <_svfiprintf_r>
 80015c0:	9b02      	ldr	r3, [sp, #8]
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	b01c      	add	sp, #112	; 0x70
 80015c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80015cc:	b003      	add	sp, #12
 80015ce:	4770      	bx	lr
 80015d0:	20000040 	.word	0x20000040
 80015d4:	ffff0208 	.word	0xffff0208

080015d8 <__ssputs_r>:
 80015d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015dc:	688e      	ldr	r6, [r1, #8]
 80015de:	429e      	cmp	r6, r3
 80015e0:	4682      	mov	sl, r0
 80015e2:	460c      	mov	r4, r1
 80015e4:	4690      	mov	r8, r2
 80015e6:	461f      	mov	r7, r3
 80015e8:	d838      	bhi.n	800165c <__ssputs_r+0x84>
 80015ea:	898a      	ldrh	r2, [r1, #12]
 80015ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80015f0:	d032      	beq.n	8001658 <__ssputs_r+0x80>
 80015f2:	6825      	ldr	r5, [r4, #0]
 80015f4:	6909      	ldr	r1, [r1, #16]
 80015f6:	eba5 0901 	sub.w	r9, r5, r1
 80015fa:	6965      	ldr	r5, [r4, #20]
 80015fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001600:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001604:	3301      	adds	r3, #1
 8001606:	444b      	add	r3, r9
 8001608:	106d      	asrs	r5, r5, #1
 800160a:	429d      	cmp	r5, r3
 800160c:	bf38      	it	cc
 800160e:	461d      	movcc	r5, r3
 8001610:	0553      	lsls	r3, r2, #21
 8001612:	d531      	bpl.n	8001678 <__ssputs_r+0xa0>
 8001614:	4629      	mov	r1, r5
 8001616:	f000 fb61 	bl	8001cdc <_malloc_r>
 800161a:	4606      	mov	r6, r0
 800161c:	b950      	cbnz	r0, 8001634 <__ssputs_r+0x5c>
 800161e:	230c      	movs	r3, #12
 8001620:	f8ca 3000 	str.w	r3, [sl]
 8001624:	89a3      	ldrh	r3, [r4, #12]
 8001626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800162a:	81a3      	strh	r3, [r4, #12]
 800162c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001634:	6921      	ldr	r1, [r4, #16]
 8001636:	464a      	mov	r2, r9
 8001638:	f000 fabe 	bl	8001bb8 <memcpy>
 800163c:	89a3      	ldrh	r3, [r4, #12]
 800163e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001646:	81a3      	strh	r3, [r4, #12]
 8001648:	6126      	str	r6, [r4, #16]
 800164a:	6165      	str	r5, [r4, #20]
 800164c:	444e      	add	r6, r9
 800164e:	eba5 0509 	sub.w	r5, r5, r9
 8001652:	6026      	str	r6, [r4, #0]
 8001654:	60a5      	str	r5, [r4, #8]
 8001656:	463e      	mov	r6, r7
 8001658:	42be      	cmp	r6, r7
 800165a:	d900      	bls.n	800165e <__ssputs_r+0x86>
 800165c:	463e      	mov	r6, r7
 800165e:	6820      	ldr	r0, [r4, #0]
 8001660:	4632      	mov	r2, r6
 8001662:	4641      	mov	r1, r8
 8001664:	f000 fab6 	bl	8001bd4 <memmove>
 8001668:	68a3      	ldr	r3, [r4, #8]
 800166a:	1b9b      	subs	r3, r3, r6
 800166c:	60a3      	str	r3, [r4, #8]
 800166e:	6823      	ldr	r3, [r4, #0]
 8001670:	4433      	add	r3, r6
 8001672:	6023      	str	r3, [r4, #0]
 8001674:	2000      	movs	r0, #0
 8001676:	e7db      	b.n	8001630 <__ssputs_r+0x58>
 8001678:	462a      	mov	r2, r5
 800167a:	f000 fba3 	bl	8001dc4 <_realloc_r>
 800167e:	4606      	mov	r6, r0
 8001680:	2800      	cmp	r0, #0
 8001682:	d1e1      	bne.n	8001648 <__ssputs_r+0x70>
 8001684:	6921      	ldr	r1, [r4, #16]
 8001686:	4650      	mov	r0, sl
 8001688:	f000 fabe 	bl	8001c08 <_free_r>
 800168c:	e7c7      	b.n	800161e <__ssputs_r+0x46>
	...

08001690 <_svfiprintf_r>:
 8001690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001694:	4698      	mov	r8, r3
 8001696:	898b      	ldrh	r3, [r1, #12]
 8001698:	061b      	lsls	r3, r3, #24
 800169a:	b09d      	sub	sp, #116	; 0x74
 800169c:	4607      	mov	r7, r0
 800169e:	460d      	mov	r5, r1
 80016a0:	4614      	mov	r4, r2
 80016a2:	d50e      	bpl.n	80016c2 <_svfiprintf_r+0x32>
 80016a4:	690b      	ldr	r3, [r1, #16]
 80016a6:	b963      	cbnz	r3, 80016c2 <_svfiprintf_r+0x32>
 80016a8:	2140      	movs	r1, #64	; 0x40
 80016aa:	f000 fb17 	bl	8001cdc <_malloc_r>
 80016ae:	6028      	str	r0, [r5, #0]
 80016b0:	6128      	str	r0, [r5, #16]
 80016b2:	b920      	cbnz	r0, 80016be <_svfiprintf_r+0x2e>
 80016b4:	230c      	movs	r3, #12
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016bc:	e0d1      	b.n	8001862 <_svfiprintf_r+0x1d2>
 80016be:	2340      	movs	r3, #64	; 0x40
 80016c0:	616b      	str	r3, [r5, #20]
 80016c2:	2300      	movs	r3, #0
 80016c4:	9309      	str	r3, [sp, #36]	; 0x24
 80016c6:	2320      	movs	r3, #32
 80016c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80016cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80016d0:	2330      	movs	r3, #48	; 0x30
 80016d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800187c <_svfiprintf_r+0x1ec>
 80016d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80016da:	f04f 0901 	mov.w	r9, #1
 80016de:	4623      	mov	r3, r4
 80016e0:	469a      	mov	sl, r3
 80016e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80016e6:	b10a      	cbz	r2, 80016ec <_svfiprintf_r+0x5c>
 80016e8:	2a25      	cmp	r2, #37	; 0x25
 80016ea:	d1f9      	bne.n	80016e0 <_svfiprintf_r+0x50>
 80016ec:	ebba 0b04 	subs.w	fp, sl, r4
 80016f0:	d00b      	beq.n	800170a <_svfiprintf_r+0x7a>
 80016f2:	465b      	mov	r3, fp
 80016f4:	4622      	mov	r2, r4
 80016f6:	4629      	mov	r1, r5
 80016f8:	4638      	mov	r0, r7
 80016fa:	f7ff ff6d 	bl	80015d8 <__ssputs_r>
 80016fe:	3001      	adds	r0, #1
 8001700:	f000 80aa 	beq.w	8001858 <_svfiprintf_r+0x1c8>
 8001704:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001706:	445a      	add	r2, fp
 8001708:	9209      	str	r2, [sp, #36]	; 0x24
 800170a:	f89a 3000 	ldrb.w	r3, [sl]
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 80a2 	beq.w	8001858 <_svfiprintf_r+0x1c8>
 8001714:	2300      	movs	r3, #0
 8001716:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800171a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800171e:	f10a 0a01 	add.w	sl, sl, #1
 8001722:	9304      	str	r3, [sp, #16]
 8001724:	9307      	str	r3, [sp, #28]
 8001726:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800172a:	931a      	str	r3, [sp, #104]	; 0x68
 800172c:	4654      	mov	r4, sl
 800172e:	2205      	movs	r2, #5
 8001730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001734:	4851      	ldr	r0, [pc, #324]	; (800187c <_svfiprintf_r+0x1ec>)
 8001736:	f7fe fd53 	bl	80001e0 <memchr>
 800173a:	9a04      	ldr	r2, [sp, #16]
 800173c:	b9d8      	cbnz	r0, 8001776 <_svfiprintf_r+0xe6>
 800173e:	06d0      	lsls	r0, r2, #27
 8001740:	bf44      	itt	mi
 8001742:	2320      	movmi	r3, #32
 8001744:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001748:	0711      	lsls	r1, r2, #28
 800174a:	bf44      	itt	mi
 800174c:	232b      	movmi	r3, #43	; 0x2b
 800174e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001752:	f89a 3000 	ldrb.w	r3, [sl]
 8001756:	2b2a      	cmp	r3, #42	; 0x2a
 8001758:	d015      	beq.n	8001786 <_svfiprintf_r+0xf6>
 800175a:	9a07      	ldr	r2, [sp, #28]
 800175c:	4654      	mov	r4, sl
 800175e:	2000      	movs	r0, #0
 8001760:	f04f 0c0a 	mov.w	ip, #10
 8001764:	4621      	mov	r1, r4
 8001766:	f811 3b01 	ldrb.w	r3, [r1], #1
 800176a:	3b30      	subs	r3, #48	; 0x30
 800176c:	2b09      	cmp	r3, #9
 800176e:	d94e      	bls.n	800180e <_svfiprintf_r+0x17e>
 8001770:	b1b0      	cbz	r0, 80017a0 <_svfiprintf_r+0x110>
 8001772:	9207      	str	r2, [sp, #28]
 8001774:	e014      	b.n	80017a0 <_svfiprintf_r+0x110>
 8001776:	eba0 0308 	sub.w	r3, r0, r8
 800177a:	fa09 f303 	lsl.w	r3, r9, r3
 800177e:	4313      	orrs	r3, r2
 8001780:	9304      	str	r3, [sp, #16]
 8001782:	46a2      	mov	sl, r4
 8001784:	e7d2      	b.n	800172c <_svfiprintf_r+0x9c>
 8001786:	9b03      	ldr	r3, [sp, #12]
 8001788:	1d19      	adds	r1, r3, #4
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	9103      	str	r1, [sp, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	bfbb      	ittet	lt
 8001792:	425b      	neglt	r3, r3
 8001794:	f042 0202 	orrlt.w	r2, r2, #2
 8001798:	9307      	strge	r3, [sp, #28]
 800179a:	9307      	strlt	r3, [sp, #28]
 800179c:	bfb8      	it	lt
 800179e:	9204      	strlt	r2, [sp, #16]
 80017a0:	7823      	ldrb	r3, [r4, #0]
 80017a2:	2b2e      	cmp	r3, #46	; 0x2e
 80017a4:	d10c      	bne.n	80017c0 <_svfiprintf_r+0x130>
 80017a6:	7863      	ldrb	r3, [r4, #1]
 80017a8:	2b2a      	cmp	r3, #42	; 0x2a
 80017aa:	d135      	bne.n	8001818 <_svfiprintf_r+0x188>
 80017ac:	9b03      	ldr	r3, [sp, #12]
 80017ae:	1d1a      	adds	r2, r3, #4
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	9203      	str	r2, [sp, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	bfb8      	it	lt
 80017b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80017bc:	3402      	adds	r4, #2
 80017be:	9305      	str	r3, [sp, #20]
 80017c0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001880 <_svfiprintf_r+0x1f0>
 80017c4:	7821      	ldrb	r1, [r4, #0]
 80017c6:	2203      	movs	r2, #3
 80017c8:	4650      	mov	r0, sl
 80017ca:	f7fe fd09 	bl	80001e0 <memchr>
 80017ce:	b140      	cbz	r0, 80017e2 <_svfiprintf_r+0x152>
 80017d0:	2340      	movs	r3, #64	; 0x40
 80017d2:	eba0 000a 	sub.w	r0, r0, sl
 80017d6:	fa03 f000 	lsl.w	r0, r3, r0
 80017da:	9b04      	ldr	r3, [sp, #16]
 80017dc:	4303      	orrs	r3, r0
 80017de:	3401      	adds	r4, #1
 80017e0:	9304      	str	r3, [sp, #16]
 80017e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017e6:	4827      	ldr	r0, [pc, #156]	; (8001884 <_svfiprintf_r+0x1f4>)
 80017e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80017ec:	2206      	movs	r2, #6
 80017ee:	f7fe fcf7 	bl	80001e0 <memchr>
 80017f2:	2800      	cmp	r0, #0
 80017f4:	d038      	beq.n	8001868 <_svfiprintf_r+0x1d8>
 80017f6:	4b24      	ldr	r3, [pc, #144]	; (8001888 <_svfiprintf_r+0x1f8>)
 80017f8:	bb1b      	cbnz	r3, 8001842 <_svfiprintf_r+0x1b2>
 80017fa:	9b03      	ldr	r3, [sp, #12]
 80017fc:	3307      	adds	r3, #7
 80017fe:	f023 0307 	bic.w	r3, r3, #7
 8001802:	3308      	adds	r3, #8
 8001804:	9303      	str	r3, [sp, #12]
 8001806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001808:	4433      	add	r3, r6
 800180a:	9309      	str	r3, [sp, #36]	; 0x24
 800180c:	e767      	b.n	80016de <_svfiprintf_r+0x4e>
 800180e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001812:	460c      	mov	r4, r1
 8001814:	2001      	movs	r0, #1
 8001816:	e7a5      	b.n	8001764 <_svfiprintf_r+0xd4>
 8001818:	2300      	movs	r3, #0
 800181a:	3401      	adds	r4, #1
 800181c:	9305      	str	r3, [sp, #20]
 800181e:	4619      	mov	r1, r3
 8001820:	f04f 0c0a 	mov.w	ip, #10
 8001824:	4620      	mov	r0, r4
 8001826:	f810 2b01 	ldrb.w	r2, [r0], #1
 800182a:	3a30      	subs	r2, #48	; 0x30
 800182c:	2a09      	cmp	r2, #9
 800182e:	d903      	bls.n	8001838 <_svfiprintf_r+0x1a8>
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0c5      	beq.n	80017c0 <_svfiprintf_r+0x130>
 8001834:	9105      	str	r1, [sp, #20]
 8001836:	e7c3      	b.n	80017c0 <_svfiprintf_r+0x130>
 8001838:	fb0c 2101 	mla	r1, ip, r1, r2
 800183c:	4604      	mov	r4, r0
 800183e:	2301      	movs	r3, #1
 8001840:	e7f0      	b.n	8001824 <_svfiprintf_r+0x194>
 8001842:	ab03      	add	r3, sp, #12
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	462a      	mov	r2, r5
 8001848:	4b10      	ldr	r3, [pc, #64]	; (800188c <_svfiprintf_r+0x1fc>)
 800184a:	a904      	add	r1, sp, #16
 800184c:	4638      	mov	r0, r7
 800184e:	f3af 8000 	nop.w
 8001852:	1c42      	adds	r2, r0, #1
 8001854:	4606      	mov	r6, r0
 8001856:	d1d6      	bne.n	8001806 <_svfiprintf_r+0x176>
 8001858:	89ab      	ldrh	r3, [r5, #12]
 800185a:	065b      	lsls	r3, r3, #25
 800185c:	f53f af2c 	bmi.w	80016b8 <_svfiprintf_r+0x28>
 8001860:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001862:	b01d      	add	sp, #116	; 0x74
 8001864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001868:	ab03      	add	r3, sp, #12
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	462a      	mov	r2, r5
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <_svfiprintf_r+0x1fc>)
 8001870:	a904      	add	r1, sp, #16
 8001872:	4638      	mov	r0, r7
 8001874:	f000 f87a 	bl	800196c <_printf_i>
 8001878:	e7eb      	b.n	8001852 <_svfiprintf_r+0x1c2>
 800187a:	bf00      	nop
 800187c:	08001eba 	.word	0x08001eba
 8001880:	08001ec0 	.word	0x08001ec0
 8001884:	08001ec4 	.word	0x08001ec4
 8001888:	00000000 	.word	0x00000000
 800188c:	080015d9 	.word	0x080015d9

08001890 <_printf_common>:
 8001890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001894:	4616      	mov	r6, r2
 8001896:	4699      	mov	r9, r3
 8001898:	688a      	ldr	r2, [r1, #8]
 800189a:	690b      	ldr	r3, [r1, #16]
 800189c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80018a0:	4293      	cmp	r3, r2
 80018a2:	bfb8      	it	lt
 80018a4:	4613      	movlt	r3, r2
 80018a6:	6033      	str	r3, [r6, #0]
 80018a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80018ac:	4607      	mov	r7, r0
 80018ae:	460c      	mov	r4, r1
 80018b0:	b10a      	cbz	r2, 80018b6 <_printf_common+0x26>
 80018b2:	3301      	adds	r3, #1
 80018b4:	6033      	str	r3, [r6, #0]
 80018b6:	6823      	ldr	r3, [r4, #0]
 80018b8:	0699      	lsls	r1, r3, #26
 80018ba:	bf42      	ittt	mi
 80018bc:	6833      	ldrmi	r3, [r6, #0]
 80018be:	3302      	addmi	r3, #2
 80018c0:	6033      	strmi	r3, [r6, #0]
 80018c2:	6825      	ldr	r5, [r4, #0]
 80018c4:	f015 0506 	ands.w	r5, r5, #6
 80018c8:	d106      	bne.n	80018d8 <_printf_common+0x48>
 80018ca:	f104 0a19 	add.w	sl, r4, #25
 80018ce:	68e3      	ldr	r3, [r4, #12]
 80018d0:	6832      	ldr	r2, [r6, #0]
 80018d2:	1a9b      	subs	r3, r3, r2
 80018d4:	42ab      	cmp	r3, r5
 80018d6:	dc26      	bgt.n	8001926 <_printf_common+0x96>
 80018d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80018dc:	1e13      	subs	r3, r2, #0
 80018de:	6822      	ldr	r2, [r4, #0]
 80018e0:	bf18      	it	ne
 80018e2:	2301      	movne	r3, #1
 80018e4:	0692      	lsls	r2, r2, #26
 80018e6:	d42b      	bmi.n	8001940 <_printf_common+0xb0>
 80018e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80018ec:	4649      	mov	r1, r9
 80018ee:	4638      	mov	r0, r7
 80018f0:	47c0      	blx	r8
 80018f2:	3001      	adds	r0, #1
 80018f4:	d01e      	beq.n	8001934 <_printf_common+0xa4>
 80018f6:	6823      	ldr	r3, [r4, #0]
 80018f8:	68e5      	ldr	r5, [r4, #12]
 80018fa:	6832      	ldr	r2, [r6, #0]
 80018fc:	f003 0306 	and.w	r3, r3, #6
 8001900:	2b04      	cmp	r3, #4
 8001902:	bf08      	it	eq
 8001904:	1aad      	subeq	r5, r5, r2
 8001906:	68a3      	ldr	r3, [r4, #8]
 8001908:	6922      	ldr	r2, [r4, #16]
 800190a:	bf0c      	ite	eq
 800190c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001910:	2500      	movne	r5, #0
 8001912:	4293      	cmp	r3, r2
 8001914:	bfc4      	itt	gt
 8001916:	1a9b      	subgt	r3, r3, r2
 8001918:	18ed      	addgt	r5, r5, r3
 800191a:	2600      	movs	r6, #0
 800191c:	341a      	adds	r4, #26
 800191e:	42b5      	cmp	r5, r6
 8001920:	d11a      	bne.n	8001958 <_printf_common+0xc8>
 8001922:	2000      	movs	r0, #0
 8001924:	e008      	b.n	8001938 <_printf_common+0xa8>
 8001926:	2301      	movs	r3, #1
 8001928:	4652      	mov	r2, sl
 800192a:	4649      	mov	r1, r9
 800192c:	4638      	mov	r0, r7
 800192e:	47c0      	blx	r8
 8001930:	3001      	adds	r0, #1
 8001932:	d103      	bne.n	800193c <_printf_common+0xac>
 8001934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800193c:	3501      	adds	r5, #1
 800193e:	e7c6      	b.n	80018ce <_printf_common+0x3e>
 8001940:	18e1      	adds	r1, r4, r3
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	2030      	movs	r0, #48	; 0x30
 8001946:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800194a:	4422      	add	r2, r4
 800194c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001950:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001954:	3302      	adds	r3, #2
 8001956:	e7c7      	b.n	80018e8 <_printf_common+0x58>
 8001958:	2301      	movs	r3, #1
 800195a:	4622      	mov	r2, r4
 800195c:	4649      	mov	r1, r9
 800195e:	4638      	mov	r0, r7
 8001960:	47c0      	blx	r8
 8001962:	3001      	adds	r0, #1
 8001964:	d0e6      	beq.n	8001934 <_printf_common+0xa4>
 8001966:	3601      	adds	r6, #1
 8001968:	e7d9      	b.n	800191e <_printf_common+0x8e>
	...

0800196c <_printf_i>:
 800196c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001970:	7e0f      	ldrb	r7, [r1, #24]
 8001972:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001974:	2f78      	cmp	r7, #120	; 0x78
 8001976:	4691      	mov	r9, r2
 8001978:	4680      	mov	r8, r0
 800197a:	460c      	mov	r4, r1
 800197c:	469a      	mov	sl, r3
 800197e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001982:	d807      	bhi.n	8001994 <_printf_i+0x28>
 8001984:	2f62      	cmp	r7, #98	; 0x62
 8001986:	d80a      	bhi.n	800199e <_printf_i+0x32>
 8001988:	2f00      	cmp	r7, #0
 800198a:	f000 80d8 	beq.w	8001b3e <_printf_i+0x1d2>
 800198e:	2f58      	cmp	r7, #88	; 0x58
 8001990:	f000 80a3 	beq.w	8001ada <_printf_i+0x16e>
 8001994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001998:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800199c:	e03a      	b.n	8001a14 <_printf_i+0xa8>
 800199e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80019a2:	2b15      	cmp	r3, #21
 80019a4:	d8f6      	bhi.n	8001994 <_printf_i+0x28>
 80019a6:	a101      	add	r1, pc, #4	; (adr r1, 80019ac <_printf_i+0x40>)
 80019a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80019ac:	08001a05 	.word	0x08001a05
 80019b0:	08001a19 	.word	0x08001a19
 80019b4:	08001995 	.word	0x08001995
 80019b8:	08001995 	.word	0x08001995
 80019bc:	08001995 	.word	0x08001995
 80019c0:	08001995 	.word	0x08001995
 80019c4:	08001a19 	.word	0x08001a19
 80019c8:	08001995 	.word	0x08001995
 80019cc:	08001995 	.word	0x08001995
 80019d0:	08001995 	.word	0x08001995
 80019d4:	08001995 	.word	0x08001995
 80019d8:	08001b25 	.word	0x08001b25
 80019dc:	08001a49 	.word	0x08001a49
 80019e0:	08001b07 	.word	0x08001b07
 80019e4:	08001995 	.word	0x08001995
 80019e8:	08001995 	.word	0x08001995
 80019ec:	08001b47 	.word	0x08001b47
 80019f0:	08001995 	.word	0x08001995
 80019f4:	08001a49 	.word	0x08001a49
 80019f8:	08001995 	.word	0x08001995
 80019fc:	08001995 	.word	0x08001995
 8001a00:	08001b0f 	.word	0x08001b0f
 8001a04:	682b      	ldr	r3, [r5, #0]
 8001a06:	1d1a      	adds	r2, r3, #4
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	602a      	str	r2, [r5, #0]
 8001a0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0a3      	b.n	8001b60 <_printf_i+0x1f4>
 8001a18:	6820      	ldr	r0, [r4, #0]
 8001a1a:	6829      	ldr	r1, [r5, #0]
 8001a1c:	0606      	lsls	r6, r0, #24
 8001a1e:	f101 0304 	add.w	r3, r1, #4
 8001a22:	d50a      	bpl.n	8001a3a <_printf_i+0xce>
 8001a24:	680e      	ldr	r6, [r1, #0]
 8001a26:	602b      	str	r3, [r5, #0]
 8001a28:	2e00      	cmp	r6, #0
 8001a2a:	da03      	bge.n	8001a34 <_printf_i+0xc8>
 8001a2c:	232d      	movs	r3, #45	; 0x2d
 8001a2e:	4276      	negs	r6, r6
 8001a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a34:	485e      	ldr	r0, [pc, #376]	; (8001bb0 <_printf_i+0x244>)
 8001a36:	230a      	movs	r3, #10
 8001a38:	e019      	b.n	8001a6e <_printf_i+0x102>
 8001a3a:	680e      	ldr	r6, [r1, #0]
 8001a3c:	602b      	str	r3, [r5, #0]
 8001a3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001a42:	bf18      	it	ne
 8001a44:	b236      	sxthne	r6, r6
 8001a46:	e7ef      	b.n	8001a28 <_printf_i+0xbc>
 8001a48:	682b      	ldr	r3, [r5, #0]
 8001a4a:	6820      	ldr	r0, [r4, #0]
 8001a4c:	1d19      	adds	r1, r3, #4
 8001a4e:	6029      	str	r1, [r5, #0]
 8001a50:	0601      	lsls	r1, r0, #24
 8001a52:	d501      	bpl.n	8001a58 <_printf_i+0xec>
 8001a54:	681e      	ldr	r6, [r3, #0]
 8001a56:	e002      	b.n	8001a5e <_printf_i+0xf2>
 8001a58:	0646      	lsls	r6, r0, #25
 8001a5a:	d5fb      	bpl.n	8001a54 <_printf_i+0xe8>
 8001a5c:	881e      	ldrh	r6, [r3, #0]
 8001a5e:	4854      	ldr	r0, [pc, #336]	; (8001bb0 <_printf_i+0x244>)
 8001a60:	2f6f      	cmp	r7, #111	; 0x6f
 8001a62:	bf0c      	ite	eq
 8001a64:	2308      	moveq	r3, #8
 8001a66:	230a      	movne	r3, #10
 8001a68:	2100      	movs	r1, #0
 8001a6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001a6e:	6865      	ldr	r5, [r4, #4]
 8001a70:	60a5      	str	r5, [r4, #8]
 8001a72:	2d00      	cmp	r5, #0
 8001a74:	bfa2      	ittt	ge
 8001a76:	6821      	ldrge	r1, [r4, #0]
 8001a78:	f021 0104 	bicge.w	r1, r1, #4
 8001a7c:	6021      	strge	r1, [r4, #0]
 8001a7e:	b90e      	cbnz	r6, 8001a84 <_printf_i+0x118>
 8001a80:	2d00      	cmp	r5, #0
 8001a82:	d04d      	beq.n	8001b20 <_printf_i+0x1b4>
 8001a84:	4615      	mov	r5, r2
 8001a86:	fbb6 f1f3 	udiv	r1, r6, r3
 8001a8a:	fb03 6711 	mls	r7, r3, r1, r6
 8001a8e:	5dc7      	ldrb	r7, [r0, r7]
 8001a90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001a94:	4637      	mov	r7, r6
 8001a96:	42bb      	cmp	r3, r7
 8001a98:	460e      	mov	r6, r1
 8001a9a:	d9f4      	bls.n	8001a86 <_printf_i+0x11a>
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d10b      	bne.n	8001ab8 <_printf_i+0x14c>
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	07de      	lsls	r6, r3, #31
 8001aa4:	d508      	bpl.n	8001ab8 <_printf_i+0x14c>
 8001aa6:	6923      	ldr	r3, [r4, #16]
 8001aa8:	6861      	ldr	r1, [r4, #4]
 8001aaa:	4299      	cmp	r1, r3
 8001aac:	bfde      	ittt	le
 8001aae:	2330      	movle	r3, #48	; 0x30
 8001ab0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001ab4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001ab8:	1b52      	subs	r2, r2, r5
 8001aba:	6122      	str	r2, [r4, #16]
 8001abc:	f8cd a000 	str.w	sl, [sp]
 8001ac0:	464b      	mov	r3, r9
 8001ac2:	aa03      	add	r2, sp, #12
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	4640      	mov	r0, r8
 8001ac8:	f7ff fee2 	bl	8001890 <_printf_common>
 8001acc:	3001      	adds	r0, #1
 8001ace:	d14c      	bne.n	8001b6a <_printf_i+0x1fe>
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ad4:	b004      	add	sp, #16
 8001ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ada:	4835      	ldr	r0, [pc, #212]	; (8001bb0 <_printf_i+0x244>)
 8001adc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001ae0:	6829      	ldr	r1, [r5, #0]
 8001ae2:	6823      	ldr	r3, [r4, #0]
 8001ae4:	f851 6b04 	ldr.w	r6, [r1], #4
 8001ae8:	6029      	str	r1, [r5, #0]
 8001aea:	061d      	lsls	r5, r3, #24
 8001aec:	d514      	bpl.n	8001b18 <_printf_i+0x1ac>
 8001aee:	07df      	lsls	r7, r3, #31
 8001af0:	bf44      	itt	mi
 8001af2:	f043 0320 	orrmi.w	r3, r3, #32
 8001af6:	6023      	strmi	r3, [r4, #0]
 8001af8:	b91e      	cbnz	r6, 8001b02 <_printf_i+0x196>
 8001afa:	6823      	ldr	r3, [r4, #0]
 8001afc:	f023 0320 	bic.w	r3, r3, #32
 8001b00:	6023      	str	r3, [r4, #0]
 8001b02:	2310      	movs	r3, #16
 8001b04:	e7b0      	b.n	8001a68 <_printf_i+0xfc>
 8001b06:	6823      	ldr	r3, [r4, #0]
 8001b08:	f043 0320 	orr.w	r3, r3, #32
 8001b0c:	6023      	str	r3, [r4, #0]
 8001b0e:	2378      	movs	r3, #120	; 0x78
 8001b10:	4828      	ldr	r0, [pc, #160]	; (8001bb4 <_printf_i+0x248>)
 8001b12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001b16:	e7e3      	b.n	8001ae0 <_printf_i+0x174>
 8001b18:	0659      	lsls	r1, r3, #25
 8001b1a:	bf48      	it	mi
 8001b1c:	b2b6      	uxthmi	r6, r6
 8001b1e:	e7e6      	b.n	8001aee <_printf_i+0x182>
 8001b20:	4615      	mov	r5, r2
 8001b22:	e7bb      	b.n	8001a9c <_printf_i+0x130>
 8001b24:	682b      	ldr	r3, [r5, #0]
 8001b26:	6826      	ldr	r6, [r4, #0]
 8001b28:	6961      	ldr	r1, [r4, #20]
 8001b2a:	1d18      	adds	r0, r3, #4
 8001b2c:	6028      	str	r0, [r5, #0]
 8001b2e:	0635      	lsls	r5, r6, #24
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	d501      	bpl.n	8001b38 <_printf_i+0x1cc>
 8001b34:	6019      	str	r1, [r3, #0]
 8001b36:	e002      	b.n	8001b3e <_printf_i+0x1d2>
 8001b38:	0670      	lsls	r0, r6, #25
 8001b3a:	d5fb      	bpl.n	8001b34 <_printf_i+0x1c8>
 8001b3c:	8019      	strh	r1, [r3, #0]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	6123      	str	r3, [r4, #16]
 8001b42:	4615      	mov	r5, r2
 8001b44:	e7ba      	b.n	8001abc <_printf_i+0x150>
 8001b46:	682b      	ldr	r3, [r5, #0]
 8001b48:	1d1a      	adds	r2, r3, #4
 8001b4a:	602a      	str	r2, [r5, #0]
 8001b4c:	681d      	ldr	r5, [r3, #0]
 8001b4e:	6862      	ldr	r2, [r4, #4]
 8001b50:	2100      	movs	r1, #0
 8001b52:	4628      	mov	r0, r5
 8001b54:	f7fe fb44 	bl	80001e0 <memchr>
 8001b58:	b108      	cbz	r0, 8001b5e <_printf_i+0x1f2>
 8001b5a:	1b40      	subs	r0, r0, r5
 8001b5c:	6060      	str	r0, [r4, #4]
 8001b5e:	6863      	ldr	r3, [r4, #4]
 8001b60:	6123      	str	r3, [r4, #16]
 8001b62:	2300      	movs	r3, #0
 8001b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b68:	e7a8      	b.n	8001abc <_printf_i+0x150>
 8001b6a:	6923      	ldr	r3, [r4, #16]
 8001b6c:	462a      	mov	r2, r5
 8001b6e:	4649      	mov	r1, r9
 8001b70:	4640      	mov	r0, r8
 8001b72:	47d0      	blx	sl
 8001b74:	3001      	adds	r0, #1
 8001b76:	d0ab      	beq.n	8001ad0 <_printf_i+0x164>
 8001b78:	6823      	ldr	r3, [r4, #0]
 8001b7a:	079b      	lsls	r3, r3, #30
 8001b7c:	d413      	bmi.n	8001ba6 <_printf_i+0x23a>
 8001b7e:	68e0      	ldr	r0, [r4, #12]
 8001b80:	9b03      	ldr	r3, [sp, #12]
 8001b82:	4298      	cmp	r0, r3
 8001b84:	bfb8      	it	lt
 8001b86:	4618      	movlt	r0, r3
 8001b88:	e7a4      	b.n	8001ad4 <_printf_i+0x168>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	4632      	mov	r2, r6
 8001b8e:	4649      	mov	r1, r9
 8001b90:	4640      	mov	r0, r8
 8001b92:	47d0      	blx	sl
 8001b94:	3001      	adds	r0, #1
 8001b96:	d09b      	beq.n	8001ad0 <_printf_i+0x164>
 8001b98:	3501      	adds	r5, #1
 8001b9a:	68e3      	ldr	r3, [r4, #12]
 8001b9c:	9903      	ldr	r1, [sp, #12]
 8001b9e:	1a5b      	subs	r3, r3, r1
 8001ba0:	42ab      	cmp	r3, r5
 8001ba2:	dcf2      	bgt.n	8001b8a <_printf_i+0x21e>
 8001ba4:	e7eb      	b.n	8001b7e <_printf_i+0x212>
 8001ba6:	2500      	movs	r5, #0
 8001ba8:	f104 0619 	add.w	r6, r4, #25
 8001bac:	e7f5      	b.n	8001b9a <_printf_i+0x22e>
 8001bae:	bf00      	nop
 8001bb0:	08001ecb 	.word	0x08001ecb
 8001bb4:	08001edc 	.word	0x08001edc

08001bb8 <memcpy>:
 8001bb8:	440a      	add	r2, r1
 8001bba:	4291      	cmp	r1, r2
 8001bbc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001bc0:	d100      	bne.n	8001bc4 <memcpy+0xc>
 8001bc2:	4770      	bx	lr
 8001bc4:	b510      	push	{r4, lr}
 8001bc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001bca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001bce:	4291      	cmp	r1, r2
 8001bd0:	d1f9      	bne.n	8001bc6 <memcpy+0xe>
 8001bd2:	bd10      	pop	{r4, pc}

08001bd4 <memmove>:
 8001bd4:	4288      	cmp	r0, r1
 8001bd6:	b510      	push	{r4, lr}
 8001bd8:	eb01 0402 	add.w	r4, r1, r2
 8001bdc:	d902      	bls.n	8001be4 <memmove+0x10>
 8001bde:	4284      	cmp	r4, r0
 8001be0:	4623      	mov	r3, r4
 8001be2:	d807      	bhi.n	8001bf4 <memmove+0x20>
 8001be4:	1e43      	subs	r3, r0, #1
 8001be6:	42a1      	cmp	r1, r4
 8001be8:	d008      	beq.n	8001bfc <memmove+0x28>
 8001bea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001bee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001bf2:	e7f8      	b.n	8001be6 <memmove+0x12>
 8001bf4:	4402      	add	r2, r0
 8001bf6:	4601      	mov	r1, r0
 8001bf8:	428a      	cmp	r2, r1
 8001bfa:	d100      	bne.n	8001bfe <memmove+0x2a>
 8001bfc:	bd10      	pop	{r4, pc}
 8001bfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001c02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001c06:	e7f7      	b.n	8001bf8 <memmove+0x24>

08001c08 <_free_r>:
 8001c08:	b538      	push	{r3, r4, r5, lr}
 8001c0a:	4605      	mov	r5, r0
 8001c0c:	2900      	cmp	r1, #0
 8001c0e:	d041      	beq.n	8001c94 <_free_r+0x8c>
 8001c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c14:	1f0c      	subs	r4, r1, #4
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	bfb8      	it	lt
 8001c1a:	18e4      	addlt	r4, r4, r3
 8001c1c:	f000 f912 	bl	8001e44 <__malloc_lock>
 8001c20:	4a1d      	ldr	r2, [pc, #116]	; (8001c98 <_free_r+0x90>)
 8001c22:	6813      	ldr	r3, [r2, #0]
 8001c24:	b933      	cbnz	r3, 8001c34 <_free_r+0x2c>
 8001c26:	6063      	str	r3, [r4, #4]
 8001c28:	6014      	str	r4, [r2, #0]
 8001c2a:	4628      	mov	r0, r5
 8001c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c30:	f000 b90e 	b.w	8001e50 <__malloc_unlock>
 8001c34:	42a3      	cmp	r3, r4
 8001c36:	d908      	bls.n	8001c4a <_free_r+0x42>
 8001c38:	6820      	ldr	r0, [r4, #0]
 8001c3a:	1821      	adds	r1, r4, r0
 8001c3c:	428b      	cmp	r3, r1
 8001c3e:	bf01      	itttt	eq
 8001c40:	6819      	ldreq	r1, [r3, #0]
 8001c42:	685b      	ldreq	r3, [r3, #4]
 8001c44:	1809      	addeq	r1, r1, r0
 8001c46:	6021      	streq	r1, [r4, #0]
 8001c48:	e7ed      	b.n	8001c26 <_free_r+0x1e>
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	b10b      	cbz	r3, 8001c54 <_free_r+0x4c>
 8001c50:	42a3      	cmp	r3, r4
 8001c52:	d9fa      	bls.n	8001c4a <_free_r+0x42>
 8001c54:	6811      	ldr	r1, [r2, #0]
 8001c56:	1850      	adds	r0, r2, r1
 8001c58:	42a0      	cmp	r0, r4
 8001c5a:	d10b      	bne.n	8001c74 <_free_r+0x6c>
 8001c5c:	6820      	ldr	r0, [r4, #0]
 8001c5e:	4401      	add	r1, r0
 8001c60:	1850      	adds	r0, r2, r1
 8001c62:	4283      	cmp	r3, r0
 8001c64:	6011      	str	r1, [r2, #0]
 8001c66:	d1e0      	bne.n	8001c2a <_free_r+0x22>
 8001c68:	6818      	ldr	r0, [r3, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	6053      	str	r3, [r2, #4]
 8001c6e:	4401      	add	r1, r0
 8001c70:	6011      	str	r1, [r2, #0]
 8001c72:	e7da      	b.n	8001c2a <_free_r+0x22>
 8001c74:	d902      	bls.n	8001c7c <_free_r+0x74>
 8001c76:	230c      	movs	r3, #12
 8001c78:	602b      	str	r3, [r5, #0]
 8001c7a:	e7d6      	b.n	8001c2a <_free_r+0x22>
 8001c7c:	6820      	ldr	r0, [r4, #0]
 8001c7e:	1821      	adds	r1, r4, r0
 8001c80:	428b      	cmp	r3, r1
 8001c82:	bf04      	itt	eq
 8001c84:	6819      	ldreq	r1, [r3, #0]
 8001c86:	685b      	ldreq	r3, [r3, #4]
 8001c88:	6063      	str	r3, [r4, #4]
 8001c8a:	bf04      	itt	eq
 8001c8c:	1809      	addeq	r1, r1, r0
 8001c8e:	6021      	streq	r1, [r4, #0]
 8001c90:	6054      	str	r4, [r2, #4]
 8001c92:	e7ca      	b.n	8001c2a <_free_r+0x22>
 8001c94:	bd38      	pop	{r3, r4, r5, pc}
 8001c96:	bf00      	nop
 8001c98:	200001b4 	.word	0x200001b4

08001c9c <sbrk_aligned>:
 8001c9c:	b570      	push	{r4, r5, r6, lr}
 8001c9e:	4e0e      	ldr	r6, [pc, #56]	; (8001cd8 <sbrk_aligned+0x3c>)
 8001ca0:	460c      	mov	r4, r1
 8001ca2:	6831      	ldr	r1, [r6, #0]
 8001ca4:	4605      	mov	r5, r0
 8001ca6:	b911      	cbnz	r1, 8001cae <sbrk_aligned+0x12>
 8001ca8:	f000 f8bc 	bl	8001e24 <_sbrk_r>
 8001cac:	6030      	str	r0, [r6, #0]
 8001cae:	4621      	mov	r1, r4
 8001cb0:	4628      	mov	r0, r5
 8001cb2:	f000 f8b7 	bl	8001e24 <_sbrk_r>
 8001cb6:	1c43      	adds	r3, r0, #1
 8001cb8:	d00a      	beq.n	8001cd0 <sbrk_aligned+0x34>
 8001cba:	1cc4      	adds	r4, r0, #3
 8001cbc:	f024 0403 	bic.w	r4, r4, #3
 8001cc0:	42a0      	cmp	r0, r4
 8001cc2:	d007      	beq.n	8001cd4 <sbrk_aligned+0x38>
 8001cc4:	1a21      	subs	r1, r4, r0
 8001cc6:	4628      	mov	r0, r5
 8001cc8:	f000 f8ac 	bl	8001e24 <_sbrk_r>
 8001ccc:	3001      	adds	r0, #1
 8001cce:	d101      	bne.n	8001cd4 <sbrk_aligned+0x38>
 8001cd0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	bd70      	pop	{r4, r5, r6, pc}
 8001cd8:	200001b8 	.word	0x200001b8

08001cdc <_malloc_r>:
 8001cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ce0:	1ccd      	adds	r5, r1, #3
 8001ce2:	f025 0503 	bic.w	r5, r5, #3
 8001ce6:	3508      	adds	r5, #8
 8001ce8:	2d0c      	cmp	r5, #12
 8001cea:	bf38      	it	cc
 8001cec:	250c      	movcc	r5, #12
 8001cee:	2d00      	cmp	r5, #0
 8001cf0:	4607      	mov	r7, r0
 8001cf2:	db01      	blt.n	8001cf8 <_malloc_r+0x1c>
 8001cf4:	42a9      	cmp	r1, r5
 8001cf6:	d905      	bls.n	8001d04 <_malloc_r+0x28>
 8001cf8:	230c      	movs	r3, #12
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	2600      	movs	r6, #0
 8001cfe:	4630      	mov	r0, r6
 8001d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d04:	4e2e      	ldr	r6, [pc, #184]	; (8001dc0 <_malloc_r+0xe4>)
 8001d06:	f000 f89d 	bl	8001e44 <__malloc_lock>
 8001d0a:	6833      	ldr	r3, [r6, #0]
 8001d0c:	461c      	mov	r4, r3
 8001d0e:	bb34      	cbnz	r4, 8001d5e <_malloc_r+0x82>
 8001d10:	4629      	mov	r1, r5
 8001d12:	4638      	mov	r0, r7
 8001d14:	f7ff ffc2 	bl	8001c9c <sbrk_aligned>
 8001d18:	1c43      	adds	r3, r0, #1
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	d14d      	bne.n	8001dba <_malloc_r+0xde>
 8001d1e:	6834      	ldr	r4, [r6, #0]
 8001d20:	4626      	mov	r6, r4
 8001d22:	2e00      	cmp	r6, #0
 8001d24:	d140      	bne.n	8001da8 <_malloc_r+0xcc>
 8001d26:	6823      	ldr	r3, [r4, #0]
 8001d28:	4631      	mov	r1, r6
 8001d2a:	4638      	mov	r0, r7
 8001d2c:	eb04 0803 	add.w	r8, r4, r3
 8001d30:	f000 f878 	bl	8001e24 <_sbrk_r>
 8001d34:	4580      	cmp	r8, r0
 8001d36:	d13a      	bne.n	8001dae <_malloc_r+0xd2>
 8001d38:	6821      	ldr	r1, [r4, #0]
 8001d3a:	3503      	adds	r5, #3
 8001d3c:	1a6d      	subs	r5, r5, r1
 8001d3e:	f025 0503 	bic.w	r5, r5, #3
 8001d42:	3508      	adds	r5, #8
 8001d44:	2d0c      	cmp	r5, #12
 8001d46:	bf38      	it	cc
 8001d48:	250c      	movcc	r5, #12
 8001d4a:	4629      	mov	r1, r5
 8001d4c:	4638      	mov	r0, r7
 8001d4e:	f7ff ffa5 	bl	8001c9c <sbrk_aligned>
 8001d52:	3001      	adds	r0, #1
 8001d54:	d02b      	beq.n	8001dae <_malloc_r+0xd2>
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	442b      	add	r3, r5
 8001d5a:	6023      	str	r3, [r4, #0]
 8001d5c:	e00e      	b.n	8001d7c <_malloc_r+0xa0>
 8001d5e:	6822      	ldr	r2, [r4, #0]
 8001d60:	1b52      	subs	r2, r2, r5
 8001d62:	d41e      	bmi.n	8001da2 <_malloc_r+0xc6>
 8001d64:	2a0b      	cmp	r2, #11
 8001d66:	d916      	bls.n	8001d96 <_malloc_r+0xba>
 8001d68:	1961      	adds	r1, r4, r5
 8001d6a:	42a3      	cmp	r3, r4
 8001d6c:	6025      	str	r5, [r4, #0]
 8001d6e:	bf18      	it	ne
 8001d70:	6059      	strne	r1, [r3, #4]
 8001d72:	6863      	ldr	r3, [r4, #4]
 8001d74:	bf08      	it	eq
 8001d76:	6031      	streq	r1, [r6, #0]
 8001d78:	5162      	str	r2, [r4, r5]
 8001d7a:	604b      	str	r3, [r1, #4]
 8001d7c:	4638      	mov	r0, r7
 8001d7e:	f104 060b 	add.w	r6, r4, #11
 8001d82:	f000 f865 	bl	8001e50 <__malloc_unlock>
 8001d86:	f026 0607 	bic.w	r6, r6, #7
 8001d8a:	1d23      	adds	r3, r4, #4
 8001d8c:	1af2      	subs	r2, r6, r3
 8001d8e:	d0b6      	beq.n	8001cfe <_malloc_r+0x22>
 8001d90:	1b9b      	subs	r3, r3, r6
 8001d92:	50a3      	str	r3, [r4, r2]
 8001d94:	e7b3      	b.n	8001cfe <_malloc_r+0x22>
 8001d96:	6862      	ldr	r2, [r4, #4]
 8001d98:	42a3      	cmp	r3, r4
 8001d9a:	bf0c      	ite	eq
 8001d9c:	6032      	streq	r2, [r6, #0]
 8001d9e:	605a      	strne	r2, [r3, #4]
 8001da0:	e7ec      	b.n	8001d7c <_malloc_r+0xa0>
 8001da2:	4623      	mov	r3, r4
 8001da4:	6864      	ldr	r4, [r4, #4]
 8001da6:	e7b2      	b.n	8001d0e <_malloc_r+0x32>
 8001da8:	4634      	mov	r4, r6
 8001daa:	6876      	ldr	r6, [r6, #4]
 8001dac:	e7b9      	b.n	8001d22 <_malloc_r+0x46>
 8001dae:	230c      	movs	r3, #12
 8001db0:	603b      	str	r3, [r7, #0]
 8001db2:	4638      	mov	r0, r7
 8001db4:	f000 f84c 	bl	8001e50 <__malloc_unlock>
 8001db8:	e7a1      	b.n	8001cfe <_malloc_r+0x22>
 8001dba:	6025      	str	r5, [r4, #0]
 8001dbc:	e7de      	b.n	8001d7c <_malloc_r+0xa0>
 8001dbe:	bf00      	nop
 8001dc0:	200001b4 	.word	0x200001b4

08001dc4 <_realloc_r>:
 8001dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dc8:	4680      	mov	r8, r0
 8001dca:	4614      	mov	r4, r2
 8001dcc:	460e      	mov	r6, r1
 8001dce:	b921      	cbnz	r1, 8001dda <_realloc_r+0x16>
 8001dd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	f7ff bf81 	b.w	8001cdc <_malloc_r>
 8001dda:	b92a      	cbnz	r2, 8001de8 <_realloc_r+0x24>
 8001ddc:	f7ff ff14 	bl	8001c08 <_free_r>
 8001de0:	4625      	mov	r5, r4
 8001de2:	4628      	mov	r0, r5
 8001de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001de8:	f000 f838 	bl	8001e5c <_malloc_usable_size_r>
 8001dec:	4284      	cmp	r4, r0
 8001dee:	4607      	mov	r7, r0
 8001df0:	d802      	bhi.n	8001df8 <_realloc_r+0x34>
 8001df2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001df6:	d812      	bhi.n	8001e1e <_realloc_r+0x5a>
 8001df8:	4621      	mov	r1, r4
 8001dfa:	4640      	mov	r0, r8
 8001dfc:	f7ff ff6e 	bl	8001cdc <_malloc_r>
 8001e00:	4605      	mov	r5, r0
 8001e02:	2800      	cmp	r0, #0
 8001e04:	d0ed      	beq.n	8001de2 <_realloc_r+0x1e>
 8001e06:	42bc      	cmp	r4, r7
 8001e08:	4622      	mov	r2, r4
 8001e0a:	4631      	mov	r1, r6
 8001e0c:	bf28      	it	cs
 8001e0e:	463a      	movcs	r2, r7
 8001e10:	f7ff fed2 	bl	8001bb8 <memcpy>
 8001e14:	4631      	mov	r1, r6
 8001e16:	4640      	mov	r0, r8
 8001e18:	f7ff fef6 	bl	8001c08 <_free_r>
 8001e1c:	e7e1      	b.n	8001de2 <_realloc_r+0x1e>
 8001e1e:	4635      	mov	r5, r6
 8001e20:	e7df      	b.n	8001de2 <_realloc_r+0x1e>
	...

08001e24 <_sbrk_r>:
 8001e24:	b538      	push	{r3, r4, r5, lr}
 8001e26:	4d06      	ldr	r5, [pc, #24]	; (8001e40 <_sbrk_r+0x1c>)
 8001e28:	2300      	movs	r3, #0
 8001e2a:	4604      	mov	r4, r0
 8001e2c:	4608      	mov	r0, r1
 8001e2e:	602b      	str	r3, [r5, #0]
 8001e30:	f7fe fbea 	bl	8000608 <_sbrk>
 8001e34:	1c43      	adds	r3, r0, #1
 8001e36:	d102      	bne.n	8001e3e <_sbrk_r+0x1a>
 8001e38:	682b      	ldr	r3, [r5, #0]
 8001e3a:	b103      	cbz	r3, 8001e3e <_sbrk_r+0x1a>
 8001e3c:	6023      	str	r3, [r4, #0]
 8001e3e:	bd38      	pop	{r3, r4, r5, pc}
 8001e40:	200001bc 	.word	0x200001bc

08001e44 <__malloc_lock>:
 8001e44:	4801      	ldr	r0, [pc, #4]	; (8001e4c <__malloc_lock+0x8>)
 8001e46:	f000 b811 	b.w	8001e6c <__retarget_lock_acquire_recursive>
 8001e4a:	bf00      	nop
 8001e4c:	200001c0 	.word	0x200001c0

08001e50 <__malloc_unlock>:
 8001e50:	4801      	ldr	r0, [pc, #4]	; (8001e58 <__malloc_unlock+0x8>)
 8001e52:	f000 b80c 	b.w	8001e6e <__retarget_lock_release_recursive>
 8001e56:	bf00      	nop
 8001e58:	200001c0 	.word	0x200001c0

08001e5c <_malloc_usable_size_r>:
 8001e5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e60:	1f18      	subs	r0, r3, #4
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	bfbc      	itt	lt
 8001e66:	580b      	ldrlt	r3, [r1, r0]
 8001e68:	18c0      	addlt	r0, r0, r3
 8001e6a:	4770      	bx	lr

08001e6c <__retarget_lock_acquire_recursive>:
 8001e6c:	4770      	bx	lr

08001e6e <__retarget_lock_release_recursive>:
 8001e6e:	4770      	bx	lr

08001e70 <_init>:
 8001e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e72:	bf00      	nop
 8001e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e76:	bc08      	pop	{r3}
 8001e78:	469e      	mov	lr, r3
 8001e7a:	4770      	bx	lr

08001e7c <_fini>:
 8001e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e7e:	bf00      	nop
 8001e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e82:	bc08      	pop	{r3}
 8001e84:	469e      	mov	lr, r3
 8001e86:	4770      	bx	lr
