
I2CMPU6050V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08001f14  08001f14  00011f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f8c  08001f8c  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08001f8c  08001f8c  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f8c  08001f8c  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f8c  08001f8c  00011f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f90  08001f90  00011f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08001f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200000a8  08002038  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08002038  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002f8f  00000000  00000000  000200ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b70  00000000  00000000  0002305d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000268  00000000  00000000  00023bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001f0  00000000  00000000  00023e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fd4c  00000000  00000000  00024028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000032f1  00000000  00000000  00033d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005632d  00000000  00000000  00037065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008d392  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bb4  00000000  00000000  0008d3e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a8 	.word	0x200000a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001efc 	.word	0x08001efc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ac 	.word	0x200000ac
 80001dc:	08001efc 	.word	0x08001efc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:

void initSystem(void);

// *************** // MAIN // *************** //
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
	// Inicializamos el sistema
	initSystem();
 8000286:	f000 f8d9 	bl	800043c <initSystem>
	writeMsg(&handlerCommTerminal, bufferData);
 800028a:	4963      	ldr	r1, [pc, #396]	; (8000418 <main+0x198>)
 800028c:	4863      	ldr	r0, [pc, #396]	; (800041c <main+0x19c>)
 800028e:	f001 f987 	bl	80015a0 <writeMsg>
	/* Main Loop */
	while(1){

		// Hacemos un "eco" con el valor que nos llega por el serial
		if(rxData != '\0'){
 8000292:	4b63      	ldr	r3, [pc, #396]	; (8000420 <main+0x1a0>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d0fb      	beq.n	8000292 <main+0x12>
			writeChar(&handlerCommTerminal, rxData);
 800029a:	4b61      	ldr	r3, [pc, #388]	; (8000420 <main+0x1a0>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	4619      	mov	r1, r3
 80002a0:	485e      	ldr	r0, [pc, #376]	; (800041c <main+0x19c>)
 80002a2:	f001 f965 	bl	8001570 <writeChar>

			// Devolvemos la direcci√≥n que posee el sensor
			if(rxData == 'd'){
 80002a6:	4b5e      	ldr	r3, [pc, #376]	; (8000420 <main+0x1a0>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	2b64      	cmp	r3, #100	; 0x64
 80002ac:	d116      	bne.n	80002dc <main+0x5c>
				i2cBuffer = I2C_readByte(&handlerAccelerometer, WHO_AM_I);
 80002ae:	2175      	movs	r1, #117	; 0x75
 80002b0:	485c      	ldr	r0, [pc, #368]	; (8000424 <main+0x1a4>)
 80002b2:	f000 fbf7 	bl	8000aa4 <I2C_readByte>
 80002b6:	4603      	mov	r3, r0
 80002b8:	461a      	mov	r2, r3
 80002ba:	4b5b      	ldr	r3, [pc, #364]	; (8000428 <main+0x1a8>)
 80002bc:	701a      	strb	r2, [r3, #0]
				sprintf(bufferData, "dataRead = 0x%2x \n", (unsigned int) i2cBuffer);
 80002be:	4b5a      	ldr	r3, [pc, #360]	; (8000428 <main+0x1a8>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	461a      	mov	r2, r3
 80002c4:	4959      	ldr	r1, [pc, #356]	; (800042c <main+0x1ac>)
 80002c6:	4854      	ldr	r0, [pc, #336]	; (8000418 <main+0x198>)
 80002c8:	f001 f9ac 	bl	8001624 <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 80002cc:	4952      	ldr	r1, [pc, #328]	; (8000418 <main+0x198>)
 80002ce:	4853      	ldr	r0, [pc, #332]	; (800041c <main+0x19c>)
 80002d0:	f001 f966 	bl	80015a0 <writeMsg>
				rxData = '\0';
 80002d4:	4b52      	ldr	r3, [pc, #328]	; (8000420 <main+0x1a0>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	701a      	strb	r2, [r3, #0]
 80002da:	e7da      	b.n	8000292 <main+0x12>
			}
			// Obtenemos el valor del registro Reset
			else if(rxData == 'p'){
 80002dc:	4b50      	ldr	r3, [pc, #320]	; (8000420 <main+0x1a0>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b70      	cmp	r3, #112	; 0x70
 80002e2:	d116      	bne.n	8000312 <main+0x92>
				i2cBuffer = I2C_readByte(&handlerAccelerometer, PWR_MGMT_1);
 80002e4:	216b      	movs	r1, #107	; 0x6b
 80002e6:	484f      	ldr	r0, [pc, #316]	; (8000424 <main+0x1a4>)
 80002e8:	f000 fbdc 	bl	8000aa4 <I2C_readByte>
 80002ec:	4603      	mov	r3, r0
 80002ee:	461a      	mov	r2, r3
 80002f0:	4b4d      	ldr	r3, [pc, #308]	; (8000428 <main+0x1a8>)
 80002f2:	701a      	strb	r2, [r3, #0]
				sprintf(bufferData, "dataRead = 0x%2x \n", (unsigned int) i2cBuffer);
 80002f4:	4b4c      	ldr	r3, [pc, #304]	; (8000428 <main+0x1a8>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	461a      	mov	r2, r3
 80002fa:	494c      	ldr	r1, [pc, #304]	; (800042c <main+0x1ac>)
 80002fc:	4846      	ldr	r0, [pc, #280]	; (8000418 <main+0x198>)
 80002fe:	f001 f991 	bl	8001624 <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 8000302:	4945      	ldr	r1, [pc, #276]	; (8000418 <main+0x198>)
 8000304:	4845      	ldr	r0, [pc, #276]	; (800041c <main+0x19c>)
 8000306:	f001 f94b 	bl	80015a0 <writeMsg>
				rxData = '\0';
 800030a:	4b45      	ldr	r3, [pc, #276]	; (8000420 <main+0x1a0>)
 800030c:	2200      	movs	r2, #0
 800030e:	701a      	strb	r2, [r3, #0]
 8000310:	e7bf      	b.n	8000292 <main+0x12>
			}
			// Escribimos 0x0 (reset) en todos los registros del MPU6050
			else if(rxData == 'r'){
 8000312:	4b43      	ldr	r3, [pc, #268]	; (8000420 <main+0x1a0>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	2b72      	cmp	r3, #114	; 0x72
 8000318:	d108      	bne.n	800032c <main+0xac>
				I2C_writeByte(&handlerAccelerometer, PWR_MGMT_1, 0x00);
 800031a:	2200      	movs	r2, #0
 800031c:	216b      	movs	r1, #107	; 0x6b
 800031e:	4841      	ldr	r0, [pc, #260]	; (8000424 <main+0x1a4>)
 8000320:	f000 fbe7 	bl	8000af2 <I2C_writeByte>
				rxData = '\0';
 8000324:	4b3e      	ldr	r3, [pc, #248]	; (8000420 <main+0x1a0>)
 8000326:	2200      	movs	r2, #0
 8000328:	701a      	strb	r2, [r3, #0]
 800032a:	e7b2      	b.n	8000292 <main+0x12>
			}
			// Leemos los valores del aceler√≥metro para x
			else if(rxData == 'x'){
 800032c:	4b3c      	ldr	r3, [pc, #240]	; (8000420 <main+0x1a0>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b78      	cmp	r3, #120	; 0x78
 8000332:	d121      	bne.n	8000378 <main+0xf8>
				uint8_t AccelX_low = I2C_readByte(&handlerAccelerometer, ACCEL_XOUT_L);
 8000334:	213c      	movs	r1, #60	; 0x3c
 8000336:	483b      	ldr	r0, [pc, #236]	; (8000424 <main+0x1a4>)
 8000338:	f000 fbb4 	bl	8000aa4 <I2C_readByte>
 800033c:	4603      	mov	r3, r0
 800033e:	71fb      	strb	r3, [r7, #7]
				uint8_t AccelX_high = I2C_readByte(&handlerAccelerometer, ACCEL_XOUT_H);
 8000340:	213b      	movs	r1, #59	; 0x3b
 8000342:	4838      	ldr	r0, [pc, #224]	; (8000424 <main+0x1a4>)
 8000344:	f000 fbae 	bl	8000aa4 <I2C_readByte>
 8000348:	4603      	mov	r3, r0
 800034a:	71bb      	strb	r3, [r7, #6]
				int16_t AccelX = (AccelX_high << 8) | AccelX_low;
 800034c:	79bb      	ldrb	r3, [r7, #6]
 800034e:	021b      	lsls	r3, r3, #8
 8000350:	b21a      	sxth	r2, r3
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	b21b      	sxth	r3, r3
 8000356:	4313      	orrs	r3, r2
 8000358:	80bb      	strh	r3, [r7, #4]
				sprintf(bufferData, "AccelX = %d \n",(int) AccelX);
 800035a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800035e:	461a      	mov	r2, r3
 8000360:	4933      	ldr	r1, [pc, #204]	; (8000430 <main+0x1b0>)
 8000362:	482d      	ldr	r0, [pc, #180]	; (8000418 <main+0x198>)
 8000364:	f001 f95e 	bl	8001624 <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 8000368:	492b      	ldr	r1, [pc, #172]	; (8000418 <main+0x198>)
 800036a:	482c      	ldr	r0, [pc, #176]	; (800041c <main+0x19c>)
 800036c:	f001 f918 	bl	80015a0 <writeMsg>
				rxData = '\0';
 8000370:	4b2b      	ldr	r3, [pc, #172]	; (8000420 <main+0x1a0>)
 8000372:	2200      	movs	r2, #0
 8000374:	701a      	strb	r2, [r3, #0]
 8000376:	e78c      	b.n	8000292 <main+0x12>
			}
			// Leemos los valores del aceler√≥metro para y
			else if(rxData == 'y'){
 8000378:	4b29      	ldr	r3, [pc, #164]	; (8000420 <main+0x1a0>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b79      	cmp	r3, #121	; 0x79
 800037e:	d121      	bne.n	80003c4 <main+0x144>
				uint8_t AccelY_low = I2C_readByte(&handlerAccelerometer, ACCEL_YOUT_L);
 8000380:	213e      	movs	r1, #62	; 0x3e
 8000382:	4828      	ldr	r0, [pc, #160]	; (8000424 <main+0x1a4>)
 8000384:	f000 fb8e 	bl	8000aa4 <I2C_readByte>
 8000388:	4603      	mov	r3, r0
 800038a:	72fb      	strb	r3, [r7, #11]
				uint8_t AccelY_high = I2C_readByte(&handlerAccelerometer, ACCEL_YOUT_H);
 800038c:	213d      	movs	r1, #61	; 0x3d
 800038e:	4825      	ldr	r0, [pc, #148]	; (8000424 <main+0x1a4>)
 8000390:	f000 fb88 	bl	8000aa4 <I2C_readByte>
 8000394:	4603      	mov	r3, r0
 8000396:	72bb      	strb	r3, [r7, #10]
				int16_t AccelY = AccelY_high << 8 | AccelY_low;
 8000398:	7abb      	ldrb	r3, [r7, #10]
 800039a:	021b      	lsls	r3, r3, #8
 800039c:	b21a      	sxth	r2, r3
 800039e:	7afb      	ldrb	r3, [r7, #11]
 80003a0:	b21b      	sxth	r3, r3
 80003a2:	4313      	orrs	r3, r2
 80003a4:	813b      	strh	r3, [r7, #8]
				sprintf(bufferData, "AccelY = %d \n",(int) AccelY);
 80003a6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80003aa:	461a      	mov	r2, r3
 80003ac:	4921      	ldr	r1, [pc, #132]	; (8000434 <main+0x1b4>)
 80003ae:	481a      	ldr	r0, [pc, #104]	; (8000418 <main+0x198>)
 80003b0:	f001 f938 	bl	8001624 <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 80003b4:	4918      	ldr	r1, [pc, #96]	; (8000418 <main+0x198>)
 80003b6:	4819      	ldr	r0, [pc, #100]	; (800041c <main+0x19c>)
 80003b8:	f001 f8f2 	bl	80015a0 <writeMsg>
				rxData = '\0';
 80003bc:	4b18      	ldr	r3, [pc, #96]	; (8000420 <main+0x1a0>)
 80003be:	2200      	movs	r2, #0
 80003c0:	701a      	strb	r2, [r3, #0]
 80003c2:	e766      	b.n	8000292 <main+0x12>
			}
			// Leemos los valores del aceler√≥metro para z
			else if(rxData == 'z'){
 80003c4:	4b16      	ldr	r3, [pc, #88]	; (8000420 <main+0x1a0>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b7a      	cmp	r3, #122	; 0x7a
 80003ca:	d121      	bne.n	8000410 <main+0x190>
				uint8_t AccelZ_low  = I2C_readByte(&handlerAccelerometer, ACCEL_ZOUT_L);
 80003cc:	2140      	movs	r1, #64	; 0x40
 80003ce:	4815      	ldr	r0, [pc, #84]	; (8000424 <main+0x1a4>)
 80003d0:	f000 fb68 	bl	8000aa4 <I2C_readByte>
 80003d4:	4603      	mov	r3, r0
 80003d6:	73fb      	strb	r3, [r7, #15]
				uint8_t AccelZ_high = I2C_readByte(&handlerAccelerometer, ACCEL_ZOUT_H);
 80003d8:	213f      	movs	r1, #63	; 0x3f
 80003da:	4812      	ldr	r0, [pc, #72]	; (8000424 <main+0x1a4>)
 80003dc:	f000 fb62 	bl	8000aa4 <I2C_readByte>
 80003e0:	4603      	mov	r3, r0
 80003e2:	73bb      	strb	r3, [r7, #14]
				int16_t AccelZ = AccelZ_high << 8 | AccelZ_low;
 80003e4:	7bbb      	ldrb	r3, [r7, #14]
 80003e6:	021b      	lsls	r3, r3, #8
 80003e8:	b21a      	sxth	r2, r3
 80003ea:	7bfb      	ldrb	r3, [r7, #15]
 80003ec:	b21b      	sxth	r3, r3
 80003ee:	4313      	orrs	r3, r2
 80003f0:	81bb      	strh	r3, [r7, #12]
				sprintf(bufferData, "AccelZ = %d \n",(int) AccelZ);
 80003f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80003f6:	461a      	mov	r2, r3
 80003f8:	490f      	ldr	r1, [pc, #60]	; (8000438 <main+0x1b8>)
 80003fa:	4807      	ldr	r0, [pc, #28]	; (8000418 <main+0x198>)
 80003fc:	f001 f912 	bl	8001624 <siprintf>
				writeMsg(&handlerCommTerminal, bufferData);
 8000400:	4905      	ldr	r1, [pc, #20]	; (8000418 <main+0x198>)
 8000402:	4806      	ldr	r0, [pc, #24]	; (800041c <main+0x19c>)
 8000404:	f001 f8cc 	bl	80015a0 <writeMsg>
				rxData = '\0';
 8000408:	4b05      	ldr	r3, [pc, #20]	; (8000420 <main+0x1a0>)
 800040a:	2200      	movs	r2, #0
 800040c:	701a      	strb	r2, [r3, #0]
 800040e:	e740      	b.n	8000292 <main+0x12>
			}
			else{
				rxData = '\0';
 8000410:	4b03      	ldr	r3, [pc, #12]	; (8000420 <main+0x1a0>)
 8000412:	2200      	movs	r2, #0
 8000414:	701a      	strb	r2, [r3, #0]
		if(rxData != '\0'){
 8000416:	e73c      	b.n	8000292 <main+0x12>
 8000418:	20000000 	.word	0x20000000
 800041c:	200000f4 	.word	0x200000f4
 8000420:	200001a0 	.word	0x200001a0
 8000424:	20000198 	.word	0x20000198
 8000428:	200001a1 	.word	0x200001a1
 800042c:	08001f14 	.word	0x08001f14
 8000430:	08001f28 	.word	0x08001f28
 8000434:	08001f38 	.word	0x08001f38
 8000438:	08001f48 	.word	0x08001f48

0800043c <initSystem>:

//***********// InitSystem //***********//

// Funci√≥n que define la configuraci√≥n de todos los pines y perif√©ricos

void initSystem(void){
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0

	// Configuraci√≥n el State LED
	handlerStateLED.pGPIOx								= GPIOA;
 8000440:	4b58      	ldr	r3, [pc, #352]	; (80005a4 <initSystem+0x168>)
 8000442:	4a59      	ldr	r2, [pc, #356]	; (80005a8 <initSystem+0x16c>)
 8000444:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 8000446:	4b57      	ldr	r3, [pc, #348]	; (80005a4 <initSystem+0x168>)
 8000448:	2205      	movs	r2, #5
 800044a:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 800044c:	4b55      	ldr	r3, [pc, #340]	; (80005a4 <initSystem+0x168>)
 800044e:	2201      	movs	r2, #1
 8000450:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 8000452:	4b54      	ldr	r3, [pc, #336]	; (80005a4 <initSystem+0x168>)
 8000454:	2200      	movs	r2, #0
 8000456:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000458:	4b52      	ldr	r3, [pc, #328]	; (80005a4 <initSystem+0x168>)
 800045a:	2200      	movs	r2, #0
 800045c:	71da      	strb	r2, [r3, #7]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_FAST;
 800045e:	4b51      	ldr	r3, [pc, #324]	; (80005a4 <initSystem+0x168>)
 8000460:	2202      	movs	r2, #2
 8000462:	719a      	strb	r2, [r3, #6]

	//Cargamos la configuraci√≥n
	GPIO_Config(&handlerStateLED);
 8000464:	484f      	ldr	r0, [pc, #316]	; (80005a4 <initSystem+0x168>)
 8000466:	f000 f931 	bl	80006cc <GPIO_Config>

	// Prendemos el LED
	GPIO_WritePin(&handlerStateLED, SET);
 800046a:	2101      	movs	r1, #1
 800046c:	484d      	ldr	r0, [pc, #308]	; (80005a4 <initSystem+0x168>)
 800046e:	f000 fa55 	bl	800091c <GPIO_WritePin>

	/* Configurando los pines sobre los que funciona el USART */
	handlerPinTX.pGPIOx									= GPIOA;
 8000472:	4b4e      	ldr	r3, [pc, #312]	; (80005ac <initSystem+0x170>)
 8000474:	4a4c      	ldr	r2, [pc, #304]	; (80005a8 <initSystem+0x16c>)
 8000476:	601a      	str	r2, [r3, #0]
	handlerPinTX.GPIO_PinConfig.GPIO_PinNumber			= PIN_2;
 8000478:	4b4c      	ldr	r3, [pc, #304]	; (80005ac <initSystem+0x170>)
 800047a:	2202      	movs	r2, #2
 800047c:	711a      	strb	r2, [r3, #4]
	handlerPinTX.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 800047e:	4b4b      	ldr	r3, [pc, #300]	; (80005ac <initSystem+0x170>)
 8000480:	2202      	movs	r2, #2
 8000482:	715a      	strb	r2, [r3, #5]
	handlerPinTX.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 8000484:	4b49      	ldr	r3, [pc, #292]	; (80005ac <initSystem+0x170>)
 8000486:	2200      	movs	r2, #0
 8000488:	721a      	strb	r2, [r3, #8]
	handlerPinTX.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 800048a:	4b48      	ldr	r3, [pc, #288]	; (80005ac <initSystem+0x170>)
 800048c:	2200      	movs	r2, #0
 800048e:	71da      	strb	r2, [r3, #7]
	handlerPinTX.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_FAST;
 8000490:	4b46      	ldr	r3, [pc, #280]	; (80005ac <initSystem+0x170>)
 8000492:	2202      	movs	r2, #2
 8000494:	719a      	strb	r2, [r3, #6]
	handlerPinTX.GPIO_PinConfig.GPIO_PinAltFunMode		= AF7;
 8000496:	4b45      	ldr	r3, [pc, #276]	; (80005ac <initSystem+0x170>)
 8000498:	2207      	movs	r2, #7
 800049a:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&handlerPinTX);
 800049c:	4843      	ldr	r0, [pc, #268]	; (80005ac <initSystem+0x170>)
 800049e:	f000 f915 	bl	80006cc <GPIO_Config>

	handlerPinRX.pGPIOx									= GPIOA;
 80004a2:	4b43      	ldr	r3, [pc, #268]	; (80005b0 <initSystem+0x174>)
 80004a4:	4a40      	ldr	r2, [pc, #256]	; (80005a8 <initSystem+0x16c>)
 80004a6:	601a      	str	r2, [r3, #0]
	handlerPinRX.GPIO_PinConfig.GPIO_PinNumber			= PIN_3;
 80004a8:	4b41      	ldr	r3, [pc, #260]	; (80005b0 <initSystem+0x174>)
 80004aa:	2203      	movs	r2, #3
 80004ac:	711a      	strb	r2, [r3, #4]
	handlerPinRX.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 80004ae:	4b40      	ldr	r3, [pc, #256]	; (80005b0 <initSystem+0x174>)
 80004b0:	2202      	movs	r2, #2
 80004b2:	715a      	strb	r2, [r3, #5]
	handlerPinRX.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 80004b4:	4b3e      	ldr	r3, [pc, #248]	; (80005b0 <initSystem+0x174>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	721a      	strb	r2, [r3, #8]
	handlerPinRX.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 80004ba:	4b3d      	ldr	r3, [pc, #244]	; (80005b0 <initSystem+0x174>)
 80004bc:	2200      	movs	r2, #0
 80004be:	71da      	strb	r2, [r3, #7]
	handlerPinRX.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_FAST;
 80004c0:	4b3b      	ldr	r3, [pc, #236]	; (80005b0 <initSystem+0x174>)
 80004c2:	2202      	movs	r2, #2
 80004c4:	719a      	strb	r2, [r3, #6]
	handlerPinRX.GPIO_PinConfig.GPIO_PinAltFunMode		= AF7;
 80004c6:	4b3a      	ldr	r3, [pc, #232]	; (80005b0 <initSystem+0x174>)
 80004c8:	2207      	movs	r2, #7
 80004ca:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&handlerPinRX);
 80004cc:	4838      	ldr	r0, [pc, #224]	; (80005b0 <initSystem+0x174>)
 80004ce:	f000 f8fd 	bl	80006cc <GPIO_Config>

	// Configuraci√≥n del USART del USB para RX
	handlerCommTerminal.ptrUSARTx							= USART2;
 80004d2:	4b38      	ldr	r3, [pc, #224]	; (80005b4 <initSystem+0x178>)
 80004d4:	4a38      	ldr	r2, [pc, #224]	; (80005b8 <initSystem+0x17c>)
 80004d6:	601a      	str	r2, [r3, #0]
	handlerCommTerminal.USART_Config.USART_mode				= USART_MODE_RXTX;
 80004d8:	4b36      	ldr	r3, [pc, #216]	; (80005b4 <initSystem+0x178>)
 80004da:	2202      	movs	r2, #2
 80004dc:	711a      	strb	r2, [r3, #4]
	handlerCommTerminal.USART_Config.USART_baudrate			= USART_BAUDRATE_19200;
 80004de:	4b35      	ldr	r3, [pc, #212]	; (80005b4 <initSystem+0x178>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	715a      	strb	r2, [r3, #5]
	handlerCommTerminal.USART_Config.USART_datasize			= USART_DATASIZE_8BIT;
 80004e4:	4b33      	ldr	r3, [pc, #204]	; (80005b4 <initSystem+0x178>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	719a      	strb	r2, [r3, #6]
	handlerCommTerminal.USART_Config.USART_parity			= USART_PARITY_ODD;
 80004ea:	4b32      	ldr	r3, [pc, #200]	; (80005b4 <initSystem+0x178>)
 80004ec:	2201      	movs	r2, #1
 80004ee:	71da      	strb	r2, [r3, #7]
	handlerCommTerminal.USART_Config.USART_stopbits			= USART_STOPBIT_1;
 80004f0:	4b30      	ldr	r3, [pc, #192]	; (80005b4 <initSystem+0x178>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	721a      	strb	r2, [r3, #8]
	handlerCommTerminal.USART_Config.USART_interrupt		= USART_INTERRUPT_RX_ENABLE;
 80004f6:	4b2f      	ldr	r3, [pc, #188]	; (80005b4 <initSystem+0x178>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	725a      	strb	r2, [r3, #9]

	USART_Config(&handlerCommTerminal);
 80004fc:	482d      	ldr	r0, [pc, #180]	; (80005b4 <initSystem+0x178>)
 80004fe:	f000 fdf7 	bl	80010f0 <USART_Config>

	// Configuraci√≥n del timer2
	handlerTimer2.ptrTIMx								= TIM2;
 8000502:	4b2e      	ldr	r3, [pc, #184]	; (80005bc <initSystem+0x180>)
 8000504:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000508:	601a      	str	r2, [r3, #0]
	handlerTimer2.timerConfig.Timer_mode				= TIMER_MODE_UP;
 800050a:	4b2c      	ldr	r3, [pc, #176]	; (80005bc <initSystem+0x180>)
 800050c:	2200      	movs	r2, #0
 800050e:	711a      	strb	r2, [r3, #4]
	handlerTimer2.timerConfig.Timer_speed				= TIMER_INCR_SPEED_1ms;
 8000510:	4b2a      	ldr	r3, [pc, #168]	; (80005bc <initSystem+0x180>)
 8000512:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000516:	80da      	strh	r2, [r3, #6]
	handlerTimer2.timerConfig.Timer_period				= 250;
 8000518:	4b28      	ldr	r3, [pc, #160]	; (80005bc <initSystem+0x180>)
 800051a:	22fa      	movs	r2, #250	; 0xfa
 800051c:	609a      	str	r2, [r3, #8]

	Timer_Config(&handlerTimer2);
 800051e:	4827      	ldr	r0, [pc, #156]	; (80005bc <initSystem+0x180>)
 8000520:	f000 fcd2 	bl	8000ec8 <Timer_Config>

	// Llamamos la funci√≥n para configurar y activar el SysTick

	config_SysTickMs();
 8000524:	f000 fc16 	bl	8000d54 <config_SysTickMs>

	// Configuramos los pines para el I2C SCL
	handlerI2CSCL.pGPIOx								= GPIOB;
 8000528:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <initSystem+0x184>)
 800052a:	4a26      	ldr	r2, [pc, #152]	; (80005c4 <initSystem+0x188>)
 800052c:	601a      	str	r2, [r3, #0]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinNumber			= PIN_6;
 800052e:	4b24      	ldr	r3, [pc, #144]	; (80005c0 <initSystem+0x184>)
 8000530:	2206      	movs	r2, #6
 8000532:	711a      	strb	r2, [r3, #4]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 8000534:	4b22      	ldr	r3, [pc, #136]	; (80005c0 <initSystem+0x184>)
 8000536:	2202      	movs	r2, #2
 8000538:	715a      	strb	r2, [r3, #5]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_OPENDRAIN;
 800053a:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <initSystem+0x184>)
 800053c:	2201      	movs	r2, #1
 800053e:	721a      	strb	r2, [r3, #8]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_PULLUP;
 8000540:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <initSystem+0x184>)
 8000542:	2201      	movs	r2, #1
 8000544:	71da      	strb	r2, [r3, #7]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_FAST;
 8000546:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <initSystem+0x184>)
 8000548:	2202      	movs	r2, #2
 800054a:	719a      	strb	r2, [r3, #6]
	handlerI2CSCL.GPIO_PinConfig.GPIO_PinAltFunMode		= AF4;
 800054c:	4b1c      	ldr	r3, [pc, #112]	; (80005c0 <initSystem+0x184>)
 800054e:	2204      	movs	r2, #4
 8000550:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&handlerI2CSCL);
 8000552:	481b      	ldr	r0, [pc, #108]	; (80005c0 <initSystem+0x184>)
 8000554:	f000 f8ba 	bl	80006cc <GPIO_Config>

	// Configuramos los pines para el I2C SDA
	handlerI2CSDA.pGPIOx								= GPIOB;
 8000558:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <initSystem+0x18c>)
 800055a:	4a1a      	ldr	r2, [pc, #104]	; (80005c4 <initSystem+0x188>)
 800055c:	601a      	str	r2, [r3, #0]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinNumber			= PIN_7;
 800055e:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <initSystem+0x18c>)
 8000560:	2207      	movs	r2, #7
 8000562:	711a      	strb	r2, [r3, #4]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 8000564:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <initSystem+0x18c>)
 8000566:	2202      	movs	r2, #2
 8000568:	715a      	strb	r2, [r3, #5]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_OPENDRAIN;
 800056a:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <initSystem+0x18c>)
 800056c:	2201      	movs	r2, #1
 800056e:	721a      	strb	r2, [r3, #8]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_PULLUP;
 8000570:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <initSystem+0x18c>)
 8000572:	2201      	movs	r2, #1
 8000574:	71da      	strb	r2, [r3, #7]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_FAST;
 8000576:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <initSystem+0x18c>)
 8000578:	2202      	movs	r2, #2
 800057a:	719a      	strb	r2, [r3, #6]
	handlerI2CSDA.GPIO_PinConfig.GPIO_PinAltFunMode		= AF4;
 800057c:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <initSystem+0x18c>)
 800057e:	2204      	movs	r2, #4
 8000580:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&handlerI2CSDA);
 8000582:	4811      	ldr	r0, [pc, #68]	; (80005c8 <initSystem+0x18c>)
 8000584:	f000 f8a2 	bl	80006cc <GPIO_Config>

	handlerAccelerometer.ptrI2Cx		= I2C1;
 8000588:	4b10      	ldr	r3, [pc, #64]	; (80005cc <initSystem+0x190>)
 800058a:	4a11      	ldr	r2, [pc, #68]	; (80005d0 <initSystem+0x194>)
 800058c:	601a      	str	r2, [r3, #0]
	handlerAccelerometer.modeI2C		= I2C_MODE_FM;
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <initSystem+0x190>)
 8000590:	2201      	movs	r2, #1
 8000592:	715a      	strb	r2, [r3, #5]
	handlerAccelerometer.slaveAddress	= 0b1101000;		// Direcci√≥n del Accel con Logic 0 (0x68)
 8000594:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <initSystem+0x190>)
 8000596:	2268      	movs	r2, #104	; 0x68
 8000598:	711a      	strb	r2, [r3, #4]

	I2C_Config(&handlerAccelerometer);
 800059a:	480c      	ldr	r0, [pc, #48]	; (80005cc <initSystem+0x190>)
 800059c:	f000 f9e8 	bl	8000970 <I2C_Config>

}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000c4 	.word	0x200000c4
 80005a8:	40020000 	.word	0x40020000
 80005ac:	200000d0 	.word	0x200000d0
 80005b0:	200000dc 	.word	0x200000dc
 80005b4:	200000f4 	.word	0x200000f4
 80005b8:	40004400 	.word	0x40004400
 80005bc:	200000e8 	.word	0x200000e8
 80005c0:	2000018c 	.word	0x2000018c
 80005c4:	40020400 	.word	0x40020400
 80005c8:	20000180 	.word	0x20000180
 80005cc:	20000198 	.word	0x20000198
 80005d0:	40005400 	.word	0x40005400

080005d4 <USART2_Callback>:

//***********// CallBacks //***********//

void USART2_Callback(void){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	// Lectura de los datos recibidos
	rxData = returnData();
 80005d8:	f000 ffc0 	bl	800155c <returnData>
 80005dc:	4603      	mov	r3, r0
 80005de:	461a      	mov	r2, r3
 80005e0:	4b01      	ldr	r3, [pc, #4]	; (80005e8 <USART2_Callback+0x14>)
 80005e2:	701a      	strb	r2, [r3, #0]
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200001a0 	.word	0x200001a0

080005ec <Timer2_Callback>:
// Timer encargado del StateLED
void Timer2_Callback(void){
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
	handlerStateLED.pGPIOx -> ODR ^= GPIO_ODR_OD5;		// Encendido y apagado StateLED
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <Timer2_Callback+0x1c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	695a      	ldr	r2, [r3, #20]
 80005f6:	4b04      	ldr	r3, [pc, #16]	; (8000608 <Timer2_Callback+0x1c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f082 0220 	eor.w	r2, r2, #32
 80005fe:	615a      	str	r2, [r3, #20]
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	200000c4 	.word	0x200000c4

0800060c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000614:	4a14      	ldr	r2, [pc, #80]	; (8000668 <_sbrk+0x5c>)
 8000616:	4b15      	ldr	r3, [pc, #84]	; (800066c <_sbrk+0x60>)
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <_sbrk+0x64>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d102      	bne.n	800062e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <_sbrk+0x64>)
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <_sbrk+0x68>)
 800062c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <_sbrk+0x64>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	693a      	ldr	r2, [r7, #16]
 8000638:	429a      	cmp	r2, r3
 800063a:	d207      	bcs.n	800064c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800063c:	f000 ffc8 	bl	80015d0 <__errno>
 8000640:	4603      	mov	r3, r0
 8000642:	220c      	movs	r2, #12
 8000644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800064a:	e009      	b.n	8000660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <_sbrk+0x64>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000652:	4b07      	ldr	r3, [pc, #28]	; (8000670 <_sbrk+0x64>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	4a05      	ldr	r2, [pc, #20]	; (8000670 <_sbrk+0x64>)
 800065c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800065e:	68fb      	ldr	r3, [r7, #12]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3718      	adds	r7, #24
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20020000 	.word	0x20020000
 800066c:	00000400 	.word	0x00000400
 8000670:	200001a4 	.word	0x200001a4
 8000674:	200001c8 	.word	0x200001c8

08000678 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000678:	480d      	ldr	r0, [pc, #52]	; (80006b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800067a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800067c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000680:	480c      	ldr	r0, [pc, #48]	; (80006b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000682:	490d      	ldr	r1, [pc, #52]	; (80006b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000684:	4a0d      	ldr	r2, [pc, #52]	; (80006bc <LoopForever+0xe>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000688:	e002      	b.n	8000690 <LoopCopyDataInit>

0800068a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800068c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068e:	3304      	adds	r3, #4

08000690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000694:	d3f9      	bcc.n	800068a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000696:	4a0a      	ldr	r2, [pc, #40]	; (80006c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000698:	4c0a      	ldr	r4, [pc, #40]	; (80006c4 <LoopForever+0x16>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800069c:	e001      	b.n	80006a2 <LoopFillZerobss>

0800069e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a0:	3204      	adds	r2, #4

080006a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a4:	d3fb      	bcc.n	800069e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006a6:	f000 ff99 	bl	80015dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006aa:	f7ff fde9 	bl	8000280 <main>

080006ae <LoopForever>:

LoopForever:
    b LoopForever
 80006ae:	e7fe      	b.n	80006ae <LoopForever>
  ldr   r0, =_estack
 80006b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b8:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80006bc:	08001f94 	.word	0x08001f94
  ldr r2, =_sbss
 80006c0:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80006c4:	200001c4 	.word	0x200001c4

080006c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c8:	e7fe      	b.n	80006c8 <ADC_IRQHandler>
	...

080006cc <GPIO_Config>:
orden estricto para poder que el sistema permita configurar el perif√©rico X.
Lo primero y m√°s importante es activar la se√±al del reloj principal hacia ese
elemento espec√≠fico (relacionado con el perif√©rico RCC), a esto llamaremos
simplemente "activar el perif√©rico o activar la se√±al de reloj del perif√©rico".
*/
void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]

	// 1) Activar el perif√©rico
	// Verificamos para GPIOA
	if (pGPIOHandler -> pGPIOx == GPIOA){
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a87      	ldr	r2, [pc, #540]	; (8000900 <GPIO_Config+0x234>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d106      	bne.n	80006f4 <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posici√≥n correspondiente al GPIOA
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 80006e6:	4b87      	ldr	r3, [pc, #540]	; (8000904 <GPIO_Config+0x238>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a86      	ldr	r2, [pc, #536]	; (8000904 <GPIO_Config+0x238>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	e03a      	b.n	800076a <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if (pGPIOHandler -> pGPIOx == GPIOB){
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a83      	ldr	r2, [pc, #524]	; (8000908 <GPIO_Config+0x23c>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d106      	bne.n	800070c <GPIO_Config+0x40>
		// Escribimos 1 (SET) en la posici√≥n correspondiente al GPIOB
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 80006fe:	4b81      	ldr	r3, [pc, #516]	; (8000904 <GPIO_Config+0x238>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a80      	ldr	r2, [pc, #512]	; (8000904 <GPIO_Config+0x238>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	e02e      	b.n	800076a <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOC
	else if (pGPIOHandler -> pGPIOx == GPIOC){
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a7e      	ldr	r2, [pc, #504]	; (800090c <GPIO_Config+0x240>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d106      	bne.n	8000724 <GPIO_Config+0x58>
		// Escribimos 1 (SET) en la posici√≥n correspondiente al GPIOC
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8000716:	4b7b      	ldr	r3, [pc, #492]	; (8000904 <GPIO_Config+0x238>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a7a      	ldr	r2, [pc, #488]	; (8000904 <GPIO_Config+0x238>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	e022      	b.n	800076a <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOD
	else if (pGPIOHandler -> pGPIOx == GPIOD){
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a79      	ldr	r2, [pc, #484]	; (8000910 <GPIO_Config+0x244>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d106      	bne.n	800073c <GPIO_Config+0x70>
		// Escribimos 1 (SET) en la posici√≥n correspondiente al GPIOD
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 800072e:	4b75      	ldr	r3, [pc, #468]	; (8000904 <GPIO_Config+0x238>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a74      	ldr	r2, [pc, #464]	; (8000904 <GPIO_Config+0x238>)
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	e016      	b.n	800076a <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOE
	else if (pGPIOHandler -> pGPIOx == GPIOE){
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a74      	ldr	r2, [pc, #464]	; (8000914 <GPIO_Config+0x248>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d106      	bne.n	8000754 <GPIO_Config+0x88>
		// Escribimos 1 (SET) en la posici√≥n correspondiente al GPIOE
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8000746:	4b6f      	ldr	r3, [pc, #444]	; (8000904 <GPIO_Config+0x238>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a6e      	ldr	r2, [pc, #440]	; (8000904 <GPIO_Config+0x238>)
 800074c:	f043 0310 	orr.w	r3, r3, #16
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	e00a      	b.n	800076a <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOH
	else if (pGPIOHandler -> pGPIOx == GPIOH){
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a6f      	ldr	r2, [pc, #444]	; (8000918 <GPIO_Config+0x24c>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d105      	bne.n	800076a <GPIO_Config+0x9e>
		// Escribimos 1 (SET) en la posici√≥n correspondiente al GPIOH
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 800075e:	4b69      	ldr	r3, [pc, #420]	; (8000904 <GPIO_Config+0x238>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a68      	ldr	r2, [pc, #416]	; (8000904 <GPIO_Config+0x238>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
	// Despu√©s de activado, podemos comenzar a configurar.

	// 2) Configurando el registro GPIOx_MODER
	// Ac√° estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y todo eso lo cargamos en la variable aux_Config
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	795b      	ldrb	r3, [r3, #5]
 800076e:	461a      	mov	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	791b      	ldrb	r3, [r3, #4]
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	60fb      	str	r3, [r7, #12]

	// Antes de cargar el nuevo valor, limpiamos los bits espec√≠ficos de ese registro (debemos escribir 0b00)
	// para lo cual aplicamos una m√°scara y una operaci√≥n bitwise AND
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	791b      	ldrb	r3, [r3, #4]
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	2103      	movs	r1, #3
 800078a:	fa01 f303 	lsl.w	r3, r1, r3
 800078e:	43db      	mvns	r3, r3
 8000790:	4619      	mov	r1, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	400a      	ands	r2, r1
 8000798:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler -> pGPIOx -> MODER |= auxConfig;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	6819      	ldr	r1, [r3, #0]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	68fa      	ldr	r2, [r7, #12]
 80007a6:	430a      	orrs	r2, r1
 80007a8:	601a      	str	r2, [r3, #0]

	// 3) Configurando el registro GPIOx_OTYPER
	// De nuevo, leemos y movemos el valor un n√∫mero "PinNumber" de veces
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	7a1b      	ldrb	r3, [r3, #8]
 80007ae:	461a      	mov	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	791b      	ldrb	r3, [r3, #4]
 80007b4:	fa02 f303 	lsl.w	r3, r2, r3
 80007b8:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler -> pGPIOx -> OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	685a      	ldr	r2, [r3, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	791b      	ldrb	r3, [r3, #4]
 80007c4:	4619      	mov	r1, r3
 80007c6:	2301      	movs	r3, #1
 80007c8:	408b      	lsls	r3, r1
 80007ca:	43db      	mvns	r3, r3
 80007cc:	4619      	mov	r1, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	400a      	ands	r2, r1
 80007d4:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OTYPER |= auxConfig;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	6859      	ldr	r1, [r3, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	68fa      	ldr	r2, [r7, #12]
 80007e2:	430a      	orrs	r2, r1
 80007e4:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	799b      	ldrb	r3, [r3, #6]
 80007ea:	461a      	mov	r2, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	60fb      	str	r3, [r7, #12]

	// Limpiando la posici√≥n antes de cargar la nueva configuraci√≥n
	pGPIOHandler -> pGPIOx -> OSPEEDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	689a      	ldr	r2, [r3, #8]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	791b      	ldrb	r3, [r3, #4]
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	2103      	movs	r1, #3
 8000806:	fa01 f303 	lsl.w	r3, r1, r3
 800080a:	43db      	mvns	r3, r3
 800080c:	4619      	mov	r1, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	400a      	ands	r2, r1
 8000814:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OSPEEDR |= auxConfig;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	6899      	ldr	r1, [r3, #8]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	68fa      	ldr	r2, [r7, #12]
 8000822:	430a      	orrs	r2, r1
 8000824:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante.
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	79db      	ldrb	r3, [r3, #7]
 800082a:	461a      	mov	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	791b      	ldrb	r3, [r3, #4]
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	60fb      	str	r3, [r7, #12]

	// Limpiando la posici√≥n antes de cargar la nueva configuraci√≥n
	pGPIOHandler -> pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	68da      	ldr	r2, [r3, #12]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	791b      	ldrb	r3, [r3, #4]
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	2103      	movs	r1, #3
 8000846:	fa01 f303 	lsl.w	r3, r1, r3
 800084a:	43db      	mvns	r3, r3
 800084c:	4619      	mov	r1, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	400a      	ands	r2, r1
 8000854:	60da      	str	r2, [r3, #12]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> PUPDR |= auxConfig;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	68d9      	ldr	r1, [r3, #12]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	68fa      	ldr	r2, [r7, #12]
 8000862:	430a      	orrs	r2, r1
 8000864:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuraci√≥n de las funciones alternativas... Se ver√° luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	795b      	ldrb	r3, [r3, #5]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d143      	bne.n	80008f6 <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	791b      	ldrb	r3, [r3, #4]
 8000872:	2b07      	cmp	r3, #7
 8000874:	d81f      	bhi.n	80008b6 <GPIO_Config+0x1ea>
			// Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	791b      	ldrb	r3, [r3, #4]
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	60bb      	str	r3, [r7, #8]

			// Limpiamos primero la posici√≥n del registro que deseamos escribir a continuaci√≥n
			pGPIOHandler -> pGPIOx -> AFR[0] &= ~(0b1111 << auxPosition);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	6a1a      	ldr	r2, [r3, #32]
 8000884:	210f      	movs	r1, #15
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	fa01 f303 	lsl.w	r3, r1, r3
 800088c:	43db      	mvns	r3, r3
 800088e:	4619      	mov	r1, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	400a      	ands	r2, r1
 8000896:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posici√≥n seleccionada
			pGPIOHandler -> pGPIOx -> AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	6a1a      	ldr	r2, [r3, #32]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	7a5b      	ldrb	r3, [r3, #9]
 80008a2:	4619      	mov	r1, r3
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	fa01 f303 	lsl.w	r3, r1, r3
 80008aa:	4619      	mov	r1, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	430a      	orrs	r2, r1
 80008b2:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurando en la posici√≥n seleccionada
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} // Fin del GPIO_Config
 80008b4:	e01f      	b.n	80008f6 <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber -8);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	791b      	ldrb	r3, [r3, #4]
 80008ba:	3b08      	subs	r3, #8
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx -> AFR[1] &= ~(0b1111 << auxPosition);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008c6:	210f      	movs	r1, #15
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	fa01 f303 	lsl.w	r3, r1, r3
 80008ce:	43db      	mvns	r3, r3
 80008d0:	4619      	mov	r1, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	400a      	ands	r2, r1
 80008d8:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	7a5b      	ldrb	r3, [r3, #9]
 80008e4:	4619      	mov	r1, r3
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ec:	4619      	mov	r1, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	430a      	orrs	r2, r1
 80008f4:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_Config
 80008f6:	bf00      	nop
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	40020000 	.word	0x40020000
 8000904:	40023800 	.word	0x40023800
 8000908:	40020400 	.word	0x40020400
 800090c:	40020800 	.word	0x40020800
 8000910:	40020c00 	.word	0x40020c00
 8000914:	40021000 	.word	0x40021000
 8000918:	40021c00 	.word	0x40021c00

0800091c <GPIO_WritePin>:
 *
 *
Funci√≥n utilizada para cambiar de estado el pin entregado en el handler, asignando
el valor entregado en la variable newState
*/
void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	460b      	mov	r3, r1
 8000926:	70fb      	strb	r3, [r7, #3]
	// Limpiamos la posici√≥n que deseamos
	// pPinHandler -> pGPIOx -> ODR &= ~(SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
	if(newState == SET){
 8000928:	78fb      	ldrb	r3, [r7, #3]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d10d      	bne.n	800094a <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler -> pGPIOx -> BSRR |= (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	699a      	ldr	r2, [r3, #24]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	791b      	ldrb	r3, [r3, #4]
 8000938:	4619      	mov	r1, r3
 800093a:	2301      	movs	r3, #1
 800093c:	408b      	lsls	r3, r1
 800093e:	4619      	mov	r1, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	430a      	orrs	r2, r1
 8000946:	619a      	str	r2, [r3, #24]
	}
	else{
		// Trabajando con la parte alta del registro
		pPinHandler -> pGPIOx -> BSRR |= (SET << (pPinHandler -> GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8000948:	e00d      	b.n	8000966 <GPIO_WritePin+0x4a>
		pPinHandler -> pGPIOx -> BSRR |= (SET << (pPinHandler -> GPIO_PinConfig.GPIO_PinNumber + 16));
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	699a      	ldr	r2, [r3, #24]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	791b      	ldrb	r3, [r3, #4]
 8000954:	3310      	adds	r3, #16
 8000956:	2101      	movs	r1, #1
 8000958:	fa01 f303 	lsl.w	r3, r1, r3
 800095c:	4619      	mov	r1, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	430a      	orrs	r2, r1
 8000964:	619a      	str	r2, [r3, #24]
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <I2C_Config>:
 * y con la resistencia en modo pull - up.
 * */

// Funci√≥n de configuraci√≥n para el I2C

void I2C_Config(I2C_Handler_t *ptrHandlerI2C){
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]

	/* 1. Activar la se√±al de reloj para el I2C y los PGIOs */

	if(ptrHandlerI2C -> ptrI2Cx == I2C1){
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a45      	ldr	r2, [pc, #276]	; (8000a94 <I2C_Config+0x124>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d106      	bne.n	8000990 <I2C_Config+0x20>
		// Activaci√≥n RCC para el I2C1
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000982:	4b45      	ldr	r3, [pc, #276]	; (8000a98 <I2C_Config+0x128>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	4a44      	ldr	r2, [pc, #272]	; (8000a98 <I2C_Config+0x128>)
 8000988:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800098c:	6413      	str	r3, [r2, #64]	; 0x40
 800098e:	e016      	b.n	80009be <I2C_Config+0x4e>
	}
	else if(ptrHandlerI2C -> ptrI2Cx == I2C2){
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a41      	ldr	r2, [pc, #260]	; (8000a9c <I2C_Config+0x12c>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d106      	bne.n	80009a8 <I2C_Config+0x38>
		// Activaci√≥n RCC para el I2C2
		RCC -> APB1ENR |= RCC_APB1ENR_I2C2EN ;
 800099a:	4b3f      	ldr	r3, [pc, #252]	; (8000a98 <I2C_Config+0x128>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a3e      	ldr	r2, [pc, #248]	; (8000a98 <I2C_Config+0x128>)
 80009a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	e00a      	b.n	80009be <I2C_Config+0x4e>
	}
	else if(ptrHandlerI2C -> ptrI2Cx == I2C3){
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a3c      	ldr	r2, [pc, #240]	; (8000aa0 <I2C_Config+0x130>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d105      	bne.n	80009be <I2C_Config+0x4e>
		// Activaci√≥n RCC para el I2C3
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 80009b2:	4b39      	ldr	r3, [pc, #228]	; (8000a98 <I2C_Config+0x128>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	4a38      	ldr	r2, [pc, #224]	; (8000a98 <I2C_Config+0x128>)
 80009b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009bc:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Limpiamos los registros del I2C. Reiniciamos el periferico
	 *  de forma que inicia en un estado conocido */

	ptrHandlerI2C -> ptrI2Cx -> CR1 |= I2C_CR1_SWRST;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80009cc:	601a      	str	r2, [r3, #0]
	__NOP();
 80009ce:	bf00      	nop
	ptrHandlerI2C -> ptrI2Cx -> CR1 &= ~I2C_CR1_SWRST;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80009de:	601a      	str	r2, [r3, #0]
	 * Indicamos cual es la velocidad del reloj principal, que es la se√±al utilizada por el perif√©rico
	 * para generar la se√±al de reloj para el bus I2C
	 * */
	// PLCK1 FRECUENCY in MHz

	ptrHandlerI2C -> ptrI2Cx -> CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuraci√≥n actual
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	685a      	ldr	r2, [r3, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80009ee:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C -> ptrI2Cx -> CR2 |= (MAIN_CLOCK_16_MHz_I2C << I2C_CR2_FREQ_Pos);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	685a      	ldr	r2, [r3, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f042 0210 	orr.w	r2, r2, #16
 80009fe:	605a      	str	r2, [r3, #4]
	 * En esta configuraci√≥n tambi√©n se incluye la velocidad del reloj
	 * y el tiempo m√°ximo para el cambio de la se√±al (T-Rise).
	 * Todo comienza con los dos registros en 0
	 * */

	ptrHandlerI2C -> ptrI2Cx -> CCR = 0;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C -> ptrI2Cx -> TRISE = 0;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C -> modeI2C == I2C_MODE_SM){
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	795b      	ldrb	r3, [r3, #5]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d118      	bne.n	8000a4a <I2C_Config+0xda>

		// Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C -> ptrI2Cx -> CCR &= ~I2C_CCR_FS;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	69da      	ldr	r2, [r3, #28]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000a26:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que se encarga de generar la se√±al del reloj
		ptrHandlerI2C -> ptrI2Cx -> CCR |= (I2C_MODE_SM_SPEED_100KHz << I2C_CCR_CCR_Pos);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	69da      	ldr	r2, [r3, #28]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8000a36:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T - Rise m√°ximo
		ptrHandlerI2C -> ptrI2Cx -> TRISE |= I2C_MAX_RISE_TIME_SM;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	6a1a      	ldr	r2, [r3, #32]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f042 0211 	orr.w	r2, r2, #17
 8000a46:	621a      	str	r2, [r3, #32]
 8000a48:	e017      	b.n	8000a7a <I2C_Config+0x10a>
	}
	else{
		// Estamos en modo "Fast" (FM Mode)
		// Seleccionamos el modo Fast
		ptrHandlerI2C -> ptrI2Cx -> CCR |= I2C_CCR_FS;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	69da      	ldr	r2, [r3, #28]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a58:	61da      	str	r2, [r3, #28]

		// COnfiguramos el registro que se encarga de generar la se√±al del reloj
		ptrHandlerI2C -> ptrI2Cx -> CCR |= (I2C_MODE_FM_SPEED_400Khz << I2C_CCR_CCR_Pos);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	69da      	ldr	r2, [r3, #28]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f042 020e 	orr.w	r2, r2, #14
 8000a68:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T - Rise m√°ximo
		ptrHandlerI2C -> ptrI2Cx -> TRISE |= I2C_MAX_RISE_TIME_FM;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	6a1a      	ldr	r2, [r3, #32]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f042 0206 	orr.w	r2, r2, #6
 8000a78:	621a      	str	r2, [r3, #32]
	}

	/* 5. Activamos el I2C Peripheral (M√≥dulo I2C).*/

	ptrHandlerI2C -> ptrI2Cx -> CR1 |= I2C_CR1_PE;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f042 0201 	orr.w	r2, r2, #1
 8000a88:	601a      	str	r2, [r3, #0]
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	40005400 	.word	0x40005400
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40005800 	.word	0x40005800
 8000aa0:	40005c00 	.word	0x40005c00

08000aa4 <I2C_readByte>:

uint8_t I2C_readByte(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	70fb      	strb	r3, [r7, #3]

	startI2C(ptrHandlerI2C);
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f000 f83d 	bl	8000b30 <startI2C>

	sendSlaveAddressWriteI2C(ptrHandlerI2C);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f000 f860 	bl	8000b7c <sendSlaveAddressWriteI2C>

	sendMemoryAddressI2C(ptrHandlerI2C,memAddr);
 8000abc:	78fb      	ldrb	r3, [r7, #3]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f000 f87d 	bl	8000bc0 <sendMemoryAddressI2C>

	reStartI2C(ptrHandlerI2C);
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f000 f893 	bl	8000bf2 <reStartI2C>

	sendSlaveAddressReadI2C(ptrHandlerI2C);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f000 f8ab 	bl	8000c28 <sendSlaveAddressReadI2C>

	nACKI2C(ptrHandlerI2C);
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f000 f8cc 	bl	8000c70 <nACKI2C>

	stopI2C(ptrHandlerI2C);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 f8da 	bl	8000c92 <stopI2C>

	uint8_t dataI2C = recibeDataI2C(ptrHandlerI2C);
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f000 f8e8 	bl	8000cb4 <recibeDataI2C>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	73fb      	strb	r3, [r7, #15]

	return dataI2C;
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <I2C_writeByte>:

void I2C_writeByte(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr, uint8_t dataToWrite){
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
 8000afa:	460b      	mov	r3, r1
 8000afc:	70fb      	strb	r3, [r7, #3]
 8000afe:	4613      	mov	r3, r2
 8000b00:	70bb      	strb	r3, [r7, #2]

	startI2C(ptrHandlerI2C);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f000 f814 	bl	8000b30 <startI2C>

	sendSlaveAddressWriteI2C(ptrHandlerI2C);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f000 f837 	bl	8000b7c <sendSlaveAddressWriteI2C>

	sendMemoryAddressI2C(ptrHandlerI2C,memAddr);
 8000b0e:	78fb      	ldrb	r3, [r7, #3]
 8000b10:	4619      	mov	r1, r3
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f000 f854 	bl	8000bc0 <sendMemoryAddressI2C>

	sendDataI2C(ptrHandlerI2C,dataToWrite);
 8000b18:	78bb      	ldrb	r3, [r7, #2]
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 f8e3 	bl	8000ce8 <sendDataI2C>

	stopI2C(ptrHandlerI2C);
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f000 f8b5 	bl	8000c92 <stopI2C>
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <startI2C>:

void startI2C(I2C_Handler_t *ptrHandlerI2C){
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;	// Para no generar warning

	/* 1. Verificamos que la l√≠nea no est√° ocupada - bit "busy" en I2C_CR2 */
	while(ptrHandlerI2C -> ptrI2Cx -> SR2 & I2C_SR2_BUSY){
 8000b3c:	e000      	b.n	8000b40 <startI2C+0x10>
		__NOP();
 8000b3e:	bf00      	nop
	while(ptrHandlerI2C -> ptrI2Cx -> SR2 & I2C_SR2_BUSY){
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d1f7      	bne.n	8000b3e <startI2C+0xe>
	}

	/* 2. Generamos la se√±al "start" */
	ptrHandlerI2C -> ptrI2Cx -> CR1 |= I2C_CR1_START;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b5c:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "Start" se levante */
	/* Mientras esperamos, el valor de SB es 0, entonces la negaci√≥n (!) es 1 */
	while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_SB)){
 8000b5e:	e000      	b.n	8000b62 <startI2C+0x32>
		__NOP();
 8000b60:	bf00      	nop
	while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_SB)){
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	695b      	ldr	r3, [r3, #20]
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d0f7      	beq.n	8000b60 <startI2C+0x30>
	}

}
 8000b70:	bf00      	nop
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr

08000b7c <sendSlaveAddressWriteI2C>:

void sendSlaveAddressWriteI2C(I2C_Handler_t *ptrHandlerI2C){
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	/* 0. Definimos una variable auxiliar */
		uint8_t auxByte = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	73fb      	strb	r3, [r7, #15]
		(void) auxByte;	// Para no generar warning

	/* 3. Enviamos la direcci√≥n del Slave y el bit que indica que deseamos escribir (0)
	 * (en el siguiente paso se env√≠a la direcci√≥n de memoria que se desea leer */

	ptrHandlerI2C -> ptrI2Cx -> DR = (ptrHandlerI2C -> slaveAddress << 1)	| I2C_WRITE_DATA;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	791b      	ldrb	r3, [r3, #4]
 8000b8c:	005a      	lsls	r2, r3, #1
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	611a      	str	r2, [r3, #16]

	 /* 3.1 Esperemos hasta que la bandera del evento "addr" se levante
	  * (esto nos indica que la direcci√≥n fue enviada satisfactoriamente */
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_ADDR)){
 8000b94:	e000      	b.n	8000b98 <sendSlaveAddressWriteI2C+0x1c>
		__NOP();
 8000b96:	bf00      	nop
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_ADDR)){
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d0f7      	beq.n	8000b96 <sendSlaveAddressWriteI2C+0x1a>
	 }

	 /* 3.2 Debemos limpiar la bandera de la recepci√≥n de ACK de la "addr", para lo cual
	  * debemos leer en secuencia primero el I2C_SR1 y luego I2C_SR2 */
	 auxByte = ptrHandlerI2C -> ptrI2Cx -> SR1;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	73fb      	strb	r3, [r7, #15]
	 auxByte = ptrHandlerI2C -> ptrI2Cx -> SR2;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	73fb      	strb	r3, [r7, #15]
}
 8000bb6:	bf00      	nop
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <sendMemoryAddressI2C>:
	  * debemos leer en secuencia primero el I2C_SR1 y luego I2C_SR2 */
	 auxByte = ptrHandlerI2C -> ptrI2Cx -> SR1;
	 auxByte = ptrHandlerI2C -> ptrI2Cx -> SR2;
}

void sendMemoryAddressI2C(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	70fb      	strb	r3, [r7, #3]
	 /* 4. Enviamos la direcci√≥n de memoria que deseamos leer */
	 ptrHandlerI2C -> ptrI2Cx -> DR = memAddr;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	78fa      	ldrb	r2, [r7, #3]
 8000bd2:	611a      	str	r2, [r3, #16]

	 /* 4.1 Esperamos hasta que el byte sea transmitido */
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_TXE)){
 8000bd4:	e000      	b.n	8000bd8 <sendMemoryAddressI2C+0x18>
		 __NOP();
 8000bd6:	bf00      	nop
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_TXE)){
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d0f7      	beq.n	8000bd6 <sendMemoryAddressI2C+0x16>
	 }
}
 8000be6:	bf00      	nop
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr

08000bf2 <reStartI2C>:

void reStartI2C(I2C_Handler_t *ptrHandlerI2C){
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
	 /* 5. Debemos generar una se√±al de RESTART, o sea, enviar un nuevo START */
	 ptrHandlerI2C -> ptrI2Cx -> CR1 |= I2C_CR1_START;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c08:	601a      	str	r2, [r3, #0]

	 /* 5.1 Esperamos a que la bandera del evento "start" se levante */
	 /* Mientras esperamos, el valor de SB es 0, entonces la negaci√≥n (!) es 1*/
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_SB)){
 8000c0a:	e000      	b.n	8000c0e <reStartI2C+0x1c>
		 __NOP();
 8000c0c:	bf00      	nop
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_SB)){
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	695b      	ldr	r3, [r3, #20]
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d0f7      	beq.n	8000c0c <reStartI2C+0x1a>
	 }
}
 8000c1c:	bf00      	nop
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <sendSlaveAddressReadI2C>:

void sendSlaveAddressReadI2C(I2C_Handler_t *ptrHandlerI2C){
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	/* 0. Definimos una variable auxiliar */
		uint8_t auxByte = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	73fb      	strb	r3, [r7, #15]
		(void) auxByte;	// Para no generar warning

	 /* 6. Enviamos la direcci√≥n del Slave, pero ahora con la indicaci√≥n de leer */
	 ptrHandlerI2C -> ptrI2Cx -> DR = (ptrHandlerI2C -> slaveAddress << 1) | I2C_READ_DATA;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	791b      	ldrb	r3, [r3, #4]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	f043 0201 	orr.w	r2, r3, #1
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	611a      	str	r2, [r3, #16]

	 /* 6.1 Esperamos hasat que la bandera del evento "addr" se levante
	  * (esto nos indica que la direcci√≥n fue enviada satisfactoriamente
	  */
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_ADDR)){
 8000c44:	e000      	b.n	8000c48 <sendSlaveAddressReadI2C+0x20>
		 __NOP();
 8000c46:	bf00      	nop
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_ADDR)){
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0f7      	beq.n	8000c46 <sendSlaveAddressReadI2C+0x1e>
	 }

	 /* 6.2 Debemos limpiar la bandera de la recepci√≥n de ACK de la "addr", para lo cual
	  * debemos leer en secuencia primero el I2C_SR1 y luego I2C_SR2 */

	 auxByte = ptrHandlerI2C -> ptrI2Cx -> SR1;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	695b      	ldr	r3, [r3, #20]
 8000c5c:	73fb      	strb	r3, [r7, #15]
	 auxByte = ptrHandlerI2C -> ptrI2Cx -> SR2;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	73fb      	strb	r3, [r7, #15]
}
 8000c66:	bf00      	nop
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr

08000c70 <nACKI2C>:

void nACKI2C(I2C_Handler_t *ptrHandlerI2C){
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	 /* 7. Activamos la indicaci√≥n para no ACK (indicaci√≥n para el Slave de terminar)
	  * (Debemos escribir cero en la posici√≥n ACK del registro de control 1)
	  */
	 ptrHandlerI2C -> ptrI2Cx -> CR1 &= ~I2C_CR1_ACK;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c86:	601a      	str	r2, [r3, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr

08000c92 <stopI2C>:

void stopI2C(I2C_Handler_t *ptrHandlerI2C){
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
	 /* 8. Genereamos la condici√≥n de stop */
	 ptrHandlerI2C -> ptrI2Cx -> CR1 |= I2C_CR1_STOP;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ca8:	601a      	str	r2, [r3, #0]
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <recibeDataI2C>:

uint8_t recibeDataI2C(I2C_Handler_t *ptrHandlerI2C){
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	 /* 9. Esperamos hasta que el byte entrante sea recibido */
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_RXNE)){
 8000cbc:	e000      	b.n	8000cc0 <recibeDataI2C+0xc>
		 __NOP();
 8000cbe:	bf00      	nop
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_RXNE)){
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d0f7      	beq.n	8000cbe <recibeDataI2C+0xa>
	 }

	 ptrHandlerI2C -> dataI2C = ptrHandlerI2C -> ptrI2Cx -> DR;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	691b      	ldr	r3, [r3, #16]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	719a      	strb	r2, [r3, #6]

	 return ptrHandlerI2C -> dataI2C;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	799b      	ldrb	r3, [r3, #6]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <sendDataI2C>:

void sendDataI2C(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	70fb      	strb	r3, [r7, #3]
	 /* 5. Cargamos el valor que deseamos escribir */

	 ptrHandlerI2C -> ptrI2Cx -> DR = dataToWrite;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	78fa      	ldrb	r2, [r7, #3]
 8000cfa:	611a      	str	r2, [r3, #16]

	 /* 6. Esperamos hasta que el bit sea transmitido */

	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_BTF)){
 8000cfc:	e000      	b.n	8000d00 <sendDataI2C+0x18>
			 __NOP();
 8000cfe:	bf00      	nop
	 while(!(ptrHandlerI2C -> ptrI2Cx -> SR1 & I2C_SR1_BTF)){
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d0f7      	beq.n	8000cfe <sendDataI2C+0x16>
		 }
}
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
	...

08000d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	db0b      	blt.n	8000d46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f003 021f 	and.w	r2, r3, #31
 8000d34:	4906      	ldr	r1, [pc, #24]	; (8000d50 <__NVIC_EnableIRQ+0x34>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	095b      	lsrs	r3, r3, #5
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <config_SysTickMs>:

uint64_t ticks;

/**/

void config_SysTickMs(void){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	// Reiniciamos el valor de la variable que cuenta tiempo
	ticks = 0;
 8000d58:	4914      	ldr	r1, [pc, #80]	; (8000dac <config_SysTickMs+0x58>)
 8000d5a:	f04f 0200 	mov.w	r2, #0
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	e9c1 2300 	strd	r2, r3, [r1]

	//Cargando el valor del limite de incrementos que representan 1ms.
	SysTick -> LOAD = SYSTICK_LOAD_VALUE;
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <config_SysTickMs+0x5c>)
 8000d68:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000d6c:	605a      	str	r2, [r3, #4]

	// Limpiamos el valor actual del SysTick
	SysTick -> VAL = 0;
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <config_SysTickMs+0x5c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]

	// Configuramos el reloj interno como el reloj para el Timer
	SysTick -> CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <config_SysTickMs+0x5c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0d      	ldr	r2, [pc, #52]	; (8000db0 <config_SysTickMs+0x5c>)
 8000d7a:	f043 0304 	orr.w	r3, r3, #4
 8000d7e:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
}
 8000d82:	bf00      	nop

	// Desactivamos las interrupciones globales
	__disable_irq();

	// Activamos la interrupci√≥n debida al conteo a ceo del SysTick
	SysTick -> CTRL |= SysTick_CTRL_TICKINT_Msk;
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <config_SysTickMs+0x5c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a09      	ldr	r2, [pc, #36]	; (8000db0 <config_SysTickMs+0x5c>)
 8000d8a:	f043 0302 	orr.w	r3, r3, #2
 8000d8e:	6013      	str	r3, [r2, #0]

	//Matriculamos la interrupci√≥n en el NVIC
	__NVIC_EnableIRQ(SysTick_IRQn);
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d94:	f7ff ffc2 	bl	8000d1c <__NVIC_EnableIRQ>

	// Activamos el Timer
	SysTick -> CTRL |= SysTick_CTRL_ENABLE_Msk;
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <config_SysTickMs+0x5c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <config_SysTickMs+0x5c>)
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000da4:	b662      	cpsie	i
}
 8000da6:	bf00      	nop

	// Activamos de nuevo las interrupciones globales
	__enable_irq();
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200001a8 	.word	0x200001a8
 8000db0:	e000e010 	.word	0xe000e010

08000db4 <SysTick_Handler>:
	return ticks;
}

/**/

void SysTick_Handler(void){
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

	// Verificamos que la interrupci√≥n se lanza
	if(SysTick -> CTRL & SysTick_CTRL_COUNTFLAG_Msk){
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <SysTick_Handler+0x38>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d00e      	beq.n	8000de2 <SysTick_Handler+0x2e>

		// Limpiamos la bandera
		SysTick -> CTRL &= ~SysTick_CTRL_COUNTFLAG_Msk;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <SysTick_Handler+0x38>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a08      	ldr	r2, [pc, #32]	; (8000dec <SysTick_Handler+0x38>)
 8000dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dce:	6013      	str	r3, [r2, #0]

		// Incrementamos en 1 el contador.
		ticks++;
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <SysTick_Handler+0x3c>)
 8000dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd6:	1c50      	adds	r0, r2, #1
 8000dd8:	f143 0100 	adc.w	r1, r3, #0
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <SysTick_Handler+0x3c>)
 8000dde:	e9c3 0100 	strd	r0, r1, [r3]
	}
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000e010 	.word	0xe000e010
 8000df0:	200001a8 	.word	0x200001a8

08000df4 <__NVIC_EnableIRQ>:
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	db0b      	blt.n	8000e1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	f003 021f 	and.w	r2, r3, #31
 8000e0c:	4906      	ldr	r1, [pc, #24]	; (8000e28 <__NVIC_EnableIRQ+0x34>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	095b      	lsrs	r3, r3, #5
 8000e14:	2001      	movs	r0, #1
 8000e16:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	e000e100 	.word	0xe000e100

08000e2c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	db12      	blt.n	8000e64 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	f003 021f 	and.w	r2, r3, #31
 8000e44:	490a      	ldr	r1, [pc, #40]	; (8000e70 <__NVIC_DisableIRQ+0x44>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	095b      	lsrs	r3, r3, #5
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e52:	3320      	adds	r3, #32
 8000e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e58:	f3bf 8f4f 	dsb	sy
}
 8000e5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e5e:	f3bf 8f6f 	isb	sy
}
 8000e62:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000e100 	.word	0xe000e100

08000e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	db0a      	blt.n	8000e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	490c      	ldr	r1, [pc, #48]	; (8000ec0 <__NVIC_SetPriority+0x4c>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	440b      	add	r3, r1
 8000e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e9c:	e00a      	b.n	8000eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4908      	ldr	r1, [pc, #32]	; (8000ec4 <__NVIC_SetPriority+0x50>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	761a      	strb	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <Timer_Config>:
 *
 * */

//NOTA: Hay que desactivar las interrupciones globales y luego volver a activarlas

void Timer_Config(TIMER_Handler_t *ptrTimerConfig){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed0:	b672      	cpsid	i
}
 8000ed2:	bf00      	nop
	/* 0. Desactivamos las interrupciones globales */

	__disable_irq();

	/* 1. Activamos la se√±al de reloj para el perif√©rico espec√≠fico */
	if(ptrTimerConfig -> ptrTIMx == TIM2){
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000edc:	d106      	bne.n	8000eec <Timer_Config+0x24>
		// Activamos la se√±al de reloj del TIM2
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000ede:	4b4b      	ldr	r3, [pc, #300]	; (800100c <Timer_Config+0x144>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	4a4a      	ldr	r2, [pc, #296]	; (800100c <Timer_Config+0x144>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eea:	e022      	b.n	8000f32 <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM3){
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a47      	ldr	r2, [pc, #284]	; (8001010 <Timer_Config+0x148>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d106      	bne.n	8000f04 <Timer_Config+0x3c>
		// Activamos la se√±al de reloj del TIM3
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000ef6:	4b45      	ldr	r3, [pc, #276]	; (800100c <Timer_Config+0x144>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	4a44      	ldr	r2, [pc, #272]	; (800100c <Timer_Config+0x144>)
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	6413      	str	r3, [r2, #64]	; 0x40
 8000f02:	e016      	b.n	8000f32 <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM4){
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a42      	ldr	r2, [pc, #264]	; (8001014 <Timer_Config+0x14c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d106      	bne.n	8000f1c <Timer_Config+0x54>
		// Activamos la se√±al de reloj del TIM4
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000f0e:	4b3f      	ldr	r3, [pc, #252]	; (800100c <Timer_Config+0x144>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	4a3e      	ldr	r2, [pc, #248]	; (800100c <Timer_Config+0x144>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1a:	e00a      	b.n	8000f32 <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM5){
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a3d      	ldr	r2, [pc, #244]	; (8001018 <Timer_Config+0x150>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d105      	bne.n	8000f32 <Timer_Config+0x6a>
		// Activamos la se√±al de reloj del TIM5
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8000f26:	4b39      	ldr	r3, [pc, #228]	; (800100c <Timer_Config+0x144>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	4a38      	ldr	r2, [pc, #224]	; (800100c <Timer_Config+0x144>)
 8000f2c:	f043 0308 	orr.w	r3, r3, #8
 8000f30:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuraci√≥n del modo del timer (UP or DOWN) */

	if(ptrTimerConfig -> timerConfig.Timer_mode == TIMER_MODE_UP){
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	791b      	ldrb	r3, [r3, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10c      	bne.n	8000f54 <Timer_Config+0x8c>
		// Configuramos el timer en modo UP
		ptrTimerConfig -> ptrTIMx -> CR1 &= ~(TIM_CR1_DIR);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f022 0210 	bic.w	r2, r2, #16
 8000f48:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) en cero.
		ptrTimerConfig -> ptrTIMx -> CNT = 0;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24
 8000f52:	e00d      	b.n	8000f70 <Timer_Config+0xa8>

	}
	else{
		// Configuramos el timer en modo DOWN
		ptrTimerConfig -> ptrTIMx -> CR1 |= ~(TIM_CR1_DIR);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f062 0210 	orn	r2, r2, #16
 8000f62:	601a      	str	r2, [r3, #0]

		// Ponemos en el contador (CNT) el valor del periodo
		ptrTimerConfig -> ptrTIMx -> CNT = ptrTimerConfig -> timerConfig.Timer_period -1;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	3a01      	subs	r2, #1
 8000f6e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuraci√≥n del Prescaler */
	ptrTimerConfig -> ptrTIMx -> PSC = ptrTimerConfig -> timerConfig.Timer_speed -1;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	88db      	ldrh	r3, [r3, #6]
 8000f74:	1e5a      	subs	r2, r3, #1
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo de las interrupciones */
	ptrTimerConfig -> ptrTIMx -> ARR = ptrTimerConfig -> timerConfig.Timer_period -1;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	3a01      	subs	r2, #1
 8000f86:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse  */
	ptrTimerConfig -> ptrTIMx -> CR1 |= TIM_CR1_CEN;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f042 0201 	orr.w	r2, r2, #1
 8000f96:	601a      	str	r2, [r3, #0]

	/* 6. Activamos la interrupci√≥n debida a un "update event" */
	if(ptrTimerConfig -> ptrTIMx != TIM3){
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a1c      	ldr	r2, [pc, #112]	; (8001010 <Timer_Config+0x148>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d007      	beq.n	8000fb2 <Timer_Config+0xea>
		ptrTimerConfig -> ptrTIMx -> DIER |= TIM_DIER_UIE;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	68da      	ldr	r2, [r3, #12]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f042 0201 	orr.w	r2, r2, #1
 8000fb0:	60da      	str	r2, [r3, #12]
	}

	/* 7. Activamos la se√±al de la interrupcu√≥n en el NVIC */

	if(ptrTimerConfig -> ptrTIMx == TIM2){
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fba:	d107      	bne.n	8000fcc <Timer_Config+0x104>
		// Activamos la IRQ del TIM2
		__NVIC_EnableIRQ(TIM2_IRQn);
 8000fbc:	201c      	movs	r0, #28
 8000fbe:	f7ff ff19 	bl	8000df4 <__NVIC_EnableIRQ>

		// Establecemos la prioridad del timer
		__NVIC_SetPriority(TIM2_IRQn,3);
 8000fc2:	2103      	movs	r1, #3
 8000fc4:	201c      	movs	r0, #28
 8000fc6:	f7ff ff55 	bl	8000e74 <__NVIC_SetPriority>
 8000fca:	e019      	b.n	8001000 <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM3){
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0f      	ldr	r2, [pc, #60]	; (8001010 <Timer_Config+0x148>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d103      	bne.n	8000fde <Timer_Config+0x116>
		// Activamos la IRQ del TIM3
		__NVIC_DisableIRQ(TIM3_IRQn);
 8000fd6:	201d      	movs	r0, #29
 8000fd8:	f7ff ff28 	bl	8000e2c <__NVIC_DisableIRQ>
 8000fdc:	e010      	b.n	8001000 <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM4){
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <Timer_Config+0x14c>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d103      	bne.n	8000ff0 <Timer_Config+0x128>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM4_IRQn);
 8000fe8:	201e      	movs	r0, #30
 8000fea:	f7ff ff03 	bl	8000df4 <__NVIC_EnableIRQ>
 8000fee:	e007      	b.n	8001000 <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM5){
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a08      	ldr	r2, [pc, #32]	; (8001018 <Timer_Config+0x150>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d102      	bne.n	8001000 <Timer_Config+0x138>
		// Activamos la IRQ del TIM5
		__NVIC_EnableIRQ(TIM5_IRQn);
 8000ffa:	2032      	movs	r0, #50	; 0x32
 8000ffc:	f7ff fefa 	bl	8000df4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001000:	b662      	cpsie	i
}
 8001002:	bf00      	nop
	}


	/* 8. Activamos de nuevo todas las interrupciones. */
	__enable_irq();
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40023800 	.word	0x40023800
 8001010:	40000400 	.word	0x40000400
 8001014:	40000800 	.word	0x40000800
 8001018:	40000c00 	.word	0x40000c00

0800101c <Timer3_Callback>:
__attribute__((weak)) void Timer2_Callback(void){
	__NOP();
}

// Callback Timer3
__attribute__((weak)) void Timer3_Callback(void){
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
	__NOP();
 8001020:	bf00      	nop
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr

0800102a <Timer4_Callback>:

// Callback Timer4
__attribute__((weak)) void Timer4_Callback(void){
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
	__NOP();
 800102e:	bf00      	nop
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <Timer5_Callback>:

// Callback Timer5
__attribute__((weak)) void Timer5_Callback(void){
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
	__NOP();
 800103c:	bf00      	nop
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr

08001046 <TIM2_IRQHandler>:

// Hay que hacer dos cosas: 1) Atender la interrupci√≥n. 2) Llamamos al Callback
/* Rutina de atenci√≥n a la interrupci√≥n del TIM2 */

void TIM2_IRQHandler(void){
 8001046:	b580      	push	{r7, lr}
 8001048:	af00      	add	r7, sp, #0
	TIM2 -> SR &= ~(TIM_SR_UIF);
 800104a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001054:	f023 0301 	bic.w	r3, r3, #1
 8001058:	6113      	str	r3, [r2, #16]
	Timer2_Callback();
 800105a:	f7ff fac7 	bl	80005ec <Timer2_Callback>
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	TIM3 -> SR &= ~(TIM_SR_UIF);
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <TIM3_IRQHandler+0x18>)
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	4a03      	ldr	r2, [pc, #12]	; (800107c <TIM3_IRQHandler+0x18>)
 800106e:	f023 0301 	bic.w	r3, r3, #1
 8001072:	6113      	str	r3, [r2, #16]
	Timer3_Callback();
 8001074:	f7ff ffd2 	bl	800101c <Timer3_Callback>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40000400 	.word	0x40000400

08001080 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	TIM4 -> SR &= ~(TIM_SR_UIF);
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <TIM4_IRQHandler+0x18>)
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	4a03      	ldr	r2, [pc, #12]	; (8001098 <TIM4_IRQHandler+0x18>)
 800108a:	f023 0301 	bic.w	r3, r3, #1
 800108e:	6113      	str	r3, [r2, #16]
	Timer4_Callback();
 8001090:	f7ff ffcb 	bl	800102a <Timer4_Callback>
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40000800 	.word	0x40000800

0800109c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	TIM5 -> SR &= ~(TIM_SR_UIF);
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <TIM5_IRQHandler+0x18>)
 80010a2:	691b      	ldr	r3, [r3, #16]
 80010a4:	4a03      	ldr	r2, [pc, #12]	; (80010b4 <TIM5_IRQHandler+0x18>)
 80010a6:	f023 0301 	bic.w	r3, r3, #1
 80010aa:	6113      	str	r3, [r2, #16]
	Timer5_Callback();
 80010ac:	f7ff ffc4 	bl	8001038 <Timer5_Callback>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40000c00 	.word	0x40000c00

080010b8 <__NVIC_EnableIRQ>:
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	db0b      	blt.n	80010e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	f003 021f 	and.w	r2, r3, #31
 80010d0:	4906      	ldr	r1, [pc, #24]	; (80010ec <__NVIC_EnableIRQ+0x34>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	095b      	lsrs	r3, r3, #5
 80010d8:	2001      	movs	r0, #1
 80010da:	fa00 f202 	lsl.w	r2, r0, r2
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr
 80010ec:	e000e100 	.word	0xe000e100

080010f0 <USART_Config>:
 * del perif√©rico que se est√° utilizando.
 */

uint8_t data;

void USART_Config(USART_Handler_t *ptrUsartHandler){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80010f8:	b672      	cpsid	i
}
 80010fa:	bf00      	nop

	/* 1. Activamos la se√±al de reloj que viene desde el bus al que pertenece el perif√©rico.
	 * Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6)
	 */
	/*1.1 Configuramos el USART1*/
	if(ptrUsartHandler -> ptrUSARTx == USART1){
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a8c      	ldr	r2, [pc, #560]	; (8001334 <USART_Config+0x244>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d106      	bne.n	8001114 <USART_Config+0x24>
		// Escribimos 1 (SET) en la posici√≥n correspondiente al USART1
		RCC -> APB2ENR |= (RCC_APB2ENR_USART1EN);
 8001106:	4b8c      	ldr	r3, [pc, #560]	; (8001338 <USART_Config+0x248>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	4a8b      	ldr	r2, [pc, #556]	; (8001338 <USART_Config+0x248>)
 800110c:	f043 0310 	orr.w	r3, r3, #16
 8001110:	6453      	str	r3, [r2, #68]	; 0x44
 8001112:	e016      	b.n	8001142 <USART_Config+0x52>
	}
	/*1.2 Configuramos el USART2*/
	else if(ptrUsartHandler -> ptrUSARTx == USART2){
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a88      	ldr	r2, [pc, #544]	; (800133c <USART_Config+0x24c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d106      	bne.n	800112c <USART_Config+0x3c>
		// Escribimos 1 (SET) en la posici√≥n correspondiente al USART1
		RCC -> APB1ENR |= (RCC_APB1ENR_USART2EN);
 800111e:	4b86      	ldr	r3, [pc, #536]	; (8001338 <USART_Config+0x248>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	4a85      	ldr	r2, [pc, #532]	; (8001338 <USART_Config+0x248>)
 8001124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001128:	6413      	str	r3, [r2, #64]	; 0x40
 800112a:	e00a      	b.n	8001142 <USART_Config+0x52>
	}
	/*1.3 Configuramos el USART6*/
	else if(ptrUsartHandler -> ptrUSARTx == USART6){
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a83      	ldr	r2, [pc, #524]	; (8001340 <USART_Config+0x250>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d105      	bne.n	8001142 <USART_Config+0x52>
		// Escribimos 1 (SET) en la posici√≥n correspondiente al USART1
		RCC -> APB2ENR |= (RCC_APB2ENR_USART6EN);
 8001136:	4b80      	ldr	r3, [pc, #512]	; (8001338 <USART_Config+0x248>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	4a7f      	ldr	r2, [pc, #508]	; (8001338 <USART_Config+0x248>)
 800113c:	f043 0320 	orr.w	r3, r3, #32
 8001140:	6453      	str	r3, [r2, #68]	; 0x44
	 * Configuramos el modo: only TX, only RX, o RXTX
	 * Por √∫ltimo activamos el modulo USART cuando todo est√° correctamente configurado
	 * */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuraci√≥n desde cero.
	ptrUsartHandler -> ptrUSARTx -> CR1 = 0;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
	ptrUsartHandler -> ptrUSARTx -> CR2 = 0;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]

	// 2.2 Configuraci√≥n del Parity:
	// Verificamos si el parity est√° activado o no
	if(ptrUsartHandler -> USART_Config.USART_parity != USART_PARITY_NONE){
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	79db      	ldrb	r3, [r3, #7]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d02b      	beq.n	80011b2 <USART_Config+0xc2>

		// Verificamos si se ha seleccionado ODD or EVEN

		//Se selecciona EVEN
		if(ptrUsartHandler -> USART_Config.USART_parity == USART_PARITY_EVEN){
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	79db      	ldrb	r3, [r3, #7]
 800115e:	2b02      	cmp	r3, #2
 8001160:	d113      	bne.n	800118a <USART_Config+0x9a>
			//Ponemos 0b0 en la posicion 9 del registo CR1 para escoger Even
			ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_PS);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001170:	60da      	str	r2, [r3, #12]

			// Adem√°s, se seleccionan 9 bits.
			ptrUsartHandler -> USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	719a      	strb	r2, [r3, #6]
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68da      	ldr	r2, [r3, #12]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	e01b      	b.n	80011c2 <USART_Config+0xd2>
		}
		//Se selecciona ODD
		else{
			//Ponemos 0b1 en la posicion 9 del registo CR1 para escoger Even
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_PS);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68da      	ldr	r2, [r3, #12]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001198:	60da      	str	r2, [r3, #12]

			// Adem√°s, se seleccionan 9 bits.
			ptrUsartHandler -> USART_Config.USART_datasize = USART_DATASIZE_9BIT;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	719a      	strb	r2, [r3, #6]
			ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	e007      	b.n	80011c2 <USART_Config+0xd2>
		}
	}
	//No deseamos activar el parity-check
	else{
		//Ponemos 0b0 en la posicion 10 del registro CR1 para desactivar el Parity
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_PCE);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011c0:	60da      	str	r2, [r3, #12]

	// 2.3 Configuramos el tama√±o del dato:

	//Verificamos si va a ser de 8 o 9 bits

	if(ptrUsartHandler -> USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	799b      	ldrb	r3, [r3, #6]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d108      	bne.n	80011dc <USART_Config+0xec>
		//Ponemos 0b0 en la posicion 12 del registro CR1 para escoger 8 bits
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_M);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	e007      	b.n	80011ec <USART_Config+0xfc>
	}else{
		//Ponemos 0b1 en la posicion 12 del registro CR1 para escoger 9 bits
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_M);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	68da      	ldr	r2, [r3, #12]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011ea:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)

	switch(ptrUsartHandler -> USART_Config.USART_stopbits){
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	7a1b      	ldrb	r3, [r3, #8]
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d847      	bhi.n	8001284 <USART_Config+0x194>
 80011f4:	a201      	add	r2, pc, #4	; (adr r2, 80011fc <USART_Config+0x10c>)
 80011f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fa:	bf00      	nop
 80011fc:	0800120d 	.word	0x0800120d
 8001200:	0800121f 	.word	0x0800121f
 8001204:	08001241 	.word	0x08001241
 8001208:	08001263 	.word	0x08001263
	case USART_STOPBIT_1: {
		//Cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	691a      	ldr	r2, [r3, #16]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800121a:	611a      	str	r2, [r3, #16]
		break;
 800121c:	e03b      	b.n	8001296 <USART_Config+0x1a6>
	}
	case USART_STOPBIT_0_5:{
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	691a      	ldr	r2, [r3, #16]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800122c:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b01 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP_0);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800123c:	611a      	str	r2, [r3, #16]
		break;
 800123e:	e02a      	b.n	8001296 <USART_Config+0x1a6>
	}
	case USART_STOPBIT_2:{
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	691a      	ldr	r2, [r3, #16]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800124e:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b10 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP_1);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	691a      	ldr	r2, [r3, #16]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800125e:	611a      	str	r2, [r3, #16]
		break;
 8001260:	e019      	b.n	8001296 <USART_Config+0x1a6>
	}
	case USART_STOPBIT_1_5: {
		//Limpiamos: cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	691a      	ldr	r2, [r3, #16]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001270:	611a      	str	r2, [r3, #16]

		// Cargamos el valor de 0b11 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 |= (USART_CR2_STOP);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	691a      	ldr	r2, [r3, #16]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001280:	611a      	str	r2, [r3, #16]
		break;
 8001282:	e008      	b.n	8001296 <USART_Config+0x1a6>
	}
	default:{
		//Cargamos el valor 0b00 en los dos bits de STOP
		ptrUsartHandler -> ptrUSARTx -> CR2 &= ~(USART_CR2_STOP);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	691a      	ldr	r2, [r3, #16]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001292:	611a      	str	r2, [r3, #16]
		break;
 8001294:	bf00      	nop
	}
	}

	// 2.4 Configuraci√≥n del Baudrate (SFR USART_BRR)
	// Ver tabla de valores (Tabla 75), Frec = 16MHz, overr = 0;
	if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	795b      	ldrb	r3, [r3, #5]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d105      	bne.n	80012aa <USART_Config+0x1ba>
		// El valor a cargar es 104.1875 -> Mantiza = 104, fraction = 0.1875
		// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
		// Valor a cargar 0x683
		// Configurando el Baudrate generator para una velocidad de 9600bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0683;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f240 6283 	movw	r2, #1667	; 0x683
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	e011      	b.n	80012ce <USART_Config+0x1de>
	}

	else if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_19200){
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	795b      	ldrb	r3, [r3, #5]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d105      	bne.n	80012be <USART_Config+0x1ce>
		// El valor a cargar es 52.0625 -> Mantiza = 52, fraction = 0.0625
		// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
		// Valor a cargar 0x0341
		// Configurando el Baudrate generator para una velocidad de 19200bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x0341;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f240 3241 	movw	r2, #833	; 0x341
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	e007      	b.n	80012ce <USART_Config+0x1de>
	}

	else if(ptrUsartHandler -> USART_Config.USART_baudrate == USART_BAUDRATE_115200){	//**************************************DUDAAAAAA
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	795b      	ldrb	r3, [r3, #5]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d103      	bne.n	80012ce <USART_Config+0x1de>
		// El valor a cargar es 8.6875 -> Mantiza = 8, fraction = 0.6875
		// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11
		// Valor a cargar 0x0081
		// Configurando el Baudrate generator para una velocidad de 115200bps
		ptrUsartHandler -> ptrUSARTx -> BRR = 0x08B;//0x0081;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	228b      	movs	r2, #139	; 0x8b
 80012cc:	609a      	str	r2, [r3, #8]
	}

	// 2.5 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler -> USART_Config.USART_mode){
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	791b      	ldrb	r3, [r3, #4]
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d847      	bhi.n	8001366 <USART_Config+0x276>
 80012d6:	a201      	add	r2, pc, #4	; (adr r2, 80012dc <USART_Config+0x1ec>)
 80012d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012dc:	080012ed 	.word	0x080012ed
 80012e0:	080012ff 	.word	0x080012ff
 80012e4:	08001311 	.word	0x08001311
 80012e8:	08001345 	.word	0x08001345
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		//Cargamos el valor 0b1 en el bit TE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TE);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	68da      	ldr	r2, [r3, #12]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f042 0208 	orr.w	r2, r2, #8
 80012fa:	60da      	str	r2, [r3, #12]
		break;
 80012fc:	e044      	b.n	8001388 <USART_Config+0x298>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		//Cargamos el valor 0b1 en el bit RE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RE);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f042 0204 	orr.w	r2, r2, #4
 800130c:	60da      	str	r2, [r3, #12]
		break;
 800130e:	e03b      	b.n	8001388 <USART_Config+0x298>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmisi√≥n como recepci√≥n
		//Cargamos el valor 0b1 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TE);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68da      	ldr	r2, [r3, #12]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0208 	orr.w	r2, r2, #8
 800131e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RE);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f042 0204 	orr.w	r2, r2, #4
 800132e:	60da      	str	r2, [r3, #12]
		break;
 8001330:	e02a      	b.n	8001388 <USART_Config+0x298>
 8001332:	bf00      	nop
 8001334:	40011000 	.word	0x40011000
 8001338:	40023800 	.word	0x40023800
 800133c:	40004400 	.word	0x40004400
 8001340:	40011400 	.word	0x40011400
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		//Cargamos el valor 0b0 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TE);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0208 	bic.w	r2, r2, #8
 8001352:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RE);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0204 	bic.w	r2, r2, #4
 8001362:	60da      	str	r2, [r3, #12]
		break;
 8001364:	e010      	b.n	8001388 <USART_Config+0x298>
	}
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		//Cargamos el valor 0b0 en el bit TE y RE respectivamente
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TE);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68da      	ldr	r2, [r3, #12]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 0208 	bic.w	r2, r2, #8
 8001374:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RE);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68da      	ldr	r2, [r3, #12]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0204 	bic.w	r2, r2, #4
 8001384:	60da      	str	r2, [r3, #12]
		break;
 8001386:	bf00      	nop
	}
	}

	// 2.6 Activamos el modulo serial.

	if(ptrUsartHandler -> USART_Config.USART_mode != USART_MODE_DISABLE){
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	791b      	ldrb	r3, [r3, #4]
 800138c:	2b03      	cmp	r3, #3
 800138e:	d007      	beq.n	80013a0 <USART_Config+0x2b0>
		//Cargamos el valor de 0b1 en el bit UE
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_UE);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68da      	ldr	r2, [r3, #12]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800139e:	60da      	str	r2, [r3, #12]
	}

	// 3. Activamos la interrupci√≥n para el USART

	switch(ptrUsartHandler -> USART_Config.USART_interrupt){
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7a5b      	ldrb	r3, [r3, #9]
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d84f      	bhi.n	8001448 <USART_Config+0x358>
 80013a8:	a201      	add	r2, pc, #4	; (adr r2, 80013b0 <USART_Config+0x2c0>)
 80013aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ae:	bf00      	nop
 80013b0:	080013c1 	.word	0x080013c1
 80013b4:	080013e3 	.word	0x080013e3
 80013b8:	08001405 	.word	0x08001405
 80013bc:	08001427 	.word	0x08001427
	// Analizamos los
	case USART_INTERRUPT_RX_ENABLE:
	{
		// Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_RXNEIE);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 0220 	orr.w	r2, r2, #32
 80013ce:	60da      	str	r2, [r3, #12]
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013de:	60da      	str	r2, [r3, #12]
		break;
 80013e0:	e043      	b.n	800146a <USART_Config+0x37a>
	}
	case USART_INTERRUPT_TX_ENABLE:
	{
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68da      	ldr	r2, [r3, #12]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013f0:	60da      	str	r2, [r3, #12]
		// NO Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RXNEIE);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0220 	bic.w	r2, r2, #32
 8001400:	60da      	str	r2, [r3, #12]
		break;
 8001402:	e032      	b.n	800146a <USART_Config+0x37a>

	}
	case USART_INTERRUPT_RXTX_ENABLE:
	{
		// Activamos las dos interrupciones tanto del RX como del TX
		ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TXEIE);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001412:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001422:	60da      	str	r2, [r3, #12]
		break;
 8001424:	e021      	b.n	800146a <USART_Config+0x37a>
	}
	case USART_INTERRUPT_RXTX_DISABLE:
	{
		// Activamos las dos interrupciones tanto del RX como del TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001434:	60da      	str	r2, [r3, #12]
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001444:	60da      	str	r2, [r3, #12]
		break;
 8001446:	e010      	b.n	800146a <USART_Config+0x37a>
	}

	default:
	{
		// NO Permitimos que se levante la bandera RX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_RXNEIE);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68da      	ldr	r2, [r3, #12]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0220 	bic.w	r2, r2, #32
 8001456:	60da      	str	r2, [r3, #12]
		// NO permitimos que se levante la bandera TX
		ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001466:	60da      	str	r2, [r3, #12]
		break;
 8001468:	bf00      	nop
	}
	}

	// 4. Activamos la se√±al de la interrupci√≥n en el NVIC

	if((ptrUsartHandler -> USART_Config.USART_interrupt == USART_INTERRUPT_RX_ENABLE) | (ptrUsartHandler -> USART_Config.USART_interrupt == USART_INTERRUPT_TX_ENABLE))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7a5b      	ldrb	r3, [r3, #9]
 800146e:	2b00      	cmp	r3, #0
 8001470:	bf0c      	ite	eq
 8001472:	2301      	moveq	r3, #1
 8001474:	2300      	movne	r3, #0
 8001476:	b2da      	uxtb	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	7a5b      	ldrb	r3, [r3, #9]
 800147c:	2b01      	cmp	r3, #1
 800147e:	bf0c      	ite	eq
 8001480:	2301      	moveq	r3, #1
 8001482:	2300      	movne	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	4313      	orrs	r3, r2
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d019      	beq.n	80014c2 <USART_Config+0x3d2>
	{

		if(ptrUsartHandler -> ptrUSARTx == USART1){
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a0f      	ldr	r2, [pc, #60]	; (80014d0 <USART_Config+0x3e0>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d103      	bne.n	80014a0 <USART_Config+0x3b0>
			// Activamos la IRQ del USART1
			__NVIC_EnableIRQ(USART1_IRQn);
 8001498:	2025      	movs	r0, #37	; 0x25
 800149a:	f7ff fe0d 	bl	80010b8 <__NVIC_EnableIRQ>
 800149e:	e010      	b.n	80014c2 <USART_Config+0x3d2>

		}else if(ptrUsartHandler -> ptrUSARTx == USART2){
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <USART_Config+0x3e4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d103      	bne.n	80014b2 <USART_Config+0x3c2>
			// Activamos la IRQ del USART2
			__NVIC_EnableIRQ(USART2_IRQn);
 80014aa:	2026      	movs	r0, #38	; 0x26
 80014ac:	f7ff fe04 	bl	80010b8 <__NVIC_EnableIRQ>
 80014b0:	e007      	b.n	80014c2 <USART_Config+0x3d2>

		}else if(ptrUsartHandler -> ptrUSARTx == USART6){
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a08      	ldr	r2, [pc, #32]	; (80014d8 <USART_Config+0x3e8>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d102      	bne.n	80014c2 <USART_Config+0x3d2>
			// Activamos la IRQ del USART6
			__NVIC_EnableIRQ(USART6_IRQn);
 80014bc:	2047      	movs	r0, #71	; 0x47
 80014be:	f7ff fdfb 	bl	80010b8 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80014c2:	b662      	cpsie	i
}
 80014c4:	bf00      	nop
		}

	// 5. Activamos de nuevo todas las interrupciones

	__enable_irq();
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40011000 	.word	0x40011000
 80014d4:	40004400 	.word	0x40004400
 80014d8:	40011400 	.word	0x40011400

080014dc <USART1_Callback>:

//**********//  CallBacks //**********//

// Callback USART1
__attribute__((weak)) void USART1_Callback(void){
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
	__NOP();
 80014e0:	bf00      	nop
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr

080014ea <USART6_Callback>:
__attribute__((weak)) void USART2_Callback(void){
	__NOP();
}

// Callback USART6
__attribute__((weak)) void USART6_Callback(void){
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
	__NOP();
 80014ee:	bf00      	nop
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <USART1_IRQHandler>:

// Hay que hacer dos cosas: 1) Atender la interrupci√≥n. 2) Llamamos al Callback
/* Rutina de atenci√≥n a la interrupci√≥n del USART */

void USART1_IRQHandler(void){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0

	USART1 -> SR &= ~(USART_SR_RXNE);		// Bajamos la bandera manualmente
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <USART1_IRQHandler+0x18>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a03      	ldr	r2, [pc, #12]	; (8001510 <USART1_IRQHandler+0x18>)
 8001502:	f023 0320 	bic.w	r3, r3, #32
 8001506:	6013      	str	r3, [r2, #0]

	USART1_Callback();
 8001508:	f7ff ffe8 	bl	80014dc <USART1_Callback>
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40011000 	.word	0x40011000

08001514 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	USART2 -> SR &= ~(USART_SR_RXNE);		// Desactivamos la bandera manualmente para el RX
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <USART2_IRQHandler+0x24>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a06      	ldr	r2, [pc, #24]	; (8001538 <USART2_IRQHandler+0x24>)
 800151e:	f023 0320 	bic.w	r3, r3, #32
 8001522:	6013      	str	r3, [r2, #0]

	data = (USART2 -> DR);
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <USART2_IRQHandler+0x24>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4b04      	ldr	r3, [pc, #16]	; (800153c <USART2_IRQHandler+0x28>)
 800152c:	701a      	strb	r2, [r3, #0]

	USART2_Callback();
 800152e:	f7ff f851 	bl	80005d4 <USART2_Callback>

	//USART2 -> SR &= ~(USART_SR_TXE);		// Desactivamos la bandera para el TX
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40004400 	.word	0x40004400
 800153c:	200001b0 	.word	0x200001b0

08001540 <USART6_IRQHandler>:

void USART6_IRQHandler(void){
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
	USART6 -> SR &= ~(USART_SR_RXNE);
 8001544:	4b04      	ldr	r3, [pc, #16]	; (8001558 <USART6_IRQHandler+0x18>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a03      	ldr	r2, [pc, #12]	; (8001558 <USART6_IRQHandler+0x18>)
 800154a:	f023 0320 	bic.w	r3, r3, #32
 800154e:	6013      	str	r3, [r2, #0]
	USART6_Callback();
 8001550:	f7ff ffcb 	bl	80014ea <USART6_Callback>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40011400 	.word	0x40011400

0800155c <returnData>:
	dataToRead = ((char) (ptrUsartHandler -> ptrUSARTx -> DR));
	return dataToRead;

}

uint8_t returnData(void){
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
	return data;				// Devolvemos el valor
 8001560:	4b02      	ldr	r3, [pc, #8]	; (800156c <returnData+0x10>)
 8001562:	781b      	ldrb	r3, [r3, #0]
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	200001b0 	.word	0x200001b0

08001570 <writeChar>:

//**********// Funci√≥n para escribir un solo char //**********//

int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend){
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
	while(!(ptrUsartHandler -> ptrUSARTx -> SR & USART_SR_TXE)){
 800157a:	e000      	b.n	800157e <writeChar+0xe>
		__NOP();
 800157c:	bf00      	nop
	while(!(ptrUsartHandler -> ptrUSARTx -> SR & USART_SR_TXE)){
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0f7      	beq.n	800157c <writeChar+0xc>
	// Permitimos la bandera del TX para el USART2
	//ptrUsartHandler -> ptrUSARTx -> CR1 |= (USART_CR1_TXEIE);
	//USART2 -> SR |= (USART_SR_TXE);

	//Cargamos el valor de dataToSend en el USER DATA Register
	ptrUsartHandler -> ptrUSARTx -> DR = (dataToSend);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	605a      	str	r2, [r3, #4]

	//ptrUsartHandler -> ptrUSARTx -> CR1 &= ~(USART_CR1_TXEIE);
	//USART2 -> SR &= ~(USART_SR_TXE);		// Desactivamos la bandera para el TX
	return dataToSend;
 8001594:	683b      	ldr	r3, [r7, #0]
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <writeMsg>:

/* Funci√≥n para escribir un mensaje */

void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
	while(*msgToSend != '\0'){
 80015aa:	e008      	b.n	80015be <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff ffdc 	bl	8001570 <writeChar>
		msgToSend++;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	3301      	adds	r3, #1
 80015bc:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f2      	bne.n	80015ac <writeMsg+0xc>
	}
}
 80015c6:	bf00      	nop
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <__errno>:
 80015d0:	4b01      	ldr	r3, [pc, #4]	; (80015d8 <__errno+0x8>)
 80015d2:	6818      	ldr	r0, [r3, #0]
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000040 	.word	0x20000040

080015dc <__libc_init_array>:
 80015dc:	b570      	push	{r4, r5, r6, lr}
 80015de:	4d0d      	ldr	r5, [pc, #52]	; (8001614 <__libc_init_array+0x38>)
 80015e0:	4c0d      	ldr	r4, [pc, #52]	; (8001618 <__libc_init_array+0x3c>)
 80015e2:	1b64      	subs	r4, r4, r5
 80015e4:	10a4      	asrs	r4, r4, #2
 80015e6:	2600      	movs	r6, #0
 80015e8:	42a6      	cmp	r6, r4
 80015ea:	d109      	bne.n	8001600 <__libc_init_array+0x24>
 80015ec:	4d0b      	ldr	r5, [pc, #44]	; (800161c <__libc_init_array+0x40>)
 80015ee:	4c0c      	ldr	r4, [pc, #48]	; (8001620 <__libc_init_array+0x44>)
 80015f0:	f000 fc84 	bl	8001efc <_init>
 80015f4:	1b64      	subs	r4, r4, r5
 80015f6:	10a4      	asrs	r4, r4, #2
 80015f8:	2600      	movs	r6, #0
 80015fa:	42a6      	cmp	r6, r4
 80015fc:	d105      	bne.n	800160a <__libc_init_array+0x2e>
 80015fe:	bd70      	pop	{r4, r5, r6, pc}
 8001600:	f855 3b04 	ldr.w	r3, [r5], #4
 8001604:	4798      	blx	r3
 8001606:	3601      	adds	r6, #1
 8001608:	e7ee      	b.n	80015e8 <__libc_init_array+0xc>
 800160a:	f855 3b04 	ldr.w	r3, [r5], #4
 800160e:	4798      	blx	r3
 8001610:	3601      	adds	r6, #1
 8001612:	e7f2      	b.n	80015fa <__libc_init_array+0x1e>
 8001614:	08001f8c 	.word	0x08001f8c
 8001618:	08001f8c 	.word	0x08001f8c
 800161c:	08001f8c 	.word	0x08001f8c
 8001620:	08001f90 	.word	0x08001f90

08001624 <siprintf>:
 8001624:	b40e      	push	{r1, r2, r3}
 8001626:	b500      	push	{lr}
 8001628:	b09c      	sub	sp, #112	; 0x70
 800162a:	ab1d      	add	r3, sp, #116	; 0x74
 800162c:	9002      	str	r0, [sp, #8]
 800162e:	9006      	str	r0, [sp, #24]
 8001630:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001634:	4809      	ldr	r0, [pc, #36]	; (800165c <siprintf+0x38>)
 8001636:	9107      	str	r1, [sp, #28]
 8001638:	9104      	str	r1, [sp, #16]
 800163a:	4909      	ldr	r1, [pc, #36]	; (8001660 <siprintf+0x3c>)
 800163c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001640:	9105      	str	r1, [sp, #20]
 8001642:	6800      	ldr	r0, [r0, #0]
 8001644:	9301      	str	r3, [sp, #4]
 8001646:	a902      	add	r1, sp, #8
 8001648:	f000 f868 	bl	800171c <_svfiprintf_r>
 800164c:	9b02      	ldr	r3, [sp, #8]
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
 8001652:	b01c      	add	sp, #112	; 0x70
 8001654:	f85d eb04 	ldr.w	lr, [sp], #4
 8001658:	b003      	add	sp, #12
 800165a:	4770      	bx	lr
 800165c:	20000040 	.word	0x20000040
 8001660:	ffff0208 	.word	0xffff0208

08001664 <__ssputs_r>:
 8001664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001668:	688e      	ldr	r6, [r1, #8]
 800166a:	429e      	cmp	r6, r3
 800166c:	4682      	mov	sl, r0
 800166e:	460c      	mov	r4, r1
 8001670:	4690      	mov	r8, r2
 8001672:	461f      	mov	r7, r3
 8001674:	d838      	bhi.n	80016e8 <__ssputs_r+0x84>
 8001676:	898a      	ldrh	r2, [r1, #12]
 8001678:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800167c:	d032      	beq.n	80016e4 <__ssputs_r+0x80>
 800167e:	6825      	ldr	r5, [r4, #0]
 8001680:	6909      	ldr	r1, [r1, #16]
 8001682:	eba5 0901 	sub.w	r9, r5, r1
 8001686:	6965      	ldr	r5, [r4, #20]
 8001688:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800168c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001690:	3301      	adds	r3, #1
 8001692:	444b      	add	r3, r9
 8001694:	106d      	asrs	r5, r5, #1
 8001696:	429d      	cmp	r5, r3
 8001698:	bf38      	it	cc
 800169a:	461d      	movcc	r5, r3
 800169c:	0553      	lsls	r3, r2, #21
 800169e:	d531      	bpl.n	8001704 <__ssputs_r+0xa0>
 80016a0:	4629      	mov	r1, r5
 80016a2:	f000 fb61 	bl	8001d68 <_malloc_r>
 80016a6:	4606      	mov	r6, r0
 80016a8:	b950      	cbnz	r0, 80016c0 <__ssputs_r+0x5c>
 80016aa:	230c      	movs	r3, #12
 80016ac:	f8ca 3000 	str.w	r3, [sl]
 80016b0:	89a3      	ldrh	r3, [r4, #12]
 80016b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016b6:	81a3      	strh	r3, [r4, #12]
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016c0:	6921      	ldr	r1, [r4, #16]
 80016c2:	464a      	mov	r2, r9
 80016c4:	f000 fabe 	bl	8001c44 <memcpy>
 80016c8:	89a3      	ldrh	r3, [r4, #12]
 80016ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80016ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d2:	81a3      	strh	r3, [r4, #12]
 80016d4:	6126      	str	r6, [r4, #16]
 80016d6:	6165      	str	r5, [r4, #20]
 80016d8:	444e      	add	r6, r9
 80016da:	eba5 0509 	sub.w	r5, r5, r9
 80016de:	6026      	str	r6, [r4, #0]
 80016e0:	60a5      	str	r5, [r4, #8]
 80016e2:	463e      	mov	r6, r7
 80016e4:	42be      	cmp	r6, r7
 80016e6:	d900      	bls.n	80016ea <__ssputs_r+0x86>
 80016e8:	463e      	mov	r6, r7
 80016ea:	6820      	ldr	r0, [r4, #0]
 80016ec:	4632      	mov	r2, r6
 80016ee:	4641      	mov	r1, r8
 80016f0:	f000 fab6 	bl	8001c60 <memmove>
 80016f4:	68a3      	ldr	r3, [r4, #8]
 80016f6:	1b9b      	subs	r3, r3, r6
 80016f8:	60a3      	str	r3, [r4, #8]
 80016fa:	6823      	ldr	r3, [r4, #0]
 80016fc:	4433      	add	r3, r6
 80016fe:	6023      	str	r3, [r4, #0]
 8001700:	2000      	movs	r0, #0
 8001702:	e7db      	b.n	80016bc <__ssputs_r+0x58>
 8001704:	462a      	mov	r2, r5
 8001706:	f000 fba3 	bl	8001e50 <_realloc_r>
 800170a:	4606      	mov	r6, r0
 800170c:	2800      	cmp	r0, #0
 800170e:	d1e1      	bne.n	80016d4 <__ssputs_r+0x70>
 8001710:	6921      	ldr	r1, [r4, #16]
 8001712:	4650      	mov	r0, sl
 8001714:	f000 fabe 	bl	8001c94 <_free_r>
 8001718:	e7c7      	b.n	80016aa <__ssputs_r+0x46>
	...

0800171c <_svfiprintf_r>:
 800171c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001720:	4698      	mov	r8, r3
 8001722:	898b      	ldrh	r3, [r1, #12]
 8001724:	061b      	lsls	r3, r3, #24
 8001726:	b09d      	sub	sp, #116	; 0x74
 8001728:	4607      	mov	r7, r0
 800172a:	460d      	mov	r5, r1
 800172c:	4614      	mov	r4, r2
 800172e:	d50e      	bpl.n	800174e <_svfiprintf_r+0x32>
 8001730:	690b      	ldr	r3, [r1, #16]
 8001732:	b963      	cbnz	r3, 800174e <_svfiprintf_r+0x32>
 8001734:	2140      	movs	r1, #64	; 0x40
 8001736:	f000 fb17 	bl	8001d68 <_malloc_r>
 800173a:	6028      	str	r0, [r5, #0]
 800173c:	6128      	str	r0, [r5, #16]
 800173e:	b920      	cbnz	r0, 800174a <_svfiprintf_r+0x2e>
 8001740:	230c      	movs	r3, #12
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001748:	e0d1      	b.n	80018ee <_svfiprintf_r+0x1d2>
 800174a:	2340      	movs	r3, #64	; 0x40
 800174c:	616b      	str	r3, [r5, #20]
 800174e:	2300      	movs	r3, #0
 8001750:	9309      	str	r3, [sp, #36]	; 0x24
 8001752:	2320      	movs	r3, #32
 8001754:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001758:	f8cd 800c 	str.w	r8, [sp, #12]
 800175c:	2330      	movs	r3, #48	; 0x30
 800175e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001908 <_svfiprintf_r+0x1ec>
 8001762:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001766:	f04f 0901 	mov.w	r9, #1
 800176a:	4623      	mov	r3, r4
 800176c:	469a      	mov	sl, r3
 800176e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001772:	b10a      	cbz	r2, 8001778 <_svfiprintf_r+0x5c>
 8001774:	2a25      	cmp	r2, #37	; 0x25
 8001776:	d1f9      	bne.n	800176c <_svfiprintf_r+0x50>
 8001778:	ebba 0b04 	subs.w	fp, sl, r4
 800177c:	d00b      	beq.n	8001796 <_svfiprintf_r+0x7a>
 800177e:	465b      	mov	r3, fp
 8001780:	4622      	mov	r2, r4
 8001782:	4629      	mov	r1, r5
 8001784:	4638      	mov	r0, r7
 8001786:	f7ff ff6d 	bl	8001664 <__ssputs_r>
 800178a:	3001      	adds	r0, #1
 800178c:	f000 80aa 	beq.w	80018e4 <_svfiprintf_r+0x1c8>
 8001790:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001792:	445a      	add	r2, fp
 8001794:	9209      	str	r2, [sp, #36]	; 0x24
 8001796:	f89a 3000 	ldrb.w	r3, [sl]
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 80a2 	beq.w	80018e4 <_svfiprintf_r+0x1c8>
 80017a0:	2300      	movs	r3, #0
 80017a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80017aa:	f10a 0a01 	add.w	sl, sl, #1
 80017ae:	9304      	str	r3, [sp, #16]
 80017b0:	9307      	str	r3, [sp, #28]
 80017b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80017b6:	931a      	str	r3, [sp, #104]	; 0x68
 80017b8:	4654      	mov	r4, sl
 80017ba:	2205      	movs	r2, #5
 80017bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017c0:	4851      	ldr	r0, [pc, #324]	; (8001908 <_svfiprintf_r+0x1ec>)
 80017c2:	f7fe fd0d 	bl	80001e0 <memchr>
 80017c6:	9a04      	ldr	r2, [sp, #16]
 80017c8:	b9d8      	cbnz	r0, 8001802 <_svfiprintf_r+0xe6>
 80017ca:	06d0      	lsls	r0, r2, #27
 80017cc:	bf44      	itt	mi
 80017ce:	2320      	movmi	r3, #32
 80017d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80017d4:	0711      	lsls	r1, r2, #28
 80017d6:	bf44      	itt	mi
 80017d8:	232b      	movmi	r3, #43	; 0x2b
 80017da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80017de:	f89a 3000 	ldrb.w	r3, [sl]
 80017e2:	2b2a      	cmp	r3, #42	; 0x2a
 80017e4:	d015      	beq.n	8001812 <_svfiprintf_r+0xf6>
 80017e6:	9a07      	ldr	r2, [sp, #28]
 80017e8:	4654      	mov	r4, sl
 80017ea:	2000      	movs	r0, #0
 80017ec:	f04f 0c0a 	mov.w	ip, #10
 80017f0:	4621      	mov	r1, r4
 80017f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80017f6:	3b30      	subs	r3, #48	; 0x30
 80017f8:	2b09      	cmp	r3, #9
 80017fa:	d94e      	bls.n	800189a <_svfiprintf_r+0x17e>
 80017fc:	b1b0      	cbz	r0, 800182c <_svfiprintf_r+0x110>
 80017fe:	9207      	str	r2, [sp, #28]
 8001800:	e014      	b.n	800182c <_svfiprintf_r+0x110>
 8001802:	eba0 0308 	sub.w	r3, r0, r8
 8001806:	fa09 f303 	lsl.w	r3, r9, r3
 800180a:	4313      	orrs	r3, r2
 800180c:	9304      	str	r3, [sp, #16]
 800180e:	46a2      	mov	sl, r4
 8001810:	e7d2      	b.n	80017b8 <_svfiprintf_r+0x9c>
 8001812:	9b03      	ldr	r3, [sp, #12]
 8001814:	1d19      	adds	r1, r3, #4
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	9103      	str	r1, [sp, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	bfbb      	ittet	lt
 800181e:	425b      	neglt	r3, r3
 8001820:	f042 0202 	orrlt.w	r2, r2, #2
 8001824:	9307      	strge	r3, [sp, #28]
 8001826:	9307      	strlt	r3, [sp, #28]
 8001828:	bfb8      	it	lt
 800182a:	9204      	strlt	r2, [sp, #16]
 800182c:	7823      	ldrb	r3, [r4, #0]
 800182e:	2b2e      	cmp	r3, #46	; 0x2e
 8001830:	d10c      	bne.n	800184c <_svfiprintf_r+0x130>
 8001832:	7863      	ldrb	r3, [r4, #1]
 8001834:	2b2a      	cmp	r3, #42	; 0x2a
 8001836:	d135      	bne.n	80018a4 <_svfiprintf_r+0x188>
 8001838:	9b03      	ldr	r3, [sp, #12]
 800183a:	1d1a      	adds	r2, r3, #4
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	9203      	str	r2, [sp, #12]
 8001840:	2b00      	cmp	r3, #0
 8001842:	bfb8      	it	lt
 8001844:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001848:	3402      	adds	r4, #2
 800184a:	9305      	str	r3, [sp, #20]
 800184c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800190c <_svfiprintf_r+0x1f0>
 8001850:	7821      	ldrb	r1, [r4, #0]
 8001852:	2203      	movs	r2, #3
 8001854:	4650      	mov	r0, sl
 8001856:	f7fe fcc3 	bl	80001e0 <memchr>
 800185a:	b140      	cbz	r0, 800186e <_svfiprintf_r+0x152>
 800185c:	2340      	movs	r3, #64	; 0x40
 800185e:	eba0 000a 	sub.w	r0, r0, sl
 8001862:	fa03 f000 	lsl.w	r0, r3, r0
 8001866:	9b04      	ldr	r3, [sp, #16]
 8001868:	4303      	orrs	r3, r0
 800186a:	3401      	adds	r4, #1
 800186c:	9304      	str	r3, [sp, #16]
 800186e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001872:	4827      	ldr	r0, [pc, #156]	; (8001910 <_svfiprintf_r+0x1f4>)
 8001874:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001878:	2206      	movs	r2, #6
 800187a:	f7fe fcb1 	bl	80001e0 <memchr>
 800187e:	2800      	cmp	r0, #0
 8001880:	d038      	beq.n	80018f4 <_svfiprintf_r+0x1d8>
 8001882:	4b24      	ldr	r3, [pc, #144]	; (8001914 <_svfiprintf_r+0x1f8>)
 8001884:	bb1b      	cbnz	r3, 80018ce <_svfiprintf_r+0x1b2>
 8001886:	9b03      	ldr	r3, [sp, #12]
 8001888:	3307      	adds	r3, #7
 800188a:	f023 0307 	bic.w	r3, r3, #7
 800188e:	3308      	adds	r3, #8
 8001890:	9303      	str	r3, [sp, #12]
 8001892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001894:	4433      	add	r3, r6
 8001896:	9309      	str	r3, [sp, #36]	; 0x24
 8001898:	e767      	b.n	800176a <_svfiprintf_r+0x4e>
 800189a:	fb0c 3202 	mla	r2, ip, r2, r3
 800189e:	460c      	mov	r4, r1
 80018a0:	2001      	movs	r0, #1
 80018a2:	e7a5      	b.n	80017f0 <_svfiprintf_r+0xd4>
 80018a4:	2300      	movs	r3, #0
 80018a6:	3401      	adds	r4, #1
 80018a8:	9305      	str	r3, [sp, #20]
 80018aa:	4619      	mov	r1, r3
 80018ac:	f04f 0c0a 	mov.w	ip, #10
 80018b0:	4620      	mov	r0, r4
 80018b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018b6:	3a30      	subs	r2, #48	; 0x30
 80018b8:	2a09      	cmp	r2, #9
 80018ba:	d903      	bls.n	80018c4 <_svfiprintf_r+0x1a8>
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0c5      	beq.n	800184c <_svfiprintf_r+0x130>
 80018c0:	9105      	str	r1, [sp, #20]
 80018c2:	e7c3      	b.n	800184c <_svfiprintf_r+0x130>
 80018c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80018c8:	4604      	mov	r4, r0
 80018ca:	2301      	movs	r3, #1
 80018cc:	e7f0      	b.n	80018b0 <_svfiprintf_r+0x194>
 80018ce:	ab03      	add	r3, sp, #12
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	462a      	mov	r2, r5
 80018d4:	4b10      	ldr	r3, [pc, #64]	; (8001918 <_svfiprintf_r+0x1fc>)
 80018d6:	a904      	add	r1, sp, #16
 80018d8:	4638      	mov	r0, r7
 80018da:	f3af 8000 	nop.w
 80018de:	1c42      	adds	r2, r0, #1
 80018e0:	4606      	mov	r6, r0
 80018e2:	d1d6      	bne.n	8001892 <_svfiprintf_r+0x176>
 80018e4:	89ab      	ldrh	r3, [r5, #12]
 80018e6:	065b      	lsls	r3, r3, #25
 80018e8:	f53f af2c 	bmi.w	8001744 <_svfiprintf_r+0x28>
 80018ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80018ee:	b01d      	add	sp, #116	; 0x74
 80018f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018f4:	ab03      	add	r3, sp, #12
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	462a      	mov	r2, r5
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <_svfiprintf_r+0x1fc>)
 80018fc:	a904      	add	r1, sp, #16
 80018fe:	4638      	mov	r0, r7
 8001900:	f000 f87a 	bl	80019f8 <_printf_i>
 8001904:	e7eb      	b.n	80018de <_svfiprintf_r+0x1c2>
 8001906:	bf00      	nop
 8001908:	08001f56 	.word	0x08001f56
 800190c:	08001f5c 	.word	0x08001f5c
 8001910:	08001f60 	.word	0x08001f60
 8001914:	00000000 	.word	0x00000000
 8001918:	08001665 	.word	0x08001665

0800191c <_printf_common>:
 800191c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001920:	4616      	mov	r6, r2
 8001922:	4699      	mov	r9, r3
 8001924:	688a      	ldr	r2, [r1, #8]
 8001926:	690b      	ldr	r3, [r1, #16]
 8001928:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800192c:	4293      	cmp	r3, r2
 800192e:	bfb8      	it	lt
 8001930:	4613      	movlt	r3, r2
 8001932:	6033      	str	r3, [r6, #0]
 8001934:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001938:	4607      	mov	r7, r0
 800193a:	460c      	mov	r4, r1
 800193c:	b10a      	cbz	r2, 8001942 <_printf_common+0x26>
 800193e:	3301      	adds	r3, #1
 8001940:	6033      	str	r3, [r6, #0]
 8001942:	6823      	ldr	r3, [r4, #0]
 8001944:	0699      	lsls	r1, r3, #26
 8001946:	bf42      	ittt	mi
 8001948:	6833      	ldrmi	r3, [r6, #0]
 800194a:	3302      	addmi	r3, #2
 800194c:	6033      	strmi	r3, [r6, #0]
 800194e:	6825      	ldr	r5, [r4, #0]
 8001950:	f015 0506 	ands.w	r5, r5, #6
 8001954:	d106      	bne.n	8001964 <_printf_common+0x48>
 8001956:	f104 0a19 	add.w	sl, r4, #25
 800195a:	68e3      	ldr	r3, [r4, #12]
 800195c:	6832      	ldr	r2, [r6, #0]
 800195e:	1a9b      	subs	r3, r3, r2
 8001960:	42ab      	cmp	r3, r5
 8001962:	dc26      	bgt.n	80019b2 <_printf_common+0x96>
 8001964:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001968:	1e13      	subs	r3, r2, #0
 800196a:	6822      	ldr	r2, [r4, #0]
 800196c:	bf18      	it	ne
 800196e:	2301      	movne	r3, #1
 8001970:	0692      	lsls	r2, r2, #26
 8001972:	d42b      	bmi.n	80019cc <_printf_common+0xb0>
 8001974:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001978:	4649      	mov	r1, r9
 800197a:	4638      	mov	r0, r7
 800197c:	47c0      	blx	r8
 800197e:	3001      	adds	r0, #1
 8001980:	d01e      	beq.n	80019c0 <_printf_common+0xa4>
 8001982:	6823      	ldr	r3, [r4, #0]
 8001984:	68e5      	ldr	r5, [r4, #12]
 8001986:	6832      	ldr	r2, [r6, #0]
 8001988:	f003 0306 	and.w	r3, r3, #6
 800198c:	2b04      	cmp	r3, #4
 800198e:	bf08      	it	eq
 8001990:	1aad      	subeq	r5, r5, r2
 8001992:	68a3      	ldr	r3, [r4, #8]
 8001994:	6922      	ldr	r2, [r4, #16]
 8001996:	bf0c      	ite	eq
 8001998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800199c:	2500      	movne	r5, #0
 800199e:	4293      	cmp	r3, r2
 80019a0:	bfc4      	itt	gt
 80019a2:	1a9b      	subgt	r3, r3, r2
 80019a4:	18ed      	addgt	r5, r5, r3
 80019a6:	2600      	movs	r6, #0
 80019a8:	341a      	adds	r4, #26
 80019aa:	42b5      	cmp	r5, r6
 80019ac:	d11a      	bne.n	80019e4 <_printf_common+0xc8>
 80019ae:	2000      	movs	r0, #0
 80019b0:	e008      	b.n	80019c4 <_printf_common+0xa8>
 80019b2:	2301      	movs	r3, #1
 80019b4:	4652      	mov	r2, sl
 80019b6:	4649      	mov	r1, r9
 80019b8:	4638      	mov	r0, r7
 80019ba:	47c0      	blx	r8
 80019bc:	3001      	adds	r0, #1
 80019be:	d103      	bne.n	80019c8 <_printf_common+0xac>
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019c8:	3501      	adds	r5, #1
 80019ca:	e7c6      	b.n	800195a <_printf_common+0x3e>
 80019cc:	18e1      	adds	r1, r4, r3
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	2030      	movs	r0, #48	; 0x30
 80019d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80019d6:	4422      	add	r2, r4
 80019d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80019dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80019e0:	3302      	adds	r3, #2
 80019e2:	e7c7      	b.n	8001974 <_printf_common+0x58>
 80019e4:	2301      	movs	r3, #1
 80019e6:	4622      	mov	r2, r4
 80019e8:	4649      	mov	r1, r9
 80019ea:	4638      	mov	r0, r7
 80019ec:	47c0      	blx	r8
 80019ee:	3001      	adds	r0, #1
 80019f0:	d0e6      	beq.n	80019c0 <_printf_common+0xa4>
 80019f2:	3601      	adds	r6, #1
 80019f4:	e7d9      	b.n	80019aa <_printf_common+0x8e>
	...

080019f8 <_printf_i>:
 80019f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019fc:	7e0f      	ldrb	r7, [r1, #24]
 80019fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001a00:	2f78      	cmp	r7, #120	; 0x78
 8001a02:	4691      	mov	r9, r2
 8001a04:	4680      	mov	r8, r0
 8001a06:	460c      	mov	r4, r1
 8001a08:	469a      	mov	sl, r3
 8001a0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001a0e:	d807      	bhi.n	8001a20 <_printf_i+0x28>
 8001a10:	2f62      	cmp	r7, #98	; 0x62
 8001a12:	d80a      	bhi.n	8001a2a <_printf_i+0x32>
 8001a14:	2f00      	cmp	r7, #0
 8001a16:	f000 80d8 	beq.w	8001bca <_printf_i+0x1d2>
 8001a1a:	2f58      	cmp	r7, #88	; 0x58
 8001a1c:	f000 80a3 	beq.w	8001b66 <_printf_i+0x16e>
 8001a20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001a28:	e03a      	b.n	8001aa0 <_printf_i+0xa8>
 8001a2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001a2e:	2b15      	cmp	r3, #21
 8001a30:	d8f6      	bhi.n	8001a20 <_printf_i+0x28>
 8001a32:	a101      	add	r1, pc, #4	; (adr r1, 8001a38 <_printf_i+0x40>)
 8001a34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a38:	08001a91 	.word	0x08001a91
 8001a3c:	08001aa5 	.word	0x08001aa5
 8001a40:	08001a21 	.word	0x08001a21
 8001a44:	08001a21 	.word	0x08001a21
 8001a48:	08001a21 	.word	0x08001a21
 8001a4c:	08001a21 	.word	0x08001a21
 8001a50:	08001aa5 	.word	0x08001aa5
 8001a54:	08001a21 	.word	0x08001a21
 8001a58:	08001a21 	.word	0x08001a21
 8001a5c:	08001a21 	.word	0x08001a21
 8001a60:	08001a21 	.word	0x08001a21
 8001a64:	08001bb1 	.word	0x08001bb1
 8001a68:	08001ad5 	.word	0x08001ad5
 8001a6c:	08001b93 	.word	0x08001b93
 8001a70:	08001a21 	.word	0x08001a21
 8001a74:	08001a21 	.word	0x08001a21
 8001a78:	08001bd3 	.word	0x08001bd3
 8001a7c:	08001a21 	.word	0x08001a21
 8001a80:	08001ad5 	.word	0x08001ad5
 8001a84:	08001a21 	.word	0x08001a21
 8001a88:	08001a21 	.word	0x08001a21
 8001a8c:	08001b9b 	.word	0x08001b9b
 8001a90:	682b      	ldr	r3, [r5, #0]
 8001a92:	1d1a      	adds	r2, r3, #4
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	602a      	str	r2, [r5, #0]
 8001a98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0a3      	b.n	8001bec <_printf_i+0x1f4>
 8001aa4:	6820      	ldr	r0, [r4, #0]
 8001aa6:	6829      	ldr	r1, [r5, #0]
 8001aa8:	0606      	lsls	r6, r0, #24
 8001aaa:	f101 0304 	add.w	r3, r1, #4
 8001aae:	d50a      	bpl.n	8001ac6 <_printf_i+0xce>
 8001ab0:	680e      	ldr	r6, [r1, #0]
 8001ab2:	602b      	str	r3, [r5, #0]
 8001ab4:	2e00      	cmp	r6, #0
 8001ab6:	da03      	bge.n	8001ac0 <_printf_i+0xc8>
 8001ab8:	232d      	movs	r3, #45	; 0x2d
 8001aba:	4276      	negs	r6, r6
 8001abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ac0:	485e      	ldr	r0, [pc, #376]	; (8001c3c <_printf_i+0x244>)
 8001ac2:	230a      	movs	r3, #10
 8001ac4:	e019      	b.n	8001afa <_printf_i+0x102>
 8001ac6:	680e      	ldr	r6, [r1, #0]
 8001ac8:	602b      	str	r3, [r5, #0]
 8001aca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001ace:	bf18      	it	ne
 8001ad0:	b236      	sxthne	r6, r6
 8001ad2:	e7ef      	b.n	8001ab4 <_printf_i+0xbc>
 8001ad4:	682b      	ldr	r3, [r5, #0]
 8001ad6:	6820      	ldr	r0, [r4, #0]
 8001ad8:	1d19      	adds	r1, r3, #4
 8001ada:	6029      	str	r1, [r5, #0]
 8001adc:	0601      	lsls	r1, r0, #24
 8001ade:	d501      	bpl.n	8001ae4 <_printf_i+0xec>
 8001ae0:	681e      	ldr	r6, [r3, #0]
 8001ae2:	e002      	b.n	8001aea <_printf_i+0xf2>
 8001ae4:	0646      	lsls	r6, r0, #25
 8001ae6:	d5fb      	bpl.n	8001ae0 <_printf_i+0xe8>
 8001ae8:	881e      	ldrh	r6, [r3, #0]
 8001aea:	4854      	ldr	r0, [pc, #336]	; (8001c3c <_printf_i+0x244>)
 8001aec:	2f6f      	cmp	r7, #111	; 0x6f
 8001aee:	bf0c      	ite	eq
 8001af0:	2308      	moveq	r3, #8
 8001af2:	230a      	movne	r3, #10
 8001af4:	2100      	movs	r1, #0
 8001af6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001afa:	6865      	ldr	r5, [r4, #4]
 8001afc:	60a5      	str	r5, [r4, #8]
 8001afe:	2d00      	cmp	r5, #0
 8001b00:	bfa2      	ittt	ge
 8001b02:	6821      	ldrge	r1, [r4, #0]
 8001b04:	f021 0104 	bicge.w	r1, r1, #4
 8001b08:	6021      	strge	r1, [r4, #0]
 8001b0a:	b90e      	cbnz	r6, 8001b10 <_printf_i+0x118>
 8001b0c:	2d00      	cmp	r5, #0
 8001b0e:	d04d      	beq.n	8001bac <_printf_i+0x1b4>
 8001b10:	4615      	mov	r5, r2
 8001b12:	fbb6 f1f3 	udiv	r1, r6, r3
 8001b16:	fb03 6711 	mls	r7, r3, r1, r6
 8001b1a:	5dc7      	ldrb	r7, [r0, r7]
 8001b1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001b20:	4637      	mov	r7, r6
 8001b22:	42bb      	cmp	r3, r7
 8001b24:	460e      	mov	r6, r1
 8001b26:	d9f4      	bls.n	8001b12 <_printf_i+0x11a>
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d10b      	bne.n	8001b44 <_printf_i+0x14c>
 8001b2c:	6823      	ldr	r3, [r4, #0]
 8001b2e:	07de      	lsls	r6, r3, #31
 8001b30:	d508      	bpl.n	8001b44 <_printf_i+0x14c>
 8001b32:	6923      	ldr	r3, [r4, #16]
 8001b34:	6861      	ldr	r1, [r4, #4]
 8001b36:	4299      	cmp	r1, r3
 8001b38:	bfde      	ittt	le
 8001b3a:	2330      	movle	r3, #48	; 0x30
 8001b3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001b40:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001b44:	1b52      	subs	r2, r2, r5
 8001b46:	6122      	str	r2, [r4, #16]
 8001b48:	f8cd a000 	str.w	sl, [sp]
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	aa03      	add	r2, sp, #12
 8001b50:	4621      	mov	r1, r4
 8001b52:	4640      	mov	r0, r8
 8001b54:	f7ff fee2 	bl	800191c <_printf_common>
 8001b58:	3001      	adds	r0, #1
 8001b5a:	d14c      	bne.n	8001bf6 <_printf_i+0x1fe>
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b60:	b004      	add	sp, #16
 8001b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b66:	4835      	ldr	r0, [pc, #212]	; (8001c3c <_printf_i+0x244>)
 8001b68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001b6c:	6829      	ldr	r1, [r5, #0]
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	f851 6b04 	ldr.w	r6, [r1], #4
 8001b74:	6029      	str	r1, [r5, #0]
 8001b76:	061d      	lsls	r5, r3, #24
 8001b78:	d514      	bpl.n	8001ba4 <_printf_i+0x1ac>
 8001b7a:	07df      	lsls	r7, r3, #31
 8001b7c:	bf44      	itt	mi
 8001b7e:	f043 0320 	orrmi.w	r3, r3, #32
 8001b82:	6023      	strmi	r3, [r4, #0]
 8001b84:	b91e      	cbnz	r6, 8001b8e <_printf_i+0x196>
 8001b86:	6823      	ldr	r3, [r4, #0]
 8001b88:	f023 0320 	bic.w	r3, r3, #32
 8001b8c:	6023      	str	r3, [r4, #0]
 8001b8e:	2310      	movs	r3, #16
 8001b90:	e7b0      	b.n	8001af4 <_printf_i+0xfc>
 8001b92:	6823      	ldr	r3, [r4, #0]
 8001b94:	f043 0320 	orr.w	r3, r3, #32
 8001b98:	6023      	str	r3, [r4, #0]
 8001b9a:	2378      	movs	r3, #120	; 0x78
 8001b9c:	4828      	ldr	r0, [pc, #160]	; (8001c40 <_printf_i+0x248>)
 8001b9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001ba2:	e7e3      	b.n	8001b6c <_printf_i+0x174>
 8001ba4:	0659      	lsls	r1, r3, #25
 8001ba6:	bf48      	it	mi
 8001ba8:	b2b6      	uxthmi	r6, r6
 8001baa:	e7e6      	b.n	8001b7a <_printf_i+0x182>
 8001bac:	4615      	mov	r5, r2
 8001bae:	e7bb      	b.n	8001b28 <_printf_i+0x130>
 8001bb0:	682b      	ldr	r3, [r5, #0]
 8001bb2:	6826      	ldr	r6, [r4, #0]
 8001bb4:	6961      	ldr	r1, [r4, #20]
 8001bb6:	1d18      	adds	r0, r3, #4
 8001bb8:	6028      	str	r0, [r5, #0]
 8001bba:	0635      	lsls	r5, r6, #24
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	d501      	bpl.n	8001bc4 <_printf_i+0x1cc>
 8001bc0:	6019      	str	r1, [r3, #0]
 8001bc2:	e002      	b.n	8001bca <_printf_i+0x1d2>
 8001bc4:	0670      	lsls	r0, r6, #25
 8001bc6:	d5fb      	bpl.n	8001bc0 <_printf_i+0x1c8>
 8001bc8:	8019      	strh	r1, [r3, #0]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	6123      	str	r3, [r4, #16]
 8001bce:	4615      	mov	r5, r2
 8001bd0:	e7ba      	b.n	8001b48 <_printf_i+0x150>
 8001bd2:	682b      	ldr	r3, [r5, #0]
 8001bd4:	1d1a      	adds	r2, r3, #4
 8001bd6:	602a      	str	r2, [r5, #0]
 8001bd8:	681d      	ldr	r5, [r3, #0]
 8001bda:	6862      	ldr	r2, [r4, #4]
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4628      	mov	r0, r5
 8001be0:	f7fe fafe 	bl	80001e0 <memchr>
 8001be4:	b108      	cbz	r0, 8001bea <_printf_i+0x1f2>
 8001be6:	1b40      	subs	r0, r0, r5
 8001be8:	6060      	str	r0, [r4, #4]
 8001bea:	6863      	ldr	r3, [r4, #4]
 8001bec:	6123      	str	r3, [r4, #16]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001bf4:	e7a8      	b.n	8001b48 <_printf_i+0x150>
 8001bf6:	6923      	ldr	r3, [r4, #16]
 8001bf8:	462a      	mov	r2, r5
 8001bfa:	4649      	mov	r1, r9
 8001bfc:	4640      	mov	r0, r8
 8001bfe:	47d0      	blx	sl
 8001c00:	3001      	adds	r0, #1
 8001c02:	d0ab      	beq.n	8001b5c <_printf_i+0x164>
 8001c04:	6823      	ldr	r3, [r4, #0]
 8001c06:	079b      	lsls	r3, r3, #30
 8001c08:	d413      	bmi.n	8001c32 <_printf_i+0x23a>
 8001c0a:	68e0      	ldr	r0, [r4, #12]
 8001c0c:	9b03      	ldr	r3, [sp, #12]
 8001c0e:	4298      	cmp	r0, r3
 8001c10:	bfb8      	it	lt
 8001c12:	4618      	movlt	r0, r3
 8001c14:	e7a4      	b.n	8001b60 <_printf_i+0x168>
 8001c16:	2301      	movs	r3, #1
 8001c18:	4632      	mov	r2, r6
 8001c1a:	4649      	mov	r1, r9
 8001c1c:	4640      	mov	r0, r8
 8001c1e:	47d0      	blx	sl
 8001c20:	3001      	adds	r0, #1
 8001c22:	d09b      	beq.n	8001b5c <_printf_i+0x164>
 8001c24:	3501      	adds	r5, #1
 8001c26:	68e3      	ldr	r3, [r4, #12]
 8001c28:	9903      	ldr	r1, [sp, #12]
 8001c2a:	1a5b      	subs	r3, r3, r1
 8001c2c:	42ab      	cmp	r3, r5
 8001c2e:	dcf2      	bgt.n	8001c16 <_printf_i+0x21e>
 8001c30:	e7eb      	b.n	8001c0a <_printf_i+0x212>
 8001c32:	2500      	movs	r5, #0
 8001c34:	f104 0619 	add.w	r6, r4, #25
 8001c38:	e7f5      	b.n	8001c26 <_printf_i+0x22e>
 8001c3a:	bf00      	nop
 8001c3c:	08001f67 	.word	0x08001f67
 8001c40:	08001f78 	.word	0x08001f78

08001c44 <memcpy>:
 8001c44:	440a      	add	r2, r1
 8001c46:	4291      	cmp	r1, r2
 8001c48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001c4c:	d100      	bne.n	8001c50 <memcpy+0xc>
 8001c4e:	4770      	bx	lr
 8001c50:	b510      	push	{r4, lr}
 8001c52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001c5a:	4291      	cmp	r1, r2
 8001c5c:	d1f9      	bne.n	8001c52 <memcpy+0xe>
 8001c5e:	bd10      	pop	{r4, pc}

08001c60 <memmove>:
 8001c60:	4288      	cmp	r0, r1
 8001c62:	b510      	push	{r4, lr}
 8001c64:	eb01 0402 	add.w	r4, r1, r2
 8001c68:	d902      	bls.n	8001c70 <memmove+0x10>
 8001c6a:	4284      	cmp	r4, r0
 8001c6c:	4623      	mov	r3, r4
 8001c6e:	d807      	bhi.n	8001c80 <memmove+0x20>
 8001c70:	1e43      	subs	r3, r0, #1
 8001c72:	42a1      	cmp	r1, r4
 8001c74:	d008      	beq.n	8001c88 <memmove+0x28>
 8001c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001c7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001c7e:	e7f8      	b.n	8001c72 <memmove+0x12>
 8001c80:	4402      	add	r2, r0
 8001c82:	4601      	mov	r1, r0
 8001c84:	428a      	cmp	r2, r1
 8001c86:	d100      	bne.n	8001c8a <memmove+0x2a>
 8001c88:	bd10      	pop	{r4, pc}
 8001c8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001c8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001c92:	e7f7      	b.n	8001c84 <memmove+0x24>

08001c94 <_free_r>:
 8001c94:	b538      	push	{r3, r4, r5, lr}
 8001c96:	4605      	mov	r5, r0
 8001c98:	2900      	cmp	r1, #0
 8001c9a:	d041      	beq.n	8001d20 <_free_r+0x8c>
 8001c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ca0:	1f0c      	subs	r4, r1, #4
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	bfb8      	it	lt
 8001ca6:	18e4      	addlt	r4, r4, r3
 8001ca8:	f000 f912 	bl	8001ed0 <__malloc_lock>
 8001cac:	4a1d      	ldr	r2, [pc, #116]	; (8001d24 <_free_r+0x90>)
 8001cae:	6813      	ldr	r3, [r2, #0]
 8001cb0:	b933      	cbnz	r3, 8001cc0 <_free_r+0x2c>
 8001cb2:	6063      	str	r3, [r4, #4]
 8001cb4:	6014      	str	r4, [r2, #0]
 8001cb6:	4628      	mov	r0, r5
 8001cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001cbc:	f000 b90e 	b.w	8001edc <__malloc_unlock>
 8001cc0:	42a3      	cmp	r3, r4
 8001cc2:	d908      	bls.n	8001cd6 <_free_r+0x42>
 8001cc4:	6820      	ldr	r0, [r4, #0]
 8001cc6:	1821      	adds	r1, r4, r0
 8001cc8:	428b      	cmp	r3, r1
 8001cca:	bf01      	itttt	eq
 8001ccc:	6819      	ldreq	r1, [r3, #0]
 8001cce:	685b      	ldreq	r3, [r3, #4]
 8001cd0:	1809      	addeq	r1, r1, r0
 8001cd2:	6021      	streq	r1, [r4, #0]
 8001cd4:	e7ed      	b.n	8001cb2 <_free_r+0x1e>
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	b10b      	cbz	r3, 8001ce0 <_free_r+0x4c>
 8001cdc:	42a3      	cmp	r3, r4
 8001cde:	d9fa      	bls.n	8001cd6 <_free_r+0x42>
 8001ce0:	6811      	ldr	r1, [r2, #0]
 8001ce2:	1850      	adds	r0, r2, r1
 8001ce4:	42a0      	cmp	r0, r4
 8001ce6:	d10b      	bne.n	8001d00 <_free_r+0x6c>
 8001ce8:	6820      	ldr	r0, [r4, #0]
 8001cea:	4401      	add	r1, r0
 8001cec:	1850      	adds	r0, r2, r1
 8001cee:	4283      	cmp	r3, r0
 8001cf0:	6011      	str	r1, [r2, #0]
 8001cf2:	d1e0      	bne.n	8001cb6 <_free_r+0x22>
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	6053      	str	r3, [r2, #4]
 8001cfa:	4401      	add	r1, r0
 8001cfc:	6011      	str	r1, [r2, #0]
 8001cfe:	e7da      	b.n	8001cb6 <_free_r+0x22>
 8001d00:	d902      	bls.n	8001d08 <_free_r+0x74>
 8001d02:	230c      	movs	r3, #12
 8001d04:	602b      	str	r3, [r5, #0]
 8001d06:	e7d6      	b.n	8001cb6 <_free_r+0x22>
 8001d08:	6820      	ldr	r0, [r4, #0]
 8001d0a:	1821      	adds	r1, r4, r0
 8001d0c:	428b      	cmp	r3, r1
 8001d0e:	bf04      	itt	eq
 8001d10:	6819      	ldreq	r1, [r3, #0]
 8001d12:	685b      	ldreq	r3, [r3, #4]
 8001d14:	6063      	str	r3, [r4, #4]
 8001d16:	bf04      	itt	eq
 8001d18:	1809      	addeq	r1, r1, r0
 8001d1a:	6021      	streq	r1, [r4, #0]
 8001d1c:	6054      	str	r4, [r2, #4]
 8001d1e:	e7ca      	b.n	8001cb6 <_free_r+0x22>
 8001d20:	bd38      	pop	{r3, r4, r5, pc}
 8001d22:	bf00      	nop
 8001d24:	200001b4 	.word	0x200001b4

08001d28 <sbrk_aligned>:
 8001d28:	b570      	push	{r4, r5, r6, lr}
 8001d2a:	4e0e      	ldr	r6, [pc, #56]	; (8001d64 <sbrk_aligned+0x3c>)
 8001d2c:	460c      	mov	r4, r1
 8001d2e:	6831      	ldr	r1, [r6, #0]
 8001d30:	4605      	mov	r5, r0
 8001d32:	b911      	cbnz	r1, 8001d3a <sbrk_aligned+0x12>
 8001d34:	f000 f8bc 	bl	8001eb0 <_sbrk_r>
 8001d38:	6030      	str	r0, [r6, #0]
 8001d3a:	4621      	mov	r1, r4
 8001d3c:	4628      	mov	r0, r5
 8001d3e:	f000 f8b7 	bl	8001eb0 <_sbrk_r>
 8001d42:	1c43      	adds	r3, r0, #1
 8001d44:	d00a      	beq.n	8001d5c <sbrk_aligned+0x34>
 8001d46:	1cc4      	adds	r4, r0, #3
 8001d48:	f024 0403 	bic.w	r4, r4, #3
 8001d4c:	42a0      	cmp	r0, r4
 8001d4e:	d007      	beq.n	8001d60 <sbrk_aligned+0x38>
 8001d50:	1a21      	subs	r1, r4, r0
 8001d52:	4628      	mov	r0, r5
 8001d54:	f000 f8ac 	bl	8001eb0 <_sbrk_r>
 8001d58:	3001      	adds	r0, #1
 8001d5a:	d101      	bne.n	8001d60 <sbrk_aligned+0x38>
 8001d5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001d60:	4620      	mov	r0, r4
 8001d62:	bd70      	pop	{r4, r5, r6, pc}
 8001d64:	200001b8 	.word	0x200001b8

08001d68 <_malloc_r>:
 8001d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d6c:	1ccd      	adds	r5, r1, #3
 8001d6e:	f025 0503 	bic.w	r5, r5, #3
 8001d72:	3508      	adds	r5, #8
 8001d74:	2d0c      	cmp	r5, #12
 8001d76:	bf38      	it	cc
 8001d78:	250c      	movcc	r5, #12
 8001d7a:	2d00      	cmp	r5, #0
 8001d7c:	4607      	mov	r7, r0
 8001d7e:	db01      	blt.n	8001d84 <_malloc_r+0x1c>
 8001d80:	42a9      	cmp	r1, r5
 8001d82:	d905      	bls.n	8001d90 <_malloc_r+0x28>
 8001d84:	230c      	movs	r3, #12
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	2600      	movs	r6, #0
 8001d8a:	4630      	mov	r0, r6
 8001d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d90:	4e2e      	ldr	r6, [pc, #184]	; (8001e4c <_malloc_r+0xe4>)
 8001d92:	f000 f89d 	bl	8001ed0 <__malloc_lock>
 8001d96:	6833      	ldr	r3, [r6, #0]
 8001d98:	461c      	mov	r4, r3
 8001d9a:	bb34      	cbnz	r4, 8001dea <_malloc_r+0x82>
 8001d9c:	4629      	mov	r1, r5
 8001d9e:	4638      	mov	r0, r7
 8001da0:	f7ff ffc2 	bl	8001d28 <sbrk_aligned>
 8001da4:	1c43      	adds	r3, r0, #1
 8001da6:	4604      	mov	r4, r0
 8001da8:	d14d      	bne.n	8001e46 <_malloc_r+0xde>
 8001daa:	6834      	ldr	r4, [r6, #0]
 8001dac:	4626      	mov	r6, r4
 8001dae:	2e00      	cmp	r6, #0
 8001db0:	d140      	bne.n	8001e34 <_malloc_r+0xcc>
 8001db2:	6823      	ldr	r3, [r4, #0]
 8001db4:	4631      	mov	r1, r6
 8001db6:	4638      	mov	r0, r7
 8001db8:	eb04 0803 	add.w	r8, r4, r3
 8001dbc:	f000 f878 	bl	8001eb0 <_sbrk_r>
 8001dc0:	4580      	cmp	r8, r0
 8001dc2:	d13a      	bne.n	8001e3a <_malloc_r+0xd2>
 8001dc4:	6821      	ldr	r1, [r4, #0]
 8001dc6:	3503      	adds	r5, #3
 8001dc8:	1a6d      	subs	r5, r5, r1
 8001dca:	f025 0503 	bic.w	r5, r5, #3
 8001dce:	3508      	adds	r5, #8
 8001dd0:	2d0c      	cmp	r5, #12
 8001dd2:	bf38      	it	cc
 8001dd4:	250c      	movcc	r5, #12
 8001dd6:	4629      	mov	r1, r5
 8001dd8:	4638      	mov	r0, r7
 8001dda:	f7ff ffa5 	bl	8001d28 <sbrk_aligned>
 8001dde:	3001      	adds	r0, #1
 8001de0:	d02b      	beq.n	8001e3a <_malloc_r+0xd2>
 8001de2:	6823      	ldr	r3, [r4, #0]
 8001de4:	442b      	add	r3, r5
 8001de6:	6023      	str	r3, [r4, #0]
 8001de8:	e00e      	b.n	8001e08 <_malloc_r+0xa0>
 8001dea:	6822      	ldr	r2, [r4, #0]
 8001dec:	1b52      	subs	r2, r2, r5
 8001dee:	d41e      	bmi.n	8001e2e <_malloc_r+0xc6>
 8001df0:	2a0b      	cmp	r2, #11
 8001df2:	d916      	bls.n	8001e22 <_malloc_r+0xba>
 8001df4:	1961      	adds	r1, r4, r5
 8001df6:	42a3      	cmp	r3, r4
 8001df8:	6025      	str	r5, [r4, #0]
 8001dfa:	bf18      	it	ne
 8001dfc:	6059      	strne	r1, [r3, #4]
 8001dfe:	6863      	ldr	r3, [r4, #4]
 8001e00:	bf08      	it	eq
 8001e02:	6031      	streq	r1, [r6, #0]
 8001e04:	5162      	str	r2, [r4, r5]
 8001e06:	604b      	str	r3, [r1, #4]
 8001e08:	4638      	mov	r0, r7
 8001e0a:	f104 060b 	add.w	r6, r4, #11
 8001e0e:	f000 f865 	bl	8001edc <__malloc_unlock>
 8001e12:	f026 0607 	bic.w	r6, r6, #7
 8001e16:	1d23      	adds	r3, r4, #4
 8001e18:	1af2      	subs	r2, r6, r3
 8001e1a:	d0b6      	beq.n	8001d8a <_malloc_r+0x22>
 8001e1c:	1b9b      	subs	r3, r3, r6
 8001e1e:	50a3      	str	r3, [r4, r2]
 8001e20:	e7b3      	b.n	8001d8a <_malloc_r+0x22>
 8001e22:	6862      	ldr	r2, [r4, #4]
 8001e24:	42a3      	cmp	r3, r4
 8001e26:	bf0c      	ite	eq
 8001e28:	6032      	streq	r2, [r6, #0]
 8001e2a:	605a      	strne	r2, [r3, #4]
 8001e2c:	e7ec      	b.n	8001e08 <_malloc_r+0xa0>
 8001e2e:	4623      	mov	r3, r4
 8001e30:	6864      	ldr	r4, [r4, #4]
 8001e32:	e7b2      	b.n	8001d9a <_malloc_r+0x32>
 8001e34:	4634      	mov	r4, r6
 8001e36:	6876      	ldr	r6, [r6, #4]
 8001e38:	e7b9      	b.n	8001dae <_malloc_r+0x46>
 8001e3a:	230c      	movs	r3, #12
 8001e3c:	603b      	str	r3, [r7, #0]
 8001e3e:	4638      	mov	r0, r7
 8001e40:	f000 f84c 	bl	8001edc <__malloc_unlock>
 8001e44:	e7a1      	b.n	8001d8a <_malloc_r+0x22>
 8001e46:	6025      	str	r5, [r4, #0]
 8001e48:	e7de      	b.n	8001e08 <_malloc_r+0xa0>
 8001e4a:	bf00      	nop
 8001e4c:	200001b4 	.word	0x200001b4

08001e50 <_realloc_r>:
 8001e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e54:	4680      	mov	r8, r0
 8001e56:	4614      	mov	r4, r2
 8001e58:	460e      	mov	r6, r1
 8001e5a:	b921      	cbnz	r1, 8001e66 <_realloc_r+0x16>
 8001e5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e60:	4611      	mov	r1, r2
 8001e62:	f7ff bf81 	b.w	8001d68 <_malloc_r>
 8001e66:	b92a      	cbnz	r2, 8001e74 <_realloc_r+0x24>
 8001e68:	f7ff ff14 	bl	8001c94 <_free_r>
 8001e6c:	4625      	mov	r5, r4
 8001e6e:	4628      	mov	r0, r5
 8001e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e74:	f000 f838 	bl	8001ee8 <_malloc_usable_size_r>
 8001e78:	4284      	cmp	r4, r0
 8001e7a:	4607      	mov	r7, r0
 8001e7c:	d802      	bhi.n	8001e84 <_realloc_r+0x34>
 8001e7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001e82:	d812      	bhi.n	8001eaa <_realloc_r+0x5a>
 8001e84:	4621      	mov	r1, r4
 8001e86:	4640      	mov	r0, r8
 8001e88:	f7ff ff6e 	bl	8001d68 <_malloc_r>
 8001e8c:	4605      	mov	r5, r0
 8001e8e:	2800      	cmp	r0, #0
 8001e90:	d0ed      	beq.n	8001e6e <_realloc_r+0x1e>
 8001e92:	42bc      	cmp	r4, r7
 8001e94:	4622      	mov	r2, r4
 8001e96:	4631      	mov	r1, r6
 8001e98:	bf28      	it	cs
 8001e9a:	463a      	movcs	r2, r7
 8001e9c:	f7ff fed2 	bl	8001c44 <memcpy>
 8001ea0:	4631      	mov	r1, r6
 8001ea2:	4640      	mov	r0, r8
 8001ea4:	f7ff fef6 	bl	8001c94 <_free_r>
 8001ea8:	e7e1      	b.n	8001e6e <_realloc_r+0x1e>
 8001eaa:	4635      	mov	r5, r6
 8001eac:	e7df      	b.n	8001e6e <_realloc_r+0x1e>
	...

08001eb0 <_sbrk_r>:
 8001eb0:	b538      	push	{r3, r4, r5, lr}
 8001eb2:	4d06      	ldr	r5, [pc, #24]	; (8001ecc <_sbrk_r+0x1c>)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	4604      	mov	r4, r0
 8001eb8:	4608      	mov	r0, r1
 8001eba:	602b      	str	r3, [r5, #0]
 8001ebc:	f7fe fba6 	bl	800060c <_sbrk>
 8001ec0:	1c43      	adds	r3, r0, #1
 8001ec2:	d102      	bne.n	8001eca <_sbrk_r+0x1a>
 8001ec4:	682b      	ldr	r3, [r5, #0]
 8001ec6:	b103      	cbz	r3, 8001eca <_sbrk_r+0x1a>
 8001ec8:	6023      	str	r3, [r4, #0]
 8001eca:	bd38      	pop	{r3, r4, r5, pc}
 8001ecc:	200001bc 	.word	0x200001bc

08001ed0 <__malloc_lock>:
 8001ed0:	4801      	ldr	r0, [pc, #4]	; (8001ed8 <__malloc_lock+0x8>)
 8001ed2:	f000 b811 	b.w	8001ef8 <__retarget_lock_acquire_recursive>
 8001ed6:	bf00      	nop
 8001ed8:	200001c0 	.word	0x200001c0

08001edc <__malloc_unlock>:
 8001edc:	4801      	ldr	r0, [pc, #4]	; (8001ee4 <__malloc_unlock+0x8>)
 8001ede:	f000 b80c 	b.w	8001efa <__retarget_lock_release_recursive>
 8001ee2:	bf00      	nop
 8001ee4:	200001c0 	.word	0x200001c0

08001ee8 <_malloc_usable_size_r>:
 8001ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001eec:	1f18      	subs	r0, r3, #4
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	bfbc      	itt	lt
 8001ef2:	580b      	ldrlt	r3, [r1, r0]
 8001ef4:	18c0      	addlt	r0, r0, r3
 8001ef6:	4770      	bx	lr

08001ef8 <__retarget_lock_acquire_recursive>:
 8001ef8:	4770      	bx	lr

08001efa <__retarget_lock_release_recursive>:
 8001efa:	4770      	bx	lr

08001efc <_init>:
 8001efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001efe:	bf00      	nop
 8001f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f02:	bc08      	pop	{r3}
 8001f04:	469e      	mov	lr, r3
 8001f06:	4770      	bx	lr

08001f08 <_fini>:
 8001f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f0a:	bf00      	nop
 8001f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f0e:	bc08      	pop	{r3}
 8001f10:	469e      	mov	lr, r3
 8001f12:	4770      	bx	lr
