
PWMEjemplo1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004f8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000690  08000698  00010698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000690  08000690  00010698  2**0
                  CONTENTS
  4 .ARM          00000000  08000690  08000690  00010698  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000690  08000698  00010698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000690  08000690  00010690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000694  08000694  00010694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000000  08000698  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08000698  00020034  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010698  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ad0  00000000  00000000  000106c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002fa  00000000  00000000  00011192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  00011490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000060  00000000  00000000  00011518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ee9b  00000000  00000000  00011578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000e94  00000000  00000000  00020413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054400  00000000  00000000  000212a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000756a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000128  00000000  00000000  000756f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000678 	.word	0x08000678

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000678 	.word	0x08000678

080001d8 <PWD_config>:

// *************** // PWM EJEMPLO1 // *************** //

// Configuración para el TIM2

void PWD_config(void){
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	// Activamos la señal de reloj del TIM2
	RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 80001dc:	4b25      	ldr	r3, [pc, #148]	; (8000274 <PWD_config+0x9c>)
 80001de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001e0:	4a24      	ldr	r2, [pc, #144]	; (8000274 <PWD_config+0x9c>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6413      	str	r3, [r2, #64]	; 0x40

	/* 2. Configuración del modo del timer (UP or DOWN) */

	// Configuramos el timer en modo UP
	TIM2 -> CR1 &= ~(TIM_CR1_DIR);
 80001e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001f2:	f023 0310 	bic.w	r3, r3, #16
 80001f6:	6013      	str	r3, [r2, #0]

	/* 3. Configuración del Prescaler */
	TIM2 -> PSC =  16000 -1;		// Valor en ms
 80001f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001fc:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000200:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo */
	TIM2 -> ARR = 20;
 8000202:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000206:	2214      	movs	r2, #20
 8000208:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse  */
	TIM2 -> CR1 |= TIM_CR1_CEN;
 800020a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000214:	f043 0301 	orr.w	r3, r3, #1
 8000218:	6013      	str	r3, [r2, #0]

	// Configuramos el duty
	TIM2 -> CCR1 = 1;
 800021a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800021e:	2201      	movs	r2, #1
 8000220:	635a      	str	r2, [r3, #52]	; 0x34

	// Ponemos el contador (CNT) en cero.
	TIM2 -> CNT = 0;
 8000222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000226:	2200      	movs	r2, #0
 8000228:	625a      	str	r2, [r3, #36]	; 0x24

	/* 6. Configuramos el OutPut Register CCMR1 y CCMR2 */

	// Escoger el canal como salida
	TIM2 -> CCMR1 &= ~TIM_CCMR1_CC1S;		// Ponemos 00: CC1 channel is configured as output.
 800022a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000234:	f023 0303 	bic.w	r3, r3, #3
 8000238:	6193      	str	r3, [r2, #24]

	// Escoger si el Preload está activado
	TIM2 -> CCMR1 |= TIM_CCMR1_OC1PE;
 800023a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000244:	f043 0308 	orr.w	r3, r3, #8
 8000248:	6193      	str	r3, [r2, #24]

	// Configurar el Output compare 1 mode
	TIM2 -> CCMR1 |= (0b110 << TIM_CCMR1_OC1M_Pos);	//(~TIM_CCMR1_OC1M_0)
 800024a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000254:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000258:	6193      	str	r3, [r2, #24]

	/* 7. Activamos el enable a través del CCER */
	TIM2 -> CCER |= TIM_CCER_CC1E;
 800025a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800025e:	6a1b      	ldr	r3, [r3, #32]
 8000260:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000264:	f043 0301 	orr.w	r3, r3, #1
 8000268:	6213      	str	r3, [r2, #32]
}
 800026a:	bf00      	nop
 800026c:	46bd      	mov	sp, r7
 800026e:	bc80      	pop	{r7}
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40023800 	.word	0x40023800

08000278 <delay>:

void delay(int time){
 8000278:	b480      	push	{r7}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	// Con este ciclo se genera un intervalo de tiempo en el programa (no tiene otro objetivo)
	for (int i = 0; i <= time; i++){
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
 8000284:	e003      	b.n	800028e <delay+0x16>
		__NOP();
 8000286:	bf00      	nop
	for (int i = 0; i <= time; i++){
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	3301      	adds	r3, #1
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	68fa      	ldr	r2, [r7, #12]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	429a      	cmp	r2, r3
 8000294:	ddf7      	ble.n	8000286 <delay+0xe>
	}
}
 8000296:	bf00      	nop
 8000298:	bf00      	nop
 800029a:	3714      	adds	r7, #20
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
	...

080002a4 <main>:

GPIO_Handler_t 	handlerStateLED 	= {0};	// StateLED
GPIO_Handler_t	handlerPWDTimer		= {0};
int main(void){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0

	// Configuración el State LED
	handlerStateLED.pGPIOx								= GPIOA;
 80002a8:	4b20      	ldr	r3, [pc, #128]	; (800032c <main+0x88>)
 80002aa:	4a21      	ldr	r2, [pc, #132]	; (8000330 <main+0x8c>)
 80002ac:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 80002ae:	4b1f      	ldr	r3, [pc, #124]	; (800032c <main+0x88>)
 80002b0:	2205      	movs	r2, #5
 80002b2:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 80002b4:	4b1d      	ldr	r3, [pc, #116]	; (800032c <main+0x88>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 80002ba:	4b1c      	ldr	r3, [pc, #112]	; (800032c <main+0x88>)
 80002bc:	2200      	movs	r2, #0
 80002be:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 80002c0:	4b1a      	ldr	r3, [pc, #104]	; (800032c <main+0x88>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	71da      	strb	r2, [r3, #7]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 80002c6:	4b19      	ldr	r3, [pc, #100]	; (800032c <main+0x88>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	719a      	strb	r2, [r3, #6]

	//Cargamos la configuración
	GPIO_Config(&handlerStateLED);
 80002cc:	4817      	ldr	r0, [pc, #92]	; (800032c <main+0x88>)
 80002ce:	f000 f85d 	bl	800038c <GPIO_Config>

	GPIO_WritePin(&handlerStateLED, SET);
 80002d2:	2101      	movs	r1, #1
 80002d4:	4815      	ldr	r0, [pc, #84]	; (800032c <main+0x88>)
 80002d6:	f000 f981 	bl	80005dc <GPIO_WritePin>

	// Configuración del PWD
	handlerPWDTimer.pGPIOx								= GPIOA;
 80002da:	4b16      	ldr	r3, [pc, #88]	; (8000334 <main+0x90>)
 80002dc:	4a14      	ldr	r2, [pc, #80]	; (8000330 <main+0x8c>)
 80002de:	601a      	str	r2, [r3, #0]
	handlerPWDTimer.GPIO_PinConfig.GPIO_PinNumber		= PIN_0;
 80002e0:	4b14      	ldr	r3, [pc, #80]	; (8000334 <main+0x90>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	711a      	strb	r2, [r3, #4]
	handlerPWDTimer.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 80002e6:	4b13      	ldr	r3, [pc, #76]	; (8000334 <main+0x90>)
 80002e8:	2202      	movs	r2, #2
 80002ea:	715a      	strb	r2, [r3, #5]
	handlerPWDTimer.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 80002ec:	4b11      	ldr	r3, [pc, #68]	; (8000334 <main+0x90>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	721a      	strb	r2, [r3, #8]
	handlerPWDTimer.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 80002f2:	4b10      	ldr	r3, [pc, #64]	; (8000334 <main+0x90>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	71da      	strb	r2, [r3, #7]
	handlerPWDTimer.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 80002f8:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <main+0x90>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	719a      	strb	r2, [r3, #6]
	handlerPWDTimer.GPIO_PinConfig.GPIO_PinAltFunMode	= AF1;
 80002fe:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <main+0x90>)
 8000300:	2201      	movs	r2, #1
 8000302:	725a      	strb	r2, [r3, #9]

	//Cargamos la configuración
	GPIO_Config(&handlerPWDTimer);
 8000304:	480b      	ldr	r0, [pc, #44]	; (8000334 <main+0x90>)
 8000306:	f000 f841 	bl	800038c <GPIO_Config>

	PWD_config();
 800030a:	f7ff ff65 	bl	80001d8 <PWD_config>

	while(1){
		TIM2 -> CCR1 = 2;
 800030e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000312:	2202      	movs	r2, #2
 8000314:	635a      	str	r2, [r3, #52]	; 0x34

		delay(10000);
 8000316:	f242 7010 	movw	r0, #10000	; 0x2710
 800031a:	f7ff ffad 	bl	8000278 <delay>

		TIM2 -> CCR1 = 1;
 800031e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000322:	2201      	movs	r2, #1
 8000324:	635a      	str	r2, [r3, #52]	; 0x34
		__NOP();
 8000326:	bf00      	nop
		TIM2 -> CCR1 = 2;
 8000328:	e7f1      	b.n	800030e <main+0x6a>
 800032a:	bf00      	nop
 800032c:	2000001c 	.word	0x2000001c
 8000330:	40020000 	.word	0x40020000
 8000334:	20000028 	.word	0x20000028

08000338 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000338:	480d      	ldr	r0, [pc, #52]	; (8000370 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800033c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000340:	480c      	ldr	r0, [pc, #48]	; (8000374 <LoopForever+0x6>)
  ldr r1, =_edata
 8000342:	490d      	ldr	r1, [pc, #52]	; (8000378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000344:	4a0d      	ldr	r2, [pc, #52]	; (800037c <LoopForever+0xe>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000348:	e002      	b.n	8000350 <LoopCopyDataInit>

0800034a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800034c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034e:	3304      	adds	r3, #4

08000350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000354:	d3f9      	bcc.n	800034a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000356:	4a0a      	ldr	r2, [pc, #40]	; (8000380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000358:	4c0a      	ldr	r4, [pc, #40]	; (8000384 <LoopForever+0x16>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800035c:	e001      	b.n	8000362 <LoopFillZerobss>

0800035e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000360:	3204      	adds	r2, #4

08000362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000364:	d3fb      	bcc.n	800035e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000366:	f000 f963 	bl	8000630 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036a:	f7ff ff9b 	bl	80002a4 <main>

0800036e <LoopForever>:

LoopForever:
    b LoopForever
 800036e:	e7fe      	b.n	800036e <LoopForever>
  ldr   r0, =_estack
 8000370:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000378:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800037c:	08000698 	.word	0x08000698
  ldr r2, =_sbss
 8000380:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000384:	20000034 	.word	0x20000034

08000388 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000388:	e7fe      	b.n	8000388 <ADC_IRQHandler>
	...

0800038c <GPIO_Config>:
orden estricto para poder que el sistema permita configurar el periférico X.
Lo primero y más importante es activar la señal del reloj principal hacia ese
elemento específico (relacionado con el periférico RCC), a esto llamaremos
simplemente "activar el periférico o activar la señal de reloj del periférico".
*/
void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 800038c:	b480      	push	{r7}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8000398:	2300      	movs	r3, #0
 800039a:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periférico
	// Verificamos para GPIOA
	if (pGPIOHandler -> pGPIOx == GPIOA){
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a87      	ldr	r2, [pc, #540]	; (80005c0 <GPIO_Config+0x234>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d106      	bne.n	80003b4 <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOA
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 80003a6:	4b87      	ldr	r3, [pc, #540]	; (80005c4 <GPIO_Config+0x238>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003aa:	4a86      	ldr	r2, [pc, #536]	; (80005c4 <GPIO_Config+0x238>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6313      	str	r3, [r2, #48]	; 0x30
 80003b2:	e03a      	b.n	800042a <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if (pGPIOHandler -> pGPIOx == GPIOB){
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a83      	ldr	r2, [pc, #524]	; (80005c8 <GPIO_Config+0x23c>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d106      	bne.n	80003cc <GPIO_Config+0x40>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOB
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 80003be:	4b81      	ldr	r3, [pc, #516]	; (80005c4 <GPIO_Config+0x238>)
 80003c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c2:	4a80      	ldr	r2, [pc, #512]	; (80005c4 <GPIO_Config+0x238>)
 80003c4:	f043 0302 	orr.w	r3, r3, #2
 80003c8:	6313      	str	r3, [r2, #48]	; 0x30
 80003ca:	e02e      	b.n	800042a <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOC
	else if (pGPIOHandler -> pGPIOx == GPIOC){
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a7e      	ldr	r2, [pc, #504]	; (80005cc <GPIO_Config+0x240>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d106      	bne.n	80003e4 <GPIO_Config+0x58>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOC
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 80003d6:	4b7b      	ldr	r3, [pc, #492]	; (80005c4 <GPIO_Config+0x238>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003da:	4a7a      	ldr	r2, [pc, #488]	; (80005c4 <GPIO_Config+0x238>)
 80003dc:	f043 0304 	orr.w	r3, r3, #4
 80003e0:	6313      	str	r3, [r2, #48]	; 0x30
 80003e2:	e022      	b.n	800042a <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOD
	else if (pGPIOHandler -> pGPIOx == GPIOD){
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a79      	ldr	r2, [pc, #484]	; (80005d0 <GPIO_Config+0x244>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <GPIO_Config+0x70>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOD
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 80003ee:	4b75      	ldr	r3, [pc, #468]	; (80005c4 <GPIO_Config+0x238>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f2:	4a74      	ldr	r2, [pc, #464]	; (80005c4 <GPIO_Config+0x238>)
 80003f4:	f043 0308 	orr.w	r3, r3, #8
 80003f8:	6313      	str	r3, [r2, #48]	; 0x30
 80003fa:	e016      	b.n	800042a <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOE
	else if (pGPIOHandler -> pGPIOx == GPIOE){
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a74      	ldr	r2, [pc, #464]	; (80005d4 <GPIO_Config+0x248>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <GPIO_Config+0x88>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOE
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8000406:	4b6f      	ldr	r3, [pc, #444]	; (80005c4 <GPIO_Config+0x238>)
 8000408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040a:	4a6e      	ldr	r2, [pc, #440]	; (80005c4 <GPIO_Config+0x238>)
 800040c:	f043 0310 	orr.w	r3, r3, #16
 8000410:	6313      	str	r3, [r2, #48]	; 0x30
 8000412:	e00a      	b.n	800042a <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOH
	else if (pGPIOHandler -> pGPIOx == GPIOH){
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a6f      	ldr	r2, [pc, #444]	; (80005d8 <GPIO_Config+0x24c>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d105      	bne.n	800042a <GPIO_Config+0x9e>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOH
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 800041e:	4b69      	ldr	r3, [pc, #420]	; (80005c4 <GPIO_Config+0x238>)
 8000420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000422:	4a68      	ldr	r2, [pc, #416]	; (80005c4 <GPIO_Config+0x238>)
 8000424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000428:	6313      	str	r3, [r2, #48]	; 0x30
	// Después de activado, podemos comenzar a configurar.

	// 2) Configurando el registro GPIOx_MODER
	// Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y todo eso lo cargamos en la variable aux_Config
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	795b      	ldrb	r3, [r3, #5]
 800042e:	461a      	mov	r2, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	791b      	ldrb	r3, [r3, #4]
 8000434:	005b      	lsls	r3, r3, #1
 8000436:	fa02 f303 	lsl.w	r3, r2, r3
 800043a:	60fb      	str	r3, [r7, #12]

	// Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (debemos escribir 0b00)
	// para lo cual aplicamos una máscara y una operación bitwise AND
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	791b      	ldrb	r3, [r3, #4]
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	2103      	movs	r1, #3
 800044a:	fa01 f303 	lsl.w	r3, r1, r3
 800044e:	43db      	mvns	r3, r3
 8000450:	4619      	mov	r1, r3
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	400a      	ands	r2, r1
 8000458:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler -> pGPIOx -> MODER |= auxConfig;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	6819      	ldr	r1, [r3, #0]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	68fa      	ldr	r2, [r7, #12]
 8000466:	430a      	orrs	r2, r1
 8000468:	601a      	str	r2, [r3, #0]

	// 3) Configurando el registro GPIOx_OTYPER
	// De nuevo, leemos y movemos el valor un número "PinNumber" de veces
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	7a1b      	ldrb	r3, [r3, #8]
 800046e:	461a      	mov	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	791b      	ldrb	r3, [r3, #4]
 8000474:	fa02 f303 	lsl.w	r3, r2, r3
 8000478:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler -> pGPIOx -> OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	685a      	ldr	r2, [r3, #4]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	791b      	ldrb	r3, [r3, #4]
 8000484:	4619      	mov	r1, r3
 8000486:	2301      	movs	r3, #1
 8000488:	408b      	lsls	r3, r1
 800048a:	43db      	mvns	r3, r3
 800048c:	4619      	mov	r1, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	400a      	ands	r2, r1
 8000494:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OTYPER |= auxConfig;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	6859      	ldr	r1, [r3, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	68fa      	ldr	r2, [r7, #12]
 80004a2:	430a      	orrs	r2, r1
 80004a4:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	799b      	ldrb	r3, [r3, #6]
 80004aa:	461a      	mov	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	791b      	ldrb	r3, [r3, #4]
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	fa02 f303 	lsl.w	r3, r2, r3
 80004b6:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler -> pGPIOx -> OSPEEDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	689a      	ldr	r2, [r3, #8]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	791b      	ldrb	r3, [r3, #4]
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	2103      	movs	r1, #3
 80004c6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ca:	43db      	mvns	r3, r3
 80004cc:	4619      	mov	r1, r3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	400a      	ands	r2, r1
 80004d4:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OSPEEDR |= auxConfig;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	6899      	ldr	r1, [r3, #8]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	430a      	orrs	r2, r1
 80004e4:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante.
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	79db      	ldrb	r3, [r3, #7]
 80004ea:	461a      	mov	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	791b      	ldrb	r3, [r3, #4]
 80004f0:	005b      	lsls	r3, r3, #1
 80004f2:	fa02 f303 	lsl.w	r3, r2, r3
 80004f6:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler -> pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	68da      	ldr	r2, [r3, #12]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	791b      	ldrb	r3, [r3, #4]
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	2103      	movs	r1, #3
 8000506:	fa01 f303 	lsl.w	r3, r1, r3
 800050a:	43db      	mvns	r3, r3
 800050c:	4619      	mov	r1, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	400a      	ands	r2, r1
 8000514:	60da      	str	r2, [r3, #12]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> PUPDR |= auxConfig;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	68d9      	ldr	r1, [r3, #12]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	68fa      	ldr	r2, [r7, #12]
 8000522:	430a      	orrs	r2, r1
 8000524:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuración de las funciones alternativas... Se verá luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	795b      	ldrb	r3, [r3, #5]
 800052a:	2b02      	cmp	r3, #2
 800052c:	d143      	bne.n	80005b6 <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	791b      	ldrb	r3, [r3, #4]
 8000532:	2b07      	cmp	r3, #7
 8000534:	d81f      	bhi.n	8000576 <GPIO_Config+0x1ea>
			// Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	791b      	ldrb	r3, [r3, #4]
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	60bb      	str	r3, [r7, #8]

			// Limpiamos primero la posición del registro que deseamos escribir a continuación
			pGPIOHandler -> pGPIOx -> AFR[0] &= ~(0b1111 << auxPosition);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	6a1a      	ldr	r2, [r3, #32]
 8000544:	210f      	movs	r1, #15
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	fa01 f303 	lsl.w	r3, r1, r3
 800054c:	43db      	mvns	r3, r3
 800054e:	4619      	mov	r1, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	400a      	ands	r2, r1
 8000556:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posición seleccionada
			pGPIOHandler -> pGPIOx -> AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	6a1a      	ldr	r2, [r3, #32]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	7a5b      	ldrb	r3, [r3, #9]
 8000562:	4619      	mov	r1, r3
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	fa01 f303 	lsl.w	r3, r1, r3
 800056a:	4619      	mov	r1, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	430a      	orrs	r2, r1
 8000572:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurando en la posición seleccionada
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} // Fin del GPIO_Config
 8000574:	e01f      	b.n	80005b6 <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber -8);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	791b      	ldrb	r3, [r3, #4]
 800057a:	3b08      	subs	r3, #8
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx -> AFR[1] &= ~(0b1111 << auxPosition);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000586:	210f      	movs	r1, #15
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	43db      	mvns	r3, r3
 8000590:	4619      	mov	r1, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	400a      	ands	r2, r1
 8000598:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	7a5b      	ldrb	r3, [r3, #9]
 80005a4:	4619      	mov	r1, r3
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	fa01 f303 	lsl.w	r3, r1, r3
 80005ac:	4619      	mov	r1, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	430a      	orrs	r2, r1
 80005b4:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_Config
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	40020000 	.word	0x40020000
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40020400 	.word	0x40020400
 80005cc:	40020800 	.word	0x40020800
 80005d0:	40020c00 	.word	0x40020c00
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40021c00 	.word	0x40021c00

080005dc <GPIO_WritePin>:
 *
 *
Función utilizada para cambiar de estado el pin entregado en el handler, asignando
el valor entregado en la variable newState
*/
void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	460b      	mov	r3, r1
 80005e6:	70fb      	strb	r3, [r7, #3]
	// Limpiamos la posición que deseamos
	// pPinHandler -> pGPIOx -> ODR &= ~(SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
	if(newState == SET){
 80005e8:	78fb      	ldrb	r3, [r7, #3]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d10d      	bne.n	800060a <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler -> pGPIOx -> BSRR |= (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	699a      	ldr	r2, [r3, #24]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	791b      	ldrb	r3, [r3, #4]
 80005f8:	4619      	mov	r1, r3
 80005fa:	2301      	movs	r3, #1
 80005fc:	408b      	lsls	r3, r1
 80005fe:	4619      	mov	r1, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	430a      	orrs	r2, r1
 8000606:	619a      	str	r2, [r3, #24]
	}
	else{
		// Trabajando con la parte alta del registro
		pPinHandler -> pGPIOx -> BSRR |= (SET << (pPinHandler -> GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8000608:	e00d      	b.n	8000626 <GPIO_WritePin+0x4a>
		pPinHandler -> pGPIOx -> BSRR |= (SET << (pPinHandler -> GPIO_PinConfig.GPIO_PinNumber + 16));
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	699a      	ldr	r2, [r3, #24]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	791b      	ldrb	r3, [r3, #4]
 8000614:	3310      	adds	r3, #16
 8000616:	2101      	movs	r1, #1
 8000618:	fa01 f303 	lsl.w	r3, r1, r3
 800061c:	4619      	mov	r1, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	430a      	orrs	r2, r1
 8000624:	619a      	str	r2, [r3, #24]
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <__libc_init_array>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	4d0d      	ldr	r5, [pc, #52]	; (8000668 <__libc_init_array+0x38>)
 8000634:	4c0d      	ldr	r4, [pc, #52]	; (800066c <__libc_init_array+0x3c>)
 8000636:	1b64      	subs	r4, r4, r5
 8000638:	10a4      	asrs	r4, r4, #2
 800063a:	2600      	movs	r6, #0
 800063c:	42a6      	cmp	r6, r4
 800063e:	d109      	bne.n	8000654 <__libc_init_array+0x24>
 8000640:	4d0b      	ldr	r5, [pc, #44]	; (8000670 <__libc_init_array+0x40>)
 8000642:	4c0c      	ldr	r4, [pc, #48]	; (8000674 <__libc_init_array+0x44>)
 8000644:	f000 f818 	bl	8000678 <_init>
 8000648:	1b64      	subs	r4, r4, r5
 800064a:	10a4      	asrs	r4, r4, #2
 800064c:	2600      	movs	r6, #0
 800064e:	42a6      	cmp	r6, r4
 8000650:	d105      	bne.n	800065e <__libc_init_array+0x2e>
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f855 3b04 	ldr.w	r3, [r5], #4
 8000658:	4798      	blx	r3
 800065a:	3601      	adds	r6, #1
 800065c:	e7ee      	b.n	800063c <__libc_init_array+0xc>
 800065e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000662:	4798      	blx	r3
 8000664:	3601      	adds	r6, #1
 8000666:	e7f2      	b.n	800064e <__libc_init_array+0x1e>
 8000668:	08000690 	.word	0x08000690
 800066c:	08000690 	.word	0x08000690
 8000670:	08000690 	.word	0x08000690
 8000674:	08000694 	.word	0x08000694

08000678 <_init>:
 8000678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067a:	bf00      	nop
 800067c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800067e:	bc08      	pop	{r3}
 8000680:	469e      	mov	lr, r3
 8000682:	4770      	bx	lr

08000684 <_fini>:
 8000684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000686:	bf00      	nop
 8000688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800068a:	bc08      	pop	{r3}
 800068c:	469e      	mov	lr, r3
 800068e:	4770      	bx	lr
