
tarea4_jutoroa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001580  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001718  08001718  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001718  08001718  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001718  08001718  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001718  08001718  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001718  08001718  00011718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800171c  0800171c  0001171c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001720  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000004  08001724  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08001724  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000020bc  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000073e  00000000  00000000  000220ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000210  00000000  00000000  00022828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001c8  00000000  00000000  00022a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f080  00000000  00000000  00022c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000023c1  00000000  00000000  00031c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054d11  00000000  00000000  00034041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00088d52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006a8  00000000  00000000  00088da4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001700 	.word	0x08001700

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08001700 	.word	0x08001700

080001d8 <main>:
void initSystem(void);
void setNumber(uint32_t number);

// *************** // MAIN // *************** //
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
		// Inicializamos el sistema
		initSystem();
 80001dc:	f000 f86e 	bl	80002bc <initSystem>
		//GPIO_WritePin(&handlerSwitchLED, SET);
	    /* Ciclo principal */
		while(1){

			// Se prende y se apaga el SwitchLED cada vez que se oprime el botón con una máscara de comprobación.
			if(auxCounter == 1 && buttonControl == 1){
 80001e0:	4b30      	ldr	r3, [pc, #192]	; (80002a4 <main+0xcc>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d125      	bne.n	8000234 <main+0x5c>
 80001e8:	4b2f      	ldr	r3, [pc, #188]	; (80002a8 <main+0xd0>)
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	2b01      	cmp	r3, #1
 80001ee:	d121      	bne.n	8000234 <main+0x5c>
				// Se apaga el SwitchLED
				LEDState ^= 1;
 80001f0:	4b2e      	ldr	r3, [pc, #184]	; (80002ac <main+0xd4>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	f083 0301 	eor.w	r3, r3, #1
 80001f8:	b2da      	uxtb	r2, r3
 80001fa:	4b2c      	ldr	r3, [pc, #176]	; (80002ac <main+0xd4>)
 80001fc:	701a      	strb	r2, [r3, #0]
				GPIO_WritePin(&handlerSwitchLED, LEDState);
 80001fe:	4b2b      	ldr	r3, [pc, #172]	; (80002ac <main+0xd4>)
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	4619      	mov	r1, r3
 8000204:	482a      	ldr	r0, [pc, #168]	; (80002b0 <main+0xd8>)
 8000206:	f001 f8d3 	bl	80013b0 <GPIO_WritePin>
				// Se reinicia el buttonControl para la máscara de comprobación
				buttonControl = 0;
 800020a:	4b27      	ldr	r3, [pc, #156]	; (80002a8 <main+0xd0>)
 800020c:	2200      	movs	r2, #0
 800020e:	701a      	strb	r2, [r3, #0]
				// Se aumenta en 1 el contador de unidades
				counterUnidades += 1;
 8000210:	4b28      	ldr	r3, [pc, #160]	; (80002b4 <main+0xdc>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	3301      	adds	r3, #1
 8000216:	4a27      	ldr	r2, [pc, #156]	; (80002b4 <main+0xdc>)
 8000218:	6013      	str	r3, [r2, #0]

				// Si el contador de unidades llega a 10, se reinician las unidades a 0 y se aumenta el acarreo
				if(counterUnidades > 9){
 800021a:	4b26      	ldr	r3, [pc, #152]	; (80002b4 <main+0xdc>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	2b09      	cmp	r3, #9
 8000220:	d931      	bls.n	8000286 <main+0xae>
					counterUnidades = 0;
 8000222:	4b24      	ldr	r3, [pc, #144]	; (80002b4 <main+0xdc>)
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
					counterDecenas += 1;
 8000228:	4b23      	ldr	r3, [pc, #140]	; (80002b8 <main+0xe0>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	4a22      	ldr	r2, [pc, #136]	; (80002b8 <main+0xe0>)
 8000230:	6013      	str	r3, [r2, #0]
				if(counterUnidades > 9){
 8000232:	e028      	b.n	8000286 <main+0xae>
				}
			// Se prende y se apaga el SwitchLED cada vez que se oprime el botón con una máscara de comprobación.
			}else if(auxCounter == 0 && buttonControl == 1){
 8000234:	4b1b      	ldr	r3, [pc, #108]	; (80002a4 <main+0xcc>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d124      	bne.n	8000286 <main+0xae>
 800023c:	4b1a      	ldr	r3, [pc, #104]	; (80002a8 <main+0xd0>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d120      	bne.n	8000286 <main+0xae>
				// Se prende el SwitchLED
				LEDState ^= 1;
 8000244:	4b19      	ldr	r3, [pc, #100]	; (80002ac <main+0xd4>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f083 0301 	eor.w	r3, r3, #1
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4b17      	ldr	r3, [pc, #92]	; (80002ac <main+0xd4>)
 8000250:	701a      	strb	r2, [r3, #0]
				GPIO_WritePin(&handlerSwitchLED, LEDState);
 8000252:	4b16      	ldr	r3, [pc, #88]	; (80002ac <main+0xd4>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	4619      	mov	r1, r3
 8000258:	4815      	ldr	r0, [pc, #84]	; (80002b0 <main+0xd8>)
 800025a:	f001 f8a9 	bl	80013b0 <GPIO_WritePin>
				// Se reinicia el buttonControl para la máscara de comprobación
				buttonControl = 0;
 800025e:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <main+0xd0>)
 8000260:	2200      	movs	r2, #0
 8000262:	701a      	strb	r2, [r3, #0]
				// Se aumenta en 1 el contador de unidades
				counterUnidades += 1;
 8000264:	4b13      	ldr	r3, [pc, #76]	; (80002b4 <main+0xdc>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	3301      	adds	r3, #1
 800026a:	4a12      	ldr	r2, [pc, #72]	; (80002b4 <main+0xdc>)
 800026c:	6013      	str	r3, [r2, #0]

				// Si el contador de unidades llega a 10, se reinician las unidades a 0 y se aumenta el acarreo
				if(counterUnidades > 9){
 800026e:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <main+0xdc>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	2b09      	cmp	r3, #9
 8000274:	d907      	bls.n	8000286 <main+0xae>
					counterUnidades = 0;
 8000276:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <main+0xdc>)
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
					counterDecenas += 1;
 800027c:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <main+0xe0>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	3301      	adds	r3, #1
 8000282:	4a0d      	ldr	r2, [pc, #52]	; (80002b8 <main+0xe0>)
 8000284:	6013      	str	r3, [r2, #0]
				}

			}
			// Si ambos contadores llegan a 9 (Número 99) se reinicia el contador.
			if(counterDecenas > 9 && counterUnidades == 0){
 8000286:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <main+0xe0>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b09      	cmp	r3, #9
 800028c:	d9a8      	bls.n	80001e0 <main+0x8>
 800028e:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <main+0xdc>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d1a4      	bne.n	80001e0 <main+0x8>
				counterUnidades = 0;
 8000296:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <main+0xdc>)
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
				counterDecenas = 0;
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <main+0xe0>)
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
			if(auxCounter == 1 && buttonControl == 1){
 80002a2:	e79d      	b.n	80001e0 <main+0x8>
 80002a4:	200000e0 	.word	0x200000e0
 80002a8:	200000e4 	.word	0x200000e4
 80002ac:	20000000 	.word	0x20000000
 80002b0:	2000002c 	.word	0x2000002c
 80002b4:	200000d8 	.word	0x200000d8
 80002b8:	200000dc 	.word	0x200000dc

080002bc <initSystem>:

//***********// InitSystem //***********//

// Función que define la configuración de todos los pines y periféricos

void initSystem(void){
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0

	// Configuración el State LED
	handlerStateLED.pGPIOx								= GPIOA;
 80002c0:	4ba9      	ldr	r3, [pc, #676]	; (8000568 <initSystem+0x2ac>)
 80002c2:	4aaa      	ldr	r2, [pc, #680]	; (800056c <initSystem+0x2b0>)
 80002c4:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 80002c6:	4ba8      	ldr	r3, [pc, #672]	; (8000568 <initSystem+0x2ac>)
 80002c8:	2205      	movs	r2, #5
 80002ca:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 80002cc:	4ba6      	ldr	r3, [pc, #664]	; (8000568 <initSystem+0x2ac>)
 80002ce:	2201      	movs	r2, #1
 80002d0:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 80002d2:	4ba5      	ldr	r3, [pc, #660]	; (8000568 <initSystem+0x2ac>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 80002d8:	4ba3      	ldr	r3, [pc, #652]	; (8000568 <initSystem+0x2ac>)
 80002da:	2200      	movs	r2, #0
 80002dc:	71da      	strb	r2, [r3, #7]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 80002de:	4ba2      	ldr	r3, [pc, #648]	; (8000568 <initSystem+0x2ac>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	719a      	strb	r2, [r3, #6]

	//Cargamos la configuración
	GPIO_Config(&handlerStateLED);
 80002e4:	48a0      	ldr	r0, [pc, #640]	; (8000568 <initSystem+0x2ac>)
 80002e6:	f000 ff3b 	bl	8001160 <GPIO_Config>

	// Configuración el Switch LED
	handlerSwitchLED.pGPIOx								= GPIOA;
 80002ea:	4ba1      	ldr	r3, [pc, #644]	; (8000570 <initSystem+0x2b4>)
 80002ec:	4a9f      	ldr	r2, [pc, #636]	; (800056c <initSystem+0x2b0>)
 80002ee:	601a      	str	r2, [r3, #0]
	handlerSwitchLED.GPIO_PinConfig.GPIO_PinNumber		= PIN_6;
 80002f0:	4b9f      	ldr	r3, [pc, #636]	; (8000570 <initSystem+0x2b4>)
 80002f2:	2206      	movs	r2, #6
 80002f4:	711a      	strb	r2, [r3, #4]
	handlerSwitchLED.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_OUT;
 80002f6:	4b9e      	ldr	r3, [pc, #632]	; (8000570 <initSystem+0x2b4>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	715a      	strb	r2, [r3, #5]
	handlerSwitchLED.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 80002fc:	4b9c      	ldr	r3, [pc, #624]	; (8000570 <initSystem+0x2b4>)
 80002fe:	2200      	movs	r2, #0
 8000300:	721a      	strb	r2, [r3, #8]
	handlerSwitchLED.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000302:	4b9b      	ldr	r3, [pc, #620]	; (8000570 <initSystem+0x2b4>)
 8000304:	2200      	movs	r2, #0
 8000306:	71da      	strb	r2, [r3, #7]
	handlerSwitchLED.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_MEDIUM;
 8000308:	4b99      	ldr	r3, [pc, #612]	; (8000570 <initSystem+0x2b4>)
 800030a:	2201      	movs	r2, #1
 800030c:	719a      	strb	r2, [r3, #6]

	//Cargamos la configuración
	GPIO_Config(&handlerSwitchLED);
 800030e:	4898      	ldr	r0, [pc, #608]	; (8000570 <initSystem+0x2b4>)
 8000310:	f000 ff26 	bl	8001160 <GPIO_Config>

	// Prendemos el Switch LED
	GPIO_WritePin(&handlerSwitchLED, SET);
 8000314:	2101      	movs	r1, #1
 8000316:	4896      	ldr	r0, [pc, #600]	; (8000570 <initSystem+0x2b4>)
 8000318:	f001 f84a 	bl	80013b0 <GPIO_WritePin>

	// Configuración del Transistor Unidades
	handlerTransistorUnidades.pGPIOx								= GPIOB;
 800031c:	4b95      	ldr	r3, [pc, #596]	; (8000574 <initSystem+0x2b8>)
 800031e:	4a96      	ldr	r2, [pc, #600]	; (8000578 <initSystem+0x2bc>)
 8000320:	601a      	str	r2, [r3, #0]
	handlerTransistorUnidades.GPIO_PinConfig.GPIO_PinNumber			= PIN_5;
 8000322:	4b94      	ldr	r3, [pc, #592]	; (8000574 <initSystem+0x2b8>)
 8000324:	2205      	movs	r2, #5
 8000326:	711a      	strb	r2, [r3, #4]
	handlerTransistorUnidades.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 8000328:	4b92      	ldr	r3, [pc, #584]	; (8000574 <initSystem+0x2b8>)
 800032a:	2201      	movs	r2, #1
 800032c:	715a      	strb	r2, [r3, #5]
	handlerTransistorUnidades.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 800032e:	4b91      	ldr	r3, [pc, #580]	; (8000574 <initSystem+0x2b8>)
 8000330:	2200      	movs	r2, #0
 8000332:	721a      	strb	r2, [r3, #8]
	handlerTransistorUnidades.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000334:	4b8f      	ldr	r3, [pc, #572]	; (8000574 <initSystem+0x2b8>)
 8000336:	2200      	movs	r2, #0
 8000338:	71da      	strb	r2, [r3, #7]
	handlerTransistorUnidades.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_MEDIUM;
 800033a:	4b8e      	ldr	r3, [pc, #568]	; (8000574 <initSystem+0x2b8>)
 800033c:	2201      	movs	r2, #1
 800033e:	719a      	strb	r2, [r3, #6]

	//Cargamos la configuración
	GPIO_Config(&handlerTransistorUnidades);
 8000340:	488c      	ldr	r0, [pc, #560]	; (8000574 <initSystem+0x2b8>)
 8000342:	f000 ff0d 	bl	8001160 <GPIO_Config>

	// Configuración del Transistor Decenas
	handlerTransistorDecenas.pGPIOx									= GPIOC;
 8000346:	4b8d      	ldr	r3, [pc, #564]	; (800057c <initSystem+0x2c0>)
 8000348:	4a8d      	ldr	r2, [pc, #564]	; (8000580 <initSystem+0x2c4>)
 800034a:	601a      	str	r2, [r3, #0]
	handlerTransistorDecenas.GPIO_PinConfig.GPIO_PinNumber			= PIN_5;
 800034c:	4b8b      	ldr	r3, [pc, #556]	; (800057c <initSystem+0x2c0>)
 800034e:	2205      	movs	r2, #5
 8000350:	711a      	strb	r2, [r3, #4]
	handlerTransistorDecenas.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 8000352:	4b8a      	ldr	r3, [pc, #552]	; (800057c <initSystem+0x2c0>)
 8000354:	2201      	movs	r2, #1
 8000356:	715a      	strb	r2, [r3, #5]
	handlerTransistorDecenas.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 8000358:	4b88      	ldr	r3, [pc, #544]	; (800057c <initSystem+0x2c0>)
 800035a:	2200      	movs	r2, #0
 800035c:	721a      	strb	r2, [r3, #8]
	handlerTransistorDecenas.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 800035e:	4b87      	ldr	r3, [pc, #540]	; (800057c <initSystem+0x2c0>)
 8000360:	2200      	movs	r2, #0
 8000362:	71da      	strb	r2, [r3, #7]
	handlerTransistorDecenas.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_MEDIUM;
 8000364:	4b85      	ldr	r3, [pc, #532]	; (800057c <initSystem+0x2c0>)
 8000366:	2201      	movs	r2, #1
 8000368:	719a      	strb	r2, [r3, #6]

	//Cargamos la configuración
	GPIO_Config(&handlerTransistorDecenas);
 800036a:	4884      	ldr	r0, [pc, #528]	; (800057c <initSystem+0x2c0>)
 800036c:	f000 fef8 	bl	8001160 <GPIO_Config>

	// Desincronizamos los dos display
	handlerTransistorDecenas.pGPIOx -> ODR ^= GPIO_ODR_OD5;
 8000370:	4b82      	ldr	r3, [pc, #520]	; (800057c <initSystem+0x2c0>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	695a      	ldr	r2, [r3, #20]
 8000376:	4b81      	ldr	r3, [pc, #516]	; (800057c <initSystem+0x2c0>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f082 0220 	eor.w	r2, r2, #32
 800037e:	615a      	str	r2, [r3, #20]
//	handlerTransistorDecenas.pGPIOx -> ODR |= GPIO_ODR_OD5;*/

	// Configuración del timer2
	handlerTimer2.ptrTIMx								= TIM2;
 8000380:	4b80      	ldr	r3, [pc, #512]	; (8000584 <initSystem+0x2c8>)
 8000382:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000386:	601a      	str	r2, [r3, #0]
	handlerTimer2.timerConfig.Timer_mode				= TIMER_MODE_UP;
 8000388:	4b7e      	ldr	r3, [pc, #504]	; (8000584 <initSystem+0x2c8>)
 800038a:	2200      	movs	r2, #0
 800038c:	711a      	strb	r2, [r3, #4]
	handlerTimer2.timerConfig.Timer_speed				= TIMER_INCR_SPEED_1ms;
 800038e:	4b7d      	ldr	r3, [pc, #500]	; (8000584 <initSystem+0x2c8>)
 8000390:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000394:	80da      	strh	r2, [r3, #6]
	handlerTimer2.timerConfig.Timer_period				= 250;
 8000396:	4b7b      	ldr	r3, [pc, #492]	; (8000584 <initSystem+0x2c8>)
 8000398:	22fa      	movs	r2, #250	; 0xfa
 800039a:	609a      	str	r2, [r3, #8]

	Timer_Config(&handlerTimer2);
 800039c:	4879      	ldr	r0, [pc, #484]	; (8000584 <initSystem+0x2c8>)
 800039e:	f001 f89b 	bl	80014d8 <Timer_Config>

	// Configuración del timer 4

	handlerTimer4.ptrTIMx								= TIM4;
 80003a2:	4b79      	ldr	r3, [pc, #484]	; (8000588 <initSystem+0x2cc>)
 80003a4:	4a79      	ldr	r2, [pc, #484]	; (800058c <initSystem+0x2d0>)
 80003a6:	601a      	str	r2, [r3, #0]
	handlerTimer4.timerConfig.Timer_mode				= TIMER_MODE_UP;
 80003a8:	4b77      	ldr	r3, [pc, #476]	; (8000588 <initSystem+0x2cc>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	711a      	strb	r2, [r3, #4]
	handlerTimer4.timerConfig.Timer_speed				= TIMER_INCR_SPEED_1ms;
 80003ae:	4b76      	ldr	r3, [pc, #472]	; (8000588 <initSystem+0x2cc>)
 80003b0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80003b4:	80da      	strh	r2, [r3, #6]
	handlerTimer4.timerConfig.Timer_period				= 10;
 80003b6:	4b74      	ldr	r3, [pc, #464]	; (8000588 <initSystem+0x2cc>)
 80003b8:	220a      	movs	r2, #10
 80003ba:	609a      	str	r2, [r3, #8]

	Timer_Config(&handlerTimer4);
 80003bc:	4872      	ldr	r0, [pc, #456]	; (8000588 <initSystem+0x2cc>)
 80003be:	f001 f88b 	bl	80014d8 <Timer_Config>

	// Configuración del EXTI0

	handlerEXTI0.port 		= GPIOA;
 80003c2:	4b73      	ldr	r3, [pc, #460]	; (8000590 <initSystem+0x2d4>)
 80003c4:	4a69      	ldr	r2, [pc, #420]	; (800056c <initSystem+0x2b0>)
 80003c6:	601a      	str	r2, [r3, #0]
	handlerEXTI0.pin		= PIN_0;
 80003c8:	4b71      	ldr	r3, [pc, #452]	; (8000590 <initSystem+0x2d4>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	711a      	strb	r2, [r3, #4]
	handlerEXTI0.trigger	= TRIGGER_FALLING;
 80003ce:	4b70      	ldr	r3, [pc, #448]	; (8000590 <initSystem+0x2d4>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	715a      	strb	r2, [r3, #5]
	handlerEXTI0.PinControl	= GPIO_PUPDR_PULLUP;
 80003d4:	4b6e      	ldr	r3, [pc, #440]	; (8000590 <initSystem+0x2d4>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	719a      	strb	r2, [r3, #6]

	EXTI_Config(&handlerEXTI0);
 80003da:	486d      	ldr	r0, [pc, #436]	; (8000590 <initSystem+0x2d4>)
 80003dc:	f000 fafc 	bl	80009d8 <EXTI_Config>

	// Configuración del EXTI3

	handlerEXTI3.port 		= GPIOC;
 80003e0:	4b6c      	ldr	r3, [pc, #432]	; (8000594 <initSystem+0x2d8>)
 80003e2:	4a67      	ldr	r2, [pc, #412]	; (8000580 <initSystem+0x2c4>)
 80003e4:	601a      	str	r2, [r3, #0]
	handlerEXTI3.pin		= PIN_3;
 80003e6:	4b6b      	ldr	r3, [pc, #428]	; (8000594 <initSystem+0x2d8>)
 80003e8:	2203      	movs	r2, #3
 80003ea:	711a      	strb	r2, [r3, #4]
	handlerEXTI3.trigger	= TRIGGER_FALLING;
 80003ec:	4b69      	ldr	r3, [pc, #420]	; (8000594 <initSystem+0x2d8>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	715a      	strb	r2, [r3, #5]
	handlerEXTI3.PinControl	= GPIO_PUPDR_PULLUP;
 80003f2:	4b68      	ldr	r3, [pc, #416]	; (8000594 <initSystem+0x2d8>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	719a      	strb	r2, [r3, #6]

	EXTI_Config(&handlerEXTI3);
 80003f8:	4866      	ldr	r0, [pc, #408]	; (8000594 <initSystem+0x2d8>)
 80003fa:	f000 faed 	bl	80009d8 <EXTI_Config>

	// Configuración Segmento A

	handlerSevenSegmentsA.pGPIOx								= GPIOB;
 80003fe:	4b66      	ldr	r3, [pc, #408]	; (8000598 <initSystem+0x2dc>)
 8000400:	4a5d      	ldr	r2, [pc, #372]	; (8000578 <initSystem+0x2bc>)
 8000402:	601a      	str	r2, [r3, #0]
	handlerSevenSegmentsA.GPIO_PinConfig.GPIO_PinNumber			= PIN_4;
 8000404:	4b64      	ldr	r3, [pc, #400]	; (8000598 <initSystem+0x2dc>)
 8000406:	2204      	movs	r2, #4
 8000408:	711a      	strb	r2, [r3, #4]
	handlerSevenSegmentsA.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 800040a:	4b63      	ldr	r3, [pc, #396]	; (8000598 <initSystem+0x2dc>)
 800040c:	2201      	movs	r2, #1
 800040e:	715a      	strb	r2, [r3, #5]
	handlerSevenSegmentsA.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 8000410:	4b61      	ldr	r3, [pc, #388]	; (8000598 <initSystem+0x2dc>)
 8000412:	2200      	movs	r2, #0
 8000414:	721a      	strb	r2, [r3, #8]
	handlerSevenSegmentsA.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000416:	4b60      	ldr	r3, [pc, #384]	; (8000598 <initSystem+0x2dc>)
 8000418:	2200      	movs	r2, #0
 800041a:	71da      	strb	r2, [r3, #7]
	handlerSevenSegmentsA.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_MEDIUM;
 800041c:	4b5e      	ldr	r3, [pc, #376]	; (8000598 <initSystem+0x2dc>)
 800041e:	2201      	movs	r2, #1
 8000420:	719a      	strb	r2, [r3, #6]

	//Cargamos la configuración
	GPIO_Config(&handlerSevenSegmentsA);
 8000422:	485d      	ldr	r0, [pc, #372]	; (8000598 <initSystem+0x2dc>)
 8000424:	f000 fe9c 	bl	8001160 <GPIO_Config>

	// Configuración Segmento B

	handlerSevenSegmentsB.pGPIOx								= GPIOB;
 8000428:	4b5c      	ldr	r3, [pc, #368]	; (800059c <initSystem+0x2e0>)
 800042a:	4a53      	ldr	r2, [pc, #332]	; (8000578 <initSystem+0x2bc>)
 800042c:	601a      	str	r2, [r3, #0]
	handlerSevenSegmentsB.GPIO_PinConfig.GPIO_PinNumber			= PIN_3;
 800042e:	4b5b      	ldr	r3, [pc, #364]	; (800059c <initSystem+0x2e0>)
 8000430:	2203      	movs	r2, #3
 8000432:	711a      	strb	r2, [r3, #4]
	handlerSevenSegmentsB.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 8000434:	4b59      	ldr	r3, [pc, #356]	; (800059c <initSystem+0x2e0>)
 8000436:	2201      	movs	r2, #1
 8000438:	715a      	strb	r2, [r3, #5]
	handlerSevenSegmentsB.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 800043a:	4b58      	ldr	r3, [pc, #352]	; (800059c <initSystem+0x2e0>)
 800043c:	2200      	movs	r2, #0
 800043e:	721a      	strb	r2, [r3, #8]
	handlerSevenSegmentsB.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000440:	4b56      	ldr	r3, [pc, #344]	; (800059c <initSystem+0x2e0>)
 8000442:	2200      	movs	r2, #0
 8000444:	71da      	strb	r2, [r3, #7]
	handlerSevenSegmentsB.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_MEDIUM;
 8000446:	4b55      	ldr	r3, [pc, #340]	; (800059c <initSystem+0x2e0>)
 8000448:	2201      	movs	r2, #1
 800044a:	719a      	strb	r2, [r3, #6]

	//Cargamos la configuración
	GPIO_Config(&handlerSevenSegmentsB);
 800044c:	4853      	ldr	r0, [pc, #332]	; (800059c <initSystem+0x2e0>)
 800044e:	f000 fe87 	bl	8001160 <GPIO_Config>

	// Configuración Segmento C

	handlerSevenSegmentsC.pGPIOx								= GPIOC;
 8000452:	4b53      	ldr	r3, [pc, #332]	; (80005a0 <initSystem+0x2e4>)
 8000454:	4a4a      	ldr	r2, [pc, #296]	; (8000580 <initSystem+0x2c4>)
 8000456:	601a      	str	r2, [r3, #0]
	handlerSevenSegmentsC.GPIO_PinConfig.GPIO_PinNumber			= PIN_2;
 8000458:	4b51      	ldr	r3, [pc, #324]	; (80005a0 <initSystem+0x2e4>)
 800045a:	2202      	movs	r2, #2
 800045c:	711a      	strb	r2, [r3, #4]
	handlerSevenSegmentsC.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 800045e:	4b50      	ldr	r3, [pc, #320]	; (80005a0 <initSystem+0x2e4>)
 8000460:	2201      	movs	r2, #1
 8000462:	715a      	strb	r2, [r3, #5]
	handlerSevenSegmentsC.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 8000464:	4b4e      	ldr	r3, [pc, #312]	; (80005a0 <initSystem+0x2e4>)
 8000466:	2200      	movs	r2, #0
 8000468:	721a      	strb	r2, [r3, #8]
	handlerSevenSegmentsC.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 800046a:	4b4d      	ldr	r3, [pc, #308]	; (80005a0 <initSystem+0x2e4>)
 800046c:	2200      	movs	r2, #0
 800046e:	71da      	strb	r2, [r3, #7]
	handlerSevenSegmentsC.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_MEDIUM;
 8000470:	4b4b      	ldr	r3, [pc, #300]	; (80005a0 <initSystem+0x2e4>)
 8000472:	2201      	movs	r2, #1
 8000474:	719a      	strb	r2, [r3, #6]

	//Cargamos la configuración
	GPIO_Config(&handlerSevenSegmentsC);
 8000476:	484a      	ldr	r0, [pc, #296]	; (80005a0 <initSystem+0x2e4>)
 8000478:	f000 fe72 	bl	8001160 <GPIO_Config>

	// Configuración Segmento D

	handlerSevenSegmentsD.pGPIOx								= GPIOC;
 800047c:	4b49      	ldr	r3, [pc, #292]	; (80005a4 <initSystem+0x2e8>)
 800047e:	4a40      	ldr	r2, [pc, #256]	; (8000580 <initSystem+0x2c4>)
 8000480:	601a      	str	r2, [r3, #0]
	handlerSevenSegmentsD.GPIO_PinConfig.GPIO_PinNumber			= PIN_13;
 8000482:	4b48      	ldr	r3, [pc, #288]	; (80005a4 <initSystem+0x2e8>)
 8000484:	220d      	movs	r2, #13
 8000486:	711a      	strb	r2, [r3, #4]
	handlerSevenSegmentsD.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 8000488:	4b46      	ldr	r3, [pc, #280]	; (80005a4 <initSystem+0x2e8>)
 800048a:	2201      	movs	r2, #1
 800048c:	715a      	strb	r2, [r3, #5]
	handlerSevenSegmentsD.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 800048e:	4b45      	ldr	r3, [pc, #276]	; (80005a4 <initSystem+0x2e8>)
 8000490:	2200      	movs	r2, #0
 8000492:	721a      	strb	r2, [r3, #8]
	handlerSevenSegmentsD.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000494:	4b43      	ldr	r3, [pc, #268]	; (80005a4 <initSystem+0x2e8>)
 8000496:	2200      	movs	r2, #0
 8000498:	71da      	strb	r2, [r3, #7]
	handlerSevenSegmentsD.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_MEDIUM;
 800049a:	4b42      	ldr	r3, [pc, #264]	; (80005a4 <initSystem+0x2e8>)
 800049c:	2201      	movs	r2, #1
 800049e:	719a      	strb	r2, [r3, #6]

	//Cargamos la configuración
	GPIO_Config(&handlerSevenSegmentsD);
 80004a0:	4840      	ldr	r0, [pc, #256]	; (80005a4 <initSystem+0x2e8>)
 80004a2:	f000 fe5d 	bl	8001160 <GPIO_Config>

	// Configuración Segmento E

	handlerSevenSegmentsE.pGPIOx								= GPIOC;
 80004a6:	4b40      	ldr	r3, [pc, #256]	; (80005a8 <initSystem+0x2ec>)
 80004a8:	4a35      	ldr	r2, [pc, #212]	; (8000580 <initSystem+0x2c4>)
 80004aa:	601a      	str	r2, [r3, #0]
	handlerSevenSegmentsE.GPIO_PinConfig.GPIO_PinNumber			= PIN_1;
 80004ac:	4b3e      	ldr	r3, [pc, #248]	; (80005a8 <initSystem+0x2ec>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	711a      	strb	r2, [r3, #4]
	handlerSevenSegmentsE.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 80004b2:	4b3d      	ldr	r3, [pc, #244]	; (80005a8 <initSystem+0x2ec>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	715a      	strb	r2, [r3, #5]
	handlerSevenSegmentsE.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 80004b8:	4b3b      	ldr	r3, [pc, #236]	; (80005a8 <initSystem+0x2ec>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	721a      	strb	r2, [r3, #8]
	handlerSevenSegmentsE.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 80004be:	4b3a      	ldr	r3, [pc, #232]	; (80005a8 <initSystem+0x2ec>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	71da      	strb	r2, [r3, #7]
	handlerSevenSegmentsE.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_MEDIUM;
 80004c4:	4b38      	ldr	r3, [pc, #224]	; (80005a8 <initSystem+0x2ec>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	719a      	strb	r2, [r3, #6]

	//Cargamos la configuración
	GPIO_Config(&handlerSevenSegmentsE);
 80004ca:	4837      	ldr	r0, [pc, #220]	; (80005a8 <initSystem+0x2ec>)
 80004cc:	f000 fe48 	bl	8001160 <GPIO_Config>

	// Configuración Segmento F

	handlerSevenSegmentsF.pGPIOx								= GPIOB;
 80004d0:	4b36      	ldr	r3, [pc, #216]	; (80005ac <initSystem+0x2f0>)
 80004d2:	4a29      	ldr	r2, [pc, #164]	; (8000578 <initSystem+0x2bc>)
 80004d4:	601a      	str	r2, [r3, #0]
	handlerSevenSegmentsF.GPIO_PinConfig.GPIO_PinNumber			= PIN_2;
 80004d6:	4b35      	ldr	r3, [pc, #212]	; (80005ac <initSystem+0x2f0>)
 80004d8:	2202      	movs	r2, #2
 80004da:	711a      	strb	r2, [r3, #4]
	handlerSevenSegmentsF.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 80004dc:	4b33      	ldr	r3, [pc, #204]	; (80005ac <initSystem+0x2f0>)
 80004de:	2201      	movs	r2, #1
 80004e0:	715a      	strb	r2, [r3, #5]
	handlerSevenSegmentsF.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 80004e2:	4b32      	ldr	r3, [pc, #200]	; (80005ac <initSystem+0x2f0>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	721a      	strb	r2, [r3, #8]
	handlerSevenSegmentsF.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 80004e8:	4b30      	ldr	r3, [pc, #192]	; (80005ac <initSystem+0x2f0>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	71da      	strb	r2, [r3, #7]
	handlerSevenSegmentsF.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_MEDIUM;
 80004ee:	4b2f      	ldr	r3, [pc, #188]	; (80005ac <initSystem+0x2f0>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	719a      	strb	r2, [r3, #6]

	//Cargamos la configuración
	GPIO_Config(&handlerSevenSegmentsF);
 80004f4:	482d      	ldr	r0, [pc, #180]	; (80005ac <initSystem+0x2f0>)
 80004f6:	f000 fe33 	bl	8001160 <GPIO_Config>

	// Configuración Segmento G

	handlerSevenSegmentsG.pGPIOx								= GPIOB;
 80004fa:	4b2d      	ldr	r3, [pc, #180]	; (80005b0 <initSystem+0x2f4>)
 80004fc:	4a1e      	ldr	r2, [pc, #120]	; (8000578 <initSystem+0x2bc>)
 80004fe:	601a      	str	r2, [r3, #0]
	handlerSevenSegmentsG.GPIO_PinConfig.GPIO_PinNumber			= PIN_1;
 8000500:	4b2b      	ldr	r3, [pc, #172]	; (80005b0 <initSystem+0x2f4>)
 8000502:	2201      	movs	r2, #1
 8000504:	711a      	strb	r2, [r3, #4]
	handlerSevenSegmentsG.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_OUT;
 8000506:	4b2a      	ldr	r3, [pc, #168]	; (80005b0 <initSystem+0x2f4>)
 8000508:	2201      	movs	r2, #1
 800050a:	715a      	strb	r2, [r3, #5]
	handlerSevenSegmentsG.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 800050c:	4b28      	ldr	r3, [pc, #160]	; (80005b0 <initSystem+0x2f4>)
 800050e:	2200      	movs	r2, #0
 8000510:	721a      	strb	r2, [r3, #8]
	handlerSevenSegmentsG.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8000512:	4b27      	ldr	r3, [pc, #156]	; (80005b0 <initSystem+0x2f4>)
 8000514:	2200      	movs	r2, #0
 8000516:	71da      	strb	r2, [r3, #7]
	handlerSevenSegmentsG.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_MEDIUM;
 8000518:	4b25      	ldr	r3, [pc, #148]	; (80005b0 <initSystem+0x2f4>)
 800051a:	2201      	movs	r2, #1
 800051c:	719a      	strb	r2, [r3, #6]

	//Cargamos la configuración
	GPIO_Config(&handlerSevenSegmentsG);
 800051e:	4824      	ldr	r0, [pc, #144]	; (80005b0 <initSystem+0x2f4>)
 8000520:	f000 fe1e 	bl	8001160 <GPIO_Config>

	//Cargamos la configuración inicial

	GPIO_WritePin(&handlerSevenSegmentsA, SET);
 8000524:	2101      	movs	r1, #1
 8000526:	481c      	ldr	r0, [pc, #112]	; (8000598 <initSystem+0x2dc>)
 8000528:	f000 ff42 	bl	80013b0 <GPIO_WritePin>
	GPIO_WritePin(&handlerSevenSegmentsB, SET);
 800052c:	2101      	movs	r1, #1
 800052e:	481b      	ldr	r0, [pc, #108]	; (800059c <initSystem+0x2e0>)
 8000530:	f000 ff3e 	bl	80013b0 <GPIO_WritePin>
	GPIO_WritePin(&handlerSevenSegmentsC, SET);
 8000534:	2101      	movs	r1, #1
 8000536:	481a      	ldr	r0, [pc, #104]	; (80005a0 <initSystem+0x2e4>)
 8000538:	f000 ff3a 	bl	80013b0 <GPIO_WritePin>
	GPIO_WritePin(&handlerSevenSegmentsD, SET);
 800053c:	2101      	movs	r1, #1
 800053e:	4819      	ldr	r0, [pc, #100]	; (80005a4 <initSystem+0x2e8>)
 8000540:	f000 ff36 	bl	80013b0 <GPIO_WritePin>
	GPIO_WritePin(&handlerSevenSegmentsE, SET);
 8000544:	2101      	movs	r1, #1
 8000546:	4818      	ldr	r0, [pc, #96]	; (80005a8 <initSystem+0x2ec>)
 8000548:	f000 ff32 	bl	80013b0 <GPIO_WritePin>
	GPIO_WritePin(&handlerSevenSegmentsF, SET);
 800054c:	2101      	movs	r1, #1
 800054e:	4817      	ldr	r0, [pc, #92]	; (80005ac <initSystem+0x2f0>)
 8000550:	f000 ff2e 	bl	80013b0 <GPIO_WritePin>
	GPIO_WritePin(&handlerSevenSegmentsG, SET);
 8000554:	2101      	movs	r1, #1
 8000556:	4816      	ldr	r0, [pc, #88]	; (80005b0 <initSystem+0x2f4>)
 8000558:	f000 ff2a 	bl	80013b0 <GPIO_WritePin>
	GPIO_WritePin(&handlerSevenSegmentsP, SET);
 800055c:	2101      	movs	r1, #1
 800055e:	4815      	ldr	r0, [pc, #84]	; (80005b4 <initSystem+0x2f8>)
 8000560:	f000 ff26 	bl	80013b0 <GPIO_WritePin>
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000020 	.word	0x20000020
 800056c:	40020000 	.word	0x40020000
 8000570:	2000002c 	.word	0x2000002c
 8000574:	200000c0 	.word	0x200000c0
 8000578:	40020400 	.word	0x40020400
 800057c:	200000cc 	.word	0x200000cc
 8000580:	40020800 	.word	0x40020800
 8000584:	20000038 	.word	0x20000038
 8000588:	20000044 	.word	0x20000044
 800058c:	40000800 	.word	0x40000800
 8000590:	20000050 	.word	0x20000050
 8000594:	20000058 	.word	0x20000058
 8000598:	20000060 	.word	0x20000060
 800059c:	2000006c 	.word	0x2000006c
 80005a0:	20000078 	.word	0x20000078
 80005a4:	20000084 	.word	0x20000084
 80005a8:	20000090 	.word	0x20000090
 80005ac:	2000009c 	.word	0x2000009c
 80005b0:	200000a8 	.word	0x200000a8
 80005b4:	200000b4 	.word	0x200000b4

080005b8 <setNumber>:

void setNumber(uint32_t number){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

	switch(number){
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2b09      	cmp	r3, #9
 80005c4:	f200 813a 	bhi.w	800083c <setNumber+0x284>
 80005c8:	a201      	add	r2, pc, #4	; (adr r2, 80005d0 <setNumber+0x18>)
 80005ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ce:	bf00      	nop
 80005d0:	080005f9 	.word	0x080005f9
 80005d4:	08000633 	.word	0x08000633
 80005d8:	0800066d 	.word	0x0800066d
 80005dc:	080006a7 	.word	0x080006a7
 80005e0:	080006e1 	.word	0x080006e1
 80005e4:	0800071b 	.word	0x0800071b
 80005e8:	08000755 	.word	0x08000755
 80005ec:	0800078f 	.word	0x0800078f
 80005f0:	080007c9 	.word	0x080007c9
 80005f4:	08000803 	.word	0x08000803
	// Número 0
	case(0):
	{
		GPIO_WritePin(&handlerSevenSegmentsA, RESET);
 80005f8:	2100      	movs	r1, #0
 80005fa:	4892      	ldr	r0, [pc, #584]	; (8000844 <setNumber+0x28c>)
 80005fc:	f000 fed8 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsB, RESET);
 8000600:	2100      	movs	r1, #0
 8000602:	4891      	ldr	r0, [pc, #580]	; (8000848 <setNumber+0x290>)
 8000604:	f000 fed4 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsC, RESET);
 8000608:	2100      	movs	r1, #0
 800060a:	4890      	ldr	r0, [pc, #576]	; (800084c <setNumber+0x294>)
 800060c:	f000 fed0 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsD, RESET);
 8000610:	2100      	movs	r1, #0
 8000612:	488f      	ldr	r0, [pc, #572]	; (8000850 <setNumber+0x298>)
 8000614:	f000 fecc 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsE, RESET);
 8000618:	2100      	movs	r1, #0
 800061a:	488e      	ldr	r0, [pc, #568]	; (8000854 <setNumber+0x29c>)
 800061c:	f000 fec8 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsF, RESET);
 8000620:	2100      	movs	r1, #0
 8000622:	488d      	ldr	r0, [pc, #564]	; (8000858 <setNumber+0x2a0>)
 8000624:	f000 fec4 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsG, SET);
 8000628:	2101      	movs	r1, #1
 800062a:	488c      	ldr	r0, [pc, #560]	; (800085c <setNumber+0x2a4>)
 800062c:	f000 fec0 	bl	80013b0 <GPIO_WritePin>
		break;
 8000630:	e104      	b.n	800083c <setNumber+0x284>
	}

	// Número 1
	case(1):
	{
		GPIO_WritePin(&handlerSevenSegmentsA, SET);
 8000632:	2101      	movs	r1, #1
 8000634:	4883      	ldr	r0, [pc, #524]	; (8000844 <setNumber+0x28c>)
 8000636:	f000 febb 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsB, RESET);
 800063a:	2100      	movs	r1, #0
 800063c:	4882      	ldr	r0, [pc, #520]	; (8000848 <setNumber+0x290>)
 800063e:	f000 feb7 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsC, RESET);
 8000642:	2100      	movs	r1, #0
 8000644:	4881      	ldr	r0, [pc, #516]	; (800084c <setNumber+0x294>)
 8000646:	f000 feb3 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsD, SET);
 800064a:	2101      	movs	r1, #1
 800064c:	4880      	ldr	r0, [pc, #512]	; (8000850 <setNumber+0x298>)
 800064e:	f000 feaf 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsE, SET);
 8000652:	2101      	movs	r1, #1
 8000654:	487f      	ldr	r0, [pc, #508]	; (8000854 <setNumber+0x29c>)
 8000656:	f000 feab 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsF, SET);
 800065a:	2101      	movs	r1, #1
 800065c:	487e      	ldr	r0, [pc, #504]	; (8000858 <setNumber+0x2a0>)
 800065e:	f000 fea7 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsG, SET);
 8000662:	2101      	movs	r1, #1
 8000664:	487d      	ldr	r0, [pc, #500]	; (800085c <setNumber+0x2a4>)
 8000666:	f000 fea3 	bl	80013b0 <GPIO_WritePin>
		break;
 800066a:	e0e7      	b.n	800083c <setNumber+0x284>
	}

	// Número 2
	case(2):
	{
		GPIO_WritePin(&handlerSevenSegmentsA, RESET);
 800066c:	2100      	movs	r1, #0
 800066e:	4875      	ldr	r0, [pc, #468]	; (8000844 <setNumber+0x28c>)
 8000670:	f000 fe9e 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsB, RESET);
 8000674:	2100      	movs	r1, #0
 8000676:	4874      	ldr	r0, [pc, #464]	; (8000848 <setNumber+0x290>)
 8000678:	f000 fe9a 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsC, SET);
 800067c:	2101      	movs	r1, #1
 800067e:	4873      	ldr	r0, [pc, #460]	; (800084c <setNumber+0x294>)
 8000680:	f000 fe96 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsG, RESET);
 8000684:	2100      	movs	r1, #0
 8000686:	4875      	ldr	r0, [pc, #468]	; (800085c <setNumber+0x2a4>)
 8000688:	f000 fe92 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsE, RESET);
 800068c:	2100      	movs	r1, #0
 800068e:	4871      	ldr	r0, [pc, #452]	; (8000854 <setNumber+0x29c>)
 8000690:	f000 fe8e 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsD, RESET);
 8000694:	2100      	movs	r1, #0
 8000696:	486e      	ldr	r0, [pc, #440]	; (8000850 <setNumber+0x298>)
 8000698:	f000 fe8a 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsF, SET);
 800069c:	2101      	movs	r1, #1
 800069e:	486e      	ldr	r0, [pc, #440]	; (8000858 <setNumber+0x2a0>)
 80006a0:	f000 fe86 	bl	80013b0 <GPIO_WritePin>
		break;
 80006a4:	e0ca      	b.n	800083c <setNumber+0x284>
	}

	// Número 3
	case(3):
	{
		GPIO_WritePin(&handlerSevenSegmentsA, RESET);
 80006a6:	2100      	movs	r1, #0
 80006a8:	4866      	ldr	r0, [pc, #408]	; (8000844 <setNumber+0x28c>)
 80006aa:	f000 fe81 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsB, RESET);
 80006ae:	2100      	movs	r1, #0
 80006b0:	4865      	ldr	r0, [pc, #404]	; (8000848 <setNumber+0x290>)
 80006b2:	f000 fe7d 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsC, RESET);
 80006b6:	2100      	movs	r1, #0
 80006b8:	4864      	ldr	r0, [pc, #400]	; (800084c <setNumber+0x294>)
 80006ba:	f000 fe79 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsD, RESET);
 80006be:	2100      	movs	r1, #0
 80006c0:	4863      	ldr	r0, [pc, #396]	; (8000850 <setNumber+0x298>)
 80006c2:	f000 fe75 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsE, SET);
 80006c6:	2101      	movs	r1, #1
 80006c8:	4862      	ldr	r0, [pc, #392]	; (8000854 <setNumber+0x29c>)
 80006ca:	f000 fe71 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsF, SET);
 80006ce:	2101      	movs	r1, #1
 80006d0:	4861      	ldr	r0, [pc, #388]	; (8000858 <setNumber+0x2a0>)
 80006d2:	f000 fe6d 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsG, RESET);
 80006d6:	2100      	movs	r1, #0
 80006d8:	4860      	ldr	r0, [pc, #384]	; (800085c <setNumber+0x2a4>)
 80006da:	f000 fe69 	bl	80013b0 <GPIO_WritePin>
		break;
 80006de:	e0ad      	b.n	800083c <setNumber+0x284>
	}

	// Número 4
	case(4):
	{
		GPIO_WritePin(&handlerSevenSegmentsA, SET);
 80006e0:	2101      	movs	r1, #1
 80006e2:	4858      	ldr	r0, [pc, #352]	; (8000844 <setNumber+0x28c>)
 80006e4:	f000 fe64 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsB, RESET);
 80006e8:	2100      	movs	r1, #0
 80006ea:	4857      	ldr	r0, [pc, #348]	; (8000848 <setNumber+0x290>)
 80006ec:	f000 fe60 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsC, RESET);
 80006f0:	2100      	movs	r1, #0
 80006f2:	4856      	ldr	r0, [pc, #344]	; (800084c <setNumber+0x294>)
 80006f4:	f000 fe5c 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsD, SET);
 80006f8:	2101      	movs	r1, #1
 80006fa:	4855      	ldr	r0, [pc, #340]	; (8000850 <setNumber+0x298>)
 80006fc:	f000 fe58 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsE, SET);
 8000700:	2101      	movs	r1, #1
 8000702:	4854      	ldr	r0, [pc, #336]	; (8000854 <setNumber+0x29c>)
 8000704:	f000 fe54 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsF, RESET);
 8000708:	2100      	movs	r1, #0
 800070a:	4853      	ldr	r0, [pc, #332]	; (8000858 <setNumber+0x2a0>)
 800070c:	f000 fe50 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsG, RESET);
 8000710:	2100      	movs	r1, #0
 8000712:	4852      	ldr	r0, [pc, #328]	; (800085c <setNumber+0x2a4>)
 8000714:	f000 fe4c 	bl	80013b0 <GPIO_WritePin>
		break;
 8000718:	e090      	b.n	800083c <setNumber+0x284>
	}

	// Número 5
	case(5):
	{
		GPIO_WritePin(&handlerSevenSegmentsA, RESET);
 800071a:	2100      	movs	r1, #0
 800071c:	4849      	ldr	r0, [pc, #292]	; (8000844 <setNumber+0x28c>)
 800071e:	f000 fe47 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsB, SET);
 8000722:	2101      	movs	r1, #1
 8000724:	4848      	ldr	r0, [pc, #288]	; (8000848 <setNumber+0x290>)
 8000726:	f000 fe43 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsC, RESET);
 800072a:	2100      	movs	r1, #0
 800072c:	4847      	ldr	r0, [pc, #284]	; (800084c <setNumber+0x294>)
 800072e:	f000 fe3f 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsD, RESET);
 8000732:	2100      	movs	r1, #0
 8000734:	4846      	ldr	r0, [pc, #280]	; (8000850 <setNumber+0x298>)
 8000736:	f000 fe3b 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsE, SET);
 800073a:	2101      	movs	r1, #1
 800073c:	4845      	ldr	r0, [pc, #276]	; (8000854 <setNumber+0x29c>)
 800073e:	f000 fe37 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsF, RESET);
 8000742:	2100      	movs	r1, #0
 8000744:	4844      	ldr	r0, [pc, #272]	; (8000858 <setNumber+0x2a0>)
 8000746:	f000 fe33 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsG, RESET);
 800074a:	2100      	movs	r1, #0
 800074c:	4843      	ldr	r0, [pc, #268]	; (800085c <setNumber+0x2a4>)
 800074e:	f000 fe2f 	bl	80013b0 <GPIO_WritePin>
		break;
 8000752:	e073      	b.n	800083c <setNumber+0x284>
	}

	// Número 6
	case(6):
	{
		GPIO_WritePin(&handlerSevenSegmentsA, RESET);
 8000754:	2100      	movs	r1, #0
 8000756:	483b      	ldr	r0, [pc, #236]	; (8000844 <setNumber+0x28c>)
 8000758:	f000 fe2a 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsB, SET);
 800075c:	2101      	movs	r1, #1
 800075e:	483a      	ldr	r0, [pc, #232]	; (8000848 <setNumber+0x290>)
 8000760:	f000 fe26 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsC, RESET);
 8000764:	2100      	movs	r1, #0
 8000766:	4839      	ldr	r0, [pc, #228]	; (800084c <setNumber+0x294>)
 8000768:	f000 fe22 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsD, RESET);
 800076c:	2100      	movs	r1, #0
 800076e:	4838      	ldr	r0, [pc, #224]	; (8000850 <setNumber+0x298>)
 8000770:	f000 fe1e 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsE, RESET);
 8000774:	2100      	movs	r1, #0
 8000776:	4837      	ldr	r0, [pc, #220]	; (8000854 <setNumber+0x29c>)
 8000778:	f000 fe1a 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsF, RESET);
 800077c:	2100      	movs	r1, #0
 800077e:	4836      	ldr	r0, [pc, #216]	; (8000858 <setNumber+0x2a0>)
 8000780:	f000 fe16 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsG, RESET);
 8000784:	2100      	movs	r1, #0
 8000786:	4835      	ldr	r0, [pc, #212]	; (800085c <setNumber+0x2a4>)
 8000788:	f000 fe12 	bl	80013b0 <GPIO_WritePin>
		break;
 800078c:	e056      	b.n	800083c <setNumber+0x284>
	}

	// Número 7
	case(7):
	{
		GPIO_WritePin(&handlerSevenSegmentsA, RESET);
 800078e:	2100      	movs	r1, #0
 8000790:	482c      	ldr	r0, [pc, #176]	; (8000844 <setNumber+0x28c>)
 8000792:	f000 fe0d 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsB, RESET);
 8000796:	2100      	movs	r1, #0
 8000798:	482b      	ldr	r0, [pc, #172]	; (8000848 <setNumber+0x290>)
 800079a:	f000 fe09 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsC, RESET);
 800079e:	2100      	movs	r1, #0
 80007a0:	482a      	ldr	r0, [pc, #168]	; (800084c <setNumber+0x294>)
 80007a2:	f000 fe05 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsD, SET);
 80007a6:	2101      	movs	r1, #1
 80007a8:	4829      	ldr	r0, [pc, #164]	; (8000850 <setNumber+0x298>)
 80007aa:	f000 fe01 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsE, SET);
 80007ae:	2101      	movs	r1, #1
 80007b0:	4828      	ldr	r0, [pc, #160]	; (8000854 <setNumber+0x29c>)
 80007b2:	f000 fdfd 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsF, SET);
 80007b6:	2101      	movs	r1, #1
 80007b8:	4827      	ldr	r0, [pc, #156]	; (8000858 <setNumber+0x2a0>)
 80007ba:	f000 fdf9 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsG, SET);
 80007be:	2101      	movs	r1, #1
 80007c0:	4826      	ldr	r0, [pc, #152]	; (800085c <setNumber+0x2a4>)
 80007c2:	f000 fdf5 	bl	80013b0 <GPIO_WritePin>
		break;
 80007c6:	e039      	b.n	800083c <setNumber+0x284>
	}

	// Número 8
	case(8):
	{
		GPIO_WritePin(&handlerSevenSegmentsA, RESET);
 80007c8:	2100      	movs	r1, #0
 80007ca:	481e      	ldr	r0, [pc, #120]	; (8000844 <setNumber+0x28c>)
 80007cc:	f000 fdf0 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsB, RESET);
 80007d0:	2100      	movs	r1, #0
 80007d2:	481d      	ldr	r0, [pc, #116]	; (8000848 <setNumber+0x290>)
 80007d4:	f000 fdec 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsC, RESET);
 80007d8:	2100      	movs	r1, #0
 80007da:	481c      	ldr	r0, [pc, #112]	; (800084c <setNumber+0x294>)
 80007dc:	f000 fde8 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsD, RESET);
 80007e0:	2100      	movs	r1, #0
 80007e2:	481b      	ldr	r0, [pc, #108]	; (8000850 <setNumber+0x298>)
 80007e4:	f000 fde4 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsE, RESET);
 80007e8:	2100      	movs	r1, #0
 80007ea:	481a      	ldr	r0, [pc, #104]	; (8000854 <setNumber+0x29c>)
 80007ec:	f000 fde0 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsF, RESET);
 80007f0:	2100      	movs	r1, #0
 80007f2:	4819      	ldr	r0, [pc, #100]	; (8000858 <setNumber+0x2a0>)
 80007f4:	f000 fddc 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsG, RESET);
 80007f8:	2100      	movs	r1, #0
 80007fa:	4818      	ldr	r0, [pc, #96]	; (800085c <setNumber+0x2a4>)
 80007fc:	f000 fdd8 	bl	80013b0 <GPIO_WritePin>
		break;
 8000800:	e01c      	b.n	800083c <setNumber+0x284>
	}

	// Número 9
	case(9):
	{
		GPIO_WritePin(&handlerSevenSegmentsA, RESET);
 8000802:	2100      	movs	r1, #0
 8000804:	480f      	ldr	r0, [pc, #60]	; (8000844 <setNumber+0x28c>)
 8000806:	f000 fdd3 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsB, RESET);
 800080a:	2100      	movs	r1, #0
 800080c:	480e      	ldr	r0, [pc, #56]	; (8000848 <setNumber+0x290>)
 800080e:	f000 fdcf 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsC, RESET);
 8000812:	2100      	movs	r1, #0
 8000814:	480d      	ldr	r0, [pc, #52]	; (800084c <setNumber+0x294>)
 8000816:	f000 fdcb 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsD, RESET);
 800081a:	2100      	movs	r1, #0
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <setNumber+0x298>)
 800081e:	f000 fdc7 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsE, SET);
 8000822:	2101      	movs	r1, #1
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <setNumber+0x29c>)
 8000826:	f000 fdc3 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsF, RESET);
 800082a:	2100      	movs	r1, #0
 800082c:	480a      	ldr	r0, [pc, #40]	; (8000858 <setNumber+0x2a0>)
 800082e:	f000 fdbf 	bl	80013b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerSevenSegmentsG, RESET);
 8000832:	2100      	movs	r1, #0
 8000834:	4809      	ldr	r0, [pc, #36]	; (800085c <setNumber+0x2a4>)
 8000836:	f000 fdbb 	bl	80013b0 <GPIO_WritePin>
		break;
 800083a:	bf00      	nop
	}
	}
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000060 	.word	0x20000060
 8000848:	2000006c 	.word	0x2000006c
 800084c:	20000078 	.word	0x20000078
 8000850:	20000084 	.word	0x20000084
 8000854:	20000090 	.word	0x20000090
 8000858:	2000009c 	.word	0x2000009c
 800085c:	200000a8 	.word	0x200000a8

08000860 <Timer2_Callback>:

//***********// CallBacks //***********//
void Timer2_Callback(void){
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
	handlerStateLED.pGPIOx -> ODR ^= GPIO_ODR_OD5;		// Encendido y apagado StateLED
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <Timer2_Callback+0x1c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	695a      	ldr	r2, [r3, #20]
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <Timer2_Callback+0x1c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f082 0220 	eor.w	r2, r2, #32
 8000872:	615a      	str	r2, [r3, #20]
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	20000020 	.word	0x20000020

08000880 <Timer4_Callback>:

void Timer4_Callback(void){
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

	setNumber(0);
 8000884:	2000      	movs	r0, #0
 8000886:	f7ff fe97 	bl	80005b8 <setNumber>

	handlerTransistorUnidades.pGPIOx -> ODR ^= GPIO_ODR_OD5;
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <Timer4_Callback+0x6c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	695a      	ldr	r2, [r3, #20]
 8000890:	4b16      	ldr	r3, [pc, #88]	; (80008ec <Timer4_Callback+0x6c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f082 0220 	eor.w	r2, r2, #32
 8000898:	615a      	str	r2, [r3, #20]

	handlerTransistorDecenas.pGPIOx -> ODR ^= GPIO_ODR_OD5;
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <Timer4_Callback+0x70>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	695a      	ldr	r2, [r3, #20]
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <Timer4_Callback+0x70>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f082 0220 	eor.w	r2, r2, #32
 80008a8:	615a      	str	r2, [r3, #20]



	if(((handlerTransistorUnidades.pGPIOx -> ODR) &= GPIO_ODR_OD5) !=  GPIO_ODR_OD5 ){
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <Timer4_Callback+0x6c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	695b      	ldr	r3, [r3, #20]
 80008b0:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <Timer4_Callback+0x6c>)
 80008b2:	6812      	ldr	r2, [r2, #0]
 80008b4:	f003 0320 	and.w	r3, r3, #32
 80008b8:	6153      	str	r3, [r2, #20]
 80008ba:	2b20      	cmp	r3, #32
 80008bc:	d005      	beq.n	80008ca <Timer4_Callback+0x4a>
		setNumber(counterUnidades);
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <Timer4_Callback+0x74>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fe78 	bl	80005b8 <setNumber>
	}else if((handlerTransistorDecenas.pGPIOx -> ODR &= GPIO_ODR_OD5) != GPIO_ODR_OD5){
		setNumber(counterDecenas);
	}
}
 80008c8:	e00e      	b.n	80008e8 <Timer4_Callback+0x68>
	}else if((handlerTransistorDecenas.pGPIOx -> ODR &= GPIO_ODR_OD5) != GPIO_ODR_OD5){
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <Timer4_Callback+0x70>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <Timer4_Callback+0x70>)
 80008d2:	6812      	ldr	r2, [r2, #0]
 80008d4:	f003 0320 	and.w	r3, r3, #32
 80008d8:	6153      	str	r3, [r2, #20]
 80008da:	2b20      	cmp	r3, #32
 80008dc:	d004      	beq.n	80008e8 <Timer4_Callback+0x68>
		setNumber(counterDecenas);
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <Timer4_Callback+0x78>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fe68 	bl	80005b8 <setNumber>
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200000c0 	.word	0x200000c0
 80008f0:	200000cc 	.word	0x200000cc
 80008f4:	200000d8 	.word	0x200000d8
 80008f8:	200000dc 	.word	0x200000dc

080008fc <EXTI0_Callback>:

void EXTI0_Callback(void){
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
	auxCounter ^= 1;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <EXTI0_Callback+0x20>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f083 0301 	eor.w	r3, r3, #1
 8000908:	4a04      	ldr	r2, [pc, #16]	; (800091c <EXTI0_Callback+0x20>)
 800090a:	6013      	str	r3, [r2, #0]
	buttonControl = 1;
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <EXTI0_Callback+0x24>)
 800090e:	2201      	movs	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	200000e0 	.word	0x200000e0
 8000920:	200000e4 	.word	0x200000e4

08000924 <EXTI3_Callback>:

void EXTI3_Callback(void){
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
	auxCounter ^= 1;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <EXTI3_Callback+0x20>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f083 0301 	eor.w	r3, r3, #1
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <EXTI3_Callback+0x20>)
 8000932:	6013      	str	r3, [r2, #0]
	buttonControl = 1;
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <EXTI3_Callback+0x24>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	200000e0 	.word	0x200000e0
 8000948:	200000e4 	.word	0x200000e4

0800094c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800094c:	480d      	ldr	r0, [pc, #52]	; (8000984 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800094e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000950:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <LoopForever+0x6>)
  ldr r1, =_edata
 8000956:	490d      	ldr	r1, [pc, #52]	; (800098c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <LoopForever+0xe>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <LoopForever+0x12>)
  ldr r4, =_ebss
 800096c:	4c0a      	ldr	r4, [pc, #40]	; (8000998 <LoopForever+0x16>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800097a:	f000 fe9d 	bl	80016b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800097e:	f7ff fc2b 	bl	80001d8 <main>

08000982 <LoopForever>:

LoopForever:
    b LoopForever
 8000982:	e7fe      	b.n	8000982 <LoopForever>
  ldr   r0, =_estack
 8000984:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000990:	08001720 	.word	0x08001720
  ldr r2, =_sbss
 8000994:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000998:	200000f4 	.word	0x200000f4

0800099c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC_IRQHandler>
	...

080009a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	db0b      	blt.n	80009ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	f003 021f 	and.w	r2, r3, #31
 80009b8:	4906      	ldr	r1, [pc, #24]	; (80009d4 <__NVIC_EnableIRQ+0x34>)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	095b      	lsrs	r3, r3, #5
 80009c0:	2001      	movs	r0, #1
 80009c2:	fa00 f202 	lsl.w	r2, r0, r2
 80009c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	e000e100 	.word	0xe000e100

080009d8 <EXTI_Config>:
#include "EXTIxDriver.h"
#include "GPIOxDriver.h"

GPIO_Handler_t handlerEXTIxPin = {0};

void EXTI_Config(EXTI_Config_t *extiConfig){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

	/* 0. Activamos la señal del RCC al SYSCFG */

	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80009e0:	4b8c      	ldr	r3, [pc, #560]	; (8000c14 <EXTI_Config+0x23c>)
 80009e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e4:	4a8b      	ldr	r2, [pc, #556]	; (8000c14 <EXTI_Config+0x23c>)
 80009e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ea:	6453      	str	r3, [r2, #68]	; 0x44

	/* 1. Configuramos el PinXY como entrada Digital */

	handlerEXTIxPin.pGPIOx = extiConfig -> port;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a89      	ldr	r2, [pc, #548]	; (8000c18 <EXTI_Config+0x240>)
 80009f2:	6013      	str	r3, [r2, #0]
	handlerEXTIxPin.GPIO_PinConfig.GPIO_PinNumber = extiConfig -> pin;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	791a      	ldrb	r2, [r3, #4]
 80009f8:	4b87      	ldr	r3, [pc, #540]	; (8000c18 <EXTI_Config+0x240>)
 80009fa:	711a      	strb	r2, [r3, #4]
	handlerEXTIxPin.GPIO_PinConfig.GPIO_PinPuPdControl = extiConfig -> PinControl;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	799a      	ldrb	r2, [r3, #6]
 8000a00:	4b85      	ldr	r3, [pc, #532]	; (8000c18 <EXTI_Config+0x240>)
 8000a02:	71da      	strb	r2, [r3, #7]
	handlerEXTIxPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000a04:	4b84      	ldr	r3, [pc, #528]	; (8000c18 <EXTI_Config+0x240>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	715a      	strb	r2, [r3, #5]

	GPIO_Config(&handlerEXTIxPin);
 8000a0a:	4883      	ldr	r0, [pc, #524]	; (8000c18 <EXTI_Config+0x240>)
 8000a0c:	f000 fba8 	bl	8001160 <GPIO_Config>

	/* 2. Asignamos el Pin al EXTI */

	if((extiConfig -> pin)< 4){
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	791b      	ldrb	r3, [r3, #4]
 8000a14:	2b03      	cmp	r3, #3
 8000a16:	d85f      	bhi.n	8000ad8 <EXTI_Config+0x100>
		if(extiConfig -> port == GPIOA){
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a7f      	ldr	r2, [pc, #508]	; (8000c1c <EXTI_Config+0x244>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d104      	bne.n	8000a2c <EXTI_Config+0x54>
			SYSCFG -> EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000a22:	4b7f      	ldr	r3, [pc, #508]	; (8000c20 <EXTI_Config+0x248>)
 8000a24:	4a7e      	ldr	r2, [pc, #504]	; (8000c20 <EXTI_Config+0x248>)
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	6093      	str	r3, [r2, #8]
 8000a2a:	e1aa      	b.n	8000d82 <EXTI_Config+0x3aa>
		}
		else if(extiConfig -> port == GPIOB){
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a7c      	ldr	r2, [pc, #496]	; (8000c24 <EXTI_Config+0x24c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d10b      	bne.n	8000a4e <EXTI_Config+0x76>
			SYSCFG -> EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB << (4 * (extiConfig -> pin)));			// Configuramos el pin PB0
 8000a36:	4b7a      	ldr	r3, [pc, #488]	; (8000c20 <EXTI_Config+0x248>)
 8000a38:	689a      	ldr	r2, [r3, #8]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	791b      	ldrb	r3, [r3, #4]
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	2101      	movs	r1, #1
 8000a42:	fa01 f303 	lsl.w	r3, r1, r3
 8000a46:	4976      	ldr	r1, [pc, #472]	; (8000c20 <EXTI_Config+0x248>)
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	608b      	str	r3, [r1, #8]
 8000a4c:	e199      	b.n	8000d82 <EXTI_Config+0x3aa>
		}
		else if(extiConfig -> port == GPIOC){
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a75      	ldr	r2, [pc, #468]	; (8000c28 <EXTI_Config+0x250>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d10b      	bne.n	8000a70 <EXTI_Config+0x98>
			SYSCFG -> EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000a58:	4b71      	ldr	r3, [pc, #452]	; (8000c20 <EXTI_Config+0x248>)
 8000a5a:	689a      	ldr	r2, [r3, #8]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	791b      	ldrb	r3, [r3, #4]
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	2102      	movs	r1, #2
 8000a64:	fa01 f303 	lsl.w	r3, r1, r3
 8000a68:	496d      	ldr	r1, [pc, #436]	; (8000c20 <EXTI_Config+0x248>)
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	608b      	str	r3, [r1, #8]
 8000a6e:	e188      	b.n	8000d82 <EXTI_Config+0x3aa>
		}
		else if(extiConfig -> port == GPIOD){
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a6d      	ldr	r2, [pc, #436]	; (8000c2c <EXTI_Config+0x254>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d10b      	bne.n	8000a92 <EXTI_Config+0xba>
			SYSCFG -> EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000a7a:	4b69      	ldr	r3, [pc, #420]	; (8000c20 <EXTI_Config+0x248>)
 8000a7c:	689a      	ldr	r2, [r3, #8]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	791b      	ldrb	r3, [r3, #4]
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	2103      	movs	r1, #3
 8000a86:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8a:	4965      	ldr	r1, [pc, #404]	; (8000c20 <EXTI_Config+0x248>)
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	608b      	str	r3, [r1, #8]
 8000a90:	e177      	b.n	8000d82 <EXTI_Config+0x3aa>
		}
		else if(extiConfig -> port == GPIOE){
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a66      	ldr	r2, [pc, #408]	; (8000c30 <EXTI_Config+0x258>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d10b      	bne.n	8000ab4 <EXTI_Config+0xdc>
			SYSCFG -> EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000a9c:	4b60      	ldr	r3, [pc, #384]	; (8000c20 <EXTI_Config+0x248>)
 8000a9e:	689a      	ldr	r2, [r3, #8]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	791b      	ldrb	r3, [r3, #4]
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aac:	495c      	ldr	r1, [pc, #368]	; (8000c20 <EXTI_Config+0x248>)
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	608b      	str	r3, [r1, #8]
 8000ab2:	e166      	b.n	8000d82 <EXTI_Config+0x3aa>
		}
		else if(extiConfig -> port == GPIOH){
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a5e      	ldr	r2, [pc, #376]	; (8000c34 <EXTI_Config+0x25c>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	f040 8161 	bne.w	8000d82 <EXTI_Config+0x3aa>
			SYSCFG -> EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000ac0:	4b57      	ldr	r3, [pc, #348]	; (8000c20 <EXTI_Config+0x248>)
 8000ac2:	689a      	ldr	r2, [r3, #8]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	791b      	ldrb	r3, [r3, #4]
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	2107      	movs	r1, #7
 8000acc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad0:	4953      	ldr	r1, [pc, #332]	; (8000c20 <EXTI_Config+0x248>)
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	608b      	str	r3, [r1, #8]
 8000ad6:	e154      	b.n	8000d82 <EXTI_Config+0x3aa>
		}
	}
	else if(((extiConfig -> pin) > 3) && ((extiConfig -> pin) < 8)){
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	791b      	ldrb	r3, [r3, #4]
 8000adc:	2b03      	cmp	r3, #3
 8000ade:	d963      	bls.n	8000ba8 <EXTI_Config+0x1d0>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	791b      	ldrb	r3, [r3, #4]
 8000ae4:	2b07      	cmp	r3, #7
 8000ae6:	d85f      	bhi.n	8000ba8 <EXTI_Config+0x1d0>
		if(extiConfig -> port == GPIOA){
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a4b      	ldr	r2, [pc, #300]	; (8000c1c <EXTI_Config+0x244>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d104      	bne.n	8000afc <EXTI_Config+0x124>
			SYSCFG -> EXTICR[1] |= (SYSCFG_EXTICR1_EXTI1_PA << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000af2:	4b4b      	ldr	r3, [pc, #300]	; (8000c20 <EXTI_Config+0x248>)
 8000af4:	4a4a      	ldr	r2, [pc, #296]	; (8000c20 <EXTI_Config+0x248>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	60d3      	str	r3, [r2, #12]
		if(extiConfig -> port == GPIOA){
 8000afa:	e13f      	b.n	8000d7c <EXTI_Config+0x3a4>
		}
		else if(extiConfig -> port == GPIOB){
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a48      	ldr	r2, [pc, #288]	; (8000c24 <EXTI_Config+0x24c>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d10b      	bne.n	8000b1e <EXTI_Config+0x146>
			SYSCFG -> EXTICR[1] |= (SYSCFG_EXTICR1_EXTI1_PB << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000b06:	4b46      	ldr	r3, [pc, #280]	; (8000c20 <EXTI_Config+0x248>)
 8000b08:	68da      	ldr	r2, [r3, #12]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	791b      	ldrb	r3, [r3, #4]
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	2110      	movs	r1, #16
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	4942      	ldr	r1, [pc, #264]	; (8000c20 <EXTI_Config+0x248>)
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	60cb      	str	r3, [r1, #12]
		if(extiConfig -> port == GPIOA){
 8000b1c:	e12e      	b.n	8000d7c <EXTI_Config+0x3a4>
		}
		else if(extiConfig -> port == GPIOC){
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a41      	ldr	r2, [pc, #260]	; (8000c28 <EXTI_Config+0x250>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d10b      	bne.n	8000b40 <EXTI_Config+0x168>
			SYSCFG -> EXTICR[1] |= (SYSCFG_EXTICR1_EXTI1_PC << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000b28:	4b3d      	ldr	r3, [pc, #244]	; (8000c20 <EXTI_Config+0x248>)
 8000b2a:	68da      	ldr	r2, [r3, #12]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	791b      	ldrb	r3, [r3, #4]
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	2120      	movs	r1, #32
 8000b34:	fa01 f303 	lsl.w	r3, r1, r3
 8000b38:	4939      	ldr	r1, [pc, #228]	; (8000c20 <EXTI_Config+0x248>)
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	60cb      	str	r3, [r1, #12]
		if(extiConfig -> port == GPIOA){
 8000b3e:	e11d      	b.n	8000d7c <EXTI_Config+0x3a4>
		}
		else if(extiConfig -> port == GPIOD){
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a39      	ldr	r2, [pc, #228]	; (8000c2c <EXTI_Config+0x254>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d10b      	bne.n	8000b62 <EXTI_Config+0x18a>
			SYSCFG -> EXTICR[1] |= (SYSCFG_EXTICR1_EXTI1_PD << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000b4a:	4b35      	ldr	r3, [pc, #212]	; (8000c20 <EXTI_Config+0x248>)
 8000b4c:	68da      	ldr	r2, [r3, #12]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	791b      	ldrb	r3, [r3, #4]
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	2130      	movs	r1, #48	; 0x30
 8000b56:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5a:	4931      	ldr	r1, [pc, #196]	; (8000c20 <EXTI_Config+0x248>)
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	60cb      	str	r3, [r1, #12]
		if(extiConfig -> port == GPIOA){
 8000b60:	e10c      	b.n	8000d7c <EXTI_Config+0x3a4>
		}
		else if(extiConfig -> port == GPIOE){
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a32      	ldr	r2, [pc, #200]	; (8000c30 <EXTI_Config+0x258>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d10b      	bne.n	8000b84 <EXTI_Config+0x1ac>
			SYSCFG -> EXTICR[1] |= (SYSCFG_EXTICR1_EXTI1_PE << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000b6c:	4b2c      	ldr	r3, [pc, #176]	; (8000c20 <EXTI_Config+0x248>)
 8000b6e:	68da      	ldr	r2, [r3, #12]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	791b      	ldrb	r3, [r3, #4]
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	2140      	movs	r1, #64	; 0x40
 8000b78:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7c:	4928      	ldr	r1, [pc, #160]	; (8000c20 <EXTI_Config+0x248>)
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	60cb      	str	r3, [r1, #12]
		if(extiConfig -> port == GPIOA){
 8000b82:	e0fb      	b.n	8000d7c <EXTI_Config+0x3a4>
		}
		else if(extiConfig -> port == GPIOH){
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a2a      	ldr	r2, [pc, #168]	; (8000c34 <EXTI_Config+0x25c>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	f040 80f6 	bne.w	8000d7c <EXTI_Config+0x3a4>
			SYSCFG -> EXTICR[1] |= (SYSCFG_EXTICR1_EXTI1_PH << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000b90:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <EXTI_Config+0x248>)
 8000b92:	68da      	ldr	r2, [r3, #12]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	791b      	ldrb	r3, [r3, #4]
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	2170      	movs	r1, #112	; 0x70
 8000b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba0:	491f      	ldr	r1, [pc, #124]	; (8000c20 <EXTI_Config+0x248>)
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	60cb      	str	r3, [r1, #12]
		if(extiConfig -> port == GPIOA){
 8000ba6:	e0e9      	b.n	8000d7c <EXTI_Config+0x3a4>
		}
	}
	else if(((extiConfig -> pin) > 7) && ((extiConfig -> pin) < 12)){
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	791b      	ldrb	r3, [r3, #4]
 8000bac:	2b07      	cmp	r3, #7
 8000bae:	d979      	bls.n	8000ca4 <EXTI_Config+0x2cc>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	791b      	ldrb	r3, [r3, #4]
 8000bb4:	2b0b      	cmp	r3, #11
 8000bb6:	d875      	bhi.n	8000ca4 <EXTI_Config+0x2cc>
		if(extiConfig -> port == GPIOA){
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <EXTI_Config+0x244>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d104      	bne.n	8000bcc <EXTI_Config+0x1f4>
			SYSCFG -> EXTICR[2] |= (SYSCFG_EXTICR1_EXTI2_PA << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <EXTI_Config+0x248>)
 8000bc4:	4a16      	ldr	r2, [pc, #88]	; (8000c20 <EXTI_Config+0x248>)
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	6113      	str	r3, [r2, #16]
		if(extiConfig -> port == GPIOA){
 8000bca:	e0d9      	b.n	8000d80 <EXTI_Config+0x3a8>
		}
		else if(extiConfig -> port == GPIOB){
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a14      	ldr	r2, [pc, #80]	; (8000c24 <EXTI_Config+0x24c>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d10c      	bne.n	8000bf0 <EXTI_Config+0x218>
			SYSCFG -> EXTICR[2] |= (SYSCFG_EXTICR1_EXTI2_PB << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000bd6:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <EXTI_Config+0x248>)
 8000bd8:	691a      	ldr	r2, [r3, #16]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	791b      	ldrb	r3, [r3, #4]
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be4:	fa01 f303 	lsl.w	r3, r1, r3
 8000be8:	490d      	ldr	r1, [pc, #52]	; (8000c20 <EXTI_Config+0x248>)
 8000bea:	4313      	orrs	r3, r2
 8000bec:	610b      	str	r3, [r1, #16]
		if(extiConfig -> port == GPIOA){
 8000bee:	e0c7      	b.n	8000d80 <EXTI_Config+0x3a8>
		}
		else if(extiConfig -> port == GPIOC){
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0c      	ldr	r2, [pc, #48]	; (8000c28 <EXTI_Config+0x250>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d11e      	bne.n	8000c38 <EXTI_Config+0x260>
			SYSCFG -> EXTICR[2] |= (SYSCFG_EXTICR1_EXTI2_PC << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <EXTI_Config+0x248>)
 8000bfc:	691a      	ldr	r2, [r3, #16]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	791b      	ldrb	r3, [r3, #4]
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c08:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0c:	4904      	ldr	r1, [pc, #16]	; (8000c20 <EXTI_Config+0x248>)
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	610b      	str	r3, [r1, #16]
		if(extiConfig -> port == GPIOA){
 8000c12:	e0b5      	b.n	8000d80 <EXTI_Config+0x3a8>
 8000c14:	40023800 	.word	0x40023800
 8000c18:	200000e8 	.word	0x200000e8
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	40013800 	.word	0x40013800
 8000c24:	40020400 	.word	0x40020400
 8000c28:	40020800 	.word	0x40020800
 8000c2c:	40020c00 	.word	0x40020c00
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40021c00 	.word	0x40021c00
		}
		else if(extiConfig -> port == GPIOD){
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a91      	ldr	r2, [pc, #580]	; (8000e84 <EXTI_Config+0x4ac>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d10c      	bne.n	8000c5c <EXTI_Config+0x284>
			SYSCFG -> EXTICR[2] |= (SYSCFG_EXTICR1_EXTI2_PD << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000c42:	4b91      	ldr	r3, [pc, #580]	; (8000e88 <EXTI_Config+0x4b0>)
 8000c44:	691a      	ldr	r2, [r3, #16]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	791b      	ldrb	r3, [r3, #4]
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000c50:	fa01 f303 	lsl.w	r3, r1, r3
 8000c54:	498c      	ldr	r1, [pc, #560]	; (8000e88 <EXTI_Config+0x4b0>)
 8000c56:	4313      	orrs	r3, r2
 8000c58:	610b      	str	r3, [r1, #16]
		if(extiConfig -> port == GPIOA){
 8000c5a:	e091      	b.n	8000d80 <EXTI_Config+0x3a8>
		}
		else if(extiConfig -> port == GPIOE){
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a8a      	ldr	r2, [pc, #552]	; (8000e8c <EXTI_Config+0x4b4>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d10c      	bne.n	8000c80 <EXTI_Config+0x2a8>
			SYSCFG -> EXTICR[2] |= (SYSCFG_EXTICR1_EXTI2_PE << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000c66:	4b88      	ldr	r3, [pc, #544]	; (8000e88 <EXTI_Config+0x4b0>)
 8000c68:	691a      	ldr	r2, [r3, #16]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	791b      	ldrb	r3, [r3, #4]
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c74:	fa01 f303 	lsl.w	r3, r1, r3
 8000c78:	4983      	ldr	r1, [pc, #524]	; (8000e88 <EXTI_Config+0x4b0>)
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	610b      	str	r3, [r1, #16]
		if(extiConfig -> port == GPIOA){
 8000c7e:	e07f      	b.n	8000d80 <EXTI_Config+0x3a8>
		}
		else if(extiConfig -> port == GPIOH){
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a82      	ldr	r2, [pc, #520]	; (8000e90 <EXTI_Config+0x4b8>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d17a      	bne.n	8000d80 <EXTI_Config+0x3a8>
			SYSCFG -> EXTICR[2] |= (SYSCFG_EXTICR1_EXTI2_PH << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000c8a:	4b7f      	ldr	r3, [pc, #508]	; (8000e88 <EXTI_Config+0x4b0>)
 8000c8c:	691a      	ldr	r2, [r3, #16]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	791b      	ldrb	r3, [r3, #4]
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000c98:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9c:	497a      	ldr	r1, [pc, #488]	; (8000e88 <EXTI_Config+0x4b0>)
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	610b      	str	r3, [r1, #16]
		if(extiConfig -> port == GPIOA){
 8000ca2:	e06d      	b.n	8000d80 <EXTI_Config+0x3a8>
		}
	}
	else if(((extiConfig -> pin) > 11) && ((extiConfig -> pin) < 16)){
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	791b      	ldrb	r3, [r3, #4]
 8000ca8:	2b0b      	cmp	r3, #11
 8000caa:	d96a      	bls.n	8000d82 <EXTI_Config+0x3aa>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	791b      	ldrb	r3, [r3, #4]
 8000cb0:	2b0f      	cmp	r3, #15
 8000cb2:	d866      	bhi.n	8000d82 <EXTI_Config+0x3aa>
		if(extiConfig -> port == GPIOA){
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a76      	ldr	r2, [pc, #472]	; (8000e94 <EXTI_Config+0x4bc>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d104      	bne.n	8000cc8 <EXTI_Config+0x2f0>
			SYSCFG -> EXTICR[3] |= (SYSCFG_EXTICR1_EXTI3_PA << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000cbe:	4b72      	ldr	r3, [pc, #456]	; (8000e88 <EXTI_Config+0x4b0>)
 8000cc0:	4a71      	ldr	r2, [pc, #452]	; (8000e88 <EXTI_Config+0x4b0>)
 8000cc2:	695b      	ldr	r3, [r3, #20]
 8000cc4:	6153      	str	r3, [r2, #20]
 8000cc6:	e05c      	b.n	8000d82 <EXTI_Config+0x3aa>
		}
		else if(extiConfig -> port == GPIOB){
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a72      	ldr	r2, [pc, #456]	; (8000e98 <EXTI_Config+0x4c0>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d10c      	bne.n	8000cec <EXTI_Config+0x314>
			SYSCFG -> EXTICR[3] |= (SYSCFG_EXTICR1_EXTI3_PB << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000cd2:	4b6d      	ldr	r3, [pc, #436]	; (8000e88 <EXTI_Config+0x4b0>)
 8000cd4:	695a      	ldr	r2, [r3, #20]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	791b      	ldrb	r3, [r3, #4]
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce4:	4968      	ldr	r1, [pc, #416]	; (8000e88 <EXTI_Config+0x4b0>)
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	614b      	str	r3, [r1, #20]
 8000cea:	e04a      	b.n	8000d82 <EXTI_Config+0x3aa>
		}
		else if(extiConfig -> port == GPIOC){
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a6a      	ldr	r2, [pc, #424]	; (8000e9c <EXTI_Config+0x4c4>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d10c      	bne.n	8000d10 <EXTI_Config+0x338>
			SYSCFG -> EXTICR[3] |= (SYSCFG_EXTICR1_EXTI3_PC << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000cf6:	4b64      	ldr	r3, [pc, #400]	; (8000e88 <EXTI_Config+0x4b0>)
 8000cf8:	695a      	ldr	r2, [r3, #20]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	791b      	ldrb	r3, [r3, #4]
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d04:	fa01 f303 	lsl.w	r3, r1, r3
 8000d08:	495f      	ldr	r1, [pc, #380]	; (8000e88 <EXTI_Config+0x4b0>)
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	614b      	str	r3, [r1, #20]
 8000d0e:	e038      	b.n	8000d82 <EXTI_Config+0x3aa>
		}
		else if(extiConfig -> port == GPIOD){
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a5b      	ldr	r2, [pc, #364]	; (8000e84 <EXTI_Config+0x4ac>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d10c      	bne.n	8000d34 <EXTI_Config+0x35c>
			SYSCFG -> EXTICR[3] |= (SYSCFG_EXTICR1_EXTI3_PD << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000d1a:	4b5b      	ldr	r3, [pc, #364]	; (8000e88 <EXTI_Config+0x4b0>)
 8000d1c:	695a      	ldr	r2, [r3, #20]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	791b      	ldrb	r3, [r3, #4]
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000d28:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2c:	4956      	ldr	r1, [pc, #344]	; (8000e88 <EXTI_Config+0x4b0>)
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	614b      	str	r3, [r1, #20]
 8000d32:	e026      	b.n	8000d82 <EXTI_Config+0x3aa>
		}
		else if(extiConfig -> port == GPIOE){
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a54      	ldr	r2, [pc, #336]	; (8000e8c <EXTI_Config+0x4b4>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d10c      	bne.n	8000d58 <EXTI_Config+0x380>
			SYSCFG -> EXTICR[3] |= (SYSCFG_EXTICR1_EXTI3_PE << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000d3e:	4b52      	ldr	r3, [pc, #328]	; (8000e88 <EXTI_Config+0x4b0>)
 8000d40:	695a      	ldr	r2, [r3, #20]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	791b      	ldrb	r3, [r3, #4]
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d50:	494d      	ldr	r1, [pc, #308]	; (8000e88 <EXTI_Config+0x4b0>)
 8000d52:	4313      	orrs	r3, r2
 8000d54:	614b      	str	r3, [r1, #20]
 8000d56:	e014      	b.n	8000d82 <EXTI_Config+0x3aa>
		}
		else if(extiConfig -> port == GPIOH){
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a4c      	ldr	r2, [pc, #304]	; (8000e90 <EXTI_Config+0x4b8>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d10f      	bne.n	8000d82 <EXTI_Config+0x3aa>
			SYSCFG -> EXTICR[3] |= (SYSCFG_EXTICR1_EXTI3_PH << (4 * (extiConfig -> pin)));			// Configuramos el pin PA0
 8000d62:	4b49      	ldr	r3, [pc, #292]	; (8000e88 <EXTI_Config+0x4b0>)
 8000d64:	695a      	ldr	r2, [r3, #20]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	791b      	ldrb	r3, [r3, #4]
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	4944      	ldr	r1, [pc, #272]	; (8000e88 <EXTI_Config+0x4b0>)
 8000d76:	4313      	orrs	r3, r2
 8000d78:	614b      	str	r3, [r1, #20]
 8000d7a:	e002      	b.n	8000d82 <EXTI_Config+0x3aa>
		if(extiConfig -> port == GPIOA){
 8000d7c:	bf00      	nop
 8000d7e:	e000      	b.n	8000d82 <EXTI_Config+0x3aa>
		if(extiConfig -> port == GPIOA){
 8000d80:	bf00      	nop
		}
	}
	/* 3. Configuramos el trigger EXTI_RTSR*/

	// Activamos la configuración para flanco de subida
	if((extiConfig -> trigger) == TRIGGER_RISING){
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	795b      	ldrb	r3, [r3, #5]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d10a      	bne.n	8000da0 <EXTI_Config+0x3c8>
		EXTI -> RTSR |= (EXTI_RTSR_TR0 << (extiConfig -> pin));
 8000d8a:	4b45      	ldr	r3, [pc, #276]	; (8000ea0 <EXTI_Config+0x4c8>)
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	791b      	ldrb	r3, [r3, #4]
 8000d92:	4619      	mov	r1, r3
 8000d94:	2301      	movs	r3, #1
 8000d96:	408b      	lsls	r3, r1
 8000d98:	4941      	ldr	r1, [pc, #260]	; (8000ea0 <EXTI_Config+0x4c8>)
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	608b      	str	r3, [r1, #8]
 8000d9e:	e022      	b.n	8000de6 <EXTI_Config+0x40e>
	}
	// Activamos la configuración para el flanco de bajada
	else if((extiConfig -> trigger) == TRIGGER_RISING){
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	795b      	ldrb	r3, [r3, #5]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d10a      	bne.n	8000dbe <EXTI_Config+0x3e6>
		EXTI -> FTSR |= (EXTI_FTSR_TR0 << (extiConfig -> pin));
 8000da8:	4b3d      	ldr	r3, [pc, #244]	; (8000ea0 <EXTI_Config+0x4c8>)
 8000daa:	68da      	ldr	r2, [r3, #12]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	791b      	ldrb	r3, [r3, #4]
 8000db0:	4619      	mov	r1, r3
 8000db2:	2301      	movs	r3, #1
 8000db4:	408b      	lsls	r3, r1
 8000db6:	493a      	ldr	r1, [pc, #232]	; (8000ea0 <EXTI_Config+0x4c8>)
 8000db8:	4313      	orrs	r3, r2
 8000dba:	60cb      	str	r3, [r1, #12]
 8000dbc:	e013      	b.n	8000de6 <EXTI_Config+0x40e>
	}
	// Activamos la configuración para los dos
	else{
		EXTI -> RTSR |= (EXTI_RTSR_TR0 << (extiConfig -> pin));
 8000dbe:	4b38      	ldr	r3, [pc, #224]	; (8000ea0 <EXTI_Config+0x4c8>)
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	791b      	ldrb	r3, [r3, #4]
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	2301      	movs	r3, #1
 8000dca:	408b      	lsls	r3, r1
 8000dcc:	4934      	ldr	r1, [pc, #208]	; (8000ea0 <EXTI_Config+0x4c8>)
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	608b      	str	r3, [r1, #8]
		EXTI -> RTSR |= (EXTI_FTSR_TR0 << (extiConfig -> pin));
 8000dd2:	4b33      	ldr	r3, [pc, #204]	; (8000ea0 <EXTI_Config+0x4c8>)
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	791b      	ldrb	r3, [r3, #4]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	2301      	movs	r3, #1
 8000dde:	408b      	lsls	r3, r1
 8000de0:	492f      	ldr	r1, [pc, #188]	; (8000ea0 <EXTI_Config+0x4c8>)
 8000de2:	4313      	orrs	r3, r2
 8000de4:	608b      	str	r3, [r1, #8]
	}

	/* 4. Configuramos el interrupt mask register */

	EXTI -> IMR |= (EXTI_IMR_MR0 << (extiConfig -> pin));
 8000de6:	4b2e      	ldr	r3, [pc, #184]	; (8000ea0 <EXTI_Config+0x4c8>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	791b      	ldrb	r3, [r3, #4]
 8000dee:	4619      	mov	r1, r3
 8000df0:	2301      	movs	r3, #1
 8000df2:	408b      	lsls	r3, r1
 8000df4:	492a      	ldr	r1, [pc, #168]	; (8000ea0 <EXTI_Config+0x4c8>)
 8000df6:	4313      	orrs	r3, r2
 8000df8:	600b      	str	r3, [r1, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfa:	b672      	cpsid	i
}
 8000dfc:	bf00      	nop

	__disable_irq();

	/* 6. Matriculamos las interrupciones en el NVIC */

	switch(extiConfig->pin){
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	791b      	ldrb	r3, [r3, #4]
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	d820      	bhi.n	8000e48 <EXTI_Config+0x470>
 8000e06:	a201      	add	r2, pc, #4	; (adr r2, 8000e0c <EXTI_Config+0x434>)
 8000e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0c:	08000e21 	.word	0x08000e21
 8000e10:	08000e29 	.word	0x08000e29
 8000e14:	08000e31 	.word	0x08000e31
 8000e18:	08000e39 	.word	0x08000e39
 8000e1c:	08000e41 	.word	0x08000e41
		case PIN_0 :{
			__NVIC_EnableIRQ(EXTI0_IRQn);
 8000e20:	2006      	movs	r0, #6
 8000e22:	f7ff fdbd 	bl	80009a0 <__NVIC_EnableIRQ>
			break;
 8000e26:	e010      	b.n	8000e4a <EXTI_Config+0x472>
		}
		case PIN_1 :{
			__NVIC_EnableIRQ(EXTI1_IRQn);
 8000e28:	2007      	movs	r0, #7
 8000e2a:	f7ff fdb9 	bl	80009a0 <__NVIC_EnableIRQ>
			break;
 8000e2e:	e00c      	b.n	8000e4a <EXTI_Config+0x472>
		}
		case PIN_2 :{
			__NVIC_EnableIRQ(EXTI2_IRQn);
 8000e30:	2008      	movs	r0, #8
 8000e32:	f7ff fdb5 	bl	80009a0 <__NVIC_EnableIRQ>
			break;
 8000e36:	e008      	b.n	8000e4a <EXTI_Config+0x472>
		}
		case PIN_3 :{
			__NVIC_EnableIRQ(EXTI3_IRQn);
 8000e38:	2009      	movs	r0, #9
 8000e3a:	f7ff fdb1 	bl	80009a0 <__NVIC_EnableIRQ>
			break;
 8000e3e:	e004      	b.n	8000e4a <EXTI_Config+0x472>
		}
		case PIN_4 :{
			__NVIC_EnableIRQ(EXTI4_IRQn);
 8000e40:	200a      	movs	r0, #10
 8000e42:	f7ff fdad 	bl	80009a0 <__NVIC_EnableIRQ>
			break;
 8000e46:	e000      	b.n	8000e4a <EXTI_Config+0x472>
		}
		default:{
			break;
 8000e48:	bf00      	nop
		}
		}

	if(((extiConfig -> pin) >= PIN_5) && ((extiConfig -> pin) <= PIN_9)) {
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	791b      	ldrb	r3, [r3, #4]
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	d906      	bls.n	8000e60 <EXTI_Config+0x488>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	791b      	ldrb	r3, [r3, #4]
 8000e56:	2b09      	cmp	r3, #9
 8000e58:	d802      	bhi.n	8000e60 <EXTI_Config+0x488>
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e5a:	2017      	movs	r0, #23
 8000e5c:	f7ff fda0 	bl	80009a0 <__NVIC_EnableIRQ>
	}

	if(((extiConfig -> pin) >= PIN_10) && ((extiConfig -> pin) <= PIN_15)) {
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	791b      	ldrb	r3, [r3, #4]
 8000e64:	2b09      	cmp	r3, #9
 8000e66:	d906      	bls.n	8000e76 <EXTI_Config+0x49e>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	791b      	ldrb	r3, [r3, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d802      	bhi.n	8000e76 <EXTI_Config+0x49e>
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e70:	2028      	movs	r0, #40	; 0x28
 8000e72:	f7ff fd95 	bl	80009a0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000e76:	b662      	cpsie	i
}
 8000e78:	bf00      	nop
	}

	/* 7. Activamos las interrupciones globales */

	__enable_irq();
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40020c00 	.word	0x40020c00
 8000e88:	40013800 	.word	0x40013800
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40021c00 	.word	0x40021c00
 8000e94:	40020000 	.word	0x40020000
 8000e98:	40020400 	.word	0x40020400
 8000e9c:	40020800 	.word	0x40020800
 8000ea0:	40013c00 	.word	0x40013c00

08000ea4 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	// Bajamos la bandera
	EXTI -> PR |= (EXTI_PR_PR0);
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <EXTI0_IRQHandler+0x18>)
 8000eaa:	695b      	ldr	r3, [r3, #20]
 8000eac:	4a03      	ldr	r2, [pc, #12]	; (8000ebc <EXTI0_IRQHandler+0x18>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6153      	str	r3, [r2, #20]

	// Llamamos al callback
	EXTI0_Callback();
 8000eb4:	f7ff fd22 	bl	80008fc <EXTI0_Callback>
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40013c00 	.word	0x40013c00

08000ec0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	// Bajamos la bandera
	EXTI -> PR |= (EXTI_PR_PR1);
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <EXTI1_IRQHandler+0x18>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	4a03      	ldr	r2, [pc, #12]	; (8000ed8 <EXTI1_IRQHandler+0x18>)
 8000eca:	f043 0302 	orr.w	r3, r3, #2
 8000ece:	6153      	str	r3, [r2, #20]

	// Llamamos al callback
	EXTI1_Callback();
 8000ed0:	f000 f8e4 	bl	800109c <EXTI1_Callback>
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40013c00 	.word	0x40013c00

08000edc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	// Bajamos la bandera
	EXTI -> PR |= (EXTI_PR_PR2);
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <EXTI2_IRQHandler+0x18>)
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	4a03      	ldr	r2, [pc, #12]	; (8000ef4 <EXTI2_IRQHandler+0x18>)
 8000ee6:	f043 0304 	orr.w	r3, r3, #4
 8000eea:	6153      	str	r3, [r2, #20]

	// Llamamos al callback
	EXTI2_Callback();
 8000eec:	f000 f8dd 	bl	80010aa <EXTI2_Callback>
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40013c00 	.word	0x40013c00

08000ef8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	// Bajamos la bandera
	EXTI -> PR |= (EXTI_PR_PR3);
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <EXTI3_IRQHandler+0x18>)
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	4a03      	ldr	r2, [pc, #12]	; (8000f10 <EXTI3_IRQHandler+0x18>)
 8000f02:	f043 0308 	orr.w	r3, r3, #8
 8000f06:	6153      	str	r3, [r2, #20]

	// Llamamos al callback
	EXTI3_Callback();
 8000f08:	f7ff fd0c 	bl	8000924 <EXTI3_Callback>
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40013c00 	.word	0x40013c00

08000f14 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	// Bajamos la bandera
	EXTI -> PR |= (EXTI_PR_PR4);
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <EXTI4_IRQHandler+0x18>)
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	4a03      	ldr	r2, [pc, #12]	; (8000f2c <EXTI4_IRQHandler+0x18>)
 8000f1e:	f043 0310 	orr.w	r3, r3, #16
 8000f22:	6153      	str	r3, [r2, #20]

	// Llamamos al callback
	EXTI4_Callback();
 8000f24:	f000 f8c8 	bl	80010b8 <EXTI4_Callback>
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40013c00 	.word	0x40013c00

08000f30 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	// Bajamos la bandera
	EXTI -> PR |= (EXTI_PR_PR0);
 8000f34:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <EXTI9_5_IRQHandler+0xa8>)
 8000f36:	695b      	ldr	r3, [r3, #20]
 8000f38:	4a27      	ldr	r2, [pc, #156]	; (8000fd8 <EXTI9_5_IRQHandler+0xa8>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	6153      	str	r3, [r2, #20]

// Se verifica dónde se levantó la bandera
	// Se verifica para el PIN_5
	if(EXTI -> PR & (EXTI_PR_PR5)){
 8000f40:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <EXTI9_5_IRQHandler+0xa8>)
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	f003 0320 	and.w	r3, r3, #32
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d008      	beq.n	8000f5e <EXTI9_5_IRQHandler+0x2e>

		// Se baja la bandera para el PIN_5
		EXTI -> PR |= EXTI_PR_PR5;
 8000f4c:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <EXTI9_5_IRQHandler+0xa8>)
 8000f4e:	695b      	ldr	r3, [r3, #20]
 8000f50:	4a21      	ldr	r2, [pc, #132]	; (8000fd8 <EXTI9_5_IRQHandler+0xa8>)
 8000f52:	f043 0320 	orr.w	r3, r3, #32
 8000f56:	6153      	str	r3, [r2, #20]

		// Se hace el llamado al a función que se ejecutará en el main.
		EXTI5_Callback();
 8000f58:	f000 f8b5 	bl	80010c6 <EXTI5_Callback>
		EXTI -> PR |= EXTI_PR_PR9;

		// Se hace el llamado al a función que se ejecutará en el main.
		EXTI9_Callback();
	}
}
 8000f5c:	e03a      	b.n	8000fd4 <EXTI9_5_IRQHandler+0xa4>
	else if(EXTI -> PR & (EXTI_PR_PR6)){
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <EXTI9_5_IRQHandler+0xa8>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d008      	beq.n	8000f7c <EXTI9_5_IRQHandler+0x4c>
		EXTI -> PR |= EXTI_PR_PR6;
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <EXTI9_5_IRQHandler+0xa8>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	4a1a      	ldr	r2, [pc, #104]	; (8000fd8 <EXTI9_5_IRQHandler+0xa8>)
 8000f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f74:	6153      	str	r3, [r2, #20]
		EXTI6_Callback();
 8000f76:	f000 f8ad 	bl	80010d4 <EXTI6_Callback>
}
 8000f7a:	e02b      	b.n	8000fd4 <EXTI9_5_IRQHandler+0xa4>
	else if(EXTI -> PR & (EXTI_PR_PR7)){
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <EXTI9_5_IRQHandler+0xa8>)
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d008      	beq.n	8000f9a <EXTI9_5_IRQHandler+0x6a>
		EXTI -> PR |= EXTI_PR_PR7;
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <EXTI9_5_IRQHandler+0xa8>)
 8000f8a:	695b      	ldr	r3, [r3, #20]
 8000f8c:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <EXTI9_5_IRQHandler+0xa8>)
 8000f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f92:	6153      	str	r3, [r2, #20]
		EXTI7_Callback();
 8000f94:	f000 f8a5 	bl	80010e2 <EXTI7_Callback>
}
 8000f98:	e01c      	b.n	8000fd4 <EXTI9_5_IRQHandler+0xa4>
	else if(EXTI -> PR & (EXTI_PR_PR8)){
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <EXTI9_5_IRQHandler+0xa8>)
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d008      	beq.n	8000fb8 <EXTI9_5_IRQHandler+0x88>
		EXTI -> PR |= EXTI_PR_PR8;
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <EXTI9_5_IRQHandler+0xa8>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <EXTI9_5_IRQHandler+0xa8>)
 8000fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb0:	6153      	str	r3, [r2, #20]
		EXTI8_Callback();
 8000fb2:	f000 f89d 	bl	80010f0 <EXTI8_Callback>
}
 8000fb6:	e00d      	b.n	8000fd4 <EXTI9_5_IRQHandler+0xa4>
	else if(EXTI -> PR & (EXTI_PR_PR9)){
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <EXTI9_5_IRQHandler+0xa8>)
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d007      	beq.n	8000fd4 <EXTI9_5_IRQHandler+0xa4>
		EXTI -> PR |= EXTI_PR_PR9;
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <EXTI9_5_IRQHandler+0xa8>)
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	4a03      	ldr	r2, [pc, #12]	; (8000fd8 <EXTI9_5_IRQHandler+0xa8>)
 8000fca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fce:	6153      	str	r3, [r2, #20]
		EXTI9_Callback();
 8000fd0:	f000 f895 	bl	80010fe <EXTI9_Callback>
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40013c00 	.word	0x40013c00

08000fdc <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0

	// Se verifica dónde se levantó la bandera
	// Se verifica para el PIN_10
	if(EXTI -> PR & (EXTI_PR_PR10)){
 8000fe0:	4b2d      	ldr	r3, [pc, #180]	; (8001098 <EXTI15_10_IRQHandler+0xbc>)
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d008      	beq.n	8000ffe <EXTI15_10_IRQHandler+0x22>

		// Se baja la bandera para el PIN_10
		EXTI -> PR |= EXTI_PR_PR10;
 8000fec:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <EXTI15_10_IRQHandler+0xbc>)
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	4a29      	ldr	r2, [pc, #164]	; (8001098 <EXTI15_10_IRQHandler+0xbc>)
 8000ff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ff6:	6153      	str	r3, [r2, #20]

		// Se hace el llamado al a función que se ejecutará en el main.
		EXTI10_Callback();
 8000ff8:	f000 f888 	bl	800110c <EXTI10_Callback>
		EXTI -> PR |= EXTI_PR_PR15;

		// Se hace el llamado al a función que se ejecutará en el main.
		EXTI15_Callback();
	}
}
 8000ffc:	e049      	b.n	8001092 <EXTI15_10_IRQHandler+0xb6>
	else if(EXTI -> PR & (EXTI_PR_PR11)){
 8000ffe:	4b26      	ldr	r3, [pc, #152]	; (8001098 <EXTI15_10_IRQHandler+0xbc>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001006:	2b00      	cmp	r3, #0
 8001008:	d008      	beq.n	800101c <EXTI15_10_IRQHandler+0x40>
		EXTI -> PR |= EXTI_PR_PR11;
 800100a:	4b23      	ldr	r3, [pc, #140]	; (8001098 <EXTI15_10_IRQHandler+0xbc>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	4a22      	ldr	r2, [pc, #136]	; (8001098 <EXTI15_10_IRQHandler+0xbc>)
 8001010:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001014:	6153      	str	r3, [r2, #20]
		EXTI11_Callback();
 8001016:	f000 f880 	bl	800111a <EXTI11_Callback>
}
 800101a:	e03a      	b.n	8001092 <EXTI15_10_IRQHandler+0xb6>
	else if(EXTI -> PR & (EXTI_PR_PR12)){
 800101c:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <EXTI15_10_IRQHandler+0xbc>)
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d008      	beq.n	800103a <EXTI15_10_IRQHandler+0x5e>
		EXTI -> PR |= EXTI_PR_PR12;
 8001028:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <EXTI15_10_IRQHandler+0xbc>)
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	4a1a      	ldr	r2, [pc, #104]	; (8001098 <EXTI15_10_IRQHandler+0xbc>)
 800102e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001032:	6153      	str	r3, [r2, #20]
		EXTI12_Callback();
 8001034:	f000 f878 	bl	8001128 <EXTI12_Callback>
}
 8001038:	e02b      	b.n	8001092 <EXTI15_10_IRQHandler+0xb6>
	else if(EXTI -> PR & (EXTI_PR_PR13)){
 800103a:	4b17      	ldr	r3, [pc, #92]	; (8001098 <EXTI15_10_IRQHandler+0xbc>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d008      	beq.n	8001058 <EXTI15_10_IRQHandler+0x7c>
		EXTI -> PR |= EXTI_PR_PR13;
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <EXTI15_10_IRQHandler+0xbc>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	4a13      	ldr	r2, [pc, #76]	; (8001098 <EXTI15_10_IRQHandler+0xbc>)
 800104c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001050:	6153      	str	r3, [r2, #20]
		EXTI13_Callback();
 8001052:	f000 f870 	bl	8001136 <EXTI13_Callback>
}
 8001056:	e01c      	b.n	8001092 <EXTI15_10_IRQHandler+0xb6>
	else if(EXTI -> PR & (EXTI_PR_PR14)){
 8001058:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <EXTI15_10_IRQHandler+0xbc>)
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d008      	beq.n	8001076 <EXTI15_10_IRQHandler+0x9a>
		EXTI -> PR |= EXTI_PR_PR14;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <EXTI15_10_IRQHandler+0xbc>)
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <EXTI15_10_IRQHandler+0xbc>)
 800106a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106e:	6153      	str	r3, [r2, #20]
		EXTI14_Callback();
 8001070:	f000 f868 	bl	8001144 <EXTI14_Callback>
}
 8001074:	e00d      	b.n	8001092 <EXTI15_10_IRQHandler+0xb6>
	else if(EXTI -> PR & (EXTI_PR_PR15)){
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <EXTI15_10_IRQHandler+0xbc>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d007      	beq.n	8001092 <EXTI15_10_IRQHandler+0xb6>
		EXTI -> PR |= EXTI_PR_PR15;
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <EXTI15_10_IRQHandler+0xbc>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	4a04      	ldr	r2, [pc, #16]	; (8001098 <EXTI15_10_IRQHandler+0xbc>)
 8001088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800108c:	6153      	str	r3, [r2, #20]
		EXTI15_Callback();
 800108e:	f000 f860 	bl	8001152 <EXTI15_Callback>
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40013c00 	.word	0x40013c00

0800109c <EXTI1_Callback>:
/* Función débil, que debe ser sobreescrita en el main */
__attribute__((weak)) void EXTI0_Callback(void){
	__NOP();
}

__attribute__((weak)) void EXTI1_Callback(void){
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
	__NOP();
 80010a0:	bf00      	nop
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr

080010aa <EXTI2_Callback>:

__attribute__((weak)) void EXTI2_Callback(void){
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
	__NOP();
 80010ae:	bf00      	nop
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <EXTI4_Callback>:

__attribute__((weak)) void EXTI3_Callback(void){
	__NOP();
}

__attribute__((weak)) void EXTI4_Callback(void){
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
	__NOP();
 80010bc:	bf00      	nop
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr

080010c6 <EXTI5_Callback>:

__attribute__((weak)) void EXTI5_Callback(void){
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
	__NOP();
 80010ca:	bf00      	nop
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <EXTI6_Callback>:

__attribute__((weak)) void EXTI6_Callback(void){
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
	__NOP();
 80010d8:	bf00      	nop
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <EXTI7_Callback>:

__attribute__((weak)) void EXTI7_Callback(void){
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0
	__NOP();
 80010e6:	bf00      	nop
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr

080010f0 <EXTI8_Callback>:

__attribute__((weak)) void EXTI8_Callback(void){
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
	__NOP();
 80010f4:	bf00      	nop
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr

080010fe <EXTI9_Callback>:

__attribute__((weak)) void EXTI9_Callback(void){
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
	__NOP();
 8001102:	bf00      	nop
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <EXTI10_Callback>:

__attribute__((weak)) void EXTI10_Callback(void){
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
	__NOP();
 8001110:	bf00      	nop
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr

0800111a <EXTI11_Callback>:

__attribute__((weak)) void EXTI11_Callback(void){
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
	__NOP();
 800111e:	bf00      	nop
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <EXTI12_Callback>:

__attribute__((weak)) void EXTI12_Callback(void){
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
	__NOP();
 800112c:	bf00      	nop
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr

08001136 <EXTI13_Callback>:

__attribute__((weak)) void EXTI13_Callback(void){
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
	__NOP();
 800113a:	bf00      	nop
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <EXTI14_Callback>:

__attribute__((weak)) void EXTI14_Callback(void){
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
	__NOP();
 8001148:	bf00      	nop
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr

08001152 <EXTI15_Callback>:

__attribute__((weak)) void EXTI15_Callback(void){
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
	__NOP();
 8001156:	bf00      	nop
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <GPIO_Config>:
orden estricto para poder que el sistema permita configurar el periférico X.
Lo primero y más importante es activar la señal del reloj principal hacia ese
elemento específico (relacionado con el periférico RCC), a esto llamaremos
simplemente "activar el periférico o activar la señal de reloj del periférico".
*/
void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periférico
	// Verificamos para GPIOA
	if (pGPIOHandler -> pGPIOx == GPIOA){
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a87      	ldr	r2, [pc, #540]	; (8001394 <GPIO_Config+0x234>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d106      	bne.n	8001188 <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOA
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 800117a:	4b87      	ldr	r3, [pc, #540]	; (8001398 <GPIO_Config+0x238>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a86      	ldr	r2, [pc, #536]	; (8001398 <GPIO_Config+0x238>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	e03a      	b.n	80011fe <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if (pGPIOHandler -> pGPIOx == GPIOB){
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a83      	ldr	r2, [pc, #524]	; (800139c <GPIO_Config+0x23c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d106      	bne.n	80011a0 <GPIO_Config+0x40>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOB
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 8001192:	4b81      	ldr	r3, [pc, #516]	; (8001398 <GPIO_Config+0x238>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a80      	ldr	r2, [pc, #512]	; (8001398 <GPIO_Config+0x238>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	e02e      	b.n	80011fe <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOC
	else if (pGPIOHandler -> pGPIOx == GPIOC){
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a7e      	ldr	r2, [pc, #504]	; (80013a0 <GPIO_Config+0x240>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d106      	bne.n	80011b8 <GPIO_Config+0x58>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOC
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 80011aa:	4b7b      	ldr	r3, [pc, #492]	; (8001398 <GPIO_Config+0x238>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a7a      	ldr	r2, [pc, #488]	; (8001398 <GPIO_Config+0x238>)
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	e022      	b.n	80011fe <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOD
	else if (pGPIOHandler -> pGPIOx == GPIOD){
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a79      	ldr	r2, [pc, #484]	; (80013a4 <GPIO_Config+0x244>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d106      	bne.n	80011d0 <GPIO_Config+0x70>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOD
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 80011c2:	4b75      	ldr	r3, [pc, #468]	; (8001398 <GPIO_Config+0x238>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a74      	ldr	r2, [pc, #464]	; (8001398 <GPIO_Config+0x238>)
 80011c8:	f043 0308 	orr.w	r3, r3, #8
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	e016      	b.n	80011fe <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOE
	else if (pGPIOHandler -> pGPIOx == GPIOE){
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a74      	ldr	r2, [pc, #464]	; (80013a8 <GPIO_Config+0x248>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d106      	bne.n	80011e8 <GPIO_Config+0x88>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOE
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 80011da:	4b6f      	ldr	r3, [pc, #444]	; (8001398 <GPIO_Config+0x238>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a6e      	ldr	r2, [pc, #440]	; (8001398 <GPIO_Config+0x238>)
 80011e0:	f043 0310 	orr.w	r3, r3, #16
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	e00a      	b.n	80011fe <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOH
	else if (pGPIOHandler -> pGPIOx == GPIOH){
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a6f      	ldr	r2, [pc, #444]	; (80013ac <GPIO_Config+0x24c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d105      	bne.n	80011fe <GPIO_Config+0x9e>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOH
		RCC -> AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 80011f2:	4b69      	ldr	r3, [pc, #420]	; (8001398 <GPIO_Config+0x238>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a68      	ldr	r2, [pc, #416]	; (8001398 <GPIO_Config+0x238>)
 80011f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
	// Después de activado, podemos comenzar a configurar.

	// 2) Configurando el registro GPIOx_MODER
	// Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y todo eso lo cargamos en la variable aux_Config
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	795b      	ldrb	r3, [r3, #5]
 8001202:	461a      	mov	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	791b      	ldrb	r3, [r3, #4]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	60fb      	str	r3, [r7, #12]

	// Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (debemos escribir 0b00)
	// para lo cual aplicamos una máscara y una operación bitwise AND
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	791b      	ldrb	r3, [r3, #4]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2103      	movs	r1, #3
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	4619      	mov	r1, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	400a      	ands	r2, r1
 800122c:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler -> pGPIOx -> MODER |= auxConfig;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6819      	ldr	r1, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	430a      	orrs	r2, r1
 800123c:	601a      	str	r2, [r3, #0]

	// 3) Configurando el registro GPIOx_OTYPER
	// De nuevo, leemos y movemos el valor un número "PinNumber" de veces
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	7a1b      	ldrb	r3, [r3, #8]
 8001242:	461a      	mov	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	791b      	ldrb	r3, [r3, #4]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler -> pGPIOx -> OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	791b      	ldrb	r3, [r3, #4]
 8001258:	4619      	mov	r1, r3
 800125a:	2301      	movs	r3, #1
 800125c:	408b      	lsls	r3, r1
 800125e:	43db      	mvns	r3, r3
 8001260:	4619      	mov	r1, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	400a      	ands	r2, r1
 8001268:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OTYPER |= auxConfig;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6859      	ldr	r1, [r3, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	430a      	orrs	r2, r1
 8001278:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	799b      	ldrb	r3, [r3, #6]
 800127e:	461a      	mov	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	791b      	ldrb	r3, [r3, #4]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler -> pGPIOx -> OSPEEDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	791b      	ldrb	r3, [r3, #4]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	2103      	movs	r1, #3
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	4619      	mov	r1, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	400a      	ands	r2, r1
 80012a8:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> OSPEEDR |= auxConfig;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6899      	ldr	r1, [r3, #8]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante.
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	79db      	ldrb	r3, [r3, #7]
 80012be:	461a      	mov	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	791b      	ldrb	r3, [r3, #4]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler -> pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	791b      	ldrb	r3, [r3, #4]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	2103      	movs	r1, #3
 80012da:	fa01 f303 	lsl.w	r3, r1, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	4619      	mov	r1, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	400a      	ands	r2, r1
 80012e8:	60da      	str	r2, [r3, #12]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler -> pGPIOx -> PUPDR |= auxConfig;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68d9      	ldr	r1, [r3, #12]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	430a      	orrs	r2, r1
 80012f8:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuración de las funciones alternativas... Se verá luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	795b      	ldrb	r3, [r3, #5]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d143      	bne.n	800138a <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	791b      	ldrb	r3, [r3, #4]
 8001306:	2b07      	cmp	r3, #7
 8001308:	d81f      	bhi.n	800134a <GPIO_Config+0x1ea>
			// Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	791b      	ldrb	r3, [r3, #4]
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	60bb      	str	r3, [r7, #8]

			// Limpiamos primero la posición del registro que deseamos escribir a continuación
			pGPIOHandler -> pGPIOx -> AFR[0] &= ~(0b1111 << auxPosition);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6a1a      	ldr	r2, [r3, #32]
 8001318:	210f      	movs	r1, #15
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	fa01 f303 	lsl.w	r3, r1, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	4619      	mov	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	400a      	ands	r2, r1
 800132a:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posición seleccionada
			pGPIOHandler -> pGPIOx -> AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6a1a      	ldr	r2, [r3, #32]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	7a5b      	ldrb	r3, [r3, #9]
 8001336:	4619      	mov	r1, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	4619      	mov	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurando en la posición seleccionada
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} // Fin del GPIO_Config
 8001348:	e01f      	b.n	800138a <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber -8);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	791b      	ldrb	r3, [r3, #4]
 800134e:	3b08      	subs	r3, #8
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx -> AFR[1] &= ~(0b1111 << auxPosition);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800135a:	210f      	movs	r1, #15
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	4619      	mov	r1, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	400a      	ands	r2, r1
 800136c:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx -> AFR[1] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	7a5b      	ldrb	r3, [r3, #9]
 8001378:	4619      	mov	r1, r3
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	fa01 f303 	lsl.w	r3, r1, r3
 8001380:	4619      	mov	r1, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	430a      	orrs	r2, r1
 8001388:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_Config
 800138a:	bf00      	nop
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	40020000 	.word	0x40020000
 8001398:	40023800 	.word	0x40023800
 800139c:	40020400 	.word	0x40020400
 80013a0:	40020800 	.word	0x40020800
 80013a4:	40020c00 	.word	0x40020c00
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40021c00 	.word	0x40021c00

080013b0 <GPIO_WritePin>:
 *
 *
Función utilizada para cambiar de estado el pin entregado en el handler, asignando
el valor entregado en la variable newState
*/
void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
	// Limpiamos la posición que deseamos
	// pPinHandler -> pGPIOx -> ODR &= ~(SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
	if(newState == SET){
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d10d      	bne.n	80013de <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler -> pGPIOx -> BSRR |= (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	699a      	ldr	r2, [r3, #24]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	791b      	ldrb	r3, [r3, #4]
 80013cc:	4619      	mov	r1, r3
 80013ce:	2301      	movs	r3, #1
 80013d0:	408b      	lsls	r3, r1
 80013d2:	4619      	mov	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	619a      	str	r2, [r3, #24]
	}
	else{
		// Trabajando con la parte alta del registro
		pPinHandler -> pGPIOx -> BSRR |= (SET << (pPinHandler -> GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 80013dc:	e00d      	b.n	80013fa <GPIO_WritePin+0x4a>
		pPinHandler -> pGPIOx -> BSRR |= (SET << (pPinHandler -> GPIO_PinConfig.GPIO_PinNumber + 16));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	699a      	ldr	r2, [r3, #24]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	791b      	ldrb	r3, [r3, #4]
 80013e8:	3310      	adds	r3, #16
 80013ea:	2101      	movs	r1, #1
 80013ec:	fa01 f303 	lsl.w	r3, r1, r3
 80013f0:	4619      	mov	r1, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	619a      	str	r2, [r3, #24]
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <__NVIC_EnableIRQ>:
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	2b00      	cmp	r3, #0
 8001414:	db0b      	blt.n	800142e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	f003 021f 	and.w	r2, r3, #31
 800141c:	4906      	ldr	r1, [pc, #24]	; (8001438 <__NVIC_EnableIRQ+0x34>)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	095b      	lsrs	r3, r3, #5
 8001424:	2001      	movs	r0, #1
 8001426:	fa00 f202 	lsl.w	r2, r0, r2
 800142a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	e000e100 	.word	0xe000e100

0800143c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	2b00      	cmp	r3, #0
 800144c:	db12      	blt.n	8001474 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	f003 021f 	and.w	r2, r3, #31
 8001454:	490a      	ldr	r1, [pc, #40]	; (8001480 <__NVIC_DisableIRQ+0x44>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	095b      	lsrs	r3, r3, #5
 800145c:	2001      	movs	r0, #1
 800145e:	fa00 f202 	lsl.w	r2, r0, r2
 8001462:	3320      	adds	r3, #32
 8001464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001468:	f3bf 8f4f 	dsb	sy
}
 800146c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800146e:	f3bf 8f6f 	isb	sy
}
 8001472:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000e100 	.word	0xe000e100

08001484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	db0a      	blt.n	80014ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	490c      	ldr	r1, [pc, #48]	; (80014d0 <__NVIC_SetPriority+0x4c>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	0112      	lsls	r2, r2, #4
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	440b      	add	r3, r1
 80014a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ac:	e00a      	b.n	80014c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4908      	ldr	r1, [pc, #32]	; (80014d4 <__NVIC_SetPriority+0x50>)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	3b04      	subs	r3, #4
 80014bc:	0112      	lsls	r2, r2, #4
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	440b      	add	r3, r1
 80014c2:	761a      	strb	r2, [r3, #24]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000e100 	.word	0xe000e100
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <Timer_Config>:
 *
 * */

//NOTA: Hay que desactivar las interrupciones globales y luego volver a activarlas

void Timer_Config(TIMER_Handler_t *ptrTimerConfig){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80014e0:	b672      	cpsid	i
}
 80014e2:	bf00      	nop
	/* 0. Desactivamos las interrupciones globales */

	__disable_irq();

	/* 1. Activamos la señal de reloj para el periférico específico */
	if(ptrTimerConfig -> ptrTIMx == TIM2){
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014ec:	d106      	bne.n	80014fc <Timer_Config+0x24>
		// Activamos la señal de reloj del TIM2
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 80014ee:	4b4b      	ldr	r3, [pc, #300]	; (800161c <Timer_Config+0x144>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a4a      	ldr	r2, [pc, #296]	; (800161c <Timer_Config+0x144>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	e022      	b.n	8001542 <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM3){
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a47      	ldr	r2, [pc, #284]	; (8001620 <Timer_Config+0x148>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d106      	bne.n	8001514 <Timer_Config+0x3c>
		// Activamos la señal de reloj del TIM3
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001506:	4b45      	ldr	r3, [pc, #276]	; (800161c <Timer_Config+0x144>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a44      	ldr	r2, [pc, #272]	; (800161c <Timer_Config+0x144>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	e016      	b.n	8001542 <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM4){
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a42      	ldr	r2, [pc, #264]	; (8001624 <Timer_Config+0x14c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d106      	bne.n	800152c <Timer_Config+0x54>
		// Activamos la señal de reloj del TIM4
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 800151e:	4b3f      	ldr	r3, [pc, #252]	; (800161c <Timer_Config+0x144>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a3e      	ldr	r2, [pc, #248]	; (800161c <Timer_Config+0x144>)
 8001524:	f043 0304 	orr.w	r3, r3, #4
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	e00a      	b.n	8001542 <Timer_Config+0x6a>

	}else if(ptrTimerConfig -> ptrTIMx == TIM5){
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a3d      	ldr	r2, [pc, #244]	; (8001628 <Timer_Config+0x150>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d105      	bne.n	8001542 <Timer_Config+0x6a>
		// Activamos la señal de reloj del TIM5
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001536:	4b39      	ldr	r3, [pc, #228]	; (800161c <Timer_Config+0x144>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	4a38      	ldr	r2, [pc, #224]	; (800161c <Timer_Config+0x144>)
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Configuración del modo del timer (UP or DOWN) */

	if(ptrTimerConfig -> timerConfig.Timer_mode == TIMER_MODE_UP){
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	791b      	ldrb	r3, [r3, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10c      	bne.n	8001564 <Timer_Config+0x8c>
		// Configuramos el timer en modo UP
		ptrTimerConfig -> ptrTIMx -> CR1 &= ~(TIM_CR1_DIR);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 0210 	bic.w	r2, r2, #16
 8001558:	601a      	str	r2, [r3, #0]

		// Ponemos el contador (CNT) en cero.
		ptrTimerConfig -> ptrTIMx -> CNT = 0;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2200      	movs	r2, #0
 8001560:	625a      	str	r2, [r3, #36]	; 0x24
 8001562:	e00d      	b.n	8001580 <Timer_Config+0xa8>

	}
	else{
		// Configuramos el timer en modo DOWN
		ptrTimerConfig -> ptrTIMx -> CR1 |= ~(TIM_CR1_DIR);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f062 0210 	orn	r2, r2, #16
 8001572:	601a      	str	r2, [r3, #0]

		// Ponemos en el contador (CNT) el valor del periodo
		ptrTimerConfig -> ptrTIMx -> CNT = ptrTimerConfig -> timerConfig.Timer_period -1;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	3a01      	subs	r2, #1
 800157e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 3. Configuración del Prescaler */
	ptrTimerConfig -> ptrTIMx -> PSC = ptrTimerConfig -> timerConfig.Timer_speed -1;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	88db      	ldrh	r3, [r3, #6]
 8001584:	1e5a      	subs	r2, r3, #1
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	629a      	str	r2, [r3, #40]	; 0x28

	/* 4. Configuramos el periodo de las interrupciones */
	ptrTimerConfig -> ptrTIMx -> ARR = ptrTimerConfig -> timerConfig.Timer_period -1;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	3a01      	subs	r2, #1
 8001596:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 5. Activamos al timer para que comience a incrementarse  */
	ptrTimerConfig -> ptrTIMx -> CR1 |= TIM_CR1_CEN;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0201 	orr.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

	/* 6. Activamos la interrupción debida a un "update event" */
	if(ptrTimerConfig -> ptrTIMx != TIM3){
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a1c      	ldr	r2, [pc, #112]	; (8001620 <Timer_Config+0x148>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d007      	beq.n	80015c2 <Timer_Config+0xea>
		ptrTimerConfig -> ptrTIMx -> DIER |= TIM_DIER_UIE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68da      	ldr	r2, [r3, #12]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f042 0201 	orr.w	r2, r2, #1
 80015c0:	60da      	str	r2, [r3, #12]
	}

	/* 7. Activamos la señal de la interrupcuón en el NVIC */

	if(ptrTimerConfig -> ptrTIMx == TIM2){
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ca:	d107      	bne.n	80015dc <Timer_Config+0x104>
		// Activamos la IRQ del TIM2
		__NVIC_EnableIRQ(TIM2_IRQn);
 80015cc:	201c      	movs	r0, #28
 80015ce:	f7ff ff19 	bl	8001404 <__NVIC_EnableIRQ>

		// Establecemos la prioridad del timer
		__NVIC_SetPriority(TIM2_IRQn,3);
 80015d2:	2103      	movs	r1, #3
 80015d4:	201c      	movs	r0, #28
 80015d6:	f7ff ff55 	bl	8001484 <__NVIC_SetPriority>
 80015da:	e019      	b.n	8001610 <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM3){
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0f      	ldr	r2, [pc, #60]	; (8001620 <Timer_Config+0x148>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d103      	bne.n	80015ee <Timer_Config+0x116>
		// Activamos la IRQ del TIM3
		__NVIC_DisableIRQ(TIM3_IRQn);
 80015e6:	201d      	movs	r0, #29
 80015e8:	f7ff ff28 	bl	800143c <__NVIC_DisableIRQ>
 80015ec:	e010      	b.n	8001610 <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM4){
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a0c      	ldr	r2, [pc, #48]	; (8001624 <Timer_Config+0x14c>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d103      	bne.n	8001600 <Timer_Config+0x128>
		// Activamos la IRQ del TIM4
		__NVIC_EnableIRQ(TIM4_IRQn);
 80015f8:	201e      	movs	r0, #30
 80015fa:	f7ff ff03 	bl	8001404 <__NVIC_EnableIRQ>
 80015fe:	e007      	b.n	8001610 <Timer_Config+0x138>

	}else if(ptrTimerConfig -> ptrTIMx == TIM5){
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a08      	ldr	r2, [pc, #32]	; (8001628 <Timer_Config+0x150>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d102      	bne.n	8001610 <Timer_Config+0x138>
		// Activamos la IRQ del TIM5
		__NVIC_EnableIRQ(TIM5_IRQn);
 800160a:	2032      	movs	r0, #50	; 0x32
 800160c:	f7ff fefa 	bl	8001404 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001610:	b662      	cpsie	i
}
 8001612:	bf00      	nop
	}


	/* 8. Activamos de nuevo todas las interrupciones. */
	__enable_irq();
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40023800 	.word	0x40023800
 8001620:	40000400 	.word	0x40000400
 8001624:	40000800 	.word	0x40000800
 8001628:	40000c00 	.word	0x40000c00

0800162c <Timer3_Callback>:
__attribute__((weak)) void Timer2_Callback(void){
	__NOP();
}

// Callback Timer3
__attribute__((weak)) void Timer3_Callback(void){
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
	__NOP();
 8001630:	bf00      	nop
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr

0800163a <Timer5_Callback>:
__attribute__((weak)) void Timer4_Callback(void){
	__NOP();
}

// Callback Timer5
__attribute__((weak)) void Timer5_Callback(void){
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
	__NOP();
 800163e:	bf00      	nop
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <TIM2_IRQHandler>:

// Hay que hacer dos cosas: 1) Atender la interrupción. 2) Llamamos al Callback
/* Rutina de atención a la interrupción del TIM2 */

void TIM2_IRQHandler(void){
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	TIM2 -> SR &= ~(TIM_SR_UIF);
 800164c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001656:	f023 0301 	bic.w	r3, r3, #1
 800165a:	6113      	str	r3, [r2, #16]
	Timer2_Callback();
 800165c:	f7ff f900 	bl	8000860 <Timer2_Callback>
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}

08001664 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	TIM3 -> SR &= ~(TIM_SR_UIF);
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <TIM3_IRQHandler+0x18>)
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	4a03      	ldr	r2, [pc, #12]	; (800167c <TIM3_IRQHandler+0x18>)
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	6113      	str	r3, [r2, #16]
	Timer3_Callback();
 8001674:	f7ff ffda 	bl	800162c <Timer3_Callback>
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40000400 	.word	0x40000400

08001680 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	TIM4 -> SR &= ~(TIM_SR_UIF);
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <TIM4_IRQHandler+0x18>)
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	4a03      	ldr	r2, [pc, #12]	; (8001698 <TIM4_IRQHandler+0x18>)
 800168a:	f023 0301 	bic.w	r3, r3, #1
 800168e:	6113      	str	r3, [r2, #16]
	Timer4_Callback();
 8001690:	f7ff f8f6 	bl	8000880 <Timer4_Callback>
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40000800 	.word	0x40000800

0800169c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	TIM5 -> SR &= ~(TIM_SR_UIF);
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <TIM5_IRQHandler+0x18>)
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	4a03      	ldr	r2, [pc, #12]	; (80016b4 <TIM5_IRQHandler+0x18>)
 80016a6:	f023 0301 	bic.w	r3, r3, #1
 80016aa:	6113      	str	r3, [r2, #16]
	Timer5_Callback();
 80016ac:	f7ff ffc5 	bl	800163a <Timer5_Callback>
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40000c00 	.word	0x40000c00

080016b8 <__libc_init_array>:
 80016b8:	b570      	push	{r4, r5, r6, lr}
 80016ba:	4d0d      	ldr	r5, [pc, #52]	; (80016f0 <__libc_init_array+0x38>)
 80016bc:	4c0d      	ldr	r4, [pc, #52]	; (80016f4 <__libc_init_array+0x3c>)
 80016be:	1b64      	subs	r4, r4, r5
 80016c0:	10a4      	asrs	r4, r4, #2
 80016c2:	2600      	movs	r6, #0
 80016c4:	42a6      	cmp	r6, r4
 80016c6:	d109      	bne.n	80016dc <__libc_init_array+0x24>
 80016c8:	4d0b      	ldr	r5, [pc, #44]	; (80016f8 <__libc_init_array+0x40>)
 80016ca:	4c0c      	ldr	r4, [pc, #48]	; (80016fc <__libc_init_array+0x44>)
 80016cc:	f000 f818 	bl	8001700 <_init>
 80016d0:	1b64      	subs	r4, r4, r5
 80016d2:	10a4      	asrs	r4, r4, #2
 80016d4:	2600      	movs	r6, #0
 80016d6:	42a6      	cmp	r6, r4
 80016d8:	d105      	bne.n	80016e6 <__libc_init_array+0x2e>
 80016da:	bd70      	pop	{r4, r5, r6, pc}
 80016dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80016e0:	4798      	blx	r3
 80016e2:	3601      	adds	r6, #1
 80016e4:	e7ee      	b.n	80016c4 <__libc_init_array+0xc>
 80016e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80016ea:	4798      	blx	r3
 80016ec:	3601      	adds	r6, #1
 80016ee:	e7f2      	b.n	80016d6 <__libc_init_array+0x1e>
 80016f0:	08001718 	.word	0x08001718
 80016f4:	08001718 	.word	0x08001718
 80016f8:	08001718 	.word	0x08001718
 80016fc:	0800171c 	.word	0x0800171c

08001700 <_init>:
 8001700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001702:	bf00      	nop
 8001704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001706:	bc08      	pop	{r3}
 8001708:	469e      	mov	lr, r3
 800170a:	4770      	bx	lr

0800170c <_fini>:
 800170c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800170e:	bf00      	nop
 8001710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001712:	bc08      	pop	{r3}
 8001714:	469e      	mov	lr, r3
 8001716:	4770      	bx	lr
